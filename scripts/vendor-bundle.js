!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n():"function"==typeof define&&define.amd?define(n):n()}(0,function(){"use strict";function e(e){var n=this.constructor;return this.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){return n.reject(t)})})}function n(e){return!(!e||"undefined"==typeof e.length)}function t(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=undefined,this._deferreds=[],c(e,this)}function r(e,n){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,o._immediateFn(function(){var t=1===e._state?n.onFulfilled:n.onRejected;if(null!==t){var o;try{o=t(e._value)}catch(r){return void f(n.promise,r)}i(n.promise,o)}else(1===e._state?i:f)(n.promise,e._value)})):e._deferreds.push(n)}function i(e,n){try{if(n===e)throw new TypeError("A promise cannot be resolved with itself.");if(n&&("object"==typeof n||"function"==typeof n)){var t=n.then;if(n instanceof o)return e._state=3,e._value=n,void u(e);if("function"==typeof t)return void c(function(e,n){return function(){e.apply(n,arguments)}}(t,n),e)}e._state=1,e._value=n,u(e)}catch(r){f(e,r)}}function f(e,n){e._state=2,e._value=n,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var n=0,t=e._deferreds.length;t>n;n++)r(e,e._deferreds[n]);e._deferreds=null}function c(e,n){var t=!1;try{e(function(e){t||(t=!0,i(n,e))},function(e){t||(t=!0,f(n,e))})}catch(o){if(t)return;t=!0,f(n,o)}}var a=setTimeout;o.prototype["catch"]=function(e){return this.then(null,e)},o.prototype.then=function(e,n){var o=new this.constructor(t);return r(this,new function(e,n,t){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof n?n:null,this.promise=t}(e,n,o)),o},o.prototype["finally"]=e,o.all=function(e){return new o(function(t,o){function r(e,n){try{if(n&&("object"==typeof n||"function"==typeof n)){var u=n.then;if("function"==typeof u)return void u.call(n,function(n){r(e,n)},o)}i[e]=n,0==--f&&t(i)}catch(c){o(c)}}if(!n(e))return o(new TypeError("Promise.all accepts an array"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);for(var f=i.length,u=0;i.length>u;u++)r(u,i[u])})},o.resolve=function(e){return e&&"object"==typeof e&&e.constructor===o?e:new o(function(n){n(e)})},o.reject=function(e){return new o(function(n,t){t(e)})},o.race=function(e){return new o(function(t,r){if(!n(e))return r(new TypeError("Promise.race accepts an array"));for(var i=0,f=e.length;f>i;i++)o.resolve(e[i]).then(t,r)})},o._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){a(e,0)},o._unhandledRejectionFn=function(e){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var l=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw Error("unable to locate global object")}();"Promise"in l?l.Promise.prototype["finally"]||(l.Promise.prototype["finally"]=e):l.Promise=o});
;
/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.6',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    //Could match something like ')//comment', do not lose the prefix to comment.
    function commentReplace(match, singlePrefix) {
        return singlePrefix || '';
    }

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttps://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (isNormalized) {
                        normalizedName = name;
                    } else if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap,
                                                      true);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                // Convert old style urlArgs string to a function.
                if (typeof cfg.urlArgs === 'string') {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function(id, url) {
                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
                    };
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs && !/^blob\:/.test(url) ?
                       url + config.urlArgs(moduleName, url) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                    return true;
                                }
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/requirejs/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/requirejs/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //Calling onNodeCreated after all properties on the node have been
            //set, but before it is placed in the DOM.
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.

                // Post a task to the event loop to work around a bug in WebKit
                // where the worker gets garbage-collected after calling
                // importScripts(): https://webkit.org/b/153317
                setTimeout(function() {}, 0);
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one,
                //but only do so if the data-main value is not a loader plugin
                //module ID.
                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, commentReplace)
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));
;
var global = this; _aureliaConfigureModuleLoader();;
define('@syncfusion/ej2-base/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-base/src/ajax',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Ajax = void 0;
  var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/gm;
  var defaultType = 'GET';
  /**
   * Ajax class provides ability to make asynchronous HTTP request to the server
   * ```typescript
   *   var ajax = new Ajax("index.html", "GET", true);
   *   ajax.send().then(
   *               function (value) {
   *                   console.log(value);
   *               },
   *               function (reason) {
   *                   console.log(reason);
   *               });
   * ```
   */

  var Ajax =
  /** @class */
  function () {
    /**
     * Constructor for Ajax class
     * @param  {string|Object} options?
     * @param  {string} type?
     * @param  {boolean} async?
     * @returns defaultType
     */
    function Ajax(options, type, async, contentType) {
      /**
       * A boolean value indicating whether the request should be sent asynchronous or not.
       * @default true
       */
      this.mode = true;
      /**
       * A boolean value indicating whether to ignore the promise reject.
       * @private
       * @default true
       */

      this.emitError = true;
      this.options = {};

      if (typeof options === 'string') {
        this.url = options;
        this.type = type ? type.toUpperCase() : defaultType;
        this.mode = !(0, _util.isNullOrUndefined)(async) ? async : true;
      } else if (typeof options === 'object') {
        this.options = options;
        (0, _util.merge)(this, this.options);
      }

      this.type = this.type ? this.type.toUpperCase() : defaultType;
      this.contentType = this.contentType !== undefined ? this.contentType : contentType;
    }
    /**
     * Send the request to server.
     * @param {any} data - To send the user data
     * @return {Promise}
     */


    Ajax.prototype.send = function (data) {
      var _this = this;

      this.data = (0, _util.isNullOrUndefined)(data) ? this.data : data;
      var eventArgs = {
        cancel: false,
        httpRequest: null
      };
      var promise = new Promise(function (resolve, reject) {
        _this.httpRequest = new XMLHttpRequest();

        _this.httpRequest.onreadystatechange = function () {
          _this.stateChange(resolve, reject);
        };

        if (!(0, _util.isNullOrUndefined)(_this.onLoad)) {
          _this.httpRequest.onload = _this.onLoad;
        }

        if (!(0, _util.isNullOrUndefined)(_this.onProgress)) {
          _this.httpRequest.onprogress = _this.onProgress;
        }
        /* istanbul ignore next */


        if (!(0, _util.isNullOrUndefined)(_this.onAbort)) {
          _this.httpRequest.onabort = _this.onAbort;
        }
        /* istanbul ignore next */


        if (!(0, _util.isNullOrUndefined)(_this.onError)) {
          _this.httpRequest.onerror = _this.onError;
        } //** Upload Events **/

        /* istanbul ignore next */


        if (!(0, _util.isNullOrUndefined)(_this.onUploadProgress)) {
          _this.httpRequest.upload.onprogress = _this.onUploadProgress;
        }

        _this.httpRequest.open(_this.type, _this.url, _this.mode); // Set default headers


        if (!(0, _util.isNullOrUndefined)(_this.data) && _this.contentType !== null) {
          _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8');
        }

        if (_this.beforeSend) {
          eventArgs.httpRequest = _this.httpRequest;

          _this.beforeSend(eventArgs);
        }

        if (!eventArgs.cancel) {
          _this.httpRequest.send(!(0, _util.isNullOrUndefined)(_this.data) ? _this.data : null);
        }
      });
      return promise;
    };

    Ajax.prototype.successHandler = function (data) {
      if (this.onSuccess) {
        this.onSuccess(data, this);
      }

      return data;
    };

    Ajax.prototype.failureHandler = function (reason) {
      if (this.onFailure) {
        this.onFailure(this.httpRequest);
      }

      return reason;
    };

    Ajax.prototype.stateChange = function (resolve, reject) {
      var data = this.httpRequest.responseText;

      if (this.dataType && this.dataType.toLowerCase() === 'json') {
        if (data === '') {
          data = undefined;
        } else {
          try {
            data = JSON.parse(data);
          } catch (error) {// no exception handle
          }
        }
      }

      if (this.httpRequest.readyState === 4) {
        //success range should be 200 to 299
        if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {
          resolve(this.successHandler(data));
        } else {
          if (this.emitError) {
            reject(new Error(this.failureHandler(this.httpRequest.statusText)));
          } else {
            resolve();
          }
        }
      }
    };
    /**
     * To get the response header from XMLHttpRequest
     * @param  {string} key Key to search in the response header
     * @returns {string}
     */


    Ajax.prototype.getResponseHeader = function (key) {
      var responseHeaders;
      var header;
      responseHeaders = {};
      var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());

      while (headers) {
        responseHeaders[headers[1].toLowerCase()] = headers[2];
        headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
      }

      header = responseHeaders[key.toLowerCase()];
      return (0, _util.isNullOrUndefined)(header) ? null : header;
    };

    return Ajax;
  }();

  _exports.Ajax = Ajax;
});;
define('@syncfusion/ej2-base/src/animation',["exports", "./dom", "./base", "./browser", "./event-handler", "./notify-property-change"], function (_exports, _dom, _base, _browser, _eventHandler, _notifyPropertyChange) {
  "use strict";

  _exports.__esModule = true;
  _exports.rippleEffect = rippleEffect;
  _exports.enableRipple = enableRipple;
  _exports.isRippleEnabled = _exports.Animation = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * The Animation framework provide options to animate the html DOM elements
   * ```typescript
   *   let animeObject = new Animation({
   *      name: 'SlideLeftIn',
   *      duration: 1000
   *   });
   *   animeObject.animate('#anime1');
   *   animeObject.animate('#anime2', { duration: 500 });
   * ```
   */
  var Animation =
  /** @class */
  function (_super) {
    __extends(Animation, _super);

    function Animation(options) {
      var _this = _super.call(this, options, undefined) || this;
      /**
       * @private
       */


      _this.easing = {
        ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',
        linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',
        easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',
        easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',
        easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',
        elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',
        elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',
        elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'
      };
      return _this;
    }

    Animation_1 = Animation;
    /**
     * Applies animation to the current element.
     * @param {string | HTMLElement} element - Element which needs to be animated.
     * @param {AnimationModel} options - Overriding default animation settings.
     * @return {void}
     */

    Animation.prototype.animate = function (element, options) {
      options = !options ? {} : options;
      var model = this.getModel(options);

      if (typeof element === 'string') {
        var elements = Array.prototype.slice.call((0, _dom.selectAll)(element, document));

        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var element_1 = elements_1[_i];
          model.element = element_1;
          Animation_1.delayAnimation(model);
        }
      } else {
        model.element = element;
        Animation_1.delayAnimation(model);
      }
    };
    /**
     * Stop the animation effect on animated element.
     * @param {HTMLElement} element - Element which needs to be stop the animation.
     * @param {AnimationOptions} model - Handling the animation model at stop function.
     * @return {void}
     */


    Animation.stop = function (element, model) {
      element.style.animation = '';
      element.removeAttribute('e-animate');
      var animationId = element.getAttribute('e-animation-id');

      if (animationId) {
        var frameId = parseInt(animationId, 10);
        cancelAnimationFrame(frameId);
        element.removeAttribute('e-animation-id');
      }

      if (model && model.end) {
        model.end.call(this, model);
      }
    };
    /**
     * Set delay to animation element
     * @param {AnimationModel} model
     * @returns {void}
     */


    Animation.delayAnimation = function (model) {
      if (model.delay) {
        setTimeout(function () {
          Animation_1.applyAnimation(model);
        }, model.delay);
      } else {
        Animation_1.applyAnimation(model);
      }
    };
    /**
     * Triggers animation
     * @param {AnimationModel} model
     * @returns {void}
     */


    Animation.applyAnimation = function (model) {
      var _this = this;

      model.timeStamp = 0;
      var step = 0;
      var timerId = 0;
      var startTime = 0;
      var prevTimeStamp = 0;
      var duration = model.duration;
      model.element.setAttribute('e-animate', 'true');

      var startAnimation = function (timeStamp) {
        try {
          if (timeStamp) {
            // let step: number = model.timeStamp = timeStamp - startTime;

            /** phantomjs workaround for timestamp fix */
            prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;
            model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp;
            prevTimeStamp = timeStamp;
            /** phantomjs workaround end */
            // trigger animation begin event

            if (!step && model.begin) {
              model.begin.call(_this, model);
            }

            step = step + 1;
            var avg = model.timeStamp / step;

            if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {
              // apply animation effect to the current element                
              model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;

              if (model.progress) {
                model.progress.call(_this, model);
              } // repeat requestAnimationFrame 


              requestAnimationFrame(startAnimation);
            } else {
              // clear requestAnimationFrame
              cancelAnimationFrame(timerId);
              model.element.removeAttribute('e-animation-id');
              model.element.removeAttribute('e-animate');
              model.element.style.animation = '';

              if (model.end) {
                model.end.call(_this, model);
              }
            }
          } else {
            startTime = performance.now(); // set initial requestAnimationFrame

            timerId = requestAnimationFrame(startAnimation);
            model.element.setAttribute('e-animation-id', timerId.toString());
          }
        } catch (e) {
          cancelAnimationFrame(timerId);
          model.element.removeAttribute('e-animation-id');

          if (model.fail) {
            model.fail.call(_this, e);
          }
        }
      };

      startAnimation();
    };
    /**
     * Returns Animation Model
     * @param {AnimationModel} options
     * @returns {AnimationModel}
     */


    Animation.prototype.getModel = function (options) {
      return {
        name: options.name || this.name,
        delay: options.delay || this.delay,
        duration: options.duration !== undefined ? options.duration : this.duration,
        begin: options.begin || this.begin,
        end: options.end || this.end,
        fail: options.fail || this.fail,
        progress: options.progress || this.progress,
        timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]
      };
    };
    /**
     * @private
     */


    Animation.prototype.onPropertyChanged = function (newProp, oldProp) {// no code needed
    };
    /**
     * Returns module name as animation
     * @private
     */


    Animation.prototype.getModuleName = function () {
      return 'animation';
    };
    /**
     * @private
     */


    Animation.prototype.destroy = function () {//Override base destroy;
    };

    var Animation_1;

    __decorate([(0, _notifyPropertyChange.Property)('FadeIn')], Animation.prototype, "name", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(400)], Animation.prototype, "duration", void 0);

    __decorate([(0, _notifyPropertyChange.Property)('ease')], Animation.prototype, "timingFunction", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(0)], Animation.prototype, "delay", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Animation.prototype, "progress", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Animation.prototype, "begin", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Animation.prototype, "end", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Animation.prototype, "fail", void 0);

    Animation = Animation_1 = __decorate([_notifyPropertyChange.NotifyPropertyChanges], Animation);
    return Animation;
  }(_base.Base);

  _exports.Animation = Animation;

  /**
   * Ripple provides material theme's wave effect when an element is clicked
   * ```html
   * <div id='ripple'></div>
   * <script>
   *   rippleEffect(document.getElementById('ripple'));
   * </script>
   * ```
   * @private
   * @param HTMLElement element - Target element
   * @param RippleOptions rippleOptions - Ripple options .
   */
  function rippleEffect(element, rippleOptions, done) {
    var rippleModel = getRippleModel(rippleOptions);

    if (rippleModel.rippleFlag === false || rippleModel.rippleFlag === undefined && !isRippleEnabled) {
      return Function;
    }

    element.setAttribute('data-ripple', 'true');

    _eventHandler.EventHandler.add(element, 'mousedown', rippleHandler, {
      parent: element,
      rippleOptions: rippleModel
    });

    _eventHandler.EventHandler.add(element, 'mouseup', rippleUpHandler, {
      parent: element,
      rippleOptions: rippleModel,
      done: done
    });

    _eventHandler.EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
      parent: element,
      rippleOptions: rippleModel
    });

    if (_browser.Browser.isPointer) {
      _eventHandler.EventHandler.add(element, 'transitionend', rippleLeaveHandler, {
        parent: element,
        rippleOptions: rippleModel
      });
    }

    return function () {
      element.removeAttribute('data-ripple');

      _eventHandler.EventHandler.remove(element, 'mousedown', rippleHandler);

      _eventHandler.EventHandler.remove(element, 'mouseup', rippleUpHandler);

      _eventHandler.EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);

      _eventHandler.EventHandler.remove(element, 'transitionend', rippleLeaveHandler);
    };
  }

  function getRippleModel(rippleOptions) {
    var rippleModel = {
      selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,
      ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,
      rippleFlag: rippleOptions && rippleOptions.rippleFlag,
      isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,
      duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350
    };
    return rippleModel;
  }
  /**
   * Handler for ripple event
   * @param {MouseEvent} e
   * @returns {void}
   * @private
   */


  function rippleHandler(e) {
    var target = e.target;
    var selector = this.rippleOptions.selector;
    var element = selector ? (0, _dom.closest)(target, selector) : target;

    if (!element || this.rippleOptions && (0, _dom.closest)(target, this.rippleOptions.ignore)) {
      return;
    }

    var offset = element.getBoundingClientRect();
    var offsetX = e.pageX - document.body.scrollLeft;
    var offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop);
    var pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));
    var pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));
    var radius = Math.sqrt(pageX * pageX + pageY * pageY);
    var diameter = radius * 2 + 'px';
    var x = offsetX - offset.left - radius;
    var y = offsetY - offset.top - radius;

    if (this.rippleOptions && this.rippleOptions.isCenterRipple) {
      x = 0;
      y = 0;
      diameter = '100%';
    }

    element.classList.add('e-ripple');
    var duration = this.rippleOptions.duration.toString();
    var styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' + 'transition-duration: ' + duration + 'ms;';
    var rippleElement = (0, _dom.createElement)('div', {
      className: 'e-ripple-element',
      styles: styles
    });
    element.appendChild(rippleElement);
    window.getComputedStyle(rippleElement).getPropertyValue('opacity');
    rippleElement.style.transform = 'scale(1)';

    if (element !== this.parent) {
      _eventHandler.EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
        parent: this.parent,
        rippleOptions: this.rippleOptions
      });
    }
  }
  /**
   * Handler for ripple element mouse up event
   * @param {MouseEvent} e
   * @returns {void}
   * @private
   */


  function rippleUpHandler(e) {
    removeRipple(e, this);
  }
  /**
   * Handler for ripple element mouse move event
   * @param {MouseEvent} e
   * @returns {void}
   * @private
   */


  function rippleLeaveHandler(e) {
    removeRipple(e, this);
  }
  /**
   * Handler for removing ripple element
   * @param {MouseEvent} e
   * @param {rippleArgs} eventArgs
   * @returns {void}
   * @private
   */


  function removeRipple(e, eventArgs) {
    var duration = eventArgs.rippleOptions.duration;
    var target = e.target;
    var selector = eventArgs.rippleOptions.selector;
    var element = selector ? (0, _dom.closest)(target, selector) : target;

    if (!element || element && element.className.indexOf('e-ripple') === -1) {
      return;
    }

    var rippleElements = (0, _dom.selectAll)('.e-ripple-element', element);
    var rippleElement = rippleElements[rippleElements.length - 1];

    if (rippleElement) {
      rippleElement.style.opacity = '0.5';
    }

    if (eventArgs.parent !== element) {
      _eventHandler.EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);
    }
    /* tslint:disable:align */


    setTimeout(function () {
      if (rippleElement && rippleElement.parentNode) {
        rippleElement.parentNode.removeChild(rippleElement);
      }

      if (!element.getElementsByClassName('e-ripple-element').length) {
        element.classList.remove('e-ripple');
      }

      if (eventArgs.done) {
        eventArgs.done(e);
      }
    }, duration);
  }

  var isRippleEnabled = false;
  /**
   * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.
   * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.
   * @returns {boolean}
   */

  _exports.isRippleEnabled = isRippleEnabled;

  function enableRipple(isRipple) {
    _exports.isRippleEnabled = isRippleEnabled = isRipple;
    return isRippleEnabled;
  }
});;
define('@syncfusion/ej2-base/src/base',["exports", "./util", "./dom", "./observer"], function (_exports, _util, _dom, _observer) {
  "use strict";

  _exports.__esModule = true;
  _exports.getComponent = getComponent;
  _exports.removeChildInstance = removeChildInstance;
  _exports.Base = void 0;
  var isColEName = new RegExp('\]');
  /* tslint:enable:no-any */

  /**
   * Base library module is common module for Framework modules like touch,keyboard and etc.,
   * @private
   */

  var Base =
  /** @class */
  function () {
    /**
     * Base constructor accept options and element
     */
    function Base(options, element) {
      this.isRendered = false;
      this.isComplexArraySetter = false;
      this.isServerRendered = false;
      this.allowServerDataBinding = true;
      this.isProtectedOnChange = true;
      this.properties = {};
      this.changedProperties = {};
      this.oldProperties = {};
      this.bulkChanges = {};
      this.refreshing = false;
      this.ignoreCollectionWatch = false; // tslint:disable-next-line:no-empty

      this.finalUpdate = function () {};

      this.childChangedProperties = {};
      this.modelObserver = new _observer.Observer(this);

      if (!(0, _util.isUndefined)(element)) {
        if ('string' === typeof element) {
          this.element = document.querySelector(element);
        } else {
          this.element = element;
        }

        if (!(0, _util.isNullOrUndefined)(this.element)) {
          this.isProtectedOnChange = false;
          this.addInstance();
        }
      }

      if (!(0, _util.isUndefined)(options)) {
        this.setProperties(options, true);
      }

      this.isDestroyed = false;
    }
    /** Property base section */

    /**
     * Function used to set bunch of property at a time.
     * @private
     * @param  {Object} prop - JSON object which holds components properties.
     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.
     */


    Base.prototype.setProperties = function (prop, muteOnChange) {
      var prevDetection = this.isProtectedOnChange;
      this.isProtectedOnChange = !!muteOnChange;
      (0, _util.merge)(this, prop);

      if (muteOnChange !== true) {
        (0, _util.merge)(this.changedProperties, prop);
        this.dataBind();
      } else if ((0, _util.isBlazor)() && this.isRendered) {
        this.serverDataBind(prop);
      }

      this.finalUpdate();
      this.changedProperties = {};
      this.oldProperties = {};
      this.isProtectedOnChange = prevDetection;
    };

    ;
    /**
     * Calls for child element data bind
     * @param {Object} obj
     * @param {Object} parent
     * @returns {void}
     */
    // tslint:disable-next-line:no-any

    Base.callChildDataBind = function (obj, parent) {
      var keys = Object.keys(obj);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];

        if (parent[key] instanceof Array) {
          for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {
            var obj_1 = _b[_a];

            if (obj_1.dataBind !== undefined) {
              obj_1.dataBind();
            }
          }
        } else {
          parent[key].dataBind();
        }
      }
    };

    Base.prototype.clearChanges = function () {
      this.finalUpdate();
      this.changedProperties = {};
      this.oldProperties = {};
      this.childChangedProperties = {};
    };
    /**
     * Bind property changes immediately to components
     */


    Base.prototype.dataBind = function () {
      Base.callChildDataBind(this.childChangedProperties, this);

      if (Object.getOwnPropertyNames(this.changedProperties).length) {
        var prevDetection = this.isProtectedOnChange;
        var newChanges = this.changedProperties;
        var oldChanges = this.oldProperties;
        this.clearChanges();
        this.isProtectedOnChange = true;
        this.onPropertyChanged(newChanges, oldChanges);
        this.isProtectedOnChange = prevDetection;
      }
    };

    ;
    /* tslint:disable:no-any */

    Base.prototype.serverDataBind = function (newChanges) {
      if (!(0, _util.isBlazor)()) {
        return;
      }

      newChanges = newChanges ? newChanges : {};
      (0, _util.extend)(this.bulkChanges, {}, newChanges, true);

      if (this.allowServerDataBinding) {
        var ejsInterop = 'ejsInterop';
        window[ejsInterop].updateModel(this);
        this.bulkChanges = {};
      }
    };
    /* tslint:enable:no-any */


    Base.prototype.saveChanges = function (key, newValue, oldValue) {
      if ((0, _util.isBlazor)()) {
        // tslint:disable-next-line:no-any
        var newChanges = {};
        newChanges[key] = newValue;
        this.serverDataBind(newChanges);
      }

      if (this.isProtectedOnChange) {
        return;
      }

      this.oldProperties[key] = oldValue;
      this.changedProperties[key] = newValue;
      this.finalUpdate();
      this.finalUpdate = (0, _util.setImmediate)(this.dataBind.bind(this));
    };

    ;
    /** Event Base Section */

    /**
     * Adds the handler to the given event listener.
     * @param {string} eventName - A String that specifies the name of the event
     * @param {Function} listener - Specifies the call to run when the event occurs.
     * @return {void}
     */

    Base.prototype.addEventListener = function (eventName, handler) {
      this.modelObserver.on(eventName, handler);
    };
    /**
     * Removes the handler from the given event listener.
     * @param {string} eventName - A String that specifies the name of the event to remove
     * @param {Function} listener - Specifies the function to remove
     * @return {void}
     */


    Base.prototype.removeEventListener = function (eventName, handler) {
      this.modelObserver.off(eventName, handler);
    };
    /**
     * Triggers the handlers in the specified event.
     * @private
     * @param {string} eventName - Specifies the event to trigger for the specified component properties.
     * Can be a custom event, or any of the standard events.
     * @param {Event} eventProp - Additional parameters to pass on to the event properties
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it failured to call.
     * @return {void}
     */


    Base.prototype.trigger = function (eventName, eventProp, successHandler, errorHandler) {
      var _this = this;

      if (this.isDestroyed !== true) {
        var prevDetection = this.isProtectedOnChange;
        this.isProtectedOnChange = false;
        var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);

        if (isColEName.test(eventName)) {
          var handler = (0, _util.getValue)(eventName, this);

          if (handler) {
            var blazor = 'Blazor';

            if (window[blazor]) {
              var promise = handler.call(this, eventProp);

              if (promise && typeof promise.then === 'function') {
                if (!successHandler) {
                  data = promise;
                } else {
                  promise.then(function (data) {
                    if (successHandler) {
                      data = typeof data === 'string' && _this.modelObserver.isJson(data) ? JSON.parse(data) : data;
                      successHandler.call(_this, data);
                    }
                  }).catch(function (data) {
                    if (errorHandler) {
                      data = typeof data === 'string' && _this.modelObserver.isJson(data) ? JSON.parse(data) : data;
                      errorHandler.call(_this, data);
                    }
                  });
                }
              } else if (successHandler) {
                successHandler.call(this, eventProp);
              }
            } else {
              handler.call(this, eventProp);

              if (successHandler) {
                successHandler.call(this, eventProp);
              }
            }
          } else if (successHandler) {
            successHandler.call(this, eventProp);
          }
        }

        this.isProtectedOnChange = prevDetection;
        return data;
      }
    };
    /**
     * To maintain instance in base class
     */


    Base.prototype.addInstance = function () {
      // Add module class to the root element
      var moduleClass = 'e-' + this.getModuleName().toLowerCase();
      (0, _dom.addClass)([this.element], ['e-lib', moduleClass]);

      if (!(0, _util.isNullOrUndefined)(this.element.ej2_instances)) {
        this.element.ej2_instances.push(this);
      } else {
        (0, _util.setValue)('ej2_instances', [this], this.element);
      }
    };
    /**
     * To remove the instance from the element
     */


    Base.prototype.destroy = function () {
      var _this = this;

      this.element.ej2_instances = this.element.ej2_instances.filter(function (i) {
        return i !== _this;
      });
      (0, _dom.removeClass)([this.element], ['e-' + this.getModuleName()]);

      if (this.element.ej2_instances.length === 0) {
        // Remove module class from the root element
        (0, _dom.removeClass)([this.element], ['e-lib']);
      }

      this.clearChanges();
      this.modelObserver.destroy();
      this.isDestroyed = true;
    };

    return Base;
  }();

  _exports.Base = Base;

  /**
   * Global function to get the component instance from the rendered element.
   * @param elem Specifies the HTMLElement or element id string.
   * @param comp Specifies the component module name or Component.
   */
  // tslint:disable-next-line:no-any
  function getComponent(elem, comp) {
    var instance;
    var i;
    var ele = typeof elem === 'string' ? document.getElementById(elem) : elem;

    for (i = 0; i < ele.ej2_instances.length; i++) {
      instance = ele.ej2_instances[i];

      if (typeof comp === 'string') {
        var compName = instance.getModuleName();

        if (comp === compName) {
          return instance;
        }
      } else {
        // tslint:disable-next-line:no-any
        if (instance instanceof comp) {
          return instance;
        }
      }
    }

    return undefined;
  }
  /**
   * Function to remove the child instances.
   * @return {void}
   * @private
   */
  // tslint:disable-next-line:no-any


  function removeChildInstance(element) {
    // tslint:disable-next-line:no-any
    var childEle = [].slice.call(element.getElementsByClassName('e-control'));

    for (var i = 0; i < childEle.length; i++) {
      var compName = childEle[i].classList[1].split('e-')[1]; // tslint:disable-next-line:no-any

      var compInstance = getComponent(childEle[i], compName);

      if (!(0, _util.isUndefined)(compInstance)) {
        compInstance.destroy();
      }
    }
  }
});;
define('@syncfusion/ej2-base/src/browser',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Browser = void 0;
  var REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;
  var REGX_IE = /msie|trident/i;
  var REGX_IE11 = /Trident\/7\./;
  var REGX_IOS = /(ipad|iphone|ipod touch)/i;
  var REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i;
  var REGX_ANDROID = /android/i;
  var REGX_WINDOWS = /trident|windows phone|edge/i;
  var REGX_VERSION = /(version)[ \/]([\w.]+)/i;
  var REGX_BROWSER = {
    OPERA: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i,
    EDGE: /(edge)(?:.*version|)[ \/]([\w.]+)/i,
    CHROME: /(chrome|crios)[ \/]([\w.]+)/i,
    PANTHOMEJS: /(phantomjs)[ \/]([\w.]+)/i,
    SAFARI: /(safari)[ \/]([\w.]+)/i,
    WEBKIT: /(webkit)[ \/]([\w.]+)/i,
    MSIE: /(msie|trident) ([\w.]+)/i,
    MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
  };
  /* istanbul ignore else  */

  if (typeof window !== 'undefined') {
    window.browserDetails = window.browserDetails || {};
  }
  /**
   * Get configuration details for Browser
   * @private
   */


  var Browser =
  /** @class */
  function () {
    function Browser() {}

    Browser.extractBrowserDetail = function () {
      var browserInfo = {
        culture: {}
      };
      var keys = Object.keys(REGX_BROWSER);
      var clientInfo = [];

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);

        if (clientInfo) {
          browserInfo.name = clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase();
          browserInfo.name = clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name;
          browserInfo.version = clientInfo[2];
          browserInfo.culture.name = browserInfo.culture.language = navigator.language;

          if (!!Browser.userAgent.match(REGX_IE11)) {
            browserInfo.name = 'msie';
            break;
          }

          var version = Browser.userAgent.match(REGX_VERSION);

          if (browserInfo.name === 'safari' && version) {
            browserInfo.version = version[2];
          }

          break;
        }
      }

      return browserInfo;
    };
    /**
     * To get events from the browser
     * @param {string} event - type of event triggered.
     * @returns {Boolean}
     */


    Browser.getEvent = function (event) {
      // tslint:disable-next-line:no-any
      var events = {
        start: {
          isPointer: 'pointerdown',
          isTouch: 'touchstart',
          isDevice: 'mousedown'
        },
        move: {
          isPointer: 'pointermove',
          isTouch: 'touchmove',
          isDevice: 'mousemove'
        },
        end: {
          isPointer: 'pointerup',
          isTouch: 'touchend',
          isDevice: 'mouseup'
        },
        cancel: {
          isPointer: 'pointercancel',
          isTouch: 'touchcancel',
          isDevice: 'mouseleave'
        }
      };
      return Browser.isPointer ? events[event].isPointer : Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '') : events[event].isDevice;
    };
    /**
     * To get the Touch start event from browser
     * @returns {string}
     */


    Browser.getTouchStartEvent = function () {
      return Browser.getEvent('start');
    };
    /**
     * To get the Touch end event from browser
     * @returns {string}
     */


    Browser.getTouchEndEvent = function () {
      return Browser.getEvent('end');
    };
    /**
     * To get the Touch move event from browser
     * @returns {string}
     */


    Browser.getTouchMoveEvent = function () {
      return Browser.getEvent('move');
    };
    /**
     * To cancel the touch event from browser
     * @returns {string}
     */


    Browser.getTouchCancelEvent = function () {
      return Browser.getEvent('cancel');
    };
    /**
     * To get the value based on provided key and regX
     * @param {string} key
     * @param {RegExp} regX
     * @returns {Object}
     */


    Browser.getValue = function (key, regX) {
      var browserDetails = window.browserDetails;

      if ('undefined' === typeof browserDetails[key]) {
        return browserDetails[key] = regX.test(Browser.userAgent);
      }

      return browserDetails[key];
    };

    Object.defineProperty(Browser, "userAgent", {
      get: function () {
        return Browser.uA;
      },
      //Properties 

      /**
       * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.
       * Also we can set our own userAgent.
       */
      set: function (uA) {
        Browser.uA = uA;
        window.browserDetails = {};
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "info", {
      //Read Only Properties

      /**
       * Property is to get the browser information like Name, Version and Language
       * @returns BrowserInfo
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.info)) {
          return window.browserDetails.info = Browser.extractBrowserDetail();
        }

        return window.browserDetails.info;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isIE", {
      /**
       * Property is to get whether the userAgent is based IE.
       */
      get: function () {
        return Browser.getValue('isIE', REGX_IE);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isTouch", {
      /**
       * Property is to get whether the browser has touch support.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.isTouch)) {
          return window.browserDetails.isTouch = 'ontouchstart' in window;
        }

        return window.browserDetails.isTouch;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isPointer", {
      /**
       * Property is to get whether the browser has Pointer support.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.isPointer)) {
          return window.browserDetails.isPointer = 'pointerEnabled' in window.navigator;
        }

        return window.browserDetails.isPointer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isMSPointer", {
      /**
       * Property is to get whether the browser has MSPointer support.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.isMSPointer)) {
          return window.browserDetails.isMSPointer = 'msPointerEnabled' in window.navigator;
        }

        return window.browserDetails.isMSPointer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isDevice", {
      /**
       * Property is to get whether the userAgent is device based.
       */
      get: function () {
        return Browser.getValue('isDevice', REGX_MOBILE);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isIos", {
      /**
       * Property is to get whether the userAgent is IOS.
       */
      get: function () {
        return Browser.getValue('isIos', REGX_IOS);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isIos7", {
      /**
       * Property is to get whether the userAgent is Ios7.
       */
      get: function () {
        return Browser.getValue('isIos7', REGX_IOS7);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isAndroid", {
      /**
       * Property is to get whether the userAgent is Android.
       */
      get: function () {
        return Browser.getValue('isAndroid', REGX_ANDROID);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isWebView", {
      /**
       * Property is to identify whether application ran in web view.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.isWebView)) {
          window.browserDetails.isWebView = !((0, _util.isUndefined)(window.cordova) && (0, _util.isUndefined)(window.PhoneGap) && (0, _util.isUndefined)(window.phonegap) && window.forge !== 'object');
          return window.browserDetails.isWebView;
        }

        return window.browserDetails.isWebView;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "isWindows", {
      /**
       * Property is to get whether the userAgent is Windows.
       */
      get: function () {
        return Browser.getValue('isWindows', REGX_WINDOWS);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "touchStartEvent", {
      /**
       * Property is to get the touch start event. It returns event name based on browser.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.touchStartEvent)) {
          return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();
        }

        return window.browserDetails.touchStartEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "touchMoveEvent", {
      /**
       * Property is to get the touch move event. It returns event name based on browser.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.touchMoveEvent)) {
          return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();
        }

        return window.browserDetails.touchMoveEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "touchEndEvent", {
      /**
       * Property is to get the touch end event. It returns event name based on browser.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.touchEndEvent)) {
          return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();
        }

        return window.browserDetails.touchEndEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser, "touchCancelEvent", {
      /**
       * Property is to cancel the touch end event.
       */
      get: function () {
        if ((0, _util.isUndefined)(window.browserDetails.touchCancelEvent)) {
          return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();
        }

        return window.browserDetails.touchCancelEvent;
      },
      enumerable: true,
      configurable: true
    });
    /* istanbul ignore next */

    Browser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';
    return Browser;
  }();

  _exports.Browser = Browser;
});;
define('@syncfusion/ej2-base/src/child-property',["exports", "./util", "./base"], function (_exports, _util, _base) {
  "use strict";

  _exports.__esModule = true;
  _exports.ChildProperty = void 0;

  /**
   * To detect the changes for inner properties.
   * @private
   */
  var ChildProperty =
  /** @class */
  function () {
    function ChildProperty(parent, propName, defaultValue, isArray) {
      this.isComplexArraySetter = false;
      this.properties = {};
      this.changedProperties = {};
      this.childChangedProperties = {};
      this.oldProperties = {}; // tslint:disable-next-line:no-empty

      this.finalUpdate = function () {};

      this.callChildDataBind = (0, _util.getValue)('callChildDataBind', _base.Base);
      this.parentObj = parent;
      this.controlParent = this.parentObj.controlParent || this.parentObj;
      this.propName = propName;
      this.isParentArray = isArray;
      this.setProperties(defaultValue, true);
    }
    /**
     * Updates the property changes
     * @param {boolean} val
     * @param {string} propName
     * @returns {void}
     */


    ChildProperty.prototype.updateChange = function (val, propName) {
      if (val === true) {
        this.parentObj.childChangedProperties[propName] = val;
      } else {
        delete this.parentObj.childChangedProperties[propName];
      }

      if (this.parentObj.updateChange) {
        this.parentObj.updateChange(val, this.parentObj.propName);
      }
    };
    /**
     * Updates time out duration
     */


    ChildProperty.prototype.updateTimeOut = function () {
      if (this.parentObj.updateTimeOut) {
        this.parentObj.finalUpdate();
        this.parentObj.updateTimeOut();
      } else {
        var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));

        var clearUpdate = function () {
          clearTimeout(changeTime_1);
        };

        this.finalUpdate = clearUpdate;
      }
    };
    /**
     * Clears changed properties
     */


    ChildProperty.prototype.clearChanges = function () {
      this.finalUpdate();
      this.updateChange(false, this.propName);
      this.oldProperties = {};
      this.changedProperties = {};
    };
    /**
     * Set property changes
     * @param {Object} prop
     * @param {boolean} muteOnChange
     * {void}
     */


    ChildProperty.prototype.setProperties = function (prop, muteOnChange) {
      if (muteOnChange === true) {
        (0, _util.merge)(this, prop);
        this.updateChange(false, this.propName);
        this.clearChanges();
      } else {
        (0, _util.merge)(this, prop);
      }
    };
    /**
     * Binds data
     */


    ChildProperty.prototype.dataBind = function () {
      this.callChildDataBind(this.childChangedProperties, this);

      if (this.isParentArray) {
        var curIndex = this.parentObj[this.propName].indexOf(this);

        if (Object.keys(this.changedProperties).length) {
          (0, _util.setValue)(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);
          (0, _util.setValue)(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);
        }
      } else {
        this.parentObj.changedProperties[this.propName] = this.changedProperties;
        this.parentObj.oldProperties[this.propName] = this.oldProperties;
      }

      this.clearChanges();
    };
    /**
     * Saves changes to newer values
     * @param {string} key
     * @param {Object} newValue
     * @param {Object} oldValue
     * @returns {void}
     */


    ChildProperty.prototype.saveChanges = function (key, newValue, oldValue, restrictServerDataBind) {
      if (this.controlParent.isProtectedOnChange) {
        return;
      }

      if (!restrictServerDataBind) {
        this.serverDataBind(key, newValue, true);
      }

      this.oldProperties[key] = oldValue;
      this.changedProperties[key] = newValue;
      this.updateChange(true, this.propName);
      this.finalUpdate();
      this.updateTimeOut();
    };

    ChildProperty.prototype.serverDataBind = function (key, value, isSaveChanges, action) {
      if ((0, _util.isBlazor)() && !this.parentObj.isComplexArraySetter) {
        // tslint:disable-next-line:no-any
        var parent_1;
        var newChanges = {};
        var parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;
        /* istanbul ignore else  */

        if (parentKey.indexOf('.') !== -1) {
          var complexKeys = parentKey.split('.');
          parent_1 = newChanges;

          for (var i = 0; i < complexKeys.length; i++) {
            var isFinal = i === complexKeys.length - 1;
            parent_1[complexKeys[i]] = isFinal ? value : {};
            parent_1 = isFinal ? parent_1 : parent_1[complexKeys[i]];
          }
        } else {
          newChanges[parentKey] = {};
          parent_1 = newChanges[parentKey];
          newChanges[parentKey][key] = value;
        }
        /* istanbul ignore next */


        if (this.isParentArray) {
          var actionProperty = 'ejsAction';
          parent_1[actionProperty] = action ? action : 'none';
        }

        this.controlParent.serverDataBind(newChanges);
      }
    };

    ChildProperty.prototype.getParentKey = function (isSaveChanges) {
      // tslint:disable-next-line:no-any
      var index = '';
      var propName = this.propName;
      /* istanbul ignore next */

      if (this.isParentArray) {
        index = this.parentObj[this.propName].indexOf(this);
        var valueLength = this.parentObj[this.propName].length;
        valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;
        index = index !== -1 ? '-' + index : '-' + valueLength;
        propName = propName + index;
      }

      if (this.controlParent !== this.parentObj) {
        propName = this.parentObj.getParentKey() + '.' + this.propName + index;
      }

      return propName;
    };

    return ChildProperty;
  }();

  _exports.ChildProperty = ChildProperty;
});;
define('@syncfusion/ej2-base/src/component',["exports", "./util", "./module-loader", "./base", "./observer", "./child-property", "./notify-property-change", "./internationalization", "./dom"], function (_exports, _util, _moduleLoader, _base, _observer, _childProperty, _notifyPropertyChange, _internationalization, _dom) {
  "use strict";

  _exports.__esModule = true;
  _exports.Component = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var componentCount = 0;
  var lastPageID;
  var lastHistoryLen = 0;
  /**
   * Base class for all Essential JavaScript components
   */

  var Component =
  /** @class */
  function (_super) {
    __extends(Component, _super);
    /**
     * Initialize the constructor for component base
     */


    function Component(options, selector) {
      var _this = _super.call(this, options, selector) || this;

      _this.randomId = (0, _util.uniqueID)();
      /**
       * string template option for Blazor template rendering
       * @private
       */

      _this.isStringTemplate = false;
      _this.needsID = false;
      /**
       * This is a instance method to create an element.
       * @private
       */

      _this.createElement = _dom.createElement;

      if ((0, _util.isNullOrUndefined)(_this.enableRtl)) {
        _this.setProperties({
          'enableRtl': _internationalization.rightToLeft
        }, true);
      }

      if ((0, _util.isNullOrUndefined)(_this.locale)) {
        _this.setProperties({
          'locale': _internationalization.defaultCulture
        }, true);
      }

      _this.moduleLoader = new _moduleLoader.ModuleLoader(_this);
      _this.localObserver = new _observer.Observer(_this); // tslint:disable-next-line:no-function-constructor-with-string-args

      _internationalization.onIntlChange.on('notifyExternalChange', _this.detectFunction, _this, _this.randomId);

      if (!(0, _util.isUndefined)(selector)) {
        _this.appendTo();
      }

      return _this;
    }

    Component.prototype.requiredModules = function () {
      return [];
    };

    ;
    /**
     * Destroys the sub modules while destroying the widget
     */

    Component.prototype.destroy = function () {
      if (this.isDestroyed) {
        return;
      }

      if (this.enablePersistence) {
        this.setPersistData();
      }

      this.localObserver.destroy();

      if (this.refreshing) {
        return;
      }

      (0, _dom.removeClass)([this.element], ['e-control']);
      this.trigger('destroyed', {
        cancel: false
      });

      _super.prototype.destroy.call(this);

      this.moduleLoader.clean();

      _internationalization.onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);
    };
    /**
     * Applies all the pending property changes and render the component again.
     */


    Component.prototype.refresh = function () {
      this.refreshing = true;
      this.moduleLoader.clean();
      this.destroy();
      this.clearChanges();
      this.localObserver = new _observer.Observer(this);
      this.preRender();
      this.injectModules();
      this.render();
      this.refreshing = false;
    };
    /**
     * Appends the control within the given HTML element
     * @param {string | HTMLElement} selector - Target element where control needs to be appended
     */


    Component.prototype.appendTo = function (selector) {
      if (!(0, _util.isNullOrUndefined)(selector) && typeof selector === 'string') {
        this.element = document.querySelector(selector);
      } else if (!(0, _util.isNullOrUndefined)(selector)) {
        this.element = selector;
      }

      if (!(0, _util.isNullOrUndefined)(this.element)) {
        var moduleClass = 'e-' + this.getModuleName().toLowerCase();
        (0, _dom.addClass)([this.element], ['e-control', moduleClass]);
        this.isProtectedOnChange = false;

        if (this.needsID && !this.element.id) {
          this.element.id = this.getUniqueID(this.getModuleName());
        }

        if (this.enablePersistence) {
          this.mergePersistData();
          window.addEventListener('unload', this.setPersistData.bind(this));
        }

        var inst = (0, _util.getValue)('ej2_instances', this.element);

        if (!inst || inst.indexOf(this) === -1) {
          _super.prototype.addInstance.call(this);
        }

        this.preRender();
        this.injectModules();
        this.render();
        this.trigger('created');
      }
    };
    /**
     * It is used to process the post rendering functionalities to a component.
     */


    Component.prototype.renderComplete = function (wrapperElement) {
      if ((0, _util.isBlazor)()) {
        var ejsInterop = 'ejsInterop'; // tslint:disable-next-line:no-any

        window[ejsInterop].renderComplete(this.element, wrapperElement);
      }

      this.isRendered = true;
    };
    /**
     * When invoked, applies the pending property changes immediately to the component.
     */


    Component.prototype.dataBind = function () {
      this.injectModules();

      _super.prototype.dataBind.call(this);
    };

    ;
    /**
     * Attach one or more  event handler to the current component context.
     * It is used for internal handling event internally within the component only.
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs
     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.
     * @return {void}
     * @private
     */

    Component.prototype.on = function (event, handler, context) {
      if (typeof event === 'string') {
        this.localObserver.on(event, handler, context);
      } else {
        for (var _i = 0, event_1 = event; _i < event_1.length; _i++) {
          var arg = event_1[_i];
          this.localObserver.on(arg.event, arg.handler, arg.context);
        }
      }
    };
    /**
     * To remove one or more event handler that has been attached with the on() method.
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs
     * @return {void}
     * @private
     */


    Component.prototype.off = function (event, handler) {
      if (typeof event === 'string') {
        this.localObserver.off(event, handler);
      } else {
        for (var _i = 0, event_2 = event; _i < event_2.length; _i++) {
          var arg = event_2[_i];
          this.localObserver.off(arg.event, arg.handler);
        }
      }
    };
    /**
     * To notify the handlers in the specified event.
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} argument - Additional parameters to pass while calling the handler.
     * @return {void}
     * @private
     */


    Component.prototype.notify = function (property, argument) {
      if (this.isDestroyed !== true) {
        this.localObserver.notify(property, argument);
      }
    };
    /**
     * Get injected modules
     * @private
     */


    Component.prototype.getInjectedModules = function () {
      return this.injectedModules;
    };

    ;
    /**
     * Dynamically injects the required modules to the component.
     */

    Component.Inject = function () {
      var moduleList = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        moduleList[_i] = arguments[_i];
      }

      if (!this.prototype.injectedModules) {
        this.prototype.injectedModules = [];
      }

      for (var i = 0; i < moduleList.length; i++) {
        if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {
          this.prototype.injectedModules.push(moduleList[i]);
        }
      }
    };

    Component.prototype.injectModules = function () {
      if (this.injectedModules && this.injectedModules.length) {
        this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
      }
    };

    Component.prototype.detectFunction = function (args) {
      var prop = Object.keys(args);

      if (prop.length) {
        this[prop[0]] = args[prop[0]];
      }
    };

    Component.prototype.mergePersistData = function () {
      var data = window.localStorage.getItem(this.getModuleName() + this.element.id);

      if (!((0, _util.isNullOrUndefined)(data) || data === '')) {
        this.setProperties(JSON.parse(data), true);
      }
    };

    Component.prototype.setPersistData = function () {
      if (!this.isDestroyed) {
        window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
      }
    }; //tslint:disable-next-line


    Component.prototype.clearTemplate = function (templateName, index) {//No Code
    };

    Component.prototype.getUniqueID = function (definedName) {
      if (this.isHistoryChanged()) {
        componentCount = 0;
      }

      lastPageID = this.pageID(location.href);
      lastHistoryLen = history.length;
      return definedName + '_' + lastPageID + '_' + componentCount++;
    };

    Component.prototype.pageID = function (url) {
      var hash = 0;

      if (url.length === 0) {
        return hash;
      }

      for (var i = 0; i < url.length; i++) {
        var char = url.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
      }

      return Math.abs(hash);
    };

    Component.prototype.isHistoryChanged = function () {
      return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;
    };

    Component.prototype.addOnPersist = function (options) {
      var _this = this;

      var persistObj = {};

      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var key = options_1[_i];
        var objValue = void 0;
        objValue = (0, _util.getValue)(key, this);

        if (!(0, _util.isUndefined)(objValue)) {
          (0, _util.setValue)(key, this.getActualProperties(objValue), persistObj);
        }
      }

      return JSON.stringify(persistObj, function (key, value) {
        return _this.getActualProperties(value);
      });
    };

    Component.prototype.getActualProperties = function (obj) {
      if (obj instanceof _childProperty.ChildProperty) {
        return (0, _util.getValue)('properties', obj);
      } else {
        return obj;
      }
    };

    Component.prototype.ignoreOnPersist = function (options) {
      return JSON.stringify(this.iterateJsonProperties(this.properties, options));
    };

    Component.prototype.iterateJsonProperties = function (obj, ignoreList) {
      var newObj = {};

      var _loop_1 = function (key) {
        if (ignoreList.indexOf(key) === -1) {
          // tslint:disable-next-line:no-any
          var value = obj[key];

          if (typeof value === 'object' && !(value instanceof Array)) {
            var newList = ignoreList.filter(function (str) {
              return new RegExp(key + '.').test(str);
            }).map(function (str) {
              return str.replace(key + '.', '');
            });
            newObj[key] = this_1.iterateJsonProperties(this_1.getActualProperties(value), newList);
          } else {
            newObj[key] = value;
          }
        }
      };

      var this_1 = this;

      for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];

        _loop_1(key);
      }

      return newObj;
    };

    __decorate([(0, _notifyPropertyChange.Property)(false)], Component.prototype, "enablePersistence", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Component.prototype, "enableRtl", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Component.prototype, "locale", void 0);

    Component = __decorate([_notifyPropertyChange.NotifyPropertyChanges], Component);
    return Component;
  }(_base.Base);

  _exports.Component = Component;

  //Function handling for page navigation detection 

  /* istanbul ignore next */
  (function () {
    if (typeof window !== 'undefined') {
      window.addEventListener('popstate',
      /* istanbul ignore next */
      function () {
        componentCount = 0;
      });
    }
  })();
});;
define('@syncfusion/ej2-base/src/dom',["exports", "./event-handler", "./util"], function (_exports, _eventHandler, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.createElement = createElement;
  _exports.addClass = addClass;
  _exports.removeClass = removeClass;
  _exports.isVisible = isVisible;
  _exports.prepend = prepend;
  _exports.append = append;
  _exports.detach = detach;
  _exports.remove = remove;
  _exports.attributes = attributes;
  _exports.select = select;
  _exports.selectAll = selectAll;
  _exports.closest = closest;
  _exports.siblings = siblings;
  _exports.getAttributeOrDefault = getAttributeOrDefault;
  _exports.setStyleAttribute = setStyleAttribute;
  _exports.classList = classList;
  _exports.matches = matches;

  /**
   * Functions related to dom operations.
   */
  var SVG_REG = /^svg|^path|^g/;
  /**
   * Function to create Html element.
   * @param tagName - Name of the tag, id and class names.
   * @param properties - Object to set properties in the element.
   * @param properties.id - To set the id to the created element.
   * @param properties.className - To add classes to the element.
   * @param properties.innerHTML - To set the innerHTML to element.
   * @param properties.styles - To set the some custom styles to element.
   * @param properties.attrs - To set the attributes to element.
   * @private
   */

  function createElement(tagName, properties) {
    //tslint:disable-next-line
    var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);

    if (typeof properties === 'undefined') {
      return element;
    }

    element.innerHTML = properties.innerHTML ? properties.innerHTML : '';

    if (properties.className !== undefined) {
      element.className = properties.className;
    }

    if (properties.id !== undefined) {
      element.id = properties.id;
    }

    if (properties.styles !== undefined) {
      element.setAttribute('style', properties.styles);
    }

    if (properties.attrs !== undefined) {
      attributes(element, properties.attrs);
    }

    return element;
  }
  /**
   * The function used to add the classes to array of elements
   * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes
   * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
   * @private
   */


  function addClass(elements, classes) {
    var classList = getClassList(classes);

    for (var _i = 0, _a = elements; _i < _a.length; _i++) {
      var ele = _a[_i];

      for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {
        var className = classList_1[_b];

        if (!ele.classList.contains(className)) {
          ele.classList.add(className);
        }
      }
    }

    return elements;
  }
  /**
   * The function used to add the classes to array of elements
   * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes
   * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
   * @private
   */


  function removeClass(elements, classes) {
    var classList = getClassList(classes);

    for (var _i = 0, _a = elements; _i < _a.length; _i++) {
      var ele = _a[_i];

      if (ele.className !== '') {
        for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {
          var className = classList_2[_b];
          ele.classList.remove(className);
        }
      }
    }

    return elements;
  }

  function getClassList(classes) {
    var classList = [];

    if (typeof classes === 'string') {
      classList.push(classes);
    } else {
      classList = classes;
    }

    return classList;
  }
  /**
   * The function used to check element is visible or not.
   * @param  {Element|Node} element - An element the need to check visibility
   * @private
   */


  function isVisible(element) {
    var ele = element;
    return ele.style.visibility === '' && ele.offsetWidth > 0;
  }
  /**
   * The function used to insert an array of elements into a first of the element.
   * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.
   * @param  {Element} toElement - An element that is going to prepend.
   * @private
   */


  function prepend(fromElements, toElement, isEval) {
    var docFrag = document.createDocumentFragment();

    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {
      var ele = _a[_i];
      docFrag.appendChild(ele);
    }

    toElement.insertBefore(docFrag, toElement.firstElementChild);

    if (isEval) {
      executeScript(toElement);
    }

    return fromElements;
  }
  /**
   * The function used to insert an array of elements into last of the element.
   * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.
   * @param  {Element} toElement - An element that is going to prepend.
   * @private
   */


  function append(fromElements, toElement, isEval) {
    var docFrag = document.createDocumentFragment();

    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {
      var ele = _a[_i];
      docFrag.appendChild(ele);
    }

    toElement.appendChild(docFrag);

    if (isEval) {
      executeScript(toElement);
    }

    return fromElements;
  }
  /**
   * The function is used to evaluate script from Ajax request
   * @param ele - An element is going to evaluate the script
   */


  function executeScript(ele) {
    var eleArray = ele.querySelectorAll('script');
    eleArray.forEach(function (element) {
      var script = document.createElement('script');
      script.text = element.innerHTML;
      document.head.appendChild(script);
      detach(script);
    });
  }
  /**
   * The function used to remove the element from the
   * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom
   * @private
   */


  function detach(element) {
    var parentNode = element.parentNode;
    return parentNode.removeChild(element);
  }
  /**
   * The function used to remove the element from Dom also clear the bounded events
   * @param  {Element|Node|HTMLElement} element - An element remove from the Dom
   * @private
   */


  function remove(element) {
    var parentNode = element.parentNode;

    _eventHandler.EventHandler.clearEvents(element);

    parentNode.removeChild(element);
  }
  /**
   * The function helps to set multiple attributes to an element
   * @param  {Element|Node} element - An element that need to set attributes.
   * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.
   * @private
   */


  function attributes(element, attributes) {
    var keys = Object.keys(attributes);
    var ele = element;

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      ele.setAttribute(key, attributes[key]);
    }

    return ele;
  }
  /**
   * The function selects the element from giving context.
   * @param  {string} selector - Selector string need fetch element from the
   * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
   * @private
   */


  function select(selector, context) {
    if (context === void 0) {
      context = document;
    }

    return context.querySelector(selector);
  }
  /**
   * The function selects an array of element from the given context.
   * @param  {string} selector - Selector string need fetch element from the
   * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.
   * @private
   */


  function selectAll(selector, context) {
    if (context === void 0) {
      context = document;
    }

    var nodeList = context.querySelectorAll(selector);
    return nodeList;
  }
  /**
   * Returns single closest parent element based on class selector.
   * @param  {Element} element - An element that need to find the closest element.
   * @param  {string} selector - A classSelector of closest element.
   * @private
   */


  function closest(element, selector) {
    var el = element;

    if (typeof el.closest === 'function') {
      return el.closest(selector);
    }

    while (el && el.nodeType === 1) {
      if (matches(el, selector)) {
        return el;
      }

      el = el.parentNode;
    }

    return null;
  }
  /**
   * Returns all sibling elements of the given element.
   * @param  {Element|Node} element - An element that need to get siblings.
   * @private
   */


  function siblings(element) {
    var siblings = [];
    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);

    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {
      var curNode = childNodes_1[_i];

      if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {
        siblings.push(curNode);
      }
    }

    return siblings;
  }
  /**
   * set the value if not exist. Otherwise set the existing value
   * @param  {HTMLElement} element - An element to which we need to set value.
   * @param  {string} property - Property need to get or set.
   * @param  {string} value - value need to set.
   * @private
   */


  function getAttributeOrDefault(element, property, value) {
    var attrVal = element.getAttribute(property);

    if ((0, _util.isNullOrUndefined)(attrVal)) {
      element.setAttribute(property, value.toString());
      attrVal = value;
    }

    return attrVal;
  }
  /**
   * Set the style attributes to Html element.
   * @param {HTMLElement} element - Element which we want to set attributes
   * @param {any} attrs - Set the given attributes to element
   * @return {void}
   * @private
   */


  function setStyleAttribute(element, attrs) {
    if (attrs !== undefined) {
      Object.keys(attrs).forEach(function (key) {
        // tslint:disable-next-line:no-any
        element.style[key] = attrs[key];
      });
    }
  }
  /**
   * Method for add and remove classes to a dom element.
   * @param {Element} element - Element for add and remove classes
   * @param {string[]} addClasses - List of classes need to be add to the element
   * @param {string[]} removeClasses - List of classes need to be remove from the element
   * @return {void}
   * @private
   */


  function classList(element, addClasses, removeClasses) {
    addClass([element], addClasses);
    removeClass([element], removeClasses);
  }
  /**
   * Method to check whether the element matches the given selector.
   * @param {Element} element - Element to compare with the selector.
   * @param {string} selector - String selector which element will satisfy.
   * @return {void}
   * @private
   */


  function matches(element, selector) {
    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;

    if (matches) {
      return matches.call(element, selector);
    } else {
      return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;
    }
  }
});;
define('@syncfusion/ej2-base/src/draggable',["exports", "./base", "./browser", "./dom", "./notify-property-change", "./event-handler", "./child-property", "./util"], function (_exports, _base, _browser, _dom, _notifyPropertyChange, _eventHandler, _childProperty, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Draggable = _exports.Position = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var defaultPosition = {
    left: 0,
    top: 0,
    bottom: 0,
    right: 0
  };
  var positionProp = ['offsetLeft', 'offsetTop'];
  var axisMapper = ['x', 'y'];
  var axisValueMapper = ['left', 'top'];
  var isDraggedObject = {
    isDragged: false
  };
  /**
   * Specifies the position coordinates
   */

  var Position =
  /** @class */
  function (_super) {
    __extends(Position, _super);

    function Position() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _notifyPropertyChange.Property)(0)], Position.prototype, "left", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(0)], Position.prototype, "top", void 0);

    return Position;
  }(_childProperty.ChildProperty);

  _exports.Position = Position;

  /**
   * Draggable Module provides support to enable draggable functionality in Dom Elements.
   * ```html
   * <div id='drag'>Draggable</div>
   * <script>
   * var ele = document.getElementById('drag');
   * var drag:Draggable = new Draggable(ele,{
   *     clone:false,
   *     drag: function(e) {
   *      //drag handler code.
   *      },
   *     handle:'.class'
   * });
   * </script>
   * ```
   */
  var Draggable =
  /** @class */
  function (_super) {
    __extends(Draggable, _super);

    function Draggable(element, options) {
      var _this = _super.call(this, options, element) || this;

      _this.dragLimit = Draggable_1.getDefaultPosition();
      _this.borderWidth = Draggable_1.getDefaultPosition();
      _this.padding = Draggable_1.getDefaultPosition();
      _this.diffX = 0;
      _this.prevLeft = 0;
      _this.prevTop = 0;
      _this.dragProcessStarted = false;
      /* tslint:disable no-any */

      _this.tapHoldTimer = 0;
      _this.externalInitialize = false;
      _this.diffY = 0;
      _this.parentScrollX = 0;
      _this.parentScrollY = 0;
      _this.droppables = {};

      _this.bind();

      return _this;
    }

    Draggable_1 = Draggable;

    Draggable.prototype.bind = function () {
      this.toggleEvents();

      if (_browser.Browser.isIE) {
        (0, _dom.addClass)([this.element], 'e-block-touch');
      }

      this.droppables[this.scope] = {};
    };

    Draggable.getDefaultPosition = function () {
      return (0, _util.extend)({}, defaultPosition);
    };

    Draggable.prototype.toggleEvents = function (isUnWire) {
      var ele;

      if (!(0, _util.isUndefined)(this.handle)) {
        ele = (0, _dom.select)(this.handle, this.element);
      }

      var handler = this.enableTapHold && _browser.Browser.isDevice && _browser.Browser.isTouch ? this.mobileInitialize : this.initialize;

      if (isUnWire) {
        _eventHandler.EventHandler.remove(ele || this.element, _browser.Browser.touchStartEvent, handler);
      } else {
        _eventHandler.EventHandler.add(ele || this.element, _browser.Browser.touchStartEvent, handler, this);
      }
    };
    /* istanbul ignore next */


    Draggable.prototype.mobileInitialize = function (evt) {
      var _this = this;

      var target = evt.currentTarget;
      this.tapHoldTimer = setTimeout(function () {
        _this.externalInitialize = true;

        _this.removeTapholdTimer();

        _this.initialize(evt, target);
      }, this.tapHoldThreshold);

      _eventHandler.EventHandler.add(document, _browser.Browser.touchMoveEvent, this.removeTapholdTimer, this);

      _eventHandler.EventHandler.add(document, _browser.Browser.touchEndEvent, this.removeTapholdTimer, this);
    };
    /* istanbul ignore next */


    Draggable.prototype.removeTapholdTimer = function () {
      clearTimeout(this.tapHoldTimer);

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchMoveEvent, this.removeTapholdTimer);

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchEndEvent, this.removeTapholdTimer);
    };
    /* istanbul ignore next */


    Draggable.prototype.getScrollableParent = function (element, axis) {
      var scroll = {
        'vertical': 'scrollHeight',
        'horizontal': 'scrollWidth'
      };
      var client = {
        'vertical': 'clientHeight',
        'horizontal': 'clientWidth'
      };

      if ((0, _util.isNullOrUndefined)(element)) {
        return null;
      }

      if (element[scroll[axis]] > element[client[axis]]) {
        if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {
          if (axis === 'vertical') {
            this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);
          } else {
            this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);
          }

          if (!(0, _util.isNullOrUndefined)(element)) {
            return this.getScrollableParent(element.parentNode, axis);
          } else {
            return element;
          }
        } else {
          return this.getScrollableParent(element.parentNode, axis);
        }
      } else {
        return this.getScrollableParent(element.parentNode, axis);
      }
    };

    Draggable.prototype.getScrollableValues = function () {
      this.parentScrollX = 0;
      this.parentScrollY = 0;
      var isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');
      var verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');
      var horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');
    };

    Draggable.prototype.initialize = function (evt, curTarget) {
      this.currentStateTarget = evt.target;

      if (this.isDragStarted()) {
        return;
      } else {
        this.isDragStarted(true);
        this.externalInitialize = false;
      }

      this.target = evt.currentTarget || curTarget;
      this.dragProcessStarted = false;

      if (this.abort) {
        /* tslint:disable no-any */
        var abortSelectors = this.abort;

        if (typeof abortSelectors === 'string') {
          abortSelectors = [abortSelectors];
        }

        for (var i = 0; i < abortSelectors.length; i++) {
          if (!(0, _util.isNullOrUndefined)((0, _dom.closest)(evt.target, abortSelectors[i]))) {
            /* istanbul ignore next */
            if (this.isDragStarted()) {
              this.isDragStarted(true);
            }

            return;
          }
        }
      }

      if (this.preventDefault && !(0, _util.isUndefined)(evt.changedTouches)) {
        evt.preventDefault();
      }

      this.element.setAttribute('aria-grabbed', 'true');
      var intCoord = this.getCoordinates(evt);
      this.initialPosition = {
        x: intCoord.pageX,
        y: intCoord.pageY
      };

      if (!this.clone) {
        var pos = this.element.getBoundingClientRect();
        this.getScrollableValues();

        if (evt.clientX === evt.pageX) {
          this.parentScrollX = 0;
        }

        if (evt.clientY === evt.pageY) {
          this.parentScrollY = 0;
        }

        this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);
        this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);
      }

      if (this.externalInitialize) {
        this.intDragStart(evt);
      } else {
        _eventHandler.EventHandler.add(document, _browser.Browser.touchMoveEvent, this.intDragStart, this);

        _eventHandler.EventHandler.add(document, _browser.Browser.touchEndEvent, this.intDestroy, this);
      }

      this.toggleEvents(true);
      document.body.classList.add('e-prevent-select');
      this.externalInitialize = false;

      _eventHandler.EventHandler.trigger(document.documentElement, _browser.Browser.touchStartEvent, evt);
    };

    Draggable.prototype.intDragStart = function (evt) {
      this.removeTapholdTimer();
      var isChangeTouch = !(0, _util.isUndefined)(evt.changedTouches);

      if (isChangeTouch && evt.changedTouches.length !== 1) {
        return;
      }

      if (isChangeTouch) {
        evt.preventDefault();
      }

      var intCordinate = this.getCoordinates(evt);
      var pos;
      var styleProp = getComputedStyle(this.element);
      this.margin = {
        left: parseInt(styleProp.marginLeft, 10),
        top: parseInt(styleProp.marginTop, 10),
        right: parseInt(styleProp.marginRight, 10),
        bottom: parseInt(styleProp.marginBottom, 10)
      };
      var element = this.element;

      if (this.clone && this.dragTarget) {
        var intClosest = (0, _dom.closest)(evt.target, this.dragTarget);

        if (!(0, _util.isNullOrUndefined)(intClosest)) {
          element = intClosest;
        }
      }

      this.offset = this.calculateParentPosition(element);
      this.position = this.getMousePosition(evt, this.isDragScroll);
      var x = this.initialPosition.x - intCordinate.pageX;
      var y = this.initialPosition.y - intCordinate.pageY;
      var distance = Math.sqrt(x * x + y * y);

      if (distance >= this.distance || this.externalInitialize) {
        var ele = this.getHelperElement(evt);

        if (!ele || (0, _util.isNullOrUndefined)(ele)) {
          return;
        }

        var dragTargetElement = this.helperElement = ele;
        this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);

        if (this.dragStart) {
          var curTarget = this.getProperTargetElement(evt);
          var args = {
            event: evt,
            element: element,
            target: curTarget,
            bindEvents: (0, _util.isBlazor)() ? this.bindDragEvents.bind(this) : null,
            dragElement: dragTargetElement
          };
          this.trigger('dragStart', args);
        }

        if (this.dragArea) {
          this.setDragArea();
        } else {
          this.dragLimit = {
            left: 0,
            right: 0,
            bottom: 0,
            top: 0
          };
          this.borderWidth = {
            top: 0,
            left: 0
          };
        }

        pos = {
          left: this.position.left - this.parentClientRect.left,
          top: this.position.top - this.parentClientRect.top
        };

        if (this.clone && !this.enableTailMode) {
          this.diffX = this.position.left - this.offset.left;
          this.diffY = this.position.top - this.offset.top;
        }

        this.getScrollableValues();
        var posValue = this.getProcessedPositionValue({
          top: pos.top - this.diffY + 'px',
          left: pos.left - this.diffX + 'px'
        });
        this.dragElePosition = {
          top: pos.top,
          left: pos.left
        };
        (0, _dom.setStyleAttribute)(dragTargetElement, this.getDragPosition({
          position: 'absolute',
          left: posValue.left,
          top: posValue.top
        }));

        _eventHandler.EventHandler.remove(document, _browser.Browser.touchMoveEvent, this.intDragStart);

        _eventHandler.EventHandler.remove(document, _browser.Browser.touchEndEvent, this.intDestroy);

        if (!(0, _util.isBlazor)()) {
          this.bindDragEvents(dragTargetElement);
        }
      }
    };

    Draggable.prototype.bindDragEvents = function (dragTargetElement) {
      if ((0, _dom.isVisible)(dragTargetElement)) {
        _eventHandler.EventHandler.add(document, _browser.Browser.touchMoveEvent, this.intDrag, this);

        _eventHandler.EventHandler.add(document, _browser.Browser.touchEndEvent, this.intDragStop, this);

        this.setGlobalDroppables(false, this.element, dragTargetElement);
      } else {
        this.toggleEvents();
        document.body.classList.remove('e-prevent-select');
      }
    };

    Draggable.prototype.elementInViewport = function (el) {
      this.top = el.offsetTop;
      this.left = el.offsetLeft;
      this.width = el.offsetWidth;
      this.height = el.offsetHeight;

      while (el.offsetParent) {
        el = el.offsetParent;
        this.top += el.offsetTop;
        this.left += el.offsetLeft;
      }

      return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;
    };

    Draggable.prototype.getProcessedPositionValue = function (value) {
      if (this.queryPositionInfo) {
        return this.queryPositionInfo(value);
      }

      return value;
    };

    Draggable.prototype.calculateParentPosition = function (ele) {
      if ((0, _util.isNullOrUndefined)(ele)) {
        return {
          left: 0,
          top: 0
        };
      }

      var rect = ele.getBoundingClientRect();
      var style = getComputedStyle(ele);
      return {
        left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),
        top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)
      };
    }; // tslint:disable-next-line:max-func-body-length


    Draggable.prototype.intDrag = function (evt) {
      if (!(0, _util.isUndefined)(evt.changedTouches) && evt.changedTouches.length !== 1) {
        return;
      }

      var left;
      var top;
      this.position = this.getMousePosition(evt, this.isDragScroll);
      var docHeight = this.getDocumentWidthHeight('Height');

      if (docHeight < this.position.top) {
        this.position.top = docHeight;
      }

      var docWidth = this.getDocumentWidthHeight('Width');

      if (docWidth < this.position.left) {
        this.position.left = docWidth;
      }

      if (this.drag) {
        var curTarget = this.getProperTargetElement(evt);
        this.trigger('drag', {
          event: evt,
          element: this.element,
          target: curTarget
        });
      }

      var eleObj = this.checkTargetElement(evt);

      if (eleObj.target && eleObj.instance) {
        /* tslint:disable no-any */
        var flag = true;

        if (this.hoverObject) {
          if (this.hoverObject.instance !== eleObj.instance) {
            this.triggerOutFunction(evt, eleObj);
          } else {
            flag = false;
          }
        }

        if (flag) {
          eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
          eleObj.instance.intOver(evt, eleObj.target);
          this.hoverObject = eleObj;
        }
      } else if (this.hoverObject) {
        this.triggerOutFunction(evt, eleObj);
      }

      var helperElement = this.droppables[this.scope].helper;
      this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
      var tLeft = this.parentClientRect.left;
      var tTop = this.parentClientRect.top;
      var intCoord = this.getCoordinates(evt);
      var pagex = intCoord.pageX;
      var pagey = intCoord.pageY;
      var dLeft = this.position.left - this.diffX;
      var dTop = this.position.top - this.diffY;

      if (this.dragArea) {
        var styles = getComputedStyle(helperElement);

        if (this.pageX !== pagex || this.skipDistanceCheck) {
          var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));

          if (this.dragLimit.left > dLeft && dLeft > 0) {
            left = this.dragLimit.left;
          } else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {
            left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;
          } else {
            left = dLeft < 0 ? this.dragLimit.left : dLeft;
          }
        }

        if (this.pageY !== pagey || this.skipDistanceCheck) {
          var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));

          if (this.dragLimit.top > dTop && dTop > 0) {
            top = this.dragLimit.top;
          } else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {
            top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;
          } else {
            top = dTop < 0 ? this.dragLimit.top : dTop;
          }
        }
      } else {
        left = dLeft;
        top = dTop;
      }

      var iTop = tTop + this.borderWidth.top;
      var iLeft = tLeft + this.borderWidth.left;

      if (this.dragProcessStarted) {
        if ((0, _util.isNullOrUndefined)(top)) {
          top = this.prevTop;
        }

        if ((0, _util.isNullOrUndefined)(left)) {
          left = this.prevLeft;
        }
      }

      var draEleTop;
      var draEleLeft;

      if (this.dragArea) {
        draEleTop = top - iTop < 0 ? this.dragLimit.top : top - iTop;
        draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft;
      } else {
        draEleTop = top - iTop;
        draEleLeft = left - iLeft;
      }

      var dragValue = this.getProcessedPositionValue({
        top: draEleTop + 'px',
        left: draEleLeft + 'px'
      });
      (0, _dom.setStyleAttribute)(helperElement, this.getDragPosition(dragValue));

      if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {
        this.helperElement.scrollIntoView();
      }

      this.dragProcessStarted = true;
      this.prevLeft = left;
      this.prevTop = top;
      this.position.left = left;
      this.position.top = top;
      this.pageX = pagex;
      this.pageY = pagey;
    };

    Draggable.prototype.triggerOutFunction = function (evt, eleObj) {
      this.hoverObject.instance.intOut(evt, eleObj.target);
      this.hoverObject.instance.dragData[this.scope] = null;
      this.hoverObject = null;
    };

    Draggable.prototype.getDragPosition = function (dragValue) {
      var temp = (0, _util.extend)({}, dragValue);

      if (this.axis) {
        if (this.axis === 'x') {
          delete temp.top;
        } else if (this.axis === 'y') {
          delete temp.left;
        }
      }

      return temp;
    };

    Draggable.prototype.getDocumentWidthHeight = function (str) {
      var docBody = document.body;
      var docEle = document.documentElement;
      var returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);
      return returnValue;
    };

    Draggable.prototype.intDragStop = function (evt) {
      this.dragProcessStarted = false;

      if (!(0, _util.isUndefined)(evt.changedTouches) && evt.changedTouches.length !== 1) {
        return;
      }

      var type = ['touchend', 'pointerup', 'mouseup'];

      if (type.indexOf(evt.type) !== -1) {
        if (this.dragStop) {
          var curTarget = this.getProperTargetElement(evt);
          this.trigger('dragStop', {
            event: evt,
            element: this.element,
            target: curTarget,
            helper: this.helperElement
          });
        }

        this.intDestroy(evt);
      } else {
        this.element.setAttribute('aria-grabbed', 'false');
      }

      var eleObj = this.checkTargetElement(evt);

      if (eleObj.target && eleObj.instance) {
        eleObj.instance.dragStopCalled = true;
        eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
        eleObj.instance.intDrop(evt, eleObj.target);
      }

      this.setGlobalDroppables(true);
      document.body.classList.remove('e-prevent-select');
    };
    /**
     * @private
     */


    Draggable.prototype.intDestroy = function (evt) {
      this.dragProcessStarted = false;
      this.toggleEvents();
      document.body.classList.remove('e-prevent-select');
      this.element.setAttribute('aria-grabbed', 'false');

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchMoveEvent, this.intDragStart);

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchEndEvent, this.intDragStop);

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchEndEvent, this.intDestroy);

      _eventHandler.EventHandler.remove(document, _browser.Browser.touchMoveEvent, this.intDrag);

      if (this.isDragStarted()) {
        this.isDragStarted(true);
      }
    }; // triggers when property changed


    Draggable.prototype.onPropertyChanged = function (newProp, oldProp) {//No Code to handle
    };

    Draggable.prototype.getModuleName = function () {
      return 'draggable';
    };

    Draggable.prototype.isDragStarted = function (change) {
      if (change) {
        isDraggedObject.isDragged = !isDraggedObject.isDragged;
      }

      return isDraggedObject.isDragged;
    };

    Draggable.prototype.setDragArea = function () {
      var eleWidthBound;
      var eleHeightBound;
      var top = 0;
      var left = 0;
      var ele;
      var type = typeof this.dragArea;

      if (type === 'string') {
        ele = (0, _dom.select)(this.dragArea);
      } else {
        ele = this.dragArea;
      }

      if (ele) {
        var elementArea = ele.getBoundingClientRect();
        eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;
        eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;
        var keys = ['Top', 'Left', 'Bottom', 'Right'];
        var styles = getComputedStyle(ele);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var tborder = styles['border' + key + 'Width'];
          var tpadding = styles['padding' + key];
          var lowerKey = key.toLowerCase();
          this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);
          this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);
        }

        top = elementArea.top;
        left = elementArea.left;
        this.dragLimit.left = left + this.borderWidth.left + this.padding.left;
        this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;
        this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);
        this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);
      }
    };

    Draggable.prototype.getProperTargetElement = function (evt) {
      var intCoord = this.getCoordinates(evt);
      var ele;
      var prevStyle = this.helperElement.style.pointerEvents || '';

      if ((0, _util.compareElementParent)(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {
        this.helperElement.style.pointerEvents = 'none';
        ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);
        this.helperElement.style.pointerEvents = prevStyle;
      } else {
        ele = evt.target;
      }

      return ele;
    };

    Draggable.prototype.getMousePosition = function (evt, isdragscroll) {
      /* tslint:disable no-any */
      var dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;
      var intCoord = this.getCoordinates(evt);
      var pageX;
      var pageY;
      var isOffsetParent = (0, _util.isNullOrUndefined)(dragEle.offsetParent);
      /* istanbul ignore next */

      if (isdragscroll) {
        pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition;
        pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition;
      } else {
        pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition;
        pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition;
      }

      return {
        left: pageX - (this.margin.left + this.cursorAt.left),
        top: pageY - (this.margin.top + this.cursorAt.top)
      };
    };

    Draggable.prototype.getCoordinates = function (evt) {
      if (evt.type.indexOf('touch') > -1) {
        return evt.changedTouches[0];
      }

      return evt;
    };

    Draggable.prototype.getHelperElement = function (evt) {
      var element;

      if (this.clone) {
        if (this.helper) {
          element = this.helper({
            sender: evt,
            element: this.target
          });
        } else {
          element = (0, _dom.createElement)('div', {
            className: 'e-drag-helper e-block-touch',
            innerHTML: 'Draggable'
          });
          document.body.appendChild(element);
        }
      } else {
        element = this.element;
      }

      return element;
    };

    Draggable.prototype.setGlobalDroppables = function (reset, drag, helper) {
      this.droppables[this.scope] = reset ? null : {
        draggable: drag,
        helper: helper,
        draggedElement: this.element
      };
    };

    Draggable.prototype.checkTargetElement = function (evt) {
      var target = this.getProperTargetElement(evt);
      var dropIns = this.getDropInstance(target);

      if (!dropIns && target && !(0, _util.isNullOrUndefined)(target.parentNode)) {
        var parent_1 = (0, _dom.closest)(target.parentNode, '.e-droppable') || target.parentElement;

        if (parent_1) {
          dropIns = this.getDropInstance(parent_1);
        }
      }

      return {
        target: target,
        instance: dropIns
      };
    };

    Draggable.prototype.getDropInstance = function (ele) {
      var name = 'getModuleName';
      var drop;
      var eleInst = ele && ele.ej2_instances;

      if (eleInst) {
        for (var _i = 0, eleInst_1 = eleInst; _i < eleInst_1.length; _i++) {
          var inst = eleInst_1[_i];

          if (inst[name]() === 'droppable') {
            drop = inst;
            break;
          }
        }
      }

      return drop;
    };

    Draggable.prototype.destroy = function () {
      this.toggleEvents(true);

      _super.prototype.destroy.call(this);
    };

    var Draggable_1;

    __decorate([(0, _notifyPropertyChange.Complex)({}, Position)], Draggable.prototype, "cursorAt", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(true)], Draggable.prototype, "clone", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "dragArea", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "isDragScroll", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Draggable.prototype, "drag", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Draggable.prototype, "dragStart", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Draggable.prototype, "dragStop", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(1)], Draggable.prototype, "distance", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "handle", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "abort", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "helper", void 0);

    __decorate([(0, _notifyPropertyChange.Property)('default')], Draggable.prototype, "scope", void 0);

    __decorate([(0, _notifyPropertyChange.Property)('')], Draggable.prototype, "dragTarget", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "axis", void 0);

    __decorate([(0, _notifyPropertyChange.Property)()], Draggable.prototype, "queryPositionInfo", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(false)], Draggable.prototype, "enableTailMode", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(false)], Draggable.prototype, "skipDistanceCheck", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(true)], Draggable.prototype, "preventDefault", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(false)], Draggable.prototype, "enableAutoScroll", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(false)], Draggable.prototype, "enableTapHold", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(750)], Draggable.prototype, "tapHoldThreshold", void 0);

    Draggable = Draggable_1 = __decorate([_notifyPropertyChange.NotifyPropertyChanges], Draggable);
    return Draggable;
  }(_base.Base);

  _exports.Draggable = Draggable;
});;
define('@syncfusion/ej2-base/src/droppable',["exports", "./base", "./browser", "./dom", "./notify-property-change", "./event-handler", "./util"], function (_exports, _base, _browser, _dom, _notifyPropertyChange, _eventHandler, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Droppable = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * Droppable Module provides support to enable droppable functionality in Dom Elements.
   * ```html
   * <div id='drop'>Droppable</div>
   * <script>
   * let ele:HTMLElement = document.getElementById('drop');
   * var drag:Droppable = new Droppable(ele,{
   *     accept:'.drop',
   *     drop: function(e) {
   *      //drop handler code.
   *     }
   * });
   * </script>
   * ```
   */
  var Droppable =
  /** @class */
  function (_super) {
    __extends(Droppable, _super);

    function Droppable(element, options) {
      var _this = _super.call(this, options, element) || this;

      _this.mouseOver = false;
      _this.dragData = {};
      _this.dragStopCalled = false;

      _this.bind();

      return _this;
    }

    Droppable.prototype.bind = function () {
      this.wireEvents();
    };

    Droppable.prototype.wireEvents = function () {
      _eventHandler.EventHandler.add(this.element, _browser.Browser.touchEndEvent, this.intDrop, this);
    }; // triggers when property changed


    Droppable.prototype.onPropertyChanged = function (newProp, oldProp) {//No Code to handle
    };

    Droppable.prototype.getModuleName = function () {
      return 'droppable';
    };

    Droppable.prototype.intOver = function (event, element) {
      if (!this.mouseOver) {
        var drag = this.dragData[this.scope];
        this.trigger('over', {
          event: event,
          target: element,
          dragData: drag
        });
        this.mouseOver = true;
      }
    };

    Droppable.prototype.intOut = function (event, element) {
      if (this.mouseOver) {
        this.trigger('out', {
          evt: event,
          target: element
        });
        this.mouseOver = false;
      }
    };

    Droppable.prototype.intDrop = function (evt, element) {
      if (!this.dragStopCalled) {
        return;
      } else {
        this.dragStopCalled = false;
      }

      var accept = true;
      var drag = this.dragData[this.scope];
      var isDrag = drag ? drag.helper && (0, _dom.isVisible)(drag.helper) : false;
      var area;

      if (isDrag) {
        area = this.isDropArea(evt, drag.helper, element);

        if (this.accept) {
          accept = (0, _dom.matches)(drag.helper, this.accept);
        }
      }

      if (isDrag && this.drop && area.canDrop && accept) {
        this.trigger('drop', {
          event: evt,
          target: area.target,
          droppedElement: drag.helper,
          dragData: drag
        });
      }

      this.mouseOver = false;
    };

    Droppable.prototype.isDropArea = function (evt, helper, element) {
      var area = {
        canDrop: true,
        target: element || evt.target
      };
      var isTouch = evt.type === 'touchend';

      if (isTouch || area.target === helper) {
        helper.style.display = 'none';
        var coord = isTouch ? evt.changedTouches[0] : evt;
        var ele = document.elementFromPoint(coord.clientX, coord.clientY);
        area.canDrop = false;
        area.canDrop = (0, _util.compareElementParent)(ele, this.element);

        if (area.canDrop) {
          area.target = ele;
        }

        helper.style.display = '';
      }

      return area;
    };

    Droppable.prototype.destroy = function () {
      _eventHandler.EventHandler.remove(this.element, _browser.Browser.touchEndEvent, this.intDrop);

      _super.prototype.destroy.call(this);
    };

    __decorate([(0, _notifyPropertyChange.Property)()], Droppable.prototype, "accept", void 0);

    __decorate([(0, _notifyPropertyChange.Property)('default')], Droppable.prototype, "scope", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Droppable.prototype, "drop", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Droppable.prototype, "over", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Droppable.prototype, "out", void 0);

    Droppable = __decorate([_notifyPropertyChange.NotifyPropertyChanges], Droppable);
    return Droppable;
  }(_base.Base);

  _exports.Droppable = Droppable;
});;
define('@syncfusion/ej2-base/src/event-handler',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.EventHandler = void 0;

  /**
   * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element
   * @private
   * ```html
   * <div id="Eventdiv">  </div>
   * <script>
   *   let node: HTMLElement = document.querySelector("#Eventdiv");
   *   EventHandler.addEventListener(node, "click", function(){
   *       // click handler function code
   *   });
   *   EventHandler.addEventListener(node, "onmouseover", function(){
   *       // mouseover handler function code
   *   });
   *   EventHandler.removeEventListener(node, "click", function(){
   *       // click handler function code
   *   });
   *   eventObj.clearEvents();
   * </script>
   * ```
   */
  var EventHandler =
  /** @class */
  function () {
    function EventHandler() {} // to get the event data based on element


    EventHandler.addOrGetEventData = function (element) {
      if ('__eventList' in element) {
        return element.__eventList.events;
      } else {
        element.__eventList = {};
        return element.__eventList.events = [];
      }
    };
    /**
     * Add an event to the specified DOM element.
     * @param {any} element - Target HTML DOM element
     * @param {string} eventName - A string that specifies the name of the event
     * @param {Function} listener - Specifies the function to run when the event occurs
     * @param {Object} bindTo - A object that binds 'this' variable in the event handler
     * @param {number} debounce - Specifies at what interval given event listener should be triggered.
     * @return {Function}
     */


    EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {
      var eventData = EventHandler.addOrGetEventData(element);
      var debounceListener;

      if (intDebounce) {
        debounceListener = (0, _util.debounce)(listener, intDebounce);
      } else {
        debounceListener = listener;
      }

      if (bindTo) {
        debounceListener = debounceListener.bind(bindTo);
      }

      var event = eventName.split(' ');

      for (var i = 0; i < event.length; i++) {
        eventData.push({
          name: event[i],
          listener: listener,
          debounce: debounceListener
        });
        element.addEventListener(event[i], debounceListener);
      }

      return debounceListener;
    };
    /**
     * Remove an event listener that has been attached before.
     * @param {any} element - Specifies the target html element to remove the event
     * @param {string} eventName - A string that specifies the name of the event to remove
     * @param {Function} listener - Specifies the function to remove
     * @return {void}
     */


    EventHandler.remove = function (element, eventName, listener) {
      var eventData = EventHandler.addOrGetEventData(element);
      var event = eventName.split(' ');

      var _loop_1 = function (j) {
        var index = -1;
        var debounceListener;

        if (eventData && eventData.length !== 0) {
          eventData.some(function (x, i) {
            return x.name === event[j] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;
          });
        }

        if (index !== -1) {
          eventData.splice(index, 1);
        }

        if (debounceListener) {
          element.removeEventListener(event[j], debounceListener);
        }
      };

      for (var j = 0; j < event.length; j++) {
        _loop_1(j);
      }
    };
    /**
     * Clear all the event listeners that has been previously attached to the element.
     * @param {any} element - Specifies the target html element to clear the events
     * @return {void}
     */


    EventHandler.clearEvents = function (element) {
      var eventData;
      var copyData;
      eventData = EventHandler.addOrGetEventData(element);
      copyData = (0, _util.extend)([], copyData, eventData);

      for (var i = 0; i < copyData.length; i++) {
        element.removeEventListener(copyData[i].name, copyData[i].debounce);
        eventData.shift();
      }
    };
    /**
     * Trigger particular event of the element.
     * @param {any} element - Specifies the target html element to trigger the events
     * @param {string} eventName - Specifies the event to trigger for the specified element.
     * Can be a custom event, or any of the standard events.
     * @param {any} eventProp - Additional parameters to pass on to the event properties
     * @return {void}
     */


    EventHandler.trigger = function (element, eventName, eventProp) {
      var eventData = EventHandler.addOrGetEventData(element);
      var fn = null;

      for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {
        var event_1 = eventData_1[_i];

        if (event_1.name === eventName) {
          event_1.debounce.call(this, eventProp);
        }
      }
    };

    return EventHandler;
  }();

  _exports.EventHandler = EventHandler;
});;
define('@syncfusion/ej2-base/src/hijri-parser',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.HijriParser = void 0;

  /***
   * Hijri parser
   */
  var HijriParser;
  _exports.HijriParser = HijriParser;

  (function (HijriParser) {
    /* tslint:disable */
    var dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990];
    /* tslint:enable */

    function getHijriDate(gDate) {
      var day = gDate.getDate();
      var month = gDate.getMonth();
      var year = gDate.getFullYear();
      var tMonth = month + 1;
      var tYear = year;

      if (tMonth < 3) {
        tYear -= 1;
        tMonth += 12;
      }

      var yPrefix = Math.floor(tYear / 100.);
      var julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;
      var julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;
      yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);
      julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;
      var b = julianNumber + julilanOffset + 1524;
      var c = Math.floor((b - 122.1) / 365.25);
      var d = Math.floor(365.25 * c);
      var tempMonth = Math.floor((b - d) / 30.6001);
      day = b - d - Math.floor(30.6001 * tempMonth);
      month = Math.floor((b - d) / 20.6001);

      if (month > 13) {
        c += 1;
        month -= 12;
      }

      month -= 1;
      year = c - 4716;
      var modifiedJulianDate = julianNumber - 2400000; // date calculation for year after 2077

      var iyear = 10631. / 30.;
      var z = julianNumber - 1948084;
      var cyc = Math.floor(z / 10631.);
      z = z - 10631 * cyc;
      var j = Math.floor((z - 0.1335) / iyear);
      var iy = 30 * cyc + j;
      z = z - Math.floor(j * iyear + 0.1335);
      var im = Math.floor((z + 28.5001) / 29.5);
      /* istanbul ignore next */

      if (im === 13) {
        im = 12;
      }

      var tempDay = z - Math.floor(29.5001 * im - 29);
      var i = 0;

      for (; i < dateCorrection.length; i++) {
        if (dateCorrection[i] > modifiedJulianDate) {
          break;
        }
      }

      var iln = i + 16260;
      var ii = Math.floor((iln - 1) / 12);
      var hYear = ii + 1;
      var hmonth = iln - 12 * ii;
      var hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;

      if ((hDate + '').length > 2) {
        hDate = tempDay;
        hmonth = im;
        hYear = iy;
      }

      return {
        year: hYear,
        month: hmonth,
        date: hDate
      };
    }

    HijriParser.getHijriDate = getHijriDate;

    function toGregorian(year, month, day) {
      var iy = year;
      var im = month;
      var id = day;
      var ii = iy - 1;
      var iln = ii * 12 + 1 + (im - 1);
      var i = iln - 16260;
      var mcjdn = id + dateCorrection[i - 1] - 1;
      var julianDate = mcjdn + 2400000;
      var z = Math.floor(julianDate + 0.5);
      var a = Math.floor((z - 1867216.25) / 36524.25);
      a = z + 1 + a - Math.floor(a / 4);
      var b = a + 1524;
      var c = Math.floor((b - 122.1) / 365.25);
      var d = Math.floor(365.25 * c);
      var e = Math.floor((b - d) / 30.6001);
      var gDay = b - d - Math.floor(e * 30.6001);
      var gMonth = e - (e > 13.5 ? 13 : 1);
      var gYear = c - (gMonth > 2.5 ? 4716 : 4715);
      /* istanbul ignore next */

      if (gYear <= 0) {
        gMonth--;
      } // No year zero


      return new Date(gYear + '/' + gMonth + '/' + gDay);
    }

    HijriParser.toGregorian = toGregorian;
  })(HijriParser || (_exports.HijriParser = HijriParser = {}));
});;
define('@syncfusion/ej2-base/src/index',["exports", "./intl/intl-base", "./ajax", "./animation", "./base", "./browser", "./component", "./child-property", "./draggable", "./droppable", "./event-handler", "./internationalization", "./keyboard", "./l10n", "./module-loader", "./notify-property-change", "./touch", "./hijri-parser", "./template-engine", "./util", "./dom", "./observer", "./sanitize-helper"], function (_exports, _intlBase, _ajax, _animation, _base, _browser, _component, _childProperty, _draggable, _droppable, _eventHandler, _internationalization, _keyboard, _l10n, _moduleLoader, _notifyPropertyChange, _touch, _hijriParser, _templateEngine, _util, _dom, _observer, _sanitizeHelper) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_intlBase).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _intlBase[key];
  });
  Object.keys(_ajax).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _ajax[key];
  });
  Object.keys(_animation).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _animation[key];
  });
  Object.keys(_base).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _base[key];
  });
  Object.keys(_browser).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _browser[key];
  });
  Object.keys(_component).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _component[key];
  });
  Object.keys(_childProperty).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _childProperty[key];
  });
  Object.keys(_draggable).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _draggable[key];
  });
  Object.keys(_droppable).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _droppable[key];
  });
  Object.keys(_eventHandler).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _eventHandler[key];
  });
  Object.keys(_internationalization).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _internationalization[key];
  });
  Object.keys(_keyboard).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _keyboard[key];
  });
  Object.keys(_l10n).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _l10n[key];
  });
  Object.keys(_moduleLoader).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _moduleLoader[key];
  });
  Object.keys(_notifyPropertyChange).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _notifyPropertyChange[key];
  });
  Object.keys(_touch).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _touch[key];
  });
  Object.keys(_hijriParser).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _hijriParser[key];
  });
  Object.keys(_templateEngine).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _templateEngine[key];
  });
  Object.keys(_util).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _util[key];
  });
  Object.keys(_dom).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _dom[key];
  });
  Object.keys(_observer).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _observer[key];
  });
  Object.keys(_sanitizeHelper).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _sanitizeHelper[key];
  });
});;
define('@syncfusion/ej2-base/src/internationalization',["exports", "./intl/date-formatter", "./intl/number-formatter", "./intl/date-parser", "./intl/number-parser", "./intl/intl-base", "./util", "./observer"], function (_exports, _dateFormatter, _numberFormatter, _dateParser, _numberParser, _intlBase, _util, _observer) {
  "use strict";

  _exports.__esModule = true;
  _exports.setCulture = setCulture;
  _exports.setCurrencyCode = setCurrencyCode;
  _exports.loadCldr = loadCldr;
  _exports.enableRtl = enableRtl;
  _exports.getNumericObject = getNumericObject;
  _exports.getNumberDependable = getNumberDependable;
  _exports.getDefaultDateObject = getDefaultDateObject;
  _exports.Internationalization = _exports.defaultCurrencyCode = _exports.defaultCulture = _exports.cldrData = _exports.rightToLeft = _exports.onIntlChange = void 0;

  /**
   * Specifies the observer used for external change detection.
   */
  var onIntlChange = new _observer.Observer();
  /**
   * Specifies the default rtl status for EJ2 components.
   */

  _exports.onIntlChange = onIntlChange;
  var rightToLeft = false;
  /**
   * Specifies the CLDR data loaded for internationalization functionalities.
   * @private
   */

  _exports.rightToLeft = rightToLeft;
  var cldrData = {};
  /**
   * Specifies the default culture value to be considered.
   * @private
   */

  _exports.cldrData = cldrData;
  var defaultCulture = 'en-US';
  /**
   * Specifies default currency code to be considered
   * @private
   */

  _exports.defaultCulture = defaultCulture;
  var defaultCurrencyCode = 'USD';
  _exports.defaultCurrencyCode = defaultCurrencyCode;
  var mapper = ['numericObject', 'dateObject'];
  /**
   * Internationalization class provides support to parse and format the number and date object to the desired format.
   * ```typescript
   * // To set the culture globally
   * setCulture('en-GB');
   *
   * // To set currency code globally
   * setCurrencyCode('EUR');
   *
   * //Load cldr data
   * loadCldr(gregorainData);
   * loadCldr(timeZoneData);
   * loadCldr(numbersData);
   * loadCldr(numberSystemData);
   *
   * // To use formatter in component side
   * let Intl:Internationalization = new Internationalization();
   *
   * // Date formatting
   * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});
   * dateFormatter(new Date('11/2/2016'));
   * dateFormatter(new Date('25/2/2030'));
   * Intl.formatDate(new Date(),{skeleton:'E'});
   *
   * //Number formatting
   * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})
   * numberFormatter(24563334);
   * Intl.formatNumber(123123,{skeleton:'p2'});
   *
   * // Date parser
   * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});
   * dateParser('10:30 PM');
   * Intl.parseDate('10',{skeleton:'H'});
   * ```
   */

  var Internationalization =
  /** @class */
  function () {
    function Internationalization(cultureName) {
      if (cultureName) {
        this.culture = cultureName;
      }
    }
    /**
     * Returns the format function for given options.
     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function}
     */


    Internationalization.prototype.getDateFormat = function (options) {
      return _dateFormatter.DateFormat.dateFormat(this.getCulture(), options || {
        type: 'date',
        skeleton: 'short'
      }, cldrData);
    };
    /**
     * Returns the format function for given options.
     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function}
     */


    Internationalization.prototype.getNumberFormat = function (options) {
      if (options && !options.currency) {
        options.currency = defaultCurrencyCode;
      }

      return _numberFormatter.NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);
    };
    /**
     * Returns the parser function for given options.
     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function}
     */


    Internationalization.prototype.getDateParser = function (options) {
      return _dateParser.DateParser.dateParser(this.getCulture(), options || {
        skeleton: 'short',
        type: 'date'
      }, cldrData);
    };
    /**
     * Returns the parser function for given options.
     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function}
     */


    Internationalization.prototype.getNumberParser = function (options) {
      return _numberParser.NumberParser.numberParser(this.getCulture(), options || {
        format: 'N'
      }, cldrData);
    };
    /**
     * Returns the formatted string based on format options.
     * @param {Number} value - Specifies the number to format.
     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string}
     */


    Internationalization.prototype.formatNumber = function (value, option) {
      return this.getNumberFormat(option)(value);
    };
    /**
     * Returns the formatted date string based on format options.
     * @param {Number} value - Specifies the number to format.
     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string}
     */


    Internationalization.prototype.formatDate = function (value, option) {
      return this.getDateFormat(option)(value);
    };
    /**
     * Returns the date object for given date string and options.
     * @param {string} value - Specifies the string to parse.
     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.
     * @returns {Date}
     */


    Internationalization.prototype.parseDate = function (value, option) {
      return this.getDateParser(option)(value);
    };
    /**
     * Returns the number object from the given string value and options.
     * @param {string} value - Specifies the string to parse.
     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.
     * @returns {number}
     */


    Internationalization.prototype.parseNumber = function (value, option) {
      return this.getNumberParser(option)(value);
    };
    /**
     * Returns Native Date Time Pattern
     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.
     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.
     * @returns {string}
     * @private
     */


    Internationalization.prototype.getDatePattern = function (option, isExcelFormat) {
      return _intlBase.IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);
    };
    /**
     * Returns Native Number Pattern
     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.
     * @returns {string}
     * @private
     */


    Internationalization.prototype.getNumberPattern = function (option) {
      return _intlBase.IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData);
    };
    /**
     * Returns the First Day of the Week
     * @returns {number}
     */


    Internationalization.prototype.getFirstDayOfWeek = function () {
      return _intlBase.IntlBase.getWeekData(this.getCulture(), cldrData);
    };

    Internationalization.prototype.getCulture = function () {
      return this.culture || defaultCulture;
    };

    return Internationalization;
  }();

  _exports.Internationalization = Internationalization;

  /**
   * Set the default culture to all EJ2 components
   * @param {string} cultureName - Specifies the culture name to be set as default culture.
   */
  function setCulture(cultureName) {
    _exports.defaultCulture = defaultCulture = cultureName;
    onIntlChange.notify('notifyExternalChange', {
      'locale': defaultCulture
    });
  }
  /**
   * Set the default currency code to all EJ2 components
   * @param {string} currencyCode Specifies the culture name to be set as default culture.
   * @returns {void}
   */


  function setCurrencyCode(currencyCode) {
    _exports.defaultCurrencyCode = defaultCurrencyCode = currencyCode;
    onIntlChange.notify('notifyExternalChange', {
      'currencyCode': defaultCurrencyCode
    });
  }
  /**
   * Load the CLDR data into context
   * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.
   * @returns {void}
   */


  function loadCldr() {
    var data = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      data[_i] = arguments[_i];
    }

    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
      var obj = data_1[_a];
      (0, _util.extend)(cldrData, obj, {}, true);
    }
  }
  /**
   * To enable or disable RTL functionality for all components globally.
   * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.
   * @returns {void}
   */


  function enableRtl(status) {
    if (status === void 0) {
      status = true;
    }

    _exports.rightToLeft = rightToLeft = status;
    onIntlChange.notify('notifyExternalChange', {
      enableRtl: rightToLeft
    });
  }
  /**
   * To get the numeric CLDR object for given culture
   * @param {string} locale - Specifies the locale for which numericObject to be returned.
   * @ignore
   * @private
   */


  function getNumericObject(locale, type) {
    /* tslint:disable no-any */
    var numObject = _intlBase.IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];

    var dateObject = _intlBase.IntlBase.getDependables(cldrData, locale, '')[mapper[1]];

    var numSystem = (0, _util.getValue)('defaultNumberingSystem', numObject);
    var symbPattern = (0, _util.getValue)('symbols-numberSystem-' + numSystem, numObject);

    var pattern = _intlBase.IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);

    return (0, _util.extend)(symbPattern, _intlBase.IntlBase.getFormatData(pattern, true, '', true), {
      'dateSeparator': _intlBase.IntlBase.getDateSeparator(dateObject)
    });
  }
  /**
   * To get the numeric CLDR  number base object for given culture
   * @param {string} locale - Specifies the locale for which numericObject to be returned.
   * @param {string} currency - Specifies the currency for which numericObject to be returned.
   * @ignore
   * @private
   */


  function getNumberDependable(locale, currency) {
    var numObject = _intlBase.IntlBase.getDependables(cldrData, locale, '', true);

    return _intlBase.IntlBase.getCurrencySymbol(numObject.numericObject, currency);
  }
  /**
   * To get the default date CLDR object.
   * @ignore
   * @private
   */


  function getDefaultDateObject(mode) {
    return _intlBase.IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];
  }
});;
define('@syncfusion/ej2-base/src/intl/date-formatter',["exports", "./parser-base", "./intl-base", "../util", "../hijri-parser"], function (_exports, _parserBase, _intlBase, _util, _hijriParser) {
  "use strict";

  _exports.__esModule = true;
  _exports.DateFormat = _exports.datePartMatcher = _exports.basicPatterns = void 0;
  var abbreviateRegexGlobal = /\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|K|cccc|ccc|G+|z+/gi;
  var standalone = 'stand-alone';
  var weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
  var basicPatterns = ['short', 'medium', 'long', 'full'];
  _exports.basicPatterns = basicPatterns;
  var timeSetter = {
    m: 'getMinutes',
    h: 'getHours',
    H: 'getHours',
    s: 'getSeconds',
    d: 'getDate',
    f: 'getMilliseconds'
  };
  var datePartMatcher = {
    'M': 'month',
    'd': 'day',
    'E': 'weekday',
    'c': 'weekday',
    'y': 'year',
    'm': 'minute',
    'h': 'hour',
    'H': 'hour',
    's': 'second',
    'L': 'month',
    'a': 'designator',
    'z': 'timeZone',
    'Z': 'timeZone',
    'G': 'era',
    'f': 'milliseconds'
  };
  _exports.datePartMatcher = datePartMatcher;
  var timeSeparator = 'timeSeparator';
  /* tslint:disable no-any */

  /**
   * Date Format is a framework provides support for date formatting.
   * @private
   */

  var DateFormat =
  /** @class */
  function () {
    function DateFormat() {}
    /**
     * Returns the formatter function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} - Specific the format in which date  will format.
     * @param {cldr} - Specifies the global cldr data collection.
     * @return Function.
     */


    DateFormat.dateFormat = function (culture, option, cldr) {
      var _this = this;

      var dependable = _intlBase.IntlBase.getDependables(cldr, culture, option.calendar);

      var formatOptions = {
        isIslamic: _intlBase.IntlBase.islamicRegex.test(option.calendar)
      };

      if ((0, _util.isBlazor)() && option.isServerRendered) {
        option = _intlBase.IntlBase.compareBlazorDateFormats(option, culture);
      }

      var resPattern = option.format || _intlBase.IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type);

      formatOptions.dateSeperator = _intlBase.IntlBase.getDateSeparator(dependable.dateObject);

      if ((0, _util.isUndefined)(resPattern)) {
        (0, _util.throwError)('Format options or type given must be invalid');
      } else {
        formatOptions.pattern = resPattern;
        formatOptions.numMapper = _parserBase.ParserBase.getNumberMapper(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr));
        var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];

        for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {
          var str = patternMatch_1[_i];
          var len = str.length;
          var char = str[0];

          if (char === 'K') {
            char = 'h';
          }
          /* tslint:disable no-any */


          var charKey = datePartMatcher[char];

          switch (char) {
            case 'E':
            case 'c':
              formatOptions.weekday = dependable.dateObject[_intlBase.IntlBase.days][standalone][_intlBase.IntlBase.monthIndex[len]];
              break;

            case 'M':
            case 'L':
              formatOptions.month = dependable.dateObject[_intlBase.IntlBase.month][standalone][_intlBase.IntlBase.monthIndex[len]];
              break;

            case 'a':
              formatOptions.designator = (0, _util.getValue)('dayPeriods.format.wide', dependable.dateObject);
              break;

            case 'G':
              var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';
              formatOptions.era = (0, _util.getValue)('eras.' + eText, dependable.dateObject);
              break;

            case 'z':
              formatOptions.timeZone = (0, _util.getValue)('dates.timeZoneNames', dependable.parserObject);
              break;
          }
        }
      }

      return function (value) {
        if (isNaN(value.getDate())) {
          return null;
        }

        return _this.intDateFormatter(value, formatOptions);
      };
    };
    /**
     * Returns formatted date string based on options passed.
     * @param {Date} value
     * @param {FormatOptions} options
     */
    // tslint:disable-next-line:max-func-body-length


    DateFormat.intDateFormatter = function (value, options) {
      var pattern = options.pattern;
      var ret = '';
      var matches = pattern.match(_intlBase.IntlBase.dateParseRegex);
      var dObject = this.getCurrentDateValue(value, options.isIslamic);

      for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
        var match = matches_1[_i];
        var length_1 = match.length;
        var char = match[0];

        if (char === 'K') {
          char = 'h';
        }

        var curval = void 0;
        var curvalstr = '';
        var isNumber = void 0;
        var processNumber = void 0;
        var curstr = '';

        switch (char) {
          case 'M':
          case 'L':
            curval = dObject.month;

            if (length_1 > 2) {
              ret += options.month[curval];
            } else {
              isNumber = true;
            }

            break;

          case 'E':
          case 'c':
            ret += options.weekday[weekdayKey[value.getDay()]];
            break;

          case 'H':
          case 'h':
          case 'm':
          case 's':
          case 'd':
          case 'f':
            isNumber = true;

            if (char === 'd') {
              curval = dObject.date;
            } else if (char === 'f') {
              isNumber = false;
              processNumber = true;
              curvalstr = value[timeSetter[char]]().toString();
              curvalstr = curvalstr.substring(0, length_1);
              var curlength = curvalstr.length;

              if (length_1 !== curlength) {
                if (length_1 > 3) {
                  continue;
                }

                for (var i = 0; i < length_1 - curlength; i++) {
                  curvalstr = '0' + curvalstr.toString();
                }
              }

              curstr += curvalstr;
            } else {
              curval = value[timeSetter[char]]();
            }

            if (char === 'h') {
              curval = curval % 12 || 12;
            }

            break;

          case 'y':
            processNumber = true;
            curstr += dObject.year;

            if (length_1 === 2) {
              curstr = curstr.substr(curstr.length - 2);
            }

            break;

          case 'a':
            var desig = value.getHours() < 12 ? 'am' : 'pm';
            ret += options.designator[desig];
            break;

          case 'G':
            var dec = value.getFullYear() < 0 ? 0 : 1;
            var retu = options.era[dec];

            if ((0, _util.isNullOrUndefined)(retu)) {
              retu = options.era[dec ? 0 : 1];
            }

            ret += retu || '';
            break;

          case '\'':
            ret += match === '\'\'' ? '\'' : match.replace(/\'/g, '');
            break;

          case 'z':
            var timezone = value.getTimezoneOffset();
            var pattern_1 = length_1 < 4 ? '+H;-H' : options.timeZone.hourFormat;
            pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);

            if (timezone === 0) {
              ret += options.timeZone.gmtZeroFormat;
            } else {
              processNumber = true;
              curstr = this.getTimeZoneValue(timezone, pattern_1);
            }

            curstr = options.timeZone.gmtFormat.replace(/\{0\}/, curstr);
            break;

          case ':':
            ret += options.numMapper.numberSymbols[timeSeparator];
            /* tslint:enable no-any */

            break;

          case '/':
            ret += options.dateSeperator;
            break;

          default:
            ret += match;
        }

        if (isNumber) {
          processNumber = true;
          curstr = this.checkTwodigitNumber(curval, length_1);
        }

        if (processNumber) {
          ret += _parserBase.ParserBase.convertValueParts(curstr, _intlBase.IntlBase.latnParseRegex, options.numMapper.mapper);
        }
      }

      return ret;
    };

    DateFormat.getCurrentDateValue = function (value, isIslamic) {
      if (isIslamic) {
        return _hijriParser.HijriParser.getHijriDate(value);
      }

      return {
        year: value.getFullYear(),
        month: value.getMonth() + 1,
        date: value.getDate()
      };
    };
    /**
     * Returns two digit numbers for given value and length
     */


    DateFormat.checkTwodigitNumber = function (val, len) {
      var ret = val + '';

      if (len === 2 && ret.length !== 2) {
        return '0' + ret;
      }

      return ret;
    };
    /**
     * Returns the value of the Time Zone.
     * @param {number} tVal
     * @param {string} pattern
     * @private
     */


    DateFormat.getTimeZoneValue = function (tVal, pattern) {
      var _this = this;

      var splt = pattern.split(';');
      var curPattern = splt[tVal > 0 ? 1 : 0];
      var no = Math.abs(tVal);
      return curPattern = curPattern.replace(/HH?|mm/g, function (str) {
        var len = str.length;
        var ishour = str.indexOf('H') !== -1;
        return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);
      });
    };

    return DateFormat;
  }();

  _exports.DateFormat = DateFormat;
});;
define('@syncfusion/ej2-base/src/intl/date-parser',["exports", "./intl-base", "./parser-base", "../util", "./date-formatter", "../hijri-parser"], function (_exports, _intlBase, _parserBase, _util, _dateFormatter, _hijriParser) {
  "use strict";

  _exports.__esModule = true;
  _exports.DateParser = void 0;
  var number = 'numbers';
  var defNoSystem = 'defaultNumberingSystem';
  var noSystem = 'numberingSystem';
  var standalone = 'stand-alone';
  var curWeekDay = 'curWeekDay';
  var latnRegex = /^[0-9]*$/;
  var abbreviateRegex = /\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|ccc/;
  var timeSetter = {
    minute: 'setMinutes',
    hour: 'setHours',
    second: 'setSeconds',
    day: 'setDate',
    month: 'setMonth',
    milliseconds: 'setMilliseconds'
  };
  var month = 'months';
  /* tslint:disable no-any */

  /**
   * Date Parser.
   * @private
   */

  var DateParser =
  /** @class */
  function () {
    function DateParser() {}
    /**
     * Returns the parser function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.
     * @param {cldr} - Specifies the global cldr data collection.
     *  @return Function.
     */
    // tslint:disable-next-line:max-func-body-length


    DateParser.dateParser = function (culture, option, cldr) {
      var _this = this;

      var dependable = _intlBase.IntlBase.getDependables(cldr, culture, option.calendar);

      var numOptions = _parserBase.ParserBase.getCurrentNumericOptions(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr));

      var parseOptions = {};

      if ((0, _util.isBlazor)() && option.isServerRendered) {
        option = _intlBase.IntlBase.compareBlazorDateFormats(option, culture);
      }

      var resPattern = option.format || _intlBase.IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type);

      var regexString = '';
      var hourOnly;

      if ((0, _util.isUndefined)(resPattern)) {
        (0, _util.throwError)('Format options or type given must be invalid');
      } else {
        parseOptions = {
          isIslamic: _intlBase.IntlBase.islamicRegex.test(option.calendar),
          pattern: resPattern,
          evalposition: {}
        };
        var patternMatch = resPattern.match(_intlBase.IntlBase.dateParseRegex) || [];
        var length_1 = patternMatch.length;
        var gmtCorrection = 0;
        var zCorrectTemp = 0;
        var isgmtTraversed = false;
        var nRegx = numOptions.numericRegex;

        var numMapper = _parserBase.ParserBase.getNumberMapper(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr));

        for (var i = 0; i < length_1; i++) {
          var str = patternMatch[i];
          var len = str.length;
          var char = str[0] === 'K' ? 'h' : str[0];
          var isNumber = void 0;
          var canUpdate = void 0;
          var charKey = _dateFormatter.datePartMatcher[char];
          var optional = len === 2 ? '' : '?';

          if (isgmtTraversed) {
            gmtCorrection = zCorrectTemp;
            isgmtTraversed = false;
          }

          switch (char) {
            case 'E':
            case 'c':
              // tslint:disable-next-line
              var weekObject = _parserBase.ParserBase.reverseObject(dependable.dateObject[_intlBase.IntlBase.days][standalone][_intlBase.IntlBase.monthIndex[len]]);

              regexString += '(' + Object.keys(weekObject).join('|') + ')';
              break;

            case 'M':
            case 'L':
            case 'd':
            case 'm':
            case 's':
            case 'h':
            case 'H':
            case 'f':
              canUpdate = true;

              if ((char === 'M' || char === 'L') && len > 2) {
                // tslint:disable-next-line
                parseOptions[charKey] = _parserBase.ParserBase.reverseObject(dependable.dateObject[month][standalone][_intlBase.IntlBase.monthIndex[len]]);
                /* tslint:disable no-any */

                regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
              } else if (char === 'f') {
                if (len > 3) {
                  continue;
                }

                isNumber = true;
                regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';
              } else {
                isNumber = true;
                regexString += '(' + nRegx + nRegx + optional + ')';
              }

              if (char === 'h') {
                parseOptions.hour12 = true;
              }

              break;

            case 'y':
              canUpdate = isNumber = true;

              if (len === 2) {
                regexString += '(' + nRegx + nRegx + ')';
              } else {
                regexString += '(' + nRegx + '{' + len + ',})';
              }

              break;

            case 'a':
              canUpdate = true;
              parseOptions[charKey] = _parserBase.ParserBase.reverseObject((0, _util.getValue)('dayPeriods.format.wide', dependable.dateObject));
              regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
              break;

            case 'G':
              canUpdate = true;
              var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';
              parseOptions[charKey] = _parserBase.ParserBase.reverseObject((0, _util.getValue)('eras.' + eText, dependable.dateObject));
              regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';
              break;

            case 'z':
              var tval = new Date().getTimezoneOffset();
              canUpdate = tval !== 0;
              parseOptions[charKey] = (0, _util.getValue)('dates.timeZoneNames', dependable.parserObject);
              var tzone = parseOptions[charKey];
              hourOnly = len < 4;
              var hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;
              hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);
              regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';
              isgmtTraversed = true;
              zCorrectTemp = hourOnly ? 6 : 12;
              break;

            case '\'':
              var iString = str.replace(/\'/g, '');
              regexString += '(' + iString + ')?';
              break;

            default:
              regexString += '([\\D])';
              break;
          }

          if (canUpdate) {
            parseOptions.evalposition[charKey] = {
              isNumber: isNumber,
              pos: i + 1 + gmtCorrection,
              hourOnly: hourOnly
            };
          }

          if (i === length_1 - 1 && !(0, _util.isNullOrUndefined)(regexString)) {
            parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');
          }
        }
      }

      return function (value) {
        var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);

        if ((0, _util.isNullOrUndefined)(parsedDateParts) || !Object.keys(parsedDateParts).length) {
          return null;
        }

        if (parseOptions.isIslamic) {
          var dobj = {};
          var tYear = parsedDateParts.year;
          var tDate = parsedDateParts.day;
          var tMonth = parsedDateParts.month;
          var ystrig = tYear ? tYear + '' : '';
          var is2DigitYear = ystrig.length === 2;

          if (!tYear || !tMonth || !tDate || is2DigitYear) {
            dobj = _hijriParser.HijriParser.getHijriDate(new Date());
          }

          if (is2DigitYear) {
            tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);
          } // tslint:disable-next-line


          var dateObject = _hijriParser.HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);

          parsedDateParts.year = dateObject.getFullYear();
          parsedDateParts.month = dateObject.getMonth() + 1;
          parsedDateParts.day = dateObject.getDate();
        }

        return _this.getDateObject(parsedDateParts);
      };
    };
    /* tslint:disable */

    /**
     * Returns date object for provided date options
     * @param {DateParts} options
     * @param {Date} value
     * @returns {Date}
     */


    DateParser.getDateObject = function (options, value) {
      var res = value || new Date();
      res.setMilliseconds(0);
      var tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];
      var y = options.year;
      var desig = options.designator;
      var tzone = options.timeZone;

      if (!(0, _util.isUndefined)(y)) {
        var len = (y + '').length;

        if (len <= 2) {
          var century = Math.floor(res.getFullYear() / 100) * 100;
          y += century;
        }

        res.setFullYear(y);
      }

      for (var _i = 0, tKeys_1 = tKeys; _i < tKeys_1.length; _i++) {
        var key = tKeys_1[_i];
        var tValue = options[key];

        if ((0, _util.isUndefined)(tValue) && key === "day") {
          res.setDate(1);
        }

        if (!(0, _util.isUndefined)(tValue)) {
          if (key === 'month') {
            tValue -= 1;

            if (tValue < 0 || tValue > 11) {
              return new Date('invalid');
            }

            var pDate = res.getDate();
            res.setDate(1);
            res[timeSetter[key]](tValue);
            var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();
            res.setDate(pDate < lDate ? pDate : lDate);
          } else {
            if (key === 'day') {
              var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();

              if (tValue < 1 || tValue > lastDay) {
                return null;
              }
            }

            res[timeSetter[key]](tValue);
          }
        }
      }

      if (!(0, _util.isUndefined)(desig)) {
        var hour = res.getHours();

        if (desig === 'pm') {
          res.setHours(hour + (hour === 12 ? 0 : 12));
        } else if (hour === 12) {
          res.setHours(0);
        }
      }

      if (!(0, _util.isUndefined)(tzone)) {
        var tzValue = tzone - res.getTimezoneOffset();

        if (tzValue !== 0) {
          res.setMinutes(res.getMinutes() + tzValue);
        }
      }

      return res;
    };
    /**
     * Returns date parsing options for provided value along with parse and numeric options
     * @param {string} value
     * @param {ParseOptions} parseOptions
     * @param {NumericOptions} num
     * @returns {DateParts}
     */


    DateParser.internalDateParse = function (value, parseOptions, num) {
      var matches = value.match(parseOptions.parserRegex);
      var retOptions = {
        'hour': 0,
        'minute': 0,
        'second': 0
      };
      var nRegx = num.numericRegex;

      if ((0, _util.isNullOrUndefined)(matches)) {
        return null;
      } else {
        var props = Object.keys(parseOptions.evalposition);

        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
          var prop = props_1[_i];
          var curObject = parseOptions.evalposition[prop];
          var matchString = matches[curObject.pos];

          if (curObject.isNumber) {
            retOptions[prop] = this.internalNumberParser(matchString, num);
          } else {
            if (prop === 'timeZone' && !(0, _util.isUndefined)(matchString)) {
              var pos = curObject.pos;
              var val = void 0;
              var tmatch = matches[pos + 1];
              var flag = !(0, _util.isUndefined)(tmatch);

              if (curObject.hourOnly) {
                val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;
              } else {
                val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;
                val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);
              }

              if (!(0, _util.isNullOrUndefined)(val)) {
                retOptions[prop] = val;
              }
            } else {
              retOptions[prop] = parseOptions[prop][matchString];
            }
          }
        }

        if (parseOptions.hour12) {
          retOptions.hour12 = true;
        }
      }

      return retOptions;
    };
    /**
     * Returns parsed number for provided Numeric string and Numeric Options
     * @param {string} value
     * @param {NumericOptions} option
     * @returns {number}
     */


    DateParser.internalNumberParser = function (value, option) {
      value = _parserBase.ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);

      if (latnRegex.test(value)) {
        return +value;
      }

      return null;
    };
    /**
     * Returns parsed time zone RegExp for provided hour format and time zone
     * @param {string} hourFormat
     * @param {base.TimeZoneOptions} tZone
     * @param {string} nRegex
     * @returns {string}
     */


    DateParser.parseTimeZoneRegx = function (hourFormat, tZone, nRegex) {
      var pattern = tZone.gmtFormat;
      var ret;
      var result;
      var cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';
      var splitStr;
      ret = hourFormat.replace('+', '\\+');

      if (hourFormat.indexOf('HH') !== -1) {
        ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');
      } else {
        ret = ret.replace(/H|m/g, '(' + cRegex + '?)');
      }

      splitStr = ret.split(';').map(function (str) {
        return pattern.replace('{0}', str);
      });
      ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;
      return ret;
    };
    /**
     * Returns zone based value.
     * @param {boolean} flag
     * @param {string} val1
     * @param {string} val2
     * @param {NumericOptions} num
     * @returns {number}
     */


    DateParser.getZoneValue = function (flag, val1, val2, num) {
      var ival = flag ? val1 : val2;

      if (!ival) {
        return 0;
      }

      var value = this.internalNumberParser(ival, num);

      if (flag) {
        return -value;
      }

      return value;
    };

    return DateParser;
  }();
  /* tslint:enable */


  _exports.DateParser = DateParser;
});;
define('@syncfusion/ej2-base/src/intl/intl-base',["exports", "../internationalization", "../util", "./parser-base", "./date-formatter", "./number-formatter"], function (_exports, _internationalization, _util, _parserBase, _dateFormatter, _numberFormatter) {
  "use strict";

  _exports.__esModule = true;
  _exports.IntlBase = _exports.blazorCultureFormats = void 0;
  var blazorCultureFormats = {
    'en-US': {
      'd': 'M/d/y',
      'D': 'EEEE, MMMM d, y',
      'f': 'EEEE, MMMM d, y h:mm a',
      'F': 'EEEE, MMMM d, y h:mm:s a',
      'g': 'M/d/y h:mm a',
      't': 'h:mm a',
      'T': 'h:m:s a'
    }
  };
  /**
   * Date base common constants and function for date parser and formatter.
   */

  _exports.blazorCultureFormats = blazorCultureFormats;
  var IntlBase;
  _exports.IntlBase = IntlBase;

  (function (IntlBase) {
    // tslint:disable-next-line:max-line-length
    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
    var fractionRegex = /[0-9]/g;
    IntlBase.defaultCurrency = '$';
    var mapper = ['infinity', 'nan', 'group', 'decimal'];
    var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;
    var patternMatch = {
      'G': '',
      'M': 'm',
      'L': 'm',
      'H': 'h',
      'c': 'd',
      '\'': '"',
      ' a': ' AM/PM',
      'yy': 'yy',
      'y': 'yyyy',
      'EEEE': 'dddd',
      'E': 'ddd'
    };
    var defaultFirstDay = 'sun';
    IntlBase.islamicRegex = /^islamic/;
    var firstDayMapper = {
      'sun': 0,
      'mon': 1,
      'tue': 2,
      'wed': 3,
      'thu': 4,
      'fri': 5,
      'sat': 6
    };
    IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;
    IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;
    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;
    var typeMapper = {
      '$': 'isCurrency',
      '%': 'isPercent',
      '-': 'isNegative',
      0: 'nlead',
      1: 'nend'
    };
    IntlBase.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi;
    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];
    /* tslint:disable:quotemark */

    IntlBase.defaultObject = {
      'dates': {
        'calendars': {
          'gregorian': {
            'months': {
              'stand-alone': {
                'abbreviated': {
                  '1': 'Jan',
                  '2': 'Feb',
                  '3': 'Mar',
                  '4': 'Apr',
                  '5': 'May',
                  '6': 'Jun',
                  '7': 'Jul',
                  '8': 'Aug',
                  '9': 'Sep',
                  '10': 'Oct',
                  '11': 'Nov',
                  '12': 'Dec'
                },
                'narrow': {
                  '1': 'J',
                  '2': 'F',
                  '3': 'M',
                  '4': 'A',
                  '5': 'M',
                  '6': 'J',
                  '7': 'J',
                  '8': 'A',
                  '9': 'S',
                  '10': 'O',
                  '11': 'N',
                  '12': 'D'
                },
                'wide': {
                  '1': 'January',
                  '2': 'February',
                  '3': 'March',
                  '4': 'April',
                  '5': 'May',
                  '6': 'June',
                  '7': 'July',
                  '8': 'August',
                  '9': 'September',
                  '10': 'October',
                  '11': 'November',
                  '12': 'December'
                }
              }
            },
            "days": {
              "stand-alone": {
                "abbreviated": {
                  "sun": "Sun",
                  "mon": "Mon",
                  "tue": "Tue",
                  "wed": "Wed",
                  "thu": "Thu",
                  "fri": "Fri",
                  "sat": "Sat"
                },
                "narrow": {
                  "sun": "S",
                  "mon": "M",
                  "tue": "T",
                  "wed": "W",
                  "thu": "T",
                  "fri": "F",
                  "sat": "S"
                },
                "short": {
                  "sun": "Su",
                  "mon": "Mo",
                  "tue": "Tu",
                  "wed": "We",
                  "thu": "Th",
                  "fri": "Fr",
                  "sat": "Sa"
                },
                "wide": {
                  "sun": "Sunday",
                  "mon": "Monday",
                  "tue": "Tuesday",
                  "wed": "Wednesday",
                  "thu": "Thursday",
                  "fri": "Friday",
                  "sat": "Saturday"
                }
              }
            },
            "dayPeriods": {
              "format": {
                "wide": {
                  "am": "AM",
                  "pm": "PM"
                }
              }
            },
            'eras': {
              'eraNames': {
                '0': 'Before Christ',
                '0-alt-variant': 'Before Common Era',
                '1': 'Anno Domini',
                "1-alt-variant": "Common Era"
              },
              'eraAbbr': {
                '0': 'BC',
                '0-alt-variant': 'BCE',
                '1': 'AD',
                '1-alt-variant': 'CE'
              },
              'eraNarrow': {
                '0': 'B',
                '0-alt-variant': 'BCE',
                '1': 'A',
                '1-alt-variant': 'CE'
              }
            },
            'dateFormats': {
              'full': 'EEEE, MMMM d, y',
              'long': 'MMMM d, y',
              'medium': 'MMM d, y',
              'short': 'M/d/yy'
            },
            'timeFormats': {
              'full': 'h:mm:ss a zzzz',
              'long': 'h:mm:ss a z',
              'medium': 'h:mm:ss a',
              'short': 'h:mm a'
            },
            'dateTimeFormats': {
              'full': "{1} 'at' {0}",
              'long': "{1} 'at' {0}",
              'medium': '{1}, {0}',
              'short': '{1}, {0}',
              'availableFormats': {
                'd': 'd',
                'E': 'ccc',
                'Ed': 'd E',
                'Ehm': 'E h:mm a',
                'EHm': 'E HH:mm',
                'Ehms': 'E h:mm:ss a',
                'EHms': 'E HH:mm:ss',
                'Gy': 'y G',
                'GyMMM': 'MMM y G',
                'GyMMMd': 'MMM d, y G',
                'GyMMMEd': 'E, MMM d, y G',
                'h': 'h a',
                'H': 'HH',
                'hm': 'h:mm a',
                'Hm': 'HH:mm',
                'hms': 'h:mm:ss a',
                'Hms': 'HH:mm:ss',
                'hmsv': 'h:mm:ss a v',
                'Hmsv': 'HH:mm:ss v',
                'hmv': 'h:mm a v',
                'Hmv': 'HH:mm v',
                'M': 'L',
                'Md': 'M/d',
                'MEd': 'E, M/d',
                'MMM': 'LLL',
                'MMMd': 'MMM d',
                'MMMEd': 'E, MMM d',
                'MMMMd': 'MMMM d',
                'ms': 'mm:ss',
                'y': 'y',
                'yM': 'M/y',
                'yMd': 'M/d/y',
                'yMEd': 'E, M/d/y',
                'yMMM': 'MMM y',
                'yMMMd': 'MMM d, y',
                'yMMMEd': 'E, MMM d, y',
                'yMMMM': 'MMMM y'
              }
            }
          },
          "islamic": {
            "months": {
              "stand-alone": {
                "abbreviated": {
                  "1": "Muh.",
                  "2": "Saf.",
                  "3": "Rab. I",
                  "4": "Rab. II",
                  "5": "Jum. I",
                  "6": "Jum. II",
                  "7": "Raj.",
                  "8": "Sha.",
                  "9": "Ram.",
                  "10": "Shaw.",
                  "11": "Dhuʻl-Q.",
                  "12": "Dhuʻl-H."
                },
                "narrow": {
                  "1": "1",
                  "2": "2",
                  "3": "3",
                  "4": "4",
                  "5": "5",
                  "6": "6",
                  "7": "7",
                  "8": "8",
                  "9": "9",
                  "10": "10",
                  "11": "11",
                  "12": "12"
                },
                "wide": {
                  "1": "Muharram",
                  "2": "Safar",
                  "3": "Rabiʻ I",
                  "4": "Rabiʻ II",
                  "5": "Jumada I",
                  "6": "Jumada II",
                  "7": "Rajab",
                  "8": "Shaʻban",
                  "9": "Ramadan",
                  "10": "Shawwal",
                  "11": "Dhuʻl-Qiʻdah",
                  "12": "Dhuʻl-Hijjah"
                }
              }
            },
            "days": {
              "stand-alone": {
                "abbreviated": {
                  "sun": "Sun",
                  "mon": "Mon",
                  "tue": "Tue",
                  "wed": "Wed",
                  "thu": "Thu",
                  "fri": "Fri",
                  "sat": "Sat"
                },
                "narrow": {
                  "sun": "S",
                  "mon": "M",
                  "tue": "T",
                  "wed": "W",
                  "thu": "T",
                  "fri": "F",
                  "sat": "S"
                },
                "short": {
                  "sun": "Su",
                  "mon": "Mo",
                  "tue": "Tu",
                  "wed": "We",
                  "thu": "Th",
                  "fri": "Fr",
                  "sat": "Sa"
                },
                "wide": {
                  "sun": "Sunday",
                  "mon": "Monday",
                  "tue": "Tuesday",
                  "wed": "Wednesday",
                  "thu": "Thursday",
                  "fri": "Friday",
                  "sat": "Saturday"
                }
              }
            },
            "dayPeriods": {
              "format": {
                "wide": {
                  "am": "AM",
                  "pm": "PM"
                }
              }
            },
            "eras": {
              "eraNames": {
                "0": "AH"
              },
              "eraAbbr": {
                "0": "AH"
              },
              "eraNarrow": {
                "0": "AH"
              }
            },
            "dateFormats": {
              "full": "EEEE, MMMM d, y G",
              "long": "MMMM d, y G",
              "medium": "MMM d, y G",
              "short": "M/d/y GGGGG"
            },
            "timeFormats": {
              "full": "h:mm:ss a zzzz",
              "long": "h:mm:ss a z",
              "medium": "h:mm:ss a",
              "short": "h:mm a"
            },
            "dateTimeFormats": {
              "full": "{1} 'at' {0}",
              "long": "{1} 'at' {0}",
              "medium": "{1}, {0}",
              "short": "{1}, {0}",
              "availableFormats": {
                "d": "d",
                "E": "ccc",
                "Ed": "d E",
                "Ehm": "E h:mm a",
                "EHm": "E HH:mm",
                "Ehms": "E h:mm:ss a",
                "EHms": "E HH:mm:ss",
                "Gy": "y G",
                "GyMMM": "MMM y G",
                "GyMMMd": "MMM d, y G",
                "GyMMMEd": "E, MMM d, y G",
                "h": "h a",
                "H": "HH",
                "hm": "h:mm a",
                "Hm": "HH:mm",
                "hms": "h:mm:ss a",
                "Hms": "HH:mm:ss",
                "M": "L",
                "Md": "M/d",
                "MEd": "E, M/d",
                "MMM": "LLL",
                "MMMd": "MMM d",
                "MMMEd": "E, MMM d",
                "MMMMd": "MMMM d",
                "ms": "mm:ss",
                "y": "y G",
                "yyyy": "y G",
                "yyyyM": "M/y GGGGG",
                "yyyyMd": "M/d/y GGGGG",
                "yyyyMEd": "E, M/d/y GGGGG",
                "yyyyMMM": "MMM y G",
                "yyyyMMMd": "MMM d, y G",
                "yyyyMMMEd": "E, MMM d, y G",
                "yyyyMMMM": "MMMM y G",
                "yyyyQQQ": "QQQ y G",
                "yyyyQQQQ": "QQQQ y G"
              }
            }
          }
        },
        'timeZoneNames': {
          "hourFormat": "+HH:mm;-HH:mm",
          "gmtFormat": "GMT{0}",
          "gmtZeroFormat": "GMT"
        }
      },
      'numbers': {
        'currencies': {
          'USD': {
            'displayName': 'US Dollar',
            'symbol': '$',
            'symbol-alt-narrow': '$'
          },
          'EUR': {
            'displayName': 'Euro',
            'symbol': '€',
            'symbol-alt-narrow': '€'
          },
          'GBP': {
            'displayName': 'British Pound',
            'symbol-alt-narrow': '£'
          }
        },
        'defaultNumberingSystem': 'latn',
        'minimumGroupingDigits': '1',
        'symbols-numberSystem-latn': {
          'decimal': '.',
          'group': ',',
          'list': ';',
          'percentSign': '%',
          'plusSign': '+',
          'minusSign': '-',
          'exponential': 'E',
          'superscriptingExponent': '×',
          'perMille': '‰',
          'infinity': '∞',
          'nan': 'NaN',
          'timeSeparator': ':'
        },
        'decimalFormats-numberSystem-latn': {
          'standard': '#,##0.###'
        },
        'percentFormats-numberSystem-latn': {
          'standard': '#,##0%'
        },
        'currencyFormats-numberSystem-latn': {
          'standard': '¤#,##0.00',
          'accounting': '¤#,##0.00;(¤#,##0.00)'
        },
        'scientificFormats-numberSystem-latn': {
          'standard': '#E0'
        }
      }
    };
    /* tslint:enable:quotemark */

    IntlBase.monthIndex = {
      3: 'abbreviated',
      4: 'wide',
      5: 'narrow',
      1: 'abbreviated'
    };
    /**
     *
     */

    IntlBase.month = 'months';
    IntlBase.days = 'days';
    /**
     * Default numerber Object
     */

    IntlBase.patternMatcher = {
      C: 'currency',
      P: 'percent',
      N: 'decimal',
      A: 'currency',
      E: 'scientific'
    };
    /**
     * Returns the resultant pattern based on the skeleton, dateObject and the type provided
     * @private
     * @param {string} skeleton
     * @param {Object} dateObject
     * @param {string} type
     * @returns {string}
     */

    function getResultantPattern(skeleton, dateObject, type, isIslamic) {
      var resPattern;
      var iType = type || 'date';

      if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {
        resPattern = (0, _util.getValue)(iType + 'Formats.' + skeleton, dateObject);

        if (iType === 'dateTime') {
          var dPattern = (0, _util.getValue)('dateFormats.' + skeleton, dateObject);
          var tPattern = (0, _util.getValue)('timeFormats.' + skeleton, dateObject);
          resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);
        }
      } else {
        resPattern = (0, _util.getValue)('dateTimeFormats.availableFormats.' + skeleton, dateObject);
      }

      if ((0, _util.isUndefined)(resPattern) && skeleton === 'yMd') {
        resPattern = 'M/d/y';
      }

      return resPattern;
    }

    IntlBase.getResultantPattern = getResultantPattern;
    /**
     * Returns the dependable object for provided cldr data and culture
     * @private
     * @param {Object} cldr
     * @param {string} culture
     * @param {boolean} isNumber
     * @returns {Dependables}
     */

    function getDependables(cldr, culture, mode, isNumber) {
      var ret = {};
      var calendartype = mode || 'gregorian';
      ret.parserObject = _parserBase.ParserBase.getMainObject(cldr, culture) || IntlBase.defaultObject;

      if (isNumber) {
        ret.numericObject = (0, _util.getValue)('numbers', ret.parserObject);
      } else {
        ret.dateObject = (0, _util.getValue)('dates.calendars.' + calendartype, ret.parserObject);
      }

      return ret;
    }

    IntlBase.getDependables = getDependables;
    /**
     * Returns the symbol pattern for provided parameters
     * @private
     * @param {string} type
     * @param {string} numSystem
     * @param {Object} obj
     * @param {boolean} isAccount
     * @returns {string}
     */

    function getSymbolPattern(type, numSystem, obj, isAccount) {
      return (0, _util.getValue)(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? (0, _util.getValue)(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');
    }

    IntlBase.getSymbolPattern = getSymbolPattern;

    function compareBlazorDateFormats(formatOptions, culture) {
      var format = formatOptions.format || formatOptions.skeleton;
      var curFormatMapper = (0, _util.getValue)((culture || 'en-US') + '.' + format, blazorCultureFormats);

      if (!curFormatMapper) {
        curFormatMapper = (0, _util.getValue)('en-US.' + format, blazorCultureFormats);
      }

      if (curFormatMapper) {
        formatOptions.format = curFormatMapper.replace(/tt/, 'a');
      }

      return formatOptions;
    }

    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;
    /**
     * Returns proper numeric skeleton
     * @private
     * @param {string} skeleton
     * @returns {NumericSkeleton}
     */

    function getProperNumericSkeleton(skeleton) {
      var matches = skeleton.match(IntlBase.formatRegex);
      var ret = {};
      var pattern = matches[1].toUpperCase();
      ret.isAccount = pattern === 'A';
      /* tslint:disable no-any */

      ret.type = IntlBase.patternMatcher[pattern];

      if (skeleton.length > 1) {
        ret.fractionDigits = parseInt(matches[2], 10);
      }

      return ret;
    }

    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;
    /**
     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,
     * @private
     * @param {string} pattern
     * @param {boolean} needFraction
     * @param {string} cSymbol
     * @param {boolean} fractionOnly
     * @returns {NegativeData}
     */

    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {
      var nData = fractionOnly ? {} : {
        nlead: '',
        nend: ''
      };
      var match = pattern.match(IntlBase.customRegex);

      if (match) {
        if (!fractionOnly) {
          nData.nlead = changeCurrencySymbol(match[1], cSymbol);
          nData.nend = changeCurrencySymbol(match[10], cSymbol);
          nData.groupPattern = match[4];
        }

        var fraction = match[7];

        if (fraction && needFraction) {
          var fmatch = fraction.match(fractionRegex);

          if (!(0, _util.isNullOrUndefined)(fmatch)) {
            nData.minimumFraction = fmatch.length;
          } else {
            nData.minimumFraction = 0;
          }

          nData.maximumFraction = fraction.length - 1;
        }
      }

      return nData;
    }

    IntlBase.getFormatData = getFormatData;
    /**
     * Changes currency symbol
     * @private
     * @param {string} val
     * @param {string} sym
     * @returns {string}
     */

    function changeCurrencySymbol(val, sym) {
      if (val) {
        return val.replace(IntlBase.defaultCurrency, sym);
      }

      return '';
    }
    /**
     * Returns currency symbol based on currency code
     * @private
     * @param {Object} numericObject
     * @param {string} currencyCode
     * @returns {string}
     */


    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {
      var symbol = altSymbol ? '.' + altSymbol : '.symbol';
      var getCurrency = (0, _util.getValue)('currencies.' + currencyCode + symbol, numericObject) || (0, _util.getValue)('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';
      return getCurrency;
    }

    IntlBase.getCurrencySymbol = getCurrencySymbol;
    /**
     * Returns formatting options for custom number format
     * @private
     * @param {string} format
     * @param {CommonOptions} dOptions
     * @param {Dependables} obj
     * @returns {GenericFormatOptions}
     */

    function customFormat(format, dOptions, obj) {
      var options = {};
      var formatSplit = format.split(';');
      var data = ['pData', 'nData', 'zeroData'];

      for (var i = 0; i < formatSplit.length; i++) {
        options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);
      }

      if ((0, _util.isNullOrUndefined)(options.nData)) {
        options.nData = (0, _util.extend)({}, options.pData);
        options.nData.nlead = (0, _util.isNullOrUndefined)(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;
      }

      return options;
    }

    IntlBase.customFormat = customFormat;
    /**
     * Returns custom formatting options
     * @private
     * @param {string} format
     * @param {CommonOptions} dOptions
     * @param {Object} numObject
     * @returns {NegativeData}
     */

    function customNumberFormat(format, dOptions, numObject) {
      var cOptions = {
        type: 'decimal',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      };
      var pattern = format.match(IntlBase.customRegex);

      if ((0, _util.isNullOrUndefined)(pattern) || pattern[5] === '' && format !== 'N/A') {
        cOptions.type = undefined;
      }

      cOptions.nlead = pattern[1];
      cOptions.nend = pattern[10];
      var integerPart = pattern[6];
      cOptions.useGrouping = integerPart.indexOf(',') !== -1;
      integerPart = integerPart.replace(/,/g, '');
      var fractionPart = pattern[7];

      if (integerPart.indexOf('0') !== -1) {
        cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');
      }

      if (!(0, _util.isNullOrUndefined)(fractionPart)) {
        cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');
        cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');

        if (cOptions.minimumFractionDigits === -1) {
          cOptions.minimumFractionDigits = 0;
        }

        if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {
          cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;
        }
      }

      if (!(0, _util.isNullOrUndefined)(dOptions)) {
        (0, _util.extend)(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));

        if (!cOptions.isCurrency) {
          (0, _util.extend)(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));
        }
      } else {
        (0, _util.extend)(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));
      }

      if (!(0, _util.isNullOrUndefined)(numObject)) {
        var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);

        if (cOptions.useGrouping) {
          cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];
          cOptions.groupData = _numberFormatter.NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);
        }

        cOptions.nlead = cOptions.nlead.replace(/\'/g, '');
        cOptions.nend = cOptions.nend.replace(/\'/g, '');
      }

      return cOptions;
    }
    /**
     * Returns formatting options for currency or percent type
     * @private
     * @param {string[]} parts
     * @param {string} actual
     * @param {string} symbol
     * @returns {NegativeData}
     */


    function isCurrencyPercent(parts, actual, symbol) {
      var options = {
        nlead: parts[0],
        nend: parts[1]
      };

      for (var i = 0; i < 2; i++) {
        var part = parts[i];
        var loc = part.indexOf(actual);

        if (loc !== -1 && (loc < part.indexOf('\'') || loc > part.lastIndexOf('\''))) {
          options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);
          options[typeMapper[actual]] = true;
          options.type = options.isCurrency ? 'currency' : 'percent';
          break;
        }
      }

      return options;
    }

    IntlBase.isCurrencyPercent = isCurrencyPercent;
    /**
     * Returns culture based date separator
     * @private
     * @param {Object} dateObj
     * @returns {string}
     */

    function getDateSeparator(dateObj) {
      var value = ((0, _util.getValue)('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
      return value ? value[1] : '/';
    }

    IntlBase.getDateSeparator = getDateSeparator;
    /**
     * Returns Native Date Time pattern
     * @private
     * @param {string} culture
     * @param {DateFormatOptions} options
     * @param {Object} cldr
     * @returns {string}
     */

    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {
      var dependable = getDependables(cldr, culture, options.calendar);

      if ((0, _util.isBlazor)()) {
        options = compareBlazorDateFormats(options, culture);
      }

      var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);

      if (isExcelFormat) {
        actualPattern = actualPattern.replace(patternRegex, function (pattern) {
          return patternMatch[pattern];
        });

        if (actualPattern.indexOf('z') !== -1) {
          var tLength = actualPattern.match(/z/g).length;
          var timeZonePattern = void 0;
          var options_1 = {
            'timeZone': {}
          };
          options_1.numMapper = _parserBase.ParserBase.getNumberMapper(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr));
          options_1.timeZone = (0, _util.getValue)('dates.timeZoneNames', dependable.parserObject);
          var value = new Date();
          var timezone = value.getTimezoneOffset();
          var pattern = tLength < 4 ? '+H;-H' : options_1.timeZone.hourFormat;
          pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);

          if (timezone === 0) {
            timeZonePattern = options_1.timeZone.gmtZeroFormat;
          } else {
            timeZonePattern = _dateFormatter.DateFormat.getTimeZoneValue(timezone, pattern);
            timeZonePattern = options_1.timeZone.gmtFormat.replace(/\{0\}/, timeZonePattern);
          }

          actualPattern = actualPattern.replace(/[z]+/, '"' + timeZonePattern + '"');
        }

        actualPattern = actualPattern.replace(/ $/, '');
      }

      return actualPattern;
    }

    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;
    /**
     * Returns Native Number pattern
     * @private
     * @param {string} culture
     * @param {NumberFormatOptions} options
     * @param {Object} cldr
     * @returns {string}
     */

    function getActualNumberFormat(culture, options, cldr) {
      var dependable = getDependables(cldr, culture, '', true);
      var parseOptions = {
        custom: true
      };
      var minFrac;
      var curObj = {};
      var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);

      if (curMatch) {
        var dOptions = {};
        dOptions.numberMapper = _parserBase.ParserBase.getNumberMapper(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr), true);
        var curCode = getCurrencySymbol(dependable.numericObject, options.currency || _internationalization.defaultCurrencyCode, options.altSymbol);
        var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));
        symbolPattern = symbolPattern.replace(/\u00A4/g, curCode);
        var split = symbolPattern.split(';');
        curObj.hasNegativePattern = split.length > 1;
        curObj.nData = getFormatData(split[1] || '-' + split[0], true, curCode);
        curObj.pData = getFormatData(split[0], false, curCode);

        if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {
          minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;
        }
      }

      var actualPattern;

      if (IntlBase.formatRegex.test(options.format) || !options.format) {
        (0, _util.extend)(parseOptions, getProperNumericSkeleton(options.format || 'N'));
        parseOptions.custom = false;
        actualPattern = '###0';

        if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {
          var defaultMinimum = 0;

          if (parseOptions.fractionDigits) {
            options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;
          }

          actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);
        }

        if (options.minimumIntegerDigits) {
          actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);
        }

        if (options.useGrouping) {
          actualPattern = groupingPattern(actualPattern);
        }

        if (parseOptions.type === 'currency') {
          var cPattern = actualPattern;
          actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;

          if (curObj.hasNegativePattern) {
            actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;
          }
        }

        if (parseOptions.type === 'percent') {
          actualPattern += ' %';
        }
      } else {
        actualPattern = options.format.replace(/\'/g, '"');
      }

      return actualPattern;
    }

    IntlBase.getActualNumberFormat = getActualNumberFormat;

    function fractionDigitsPattern(pattern, minDigits, maxDigits) {
      pattern += '.';

      for (var a = 0; a < minDigits; a++) {
        pattern += '0';
      }

      if (minDigits < maxDigits) {
        var diff = maxDigits - minDigits;

        for (var b = 0; b < diff; b++) {
          pattern += '#';
        }
      }

      return pattern;
    }

    function minimumIntegerPattern(pattern, digits) {
      var temp = pattern.split('.');
      var integer = '';

      for (var x = 0; x < digits; x++) {
        integer += '0';
      }

      return temp[1] ? integer + '.' + temp[1] : integer;
    }

    function groupingPattern(pattern) {
      var temp = pattern.split('.');
      var integer = temp[0];
      var no = 3 - integer.length % 3;
      var hash = no && no === 1 ? '#' : no === 2 ? '##' : '';
      integer = hash + integer;
      pattern = '';

      for (var x = integer.length - 1; x > 0; x = x - 3) {
        pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;
      }

      pattern = pattern.slice(1);
      return temp[1] ? pattern + '.' + temp[1] : pattern;
    }

    function getWeekData(culture, cldr) {
      var firstDay = defaultFirstDay;
      var mapper = (0, _util.getValue)('supplemental.weekData.firstDay', cldr);
      var iCulture = culture;

      if (/en-/.test(iCulture)) {
        iCulture = iCulture.slice(3);
      }

      iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);

      if (mapper) {
        firstDay = mapper[iCulture] || defaultFirstDay;
      }

      return firstDayMapper[firstDay];
    }

    IntlBase.getWeekData = getWeekData;
  })(IntlBase || (_exports.IntlBase = IntlBase = {}));
});;
define('@syncfusion/ej2-base/src/intl/number-formatter',["exports", "../util", "../internationalization", "./intl-base", "./parser-base"], function (_exports, _util, _internationalization, _intlBase, _parserBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.NumberFormat = void 0;
  var errorText = {
    'ms': 'minimumSignificantDigits',
    'ls': 'maximumSignificantDigits',
    'mf': 'minimumFractionDigits',
    'lf': 'maximumFractionDigits'
  };
  var integerError = 'minimumIntegerDigits';
  var percentSign = 'percentSign';
  var minusSign = 'minusSign';
  var spaceRegex = /\s/;
  var mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];
  var infinity = 'infinity';
  var nan = 'nan';
  /**
   * Module for number formatting.
   * @private
   */

  var NumberFormat =
  /** @class */
  function () {
    function NumberFormat() {}
    /**
     * Returns the formatter function for given skeleton.
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} option - Specific the format in which number  will format.
     * @param {Object} object- Specifies the global cldr data collection.
     * @return Function.
     */


    NumberFormat.numberFormatter = function (culture, option, cldr) {
      var _this = this;

      var fOptions = (0, _util.extend)({}, option);
      var cOptions = {};
      var dOptions = {};
      var symbolPattern;

      var dependable = _intlBase.IntlBase.getDependables(cldr, culture, '', true);

      dOptions.numberMapper = _parserBase.ParserBase.getNumberMapper(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr), true);
      dOptions.currencySymbol = _intlBase.IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || _internationalization.defaultCurrencyCode, option.altSymbol);
      /* tslint:disable no-any */

      dOptions.percentSymbol = dOptions.numberMapper.numberSymbols[percentSign];
      dOptions.minusSymbol = dOptions.numberMapper.numberSymbols[minusSign];
      var symbols = dOptions.numberMapper.numberSymbols;

      if (option.format && !_intlBase.IntlBase.formatRegex.test(option.format)) {
        cOptions = _intlBase.IntlBase.customFormat(option.format, dOptions, dependable.numericObject);
      } else {
        (0, _util.extend)(fOptions, _intlBase.IntlBase.getProperNumericSkeleton(option.format || 'N'));
        fOptions.isCurrency = fOptions.type === 'currency';
        fOptions.isPercent = fOptions.type === 'percent';
        symbolPattern = _intlBase.IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);
        fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);
        this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);

        if (!(0, _util.isUndefined)(fOptions.fractionDigits)) {
          fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;
        }

        if ((0, _util.isUndefined)(fOptions.useGrouping)) {
          fOptions.useGrouping = true;
        }

        if (fOptions.isCurrency) {
          symbolPattern = symbolPattern.replace(/\u00A4/g, _intlBase.IntlBase.defaultCurrency);
        }

        var split = symbolPattern.split(';');
        cOptions.nData = _intlBase.IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);
        cOptions.pData = _intlBase.IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);

        if (fOptions.useGrouping) {
          fOptions.groupSeparator = symbols[mapper[2]];
          fOptions.groupData = this.getGroupingDetails(split[0]);
        }

        var minFrac = (0, _util.isUndefined)(fOptions.minimumFractionDigits);

        if (minFrac) {
          fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;
        }

        if ((0, _util.isUndefined)(fOptions.maximumFractionDigits)) {
          var mval = cOptions.nData.maximumFraction;
          fOptions.maximumFractionDigits = (0, _util.isUndefined)(mval) && fOptions.isPercent ? 0 : mval;
        }

        var mfrac = fOptions.minimumFractionDigits;
        var lfrac = fOptions.maximumFractionDigits;

        if (!(0, _util.isUndefined)(mfrac) && !(0, _util.isUndefined)(lfrac)) {
          if (mfrac > lfrac) {
            fOptions.maximumFractionDigits = mfrac;
          }
        }
      }

      (0, _util.extend)(cOptions.nData, fOptions);
      (0, _util.extend)(cOptions.pData, fOptions);
      return function (value) {
        if (isNaN(value)) {
          return symbols[mapper[1]];
        } else if (!isFinite(value)) {
          return symbols[mapper[0]];
        }

        return _this.intNumberFormatter(value, cOptions, dOptions);
      };
    };
    /**
     * Returns grouping details for the pattern provided
     * @param {string} pattern
     * @returns {GroupDetails}
     */


    NumberFormat.getGroupingDetails = function (pattern) {
      var ret = {};
      var match = pattern.match(_intlBase.IntlBase.negativeDataRegex);

      if (match && match[4]) {
        var pattern_1 = match[4];
        var p = pattern_1.lastIndexOf(',');

        if (p !== -1) {
          var temp = pattern_1.split('.')[0];
          ret.primary = temp.length - p - 1;
          var s = pattern_1.lastIndexOf(',', p - 1);

          if (s !== -1) {
            ret.secondary = p - 1 - s;
          }
        }
      }

      return ret;
    };
    /**
     * Returns if the provided integer range is valid.
     * @param {number} val1
     * @param {number} val2
     * @param {boolean} checkbothExist
     * @param {boolean} isFraction
     * @returns {boolean}
     */


    NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {
      var decide = isFraction ? 'f' : 's';
      var dint = 0;
      var str1 = errorText['l' + decide];
      var str2 = errorText['m' + decide];

      if (!(0, _util.isUndefined)(val1)) {
        this.checkRange(val1, str1, isFraction);
        dint++;
      }

      if (!(0, _util.isUndefined)(val2)) {
        this.checkRange(val2, str2, isFraction);
        dint++;
      }

      if (dint === 2) {
        if (val1 < val2) {
          (0, _util.throwError)(str2 + 'specified must be less than the' + str1);
        } else {
          return true;
        }
      } else if (checkbothExist && dint === 1) {
        (0, _util.throwError)('Both' + str2 + 'and' + str2 + 'must be present');
      }

      return false;
    };
    /**
     * Check if the provided fraction range is valid
     * @param {number} val
     * @param {string} text
     * @param {boolean} isFraction
     * @returns {void}
     */


    NumberFormat.checkRange = function (val, text, isFraction) {
      var range = isFraction ? [0, 20] : [1, 21];

      if (val < range[0] || val > range[1]) {
        (0, _util.throwError)(text + 'value must be within the range' + range[0] + 'to' + range[1]);
      }
    };
    /**
     * Returns formatted numeric string for provided formatting options
     * @param {number} value
     * @param {base.GenericFormatOptions} fOptions
     * @param {CommonOptions} dOptions
     * @returns {string}
     */


    NumberFormat.intNumberFormatter = function (value, fOptions, dOptions) {
      var curData;

      if ((0, _util.isUndefined)(fOptions.nData.type)) {
        return undefined;
      } else {
        if (value < 0) {
          value = value * -1;
          curData = fOptions.nData;
        } else if (value === 0) {
          curData = fOptions.zeroData || fOptions.pData;
        } else {
          curData = fOptions.pData;
        }

        var fValue = '';

        if (curData.isPercent) {
          value = value * 100;
        }

        if (curData.groupOne) {
          fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);
        } else {
          fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);

          if (curData.minimumIntegerDigits) {
            fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);
          }
        }

        if (curData.type === 'scientific') {
          fValue = value.toExponential(curData.maximumFractionDigits);
          fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);
        }

        fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);

        if (curData.useGrouping) {
          fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);
        }

        fValue = _parserBase.ParserBase.convertValueParts(fValue, _intlBase.IntlBase.latnParseRegex, dOptions.numberMapper.mapper);

        if (curData.nlead === 'N/A') {
          return curData.nlead;
        } else {
          return curData.nlead + fValue + curData.nend;
        }
      }
    };
    /**
     * Returns significant digits processed numeric string
     * @param {number} value
     * @param {number} min
     * @param {number} max
     * @returns {string}
     */


    NumberFormat.processSignificantDigits = function (value, min, max) {
      var temp = value + '';
      var tn;
      var length = temp.length;

      if (length < min) {
        return value.toPrecision(min);
      } else {
        temp = value.toPrecision(max);
        tn = +temp;
        return tn + '';
      }
    };
    /**
     * Returns grouped numeric string
     * @param {string} val
     * @param {number} level1
     * @param {string} sep
     * @param {string} decimalSymbol
     * @param {number} level2
     * @returns {string}
     */


    NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {
      var flag = !(0, _util.isNullOrUndefined)(level2) && level2 !== 0;
      var split = val.split(decimalSymbol);
      var prefix = split[0];
      var length = prefix.length;
      var str = '';

      while (length > level1) {
        str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');
        length -= level1;

        if (flag) {
          level1 = level2;
          flag = false;
        }
      }

      split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;
      return split.join(decimalSymbol);
    };
    /**
     * Returns fraction processed numeric string
     * @param {number} value
     * @param {number} min
     * @param {number} max
     * @returns {string}
     */


    NumberFormat.processFraction = function (value, min, max) {
      var temp = (value + '').split('.')[1];
      var length = temp ? temp.length : 0;

      if (min && length < min) {
        var ret = '';

        if (length === 0) {
          ret = value.toFixed(min);
        } else {
          ret += value;

          for (var j = 0; j < min - length; j++) {
            ret += '0';
          }

          return ret;
        }

        return value.toFixed(min);
      } else if (!(0, _util.isNullOrUndefined)(max) && (length > max || max === 0)) {
        return value.toFixed(max);
      }

      return value + '';
    };
    /**
     * Returns integer processed numeric string
     * @param {string} value
     * @param {number} min
     * @returns {string}
     */


    NumberFormat.processMinimumIntegers = function (value, min) {
      var temp = value.split('.');
      var lead = temp[0];
      var len = lead.length;

      if (len < min) {
        for (var i = 0; i < min - len; i++) {
          lead = '0' + lead;
        }

        temp[0] = lead;
      }

      return temp.join('.');
    };

    return NumberFormat;
  }();

  _exports.NumberFormat = NumberFormat;
});;
define('@syncfusion/ej2-base/src/intl/number-parser',["exports", "../util", "./parser-base", "./intl-base"], function (_exports, _util, _parserBase, _intlBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.NumberParser = void 0;
  var formatRegex = /(^[ncpa]{1})([0-1]?[0-9]|20)?$/i;
  var parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;
  var groupRegex = /,/g;
  var latnDecimalRegex = /^[0-9]*(\.[0-9]+)?$/;
  var keys = ['minusSign', 'infinity'];
  /**
   * Module for Number Parser.
   * @private
   */

  var NumberParser =
  /** @class */
  function () {
    function NumberParser() {}
    /**
     * Returns the parser function for given skeleton.
     * @param {string} -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} - Specific the format in which number  will parsed.
     * @param {cldr} - Specifies the global cldr data collection.
     * @return Function.
     */


    NumberParser.numberParser = function (culture, option, cldr) {
      var _this = this;

      var dependable = _intlBase.IntlBase.getDependables(cldr, culture, '', true);

      var parseOptions = {
        custom: true
      };
      var numOptions;

      if (_intlBase.IntlBase.formatRegex.test(option.format) || !option.format) {
        (0, _util.extend)(parseOptions, _intlBase.IntlBase.getProperNumericSkeleton(option.format || 'N'));
        parseOptions.custom = false;
      } else {
        (0, _util.extend)(parseOptions, _intlBase.IntlBase.customFormat(option.format, null, null));
      }

      numOptions = _parserBase.ParserBase.getCurrentNumericOptions(dependable.parserObject, _parserBase.ParserBase.getNumberingSystem(cldr), true);
      parseOptions.symbolRegex = _parserBase.ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch)); // tslint:disable-next-line:no-any

      parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];

      var symbolpattern = _intlBase.IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);

      if (symbolpattern) {
        symbolpattern = symbolpattern.replace(/\u00A4/g, _intlBase.IntlBase.defaultCurrency);
        var split = symbolpattern.split(';');
        parseOptions.nData = _intlBase.IntlBase.getFormatData(split[1] || '-' + split[0], true, '');
        parseOptions.pData = _intlBase.IntlBase.getFormatData(split[0], true, '');
      }

      return function (value) {
        return _this.getParsedNumber(value, parseOptions, numOptions);
      };
    };
    /**
     * Returns parsed number for the provided formatting options
     * @param {string} value
     * @param {NumericParts} options
     * @param {NumericOptions} numOptions
     * @returns {number}
     */


    NumberParser.getParsedNumber = function (value, options, numOptions) {
      var isNegative;
      var isPercent;
      var tempValue;
      var lead;
      var end;
      var ret;

      if (value.indexOf(options.infinity) !== -1) {
        return Infinity;
      } else {
        value = _parserBase.ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);
        value = _parserBase.ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);

        if (value.indexOf('.') === 0) {
          value = '0' + value;
        }

        var matches = value.match(parseRegex);

        if ((0, _util.isNullOrUndefined)(matches)) {
          return NaN;
        }

        lead = matches[1];
        tempValue = matches[2];
        var exponent = matches[5];
        end = matches[6];
        isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : lead.indexOf(options.nData.nlead) !== -1 && end.indexOf(options.nData.nend) !== -1;
        isPercent = isNegative ? options.nData.isPercent : options.pData.isPercent;
        tempValue = tempValue.replace(groupRegex, '');

        if (exponent) {
          tempValue += exponent;
        }

        ret = +tempValue;

        if (options.type === 'percent' || isPercent) {
          ret = ret / 100;
        }

        if (options.custom || options.fractionDigits) {
          ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits));
        }

        if (isNegative) {
          ret *= -1;
        }

        return ret;
      }
    };

    return NumberParser;
  }();

  _exports.NumberParser = NumberParser;
});;
define('@syncfusion/ej2-base/src/intl/parser-base',["exports", "../util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.ParserBase = void 0;

  /**
   * Parser
   */
  var defaultNumberingSystem = {
    'latn': {
      '_digits': '0123456789',
      '_type': 'numeric'
    }
  };
  var latnRegex = /^[0-9]*$/;
  var defaultNumberSymbols = {
    'decimal': '.',
    'group': ',',
    'percentSign': '%',
    'plusSign': '+',
    'minusSign': '-',
    'infinity': '∞',
    'nan': 'NaN',
    'exponential': 'E'
  };
  var latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  /**
   * Interface for parser base
   * @private
   */

  var ParserBase =
  /** @class */
  function () {
    function ParserBase() {}
    /**
     * Returns the cldr object for the culture specifies
     * @param {Object} obj - Specifies the object from which culture object to be acquired.
     * @param {string} cName - Specifies the culture name.
     * @returns {Object}
     */


    ParserBase.getMainObject = function (obj, cName) {
      return (0, _util.getValue)('main.' + cName, obj);
    };
    /**
     * Returns the numbering system object from given cldr data.
     * @param {Object} obj - Specifies the object from which number system is acquired.
     * @returns {Object}
     */


    ParserBase.getNumberingSystem = function (obj) {
      return (0, _util.getValue)('supplemental.numberingSystems', obj) || this.numberingSystems;
    };
    /**
     * Returns the reverse of given object keys or keys specified.
     * @param {Object} prop - Specifies the object to be reversed.
     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.
     * @returns {Object}
     */


    ParserBase.reverseObject = function (prop, keys) {
      var propKeys = keys || Object.keys(prop);
      var res = {};

      for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {
        var key = propKeys_1[_i];
        /* tslint:disable no-any */

        if (!res.hasOwnProperty(prop[key])) {
          res[prop[key]] = key;
        }
      }

      return res;
    };
    /**
     * Returns the symbol regex by skipping the escape sequence.
     * @param {string[]} props - Specifies the array values to be skipped.
     * @returns {RegExp}
     */


    ParserBase.getSymbolRegex = function (props) {
      var regexStr = props.map(function (str) {
        return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
      }).join('|');
      return new RegExp(regexStr, 'g');
    };

    ParserBase.getSymbolMatch = function (prop) {
      var matchKeys = Object.keys(defaultNumberSymbols);
      var ret = {};

      for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {
        var key = matchKeys_1[_i];
        ret[prop[key]] = defaultNumberSymbols[key];
      }

      return ret;
    };
    /**
     * Returns regex string for provided value
     * @param {string} val
     * @returns {string}
     */


    ParserBase.constructRegex = function (val) {
      var len = val.length;
      var ret = '';

      for (var i = 0; i < len; i++) {
        if (i !== len - 1) {
          ret += val[i] + '|';
        } else {
          ret += val[i];
        }
      }

      return ret;
    };
    /**
     * Returns the replaced value of matching regex and obj mapper.
     * @param {string} value - Specifies the  values to be replaced.
     * @param {RegExp} regex - Specifies the  regex to search.
     * @param {Object} obj - Specifies the  object matcher to be replace value parts.
     * @returns {string}
     */


    ParserBase.convertValueParts = function (value, regex, obj) {
      return value.replace(regex, function (str) {
        return obj[str];
      });
    };
    /**
     * Returns default numbering system object for formatting from cldr data
     * @param {Object} obj
     * @returns {NumericObject}
     */


    ParserBase.getDefaultNumberingSystem = function (obj) {
      var ret = {};
      ret.obj = (0, _util.getValue)('numbers', obj);
      ret.nSystem = (0, _util.getValue)('defaultNumberingSystem', ret.obj);
      return ret;
    };
    /**
     * Returns the replaced value of matching regex and obj mapper.
     */


    ParserBase.getCurrentNumericOptions = function (curObj, numberSystem, needSymbols) {
      var ret = {};
      var cur = this.getDefaultNumberingSystem(curObj);

      if (!(0, _util.isUndefined)(cur.nSystem)) {
        var digits = (0, _util.getValue)(cur.nSystem + '._digits', numberSystem);

        if (!(0, _util.isUndefined)(digits)) {
          ret.numericPair = this.reverseObject(digits, latnNumberSystem);
          ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');
          ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';

          if (needSymbols) {
            ret.numericRegex = digits[0] + '-' + digits[9];
            ret.symbolNumberSystem = (0, _util.getValue)('symbols-numberSystem-' + cur.nSystem, cur.obj);
            ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);
            ret.numberSystem = cur.nSystem;
          }
        }
      }

      return ret;
    };
    /**
     * Returns number mapper object for the provided cldr data
     * @param {Object} curObj
     * @param {Object} numberSystem
     * @param {boolean} isNumber
     * @returns {NumberMapper}
     */


    ParserBase.getNumberMapper = function (curObj, numberSystem, isNumber) {
      var ret = {
        mapper: {}
      };
      var cur = this.getDefaultNumberingSystem(curObj);

      if (!(0, _util.isUndefined)(cur.nSystem)) {
        ret.numberSystem = cur.nSystem;
        ret.numberSymbols = (0, _util.getValue)('symbols-numberSystem-' + cur.nSystem, cur.obj);
        ret.timeSeparator = (0, _util.getValue)('timeSeparator', ret.numberSymbols);
        var digits = (0, _util.getValue)(cur.nSystem + '._digits', numberSystem);

        if (!(0, _util.isUndefined)(digits)) {
          for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {
            var i = latnNumberSystem_1[_i];
            ret.mapper[i] = digits[i];
          }
        }
      }

      return ret;
    };

    ParserBase.nPair = 'numericPair';
    ParserBase.nRegex = 'numericRegex';
    ParserBase.numberingSystems = defaultNumberingSystem;
    return ParserBase;
  }();

  _exports.ParserBase = ParserBase;
});;
define('@syncfusion/ej2-base/src/keyboard',["exports", "./notify-property-change", "./base"], function (_exports, _notifyPropertyChange, _base) {
  "use strict";

  _exports.__esModule = true;
  _exports.KeyboardEvents = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var keyCode = {
    'backspace': 8,
    'tab': 9,
    'enter': 13,
    'shift': 16,
    'control': 17,
    'alt': 18,
    'pause': 19,
    'capslock': 20,
    'space': 32,
    'escape': 27,
    'pageup': 33,
    'pagedown': 34,
    'end': 35,
    'home': 36,
    'leftarrow': 37,
    'uparrow': 38,
    'rightarrow': 39,
    'downarrow': 40,
    'insert': 45,
    'delete': 46,
    'f1': 112,
    'f2': 113,
    'f3': 114,
    'f4': 115,
    'f5': 116,
    'f6': 117,
    'f7': 118,
    'f8': 119,
    'f9': 120,
    'f10': 121,
    'f11': 122,
    'f12': 123,
    'semicolon': 186,
    'plus': 187,
    'comma': 188,
    'minus': 189,
    'dot': 190,
    'forwardslash': 191,
    'graveaccent': 192,
    'openbracket': 219,
    'backslash': 220,
    'closebracket': 221,
    'singlequote': 222
  };
  /**
   * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.
   * ```html
   * <div id='testEle'>  </div>;
   * <script>
   *   let node: HTMLElement = document.querySelector('#testEle');
   *   let kbInstance = new KeyboardEvents({
   *       element: node,
   *       keyConfigs:{ selectAll : 'ctrl+a' },
   *       keyAction: function (e:KeyboardEvent, action:string) {
   *           // handler function code
   *       }
   *   });
   * </script>
   * ```
   */

  var KeyboardEvents =
  /** @class */
  function (_super) {
    __extends(KeyboardEvents, _super);
    /**
     * Initializes the KeyboardEvents
     * @param {HTMLElement} element
     * @param {KeyboardEventsModel} options
     */


    function KeyboardEvents(element, options) {
      var _this = _super.call(this, options, element) || this;
      /**
       * To handle a key press event returns null
       */


      _this.keyPressHandler = function (e) {
        var isAltKey = e.altKey;
        var isCtrlKey = e.ctrlKey;
        var isShiftKey = e.shiftKey;
        var curkeyCode = e.which;
        var keys = Object.keys(_this.keyConfigs);

        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];

          var configCollection = _this.keyConfigs[key].split(',');

          for (var _a = 0, configCollection_1 = configCollection; _a < configCollection_1.length; _a++) {
            var rconfig = configCollection_1[_a];
            var rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());

            if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {
              e.action = key;

              if (_this.keyAction) {
                _this.keyAction(e);
              }
            }
          }
        }
      };

      _this.bind();

      return _this;
    }

    KeyboardEvents_1 = KeyboardEvents;
    /**
     * Unwire bound events and destroy the instance.
     * @return {void}
     */

    KeyboardEvents.prototype.destroy = function () {
      this.unwireEvents();

      _super.prototype.destroy.call(this);
    };
    /**
     * Function can be used to specify certain action if a property is changed
     * @param newProp
     * @param oldProp
     * @returns {void}
     * @private
     */


    KeyboardEvents.prototype.onPropertyChanged = function (newProp, oldProp) {// No code are needed
    };

    ;

    KeyboardEvents.prototype.bind = function () {
      this.wireEvents();
    };
    /**
     * To get the module name, returns 'keyboard'.
     * @private
     */


    KeyboardEvents.prototype.getModuleName = function () {
      return 'keyboard';
    };
    /**
     * Wiring event handlers to events
     */


    KeyboardEvents.prototype.wireEvents = function () {
      this.element.addEventListener(this.eventName, this.keyPressHandler);
    };
    /**
     * Unwiring event handlers to events
     */


    KeyboardEvents.prototype.unwireEvents = function () {
      this.element.removeEventListener(this.eventName, this.keyPressHandler);
    };
    /**
     * To get the key configuration data
     * @param {string} config - configuration data
     * returns {KeyData}
     */


    KeyboardEvents.getKeyConfigData = function (config) {
      if (config in this.configCache) {
        return this.configCache[config];
      }

      var keys = config.toLowerCase().split('+');
      var keyData = {
        altKey: keys.indexOf('alt') !== -1 ? true : false,
        ctrlKey: keys.indexOf('ctrl') !== -1 ? true : false,
        shiftKey: keys.indexOf('shift') !== -1 ? true : false,
        keyCode: null
      };

      if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {
        keyData.keyCode = Number(keys[keys.length - 1]);
      } else {
        keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);
      }

      KeyboardEvents_1.configCache[config] = keyData;
      return keyData;
    }; // Return the keycode value as string 


    KeyboardEvents.getKeyCode = function (keyVal) {
      return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
    };

    var KeyboardEvents_1;
    KeyboardEvents.configCache = {};

    __decorate([(0, _notifyPropertyChange.Property)({})], KeyboardEvents.prototype, "keyConfigs", void 0);

    __decorate([(0, _notifyPropertyChange.Property)('keyup')], KeyboardEvents.prototype, "eventName", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], KeyboardEvents.prototype, "keyAction", void 0);

    KeyboardEvents = KeyboardEvents_1 = __decorate([_notifyPropertyChange.NotifyPropertyChanges], KeyboardEvents);
    return KeyboardEvents;
  }(_base.Base);

  _exports.KeyboardEvents = KeyboardEvents;
});;
define('@syncfusion/ej2-base/src/l10n',["exports", "./util", "./internationalization"], function (_exports, _util, _internationalization) {
  "use strict";

  _exports.__esModule = true;
  _exports.L10n = void 0;

  /**
   * L10n modules provides localized text for different culture.
   * ```typescript
   * import {setCulture} from '@syncfusion/ts-base-library';
   * //load global locale object common for all components.
   * L10n.load({
   *    'fr-BE': {
   *       'button': {
   *            'check': 'vérifié'
   *        }
   *    }
   * });
   * //set globale default locale culture.
   * setCulture('fr-BE');
   * let instance: L10n = new L10n('button', {
   *    check: 'checked'
   * });
   * //Get locale text for current property.
   * instance.getConstant('check');
   * //Change locale culture in a component.
   * instance.setLocale('en-US');
   * ```
   */
  var L10n =
  /** @class */
  function () {
    /**
     * Constructor
     */
    function L10n(controlName, localeStrings, locale) {
      this.controlName = controlName;
      this.localeStrings = localeStrings;
      this.setLocale(locale || _internationalization.defaultCulture);
    }
    /**
     * Sets the locale text
     * @param {string} locale
     * @returns {void}
     */


    L10n.prototype.setLocale = function (locale) {
      var intLocale = this.intGetControlConstant(L10n.locale, locale);
      this.currentLocale = intLocale || this.localeStrings;
    };
    /**
     * Sets the global locale for all components.
     * @param {Object} localeObject - specifies the localeObject to be set as global locale.
     */


    L10n.load = function (localeObject) {
      this.locale = (0, _util.extend)(this.locale, localeObject, {}, true);
    };
    /**
     * Returns current locale text for the property based on the culture name and control name.
     * @param {string} propertyName - specifies the property for which localize text to be returned.
     * @return string
     */


    L10n.prototype.getConstant = function (prop) {
      // Removed conditional operator because this method does not return correct value when passing 0 as value in localization
      if (!(0, _util.isNullOrUndefined)(this.currentLocale[prop])) {
        return this.currentLocale[prop];
      } else {
        return this.localeStrings[prop] || '';
      }
    };
    /**
     * Returns the control constant object for current object and the locale specified.
     * @param {Object} curObject
     * @param {string} locale
     * @returns {Object}
     */


    L10n.prototype.intGetControlConstant = function (curObject, locale) {
      if (curObject[locale]) {
        return curObject[locale][this.controlName];
      }

      return null;
    };

    L10n.locale = {};
    return L10n;
  }();

  _exports.L10n = L10n;
});;
define('@syncfusion/ej2-base/src/module-loader',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.ModuleLoader = void 0;

  /**
   * Module loading operations
   */
  var MODULE_SUFFIX = 'Module';

  var ModuleLoader =
  /** @class */
  function () {
    function ModuleLoader(parent) {
      this.loadedModules = [];
      this.parent = parent;
    }

    ;
    /**
     * Inject required modules in component library
     * @return {void}
     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required
     * @param {Function[]} moduleList - Array of modules to be injected from sample side
     */

    ModuleLoader.prototype.inject = function (requiredModules, moduleList) {
      var reqLength = requiredModules.length;

      if (reqLength === 0) {
        this.clean();
        return;
      }

      if (this.loadedModules.length) {
        this.clearUnusedModule(requiredModules);
      }

      for (var i = 0; i < reqLength; i++) {
        var modl = requiredModules[i];

        for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {
          var module = moduleList_1[_i];
          var modName = modl.member;

          if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
            var moduleObject = (0, _util.createInstance)(module, modl.args);
            var memberName = this.getMemberName(modName);

            if (modl.isProperty) {
              (0, _util.setValue)(memberName, module, this.parent);
            } else {
              (0, _util.setValue)(memberName, moduleObject, this.parent);
            }

            var loadedModule = modl;
            loadedModule.member = memberName;
            this.loadedModules.push(loadedModule);
          }
        }
      }
    };
    /**
     * To remove the created object while destroying the control
     * @return {void}
     */


    ModuleLoader.prototype.clean = function () {
      for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
        var modules = _a[_i];

        if (!modules.isProperty) {
          (0, _util.getValue)(modules.member, this.parent).destroy();
        }
      }

      this.loadedModules = [];
    };
    /**
     * Removes all unused modules
     * @param {ModuleDeclaration[]} moduleList
     * @returns {void}
     */


    ModuleLoader.prototype.clearUnusedModule = function (moduleList) {
      var _this = this;

      var usedModules = moduleList.map(function (arg) {
        return _this.getMemberName(arg.member);
      });
      var removableModule = this.loadedModules.filter(function (module) {
        return usedModules.indexOf(module.member) === -1;
      });

      for (var _i = 0, removableModule_1 = removableModule; _i < removableModule_1.length; _i++) {
        var mod = removableModule_1[_i];

        if (!mod.isProperty) {
          (0, _util.getValue)(mod.member, this.parent).destroy();
        }

        this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);
        (0, _util.deleteObject)(this.parent, mod.member);
      }
    };
    /**
     * To get the name of the member.
     * @param {string} name
     * @returns {string}
     */


    ModuleLoader.prototype.getMemberName = function (name) {
      return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;
    };
    /**
     * Returns boolean based on whether the module specified is loaded or not
     * @param {string} modName
     * @returns {boolean}
     */


    ModuleLoader.prototype.isModuleLoaded = function (modName) {
      for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
        var mod = _a[_i];

        if (mod.member === this.getMemberName(modName)) {
          return true;
        }
      }

      return false;
    };

    return ModuleLoader;
  }();

  _exports.ModuleLoader = ModuleLoader;
});;
define('@syncfusion/ej2-base/src/notify-property-change',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Property = Property;
  _exports.Complex = Complex;
  _exports.ComplexFactory = ComplexFactory;
  _exports.Collection = Collection;
  _exports.CollectionFactory = CollectionFactory;
  _exports.Event = Event;
  _exports.NotifyPropertyChanges = NotifyPropertyChanges;
  _exports.CreateBuilder = CreateBuilder;

  /**
   * Returns the Class Object
   * @param {ClassObject} instance - instance of ClassObject
   * @param {string} curKey - key of the current instance
   * @param {Object} defaultValue - default Value
   * @param {Object[]} type
   */
  function getObject(instance, curKey, defaultValue, type) {
    if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {
      instance.properties[curKey] = (0, _util.createInstance)(type, [instance, curKey, defaultValue]);
    }

    return instance.properties[curKey];
  }
  /**
   * Returns object array
   * @param {ClassObject} instance
   * @param {string} curKey
   * @param {Object[]} defaultValue
   * @param type
   * @param {boolean} isSetter
   * @returns {Object[]}
   */


  function getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {
    var result = [];
    var len = defaultValue ? defaultValue.length : 0;

    for (var i = 0; i < len; i++) {
      var curType = type;

      if (isFactory) {
        curType = type(defaultValue[i], instance);
      }

      if (isSetter) {
        var inst = (0, _util.createInstance)(curType, [instance, curKey, {}, true]);
        inst.setProperties(defaultValue[i], true);
        result.push(inst);
      } else {
        result.push((0, _util.createInstance)(curType, [instance, curKey, defaultValue[i], false]));
      }
    }

    return result;
  }
  /**
   * Returns the properties of the object
   * @param {Object} defaultValue
   * @param {string} curKey
   */


  function propertyGetter(defaultValue, curKey) {
    return function () {
      if (!this.properties.hasOwnProperty(curKey)) {
        this.properties[curKey] = defaultValue;
      }

      return this.properties[curKey];
    };
  }
  /**
   * Set the properties for the object
   * @param {Object} defaultValue
   * @param {string} curKey
   */


  function propertySetter(defaultValue, curKey) {
    return function (newValue) {
      if (this.properties[curKey] !== newValue) {
        var oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
        this.saveChanges(curKey, newValue, oldVal);
        this.properties[curKey] = newValue;
      }
    };
  }
  /**
   * Returns complex objects
   */


  function complexGetter(defaultValue, curKey, type) {
    return function () {
      return getObject(this, curKey, defaultValue, type);
    };
  }
  /**
   * Sets complex objects
   */


  function complexSetter(defaultValue, curKey, type) {
    return function (newValue) {
      getObject(this, curKey, defaultValue, type).setProperties(newValue);
    };
  }

  function complexFactoryGetter(defaultValue, curKey, type) {
    return function () {
      var curType = type({});

      if (this.properties.hasOwnProperty(curKey)) {
        return this.properties[curKey];
      } else {
        return getObject(this, curKey, defaultValue, curType);
      }
    };
  }

  function complexFactorySetter(defaultValue, curKey, type) {
    return function (newValue) {
      var curType = type(newValue, this);
      getObject(this, curKey, defaultValue, curType).setProperties(newValue);
    };
  }

  function complexArrayGetter(defaultValue, curKey, type) {
    return function () {
      var _this = this;

      if (!this.properties.hasOwnProperty(curKey)) {
        var defCollection = getObjectArray(this, curKey, defaultValue, type, false);
        this.properties[curKey] = defCollection;
      }

      var ignore = this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch || this.ignoreCollectionWatch;

      if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {
        ['push', 'pop'].forEach(function (extendFunc) {
          var descriptor = {
            value: complexArrayDefinedCallback(extendFunc, curKey, type, _this.properties[curKey]).bind(_this),
            configurable: true
          };
          Object.defineProperty(_this.properties[curKey], extendFunc, descriptor);
        });
      }

      if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {
        Object.defineProperty(this.properties[curKey], 'isComplexArray', {
          value: true
        });
      }

      return this.properties[curKey];
    };
  }

  function complexArraySetter(defaultValue, curKey, type) {
    return function (newValue) {
      this.isComplexArraySetter = true;
      var oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);
      var newValCollection = getObjectArray(this, curKey, newValue, type, true);
      this.isComplexArraySetter = false;
      this.saveChanges(curKey, newValCollection, oldValueCollection);
      this.properties[curKey] = newValCollection;
    };
  }

  function complexArrayFactorySetter(defaultValue, curKey, type) {
    return function (newValue) {
      var oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
      var newValCollection = getObjectArray(this, curKey, newValue, type, true, true);
      this.saveChanges(curKey, newValCollection, oldValueCollection);
      this.properties[curKey] = newValCollection;
    };
  }

  function complexArrayFactoryGetter(defaultValue, curKey, type) {
    return function () {
      var curType = type({});

      if (!this.properties.hasOwnProperty(curKey)) {
        var defCollection = getObjectArray(this, curKey, defaultValue, curType, false);
        this.properties[curKey] = defCollection;
      }

      return this.properties[curKey];
    };
  }

  function complexArrayDefinedCallback(dFunc, curKey, type, prop) {
    /* tslint:disable no-function-expression */
    return function () {
      var newValue = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        newValue[_i] = arguments[_i];
      }

      var keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';

      switch (dFunc) {
        case 'push':
          for (var i = 0; i < newValue.length; i++) {
            Array.prototype[dFunc].apply(prop, [newValue[i]]);
            var model_1 = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);
            this.serverDataBind(model_1, newValue[i], false, dFunc);
          }

          break;

        case 'pop':
          Array.prototype[dFunc].apply(prop);
          var model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);
          this.serverDataBind(model, {
            ejsAction: 'pop'
          }, false, dFunc);
          break;
      }

      return prop;
    };
    /* tslint:enable no-function-expression */
  }

  function getArrayModel(keyString, value, isControlParent, arrayFunction) {
    var modelObject = keyString;

    if (isControlParent) {
      modelObject = {};
      modelObject[keyString] = value;

      if (value && typeof value === 'object') {
        var action = 'ejsAction';
        modelObject[keyString][action] = arrayFunction;
      }
    }

    return modelObject;
  }
  /**
   * Method used to create property. General syntax below.
   * @param  {T} defaultValue? - Specifies the default value of property.
   * ```
   * @Property('TypeScript')
   * propertyName: Type;
   * ```
   * @private
   */


  function Property(defaultValue) {
    return function (target, key) {
      var propertyDescriptor = {
        set: propertySetter(defaultValue, key),
        get: propertyGetter(defaultValue, key),
        enumerable: true,
        configurable: true
      }; //new property creation

      Object.defineProperty(target, key, propertyDescriptor);
      addPropertyCollection(target, key, 'prop', defaultValue);
    };
  }
  /**
   * Method used to create complex property. General syntax below.
   * @param  {T} defaultValue - Specifies the default value of property.
   * @param  {Function} type - Specifies the class type of complex object.
   * ```
   * @Complex<Type>({},Type)
   * propertyName: Type;
   * ```
   * @private
   */


  function Complex(defaultValue, type) {
    return function (target, key) {
      var propertyDescriptor = {
        set: complexSetter(defaultValue, key, type),
        get: complexGetter(defaultValue, key, type),
        enumerable: true,
        configurable: true
      }; //new property creation

      Object.defineProperty(target, key, propertyDescriptor);
      addPropertyCollection(target, key, 'complexProp', defaultValue, type);
    };
  }
  /**
   * Method used to create complex Factory property. General syntax below.
   * @param  {Function} defaultType - Specifies the default value of property.
   * @param  {Function} type - Specifies the class factory type of complex object.
   * ```
   * @ComplexFactory(defaultType, factoryFunction)
   * propertyName: Type1 | Type2;
   * ```
   * @private
   */


  function ComplexFactory(type) {
    return function (target, key) {
      var propertyDescriptor = {
        set: complexFactorySetter({}, key, type),
        get: complexFactoryGetter({}, key, type),
        enumerable: true,
        configurable: true
      }; //new property creation

      Object.defineProperty(target, key, propertyDescriptor);
      addPropertyCollection(target, key, 'complexProp', {}, type);
    };
  }
  /**
   * Method used to create complex array property. General syntax below.
   * @param  {T[]} defaultValue - Specifies the default value of property.
   * @param  {Function} type - Specifies the class type of complex object.
   * ```
   * @Collection([], Type);
   * propertyName: Type;
   * ```
   * @private
   */


  function Collection(defaultValue, type) {
    return function (target, key) {
      var propertyDescriptor = {
        set: complexArraySetter(defaultValue, key, type),
        get: complexArrayGetter(defaultValue, key, type),
        enumerable: true,
        configurable: true
      }; //new property creation

      Object.defineProperty(target, key, propertyDescriptor);
      addPropertyCollection(target, key, 'colProp', defaultValue, type);
    };
  }
  /**
   * Method used to create complex factory array property. General syntax below.
   * @param  {T[]} defaultType - Specifies the default type of property.
   * @param  {Function} type - Specifies the class type of complex object.
   * ```
   * @Collection([], Type);
   * propertyName: Type;
   * ```
   * @private
   */


  function CollectionFactory(type) {
    return function (target, key) {
      var propertyDescriptor = {
        set: complexArrayFactorySetter([], key, type),
        get: complexArrayFactoryGetter([], key, type),
        enumerable: true,
        configurable: true
      }; //new property creation

      Object.defineProperty(target, key, propertyDescriptor);
      addPropertyCollection(target, key, 'colProp', {}, type);
    };
  }
  /**
   * Method used to create event property. General syntax below.
   * @param  {Function} defaultValue? - Specifies the default value of property.
   * @param  {boolean} isComplex? - Specifies the whether it is complex object.
   * ```
   * @Event(()=>{return true;})
   * ```
   * @private
   */


  function Event() {
    return function (target, key) {
      var eventDescriptor = {
        set: function (newValue) {
          var oldValue = this.properties[key];

          if (oldValue !== newValue) {
            var finalContext = getParentContext(this, key);

            if ((0, _util.isUndefined)(oldValue) === false) {
              finalContext.context.removeEventListener(finalContext.prefix, oldValue);
            }

            finalContext.context.addEventListener(finalContext.prefix, newValue);
            this.properties[key] = newValue;
          }
        },
        get: propertyGetter(undefined, key),
        enumerable: true,
        configurable: true
      };
      Object.defineProperty(target, key, eventDescriptor);
      addPropertyCollection(target, key, 'event');
    };
  }
  /**
   * NotifyPropertyChanges is triggers the call back when the property has been changed.
   *
   * ```
   *  @NotifyPropertyChanges
   * class DemoClass implements INotifyPropertyChanged {
   *
   *     @Property()
   *     property1: string;
   *
   *     dataBind: () => void;
   *
   *     constructor() { }
   *
   *     onPropertyChanged(newProp: any, oldProp: any) {
   *         // Called when property changed
   *     }
   * }
   * ```
   * @private
   */


  function NotifyPropertyChanges(classConstructor) {}
  /** Need to code */

  /**
   * Method  used to create the builderObject for the target component.
   * @private
   */


  function addPropertyCollection(target, key, propertyType, defaultValue, type) {
    if ((0, _util.isUndefined)(target.propList)) {
      target.propList = {
        props: [],
        complexProps: [],
        colProps: [],
        events: [],
        propNames: [],
        complexPropNames: [],
        colPropNames: [],
        eventNames: []
      };
    }
    /* tslint:disable no-any */


    target.propList[propertyType + 's'].push({
      propertyName: key,
      defaultValue: defaultValue,
      type: type
    });
    target.propList[propertyType + 'Names'].push(key);
    /* tslint:enable no-any */
  }
  /**
   * Returns an object containing the builder properties
   * @param {Function} component
   * @private
   */


  function getBuilderProperties(component) {
    if ((0, _util.isUndefined)(component.prototype.builderObject)) {
      component.prototype.builderObject = {
        properties: {},
        propCollections: [],
        add: function () {
          this.isPropertyArray = true;
          this.propCollections.push((0, _util.extend)({}, this.properties, {}));
        }
      };
      var rex = /complex/;

      for (var _i = 0, _a = Object.keys(component.prototype.propList); _i < _a.length; _i++) {
        var key = _a[_i];

        var _loop_1 = function (prop) {
          if (rex.test(key)) {
            component.prototype.builderObject[prop.propertyName] = function (value) {
              var childType = {};
              (0, _util.merge)(childType, getBuilderProperties(prop.type));
              value(childType);
              var tempValue;

              if (!childType.isPropertyArray) {
                tempValue = (0, _util.extend)({}, childType.properties, {});
              } else {
                tempValue = childType.propCollections;
              }

              this.properties[prop.propertyName] = tempValue;
              childType.properties = {};
              childType.propCollections = [];
              childType.isPropertyArray = false;
              return this;
            };
          } else {
            component.prototype.builderObject[prop.propertyName] = function (value) {
              this.properties[prop.propertyName] = value;
              return this;
            };
          }
        };

        for (var _b = 0, _c = component.prototype.propList[key]; _b < _c.length; _b++) {
          var prop = _c[_b];

          _loop_1(prop);
        }
      }
    }

    return component.prototype.builderObject;
  }
  /**
   * Method used to create builder for the components
   * @param {any} component -specifies the target component for which builder to be created.
   * @private
   */


  function CreateBuilder(component) {
    var builderFunction = function (element) {
      this.element = element;
      return this;
    };

    var instanceFunction = function (element) {
      if (!builderFunction.prototype.hasOwnProperty('create')) {
        builderFunction.prototype = getBuilderProperties(component);

        builderFunction.prototype.create = function () {
          var temp = (0, _util.extend)({}, {}, this.properties);
          this.properties = {};
          return new component(temp, this.element);
        };
      }

      return new builderFunction(element);
    };

    return instanceFunction;
  }
  /**
   * Returns parent options for the object
   * @param {Object} context
   * @param {string} prefix
   * @private
   */


  function getParentContext(context, prefix) {
    if (context.hasOwnProperty('parentObj') === false) {
      return {
        context: context,
        prefix: prefix
      };
    } else {
      var curText = (0, _util.getValue)('propName', context);

      if (curText) {
        prefix = curText + '-' + prefix;
      }

      return getParentContext((0, _util.getValue)('parentObj', context), prefix);
    }
  }
});;
define('@syncfusion/ej2-base/src/observer',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Observer = void 0;

  var Observer =
  /** @class */
  function () {
    function Observer(context) {
      this.ranArray = [];
      this.boundedEvents = {};

      if ((0, _util.isNullOrUndefined)(context)) {
        return;
      }

      this.context = context;
    }

    ;
    /**
     * To attach handler for given property in current context.
     * @param {string} property - specifies the name of the event.
     * @param {Function} handler - Specifies the handler function to be called while event notified.
     * @param {Object} context - Specifies the context binded to the handler.
     * @param {string} id - specifies the random generated id.
     * @return {void}
     */

    Observer.prototype.on = function (property, handler, context, id) {
      if ((0, _util.isNullOrUndefined)(handler)) {
        return;
      }

      var cntxt = context || this.context;

      if (this.notExist(property)) {
        this.boundedEvents[property] = [{
          handler: handler,
          context: cntxt
        }];
        return;
      }

      if (!(0, _util.isNullOrUndefined)(id)) {
        if (this.ranArray.indexOf(id) === -1) {
          this.ranArray.push(id);
          this.boundedEvents[property].push({
            handler: handler,
            context: cntxt,
            id: id
          });
        }
      } else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {
        this.boundedEvents[property].push({
          handler: handler,
          context: cntxt
        });
      }
    };
    /**
     * To remove handlers from a event attached using on() function.
     * @param {string} eventName - specifies the name of the event.
     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.
     * @param {string} id - specifies the random generated id.
     * @return {void}
     */


    Observer.prototype.off = function (property, handler, id) {
      if (this.notExist(property)) {
        return;
      }

      var curObject = (0, _util.getValue)(property, this.boundedEvents);

      if (handler) {
        for (var i = 0; i < curObject.length; i++) {
          if (id) {
            if (curObject[i].id === id) {
              curObject.splice(i, 1);
              var indexLocation = this.ranArray.indexOf(id);

              if (indexLocation !== -1) {
                this.ranArray.splice(indexLocation, 1);
              }

              break;
            }
          } else if (handler === curObject[i].handler) {
            curObject.splice(i, 1);
            break;
          }
        }
      } else {
        delete this.boundedEvents[property];
      }
    };
    /**
     * To notify the handlers in the specified event.
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} args - Additional parameters to pass while calling the handler.
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.
     * @return {void}
     */


    Observer.prototype.notify = function (property, argument, successHandler, errorHandler) {
      if (this.notExist(property)) {
        if (successHandler) {
          successHandler.call(this, argument);
        }

        return;
      }

      if (argument) {
        argument.name = property;
      }

      var blazor = 'Blazor';
      var curObject = (0, _util.getValue)(property, this.boundedEvents).slice(0);

      if (window[blazor]) {
        return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);
      } else {
        for (var _i = 0, curObject_1 = curObject; _i < curObject_1.length; _i++) {
          var cur = curObject_1[_i];
          cur.handler.call(cur.context, argument);
        }

        if (successHandler) {
          successHandler.call(this, argument);
        }
      }
    };

    Observer.prototype.blazorCallback = function (objs, argument, successHandler, errorHandler, index) {
      var _this = this;

      var isTrigger = index === objs.length - 1;

      if (index < objs.length) {
        var obj_1 = objs[index];
        var promise = obj_1.handler.call(obj_1.context, argument);

        if (promise && typeof promise.then === 'function') {
          if (!successHandler) {
            return promise;
          }

          promise.then(function (data) {
            data = typeof data === 'string' && _this.isJson(data) ? JSON.parse(data) : data;
            (0, _util.extend)(argument, argument, data, true);

            if (successHandler && isTrigger) {
              successHandler.call(obj_1.context, argument);
            } else {
              return _this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
            }
          }).catch(function (data) {
            if (errorHandler) {
              errorHandler.call(obj_1.context, typeof data === 'string' && _this.isJson(data) ? JSON.parse(data) : data);
            }
          });
        } else if (successHandler && isTrigger) {
          successHandler.call(obj_1.context, argument);
        } else {
          return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
        }
      }
    };

    Observer.prototype.isJson = function (value) {
      try {
        JSON.parse(value);
      } catch (e) {
        return false;
      }

      return true;
    };
    /**
     * To destroy handlers in the event
     */


    Observer.prototype.destroy = function () {
      this.boundedEvents = this.context = undefined;
    };
    /**
     * Returns if the property exists.
     */


    Observer.prototype.notExist = function (prop) {
      return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;
    };
    /**
     * Returns if the handler is present.
     */


    Observer.prototype.isHandlerPresent = function (boundedEvents, handler) {
      for (var _i = 0, boundedEvents_1 = boundedEvents; _i < boundedEvents_1.length; _i++) {
        var cur = boundedEvents_1[_i];

        if (cur.handler === handler) {
          return true;
        }
      }

      return false;
    };

    return Observer;
  }();

  _exports.Observer = Observer;
});;
define('@syncfusion/ej2-base/src/sanitize-helper',["exports", "./dom"], function (_exports, _dom) {
  "use strict";

  _exports.__esModule = true;
  _exports.SanitizeHtmlHelper = void 0;

  /**
   * SanitizeHtmlHelper for sanitize the value.
   */
  var removeTags = ['script', 'style', 'iframe[src]', 'link[href*="javascript:"]', 'object[type="text/x-scriptlet"]', 'object[data^="data:text/html;base64"]', 'img[src^="data:text/html;base64"]', '[src^="javascript:"]', '[dynsrc^="javascript:"]', '[lowsrc^="javascript:"]', '[type^="application/x-shockwave-flash"]'];
  var removeAttrs = [{
    attribute: 'href',
    selector: '[href*="javascript:"]'
  }, {
    attribute: 'background',
    selector: '[background^="javascript:"]'
  }, {
    attribute: 'style',
    selector: '[style*="javascript:"]'
  }, {
    attribute: 'style',
    selector: '[style*="expression("]'
  }, {
    attribute: 'href',
    selector: 'a[href^="data:text/html;base64"]'
  }];
  var jsEvents = ['onchange', 'onclick', 'onmouseover', 'onmouseout', 'onkeydown', 'onload', 'onerror', 'onblur', 'onfocus', 'onbeforeload', 'onbeforeunload', 'onkeyup', 'onsubmit', 'onafterprint', 'onbeforeonload', 'onbeforeprint', 'onblur', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onerror', 'onfocus', 'onformchange', 'onforminput', 'onhaschange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'onoine', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreadystatechange', 'onredo', 'onresize', 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'onundo', 'onunload', 'onvolumechange', 'onwaiting', 'onmouseenter', 'onmouseleave', 'onmousewheel', 'onstart', 'onpropertychange'];

  var SanitizeHtmlHelper =
  /** @class */
  function () {
    function SanitizeHtmlHelper() {}

    SanitizeHtmlHelper.beforeSanitize = function () {
      return {
        selectors: {
          tags: removeTags,
          attributes: removeAttrs
        }
      };
    };

    ;

    SanitizeHtmlHelper.sanitize = function (value) {
      var item = this.beforeSanitize();
      var output = this.serializeValue(item, value);
      return output;
    };

    SanitizeHtmlHelper.serializeValue = function (item, value) {
      this.removeAttrs = item.selectors.attributes;
      this.removeTags = item.selectors.tags;
      this.wrapElement = document.createElement('div');
      this.wrapElement.innerHTML = value;
      this.removeXssTags();
      this.removeJsEvents();
      this.removeXssAttrs();
      return this.wrapElement.innerHTML;
    };

    SanitizeHtmlHelper.removeXssTags = function () {
      var elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));

      if (elements.length > 0) {
        elements.forEach(function (element) {
          (0, _dom.detach)(element);
        });
      } else {
        return;
      }
    };

    SanitizeHtmlHelper.removeJsEvents = function () {
      var elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');

      if (elements.length > 0) {
        elements.forEach(function (element) {
          jsEvents.forEach(function (attr) {
            if (element.hasAttribute(attr)) {
              element.removeAttribute(attr);
            }
          });
        });
      } else {
        return;
      }
    };

    SanitizeHtmlHelper.removeXssAttrs = function () {
      var _this = this;

      this.removeAttrs.forEach(function (item, index) {
        var elements = _this.wrapElement.querySelectorAll(item.selector);

        if (elements.length > 0) {
          elements.forEach(function (element) {
            element.removeAttribute(item.attribute);
          });
        }
      });
    };

    return SanitizeHtmlHelper;
  }();

  _exports.SanitizeHtmlHelper = SanitizeHtmlHelper;
});;
define('@syncfusion/ej2-base/src/template',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.expression = expression;
  _exports.compile = compile;

  /**
   * Template Engine
   */
  var LINES = new RegExp('\\n|\\r|\\s\\s+', 'g');
  var QUOTES = new RegExp(/'|"/g);
  var IF_STMT = new RegExp('if ?\\(');
  var ELSEIF_STMT = new RegExp('else if ?\\(');
  var ELSE_STMT = new RegExp('else');
  var FOR_STMT = new RegExp('for ?\\(');
  var IF_OR_FOR = new RegExp('(\/if|\/for)');
  var CALL_FUNCTION = new RegExp('\\((.*)\\)', '');
  var NOT_NUMBER = new RegExp('^[0-9]+$', 'g');
  var WORD = new RegExp('[\\w"\'.\\s+]+', 'g');
  var DBL_QUOTED_STR = new RegExp('"(.*?)"', 'g');
  var WORDIF = new RegExp('[\\w"\'@#$.\\s+]+', 'g');
  var exp = new RegExp('\\${([^}]*)}', 'g'); // let cachedTemplate: Object = {};

  var ARR_OBJ = /^\..*/gm;
  var SINGLE_SLASH = /\\/gi;
  var DOUBLE_SLASH = /\\\\/gi;
  var WORDFUNC = new RegExp('[\\w"\'@#$.\\s+]+', 'g');
  var WINDOWFUNC = /\window\./gm;
  /**
   * The function to set regular expression for template expression string.
   * @param  {RegExp} value - Value expression.
   * @private
   */

  function expression(value) {
    if (value) {
      exp = value;
    }

    return exp;
  } // /**
  //  * To render the template string from the given data.
  //  * @param  {string} template - String Template.
  //  * @param  {Object[]|JSON} data - DataSource for the template.
  //  * @param  {Object} helper? - custom helper object.
  //  */
  // export function template(template: string, data: JSON, helper?: Object): string {
  //     let hash: string = hashCode(template);
  //     let tmpl: Function;
  //     if (!cachedTemplate[hash]) {
  //         tmpl = cachedTemplate[hash] = compile(template, helper);
  //     } else {
  //         tmpl = cachedTemplate[hash];
  //     }
  //     return tmpl(data);
  // }

  /**
   * Compile the template string into template function.
   * @param  {string} template - The template string which is going to convert.
   * @param  {Object} helper? - Helper functions as an object.
   * @private
   */


  function compile(template, helper) {
    var argName = 'data';
    var evalExpResult = evalExp(template, argName, helper);
    var fnCode = "var str=\"" + evalExpResult + "\"; return str;"; // tslint:disable-next-line:no-function-constructor-with-string-args

    var fn = new Function(argName, fnCode);
    return fn.bind(helper);
  } // function used to evaluate the function expression


  function evalExp(str, nameSpace, helper) {
    var varCOunt = 0;
    /**
     * Variable containing Local Keys
     */

    var localKeys = [];
    var isClass = str.match(/class="([^\"]+|)\s{2}/g);
    var singleSpace = '';

    if (isClass) {
      isClass.forEach(function (value) {
        singleSpace = value.replace(/\s\s+/g, ' ');
        str = str.replace(value, singleSpace);
      });
    }

    return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\'$1\'').replace(exp, function (match, cnt, offset, matchStr) {
      var SPECIAL_CHAR = /\@|\#|\$/gm;
      var matches = cnt.match(CALL_FUNCTION); // matches to detect any function calls

      if (matches) {
        var rlStr = matches[1];

        if (ELSEIF_STMT.test(cnt)) {
          //handling else-if condition
          cnt = '";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function (str) {
            str = str.trim();
            return addNameSpace(str, !QUOTES.test(str) && localKeys.indexOf(str) === -1, nameSpace, localKeys);
          })) + '{ \n str = str + "';
        } else if (IF_STMT.test(cnt)) {
          //handling if condition
          cnt = '"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function (strs) {
            return HandleSpecialCharArrObj(strs, nameSpace, localKeys);
          })) + '{ \n str = str + "';
        } else if (FOR_STMT.test(cnt)) {
          //handling for condition
          var rlStr_1 = matches[1].split(' of '); // replace for each into actual JavaScript

          cnt = '"; ' + cnt.replace(matches[1], function (mtc) {
            localKeys.push(rlStr_1[0]);
            localKeys.push(rlStr_1[0] + 'Index');
            varCOunt = varCOunt + 1; // tslint:disable-next-line

            return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';
          }) + '{ \n ' + rlStr_1[0] + '= ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '[i' + varCOunt + ']; \n var ' + rlStr_1[0] + 'Index=i' + varCOunt + '; \n str = str + "';
        } else {
          //helper function handling
          var fnStr = cnt.split('(');
          var fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';
          fNameSpace = /\./.test(fnStr[0]) ? '' : fNameSpace;
          var ftArray = matches[1].split(',');

          if (matches[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {
            matches[1] = fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1];
          }

          var splRegexp = /\@|\$|\#/gm;
          var arrObj = /\]\./gm;

          if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {
            var splArrRegexp = /\@|\$|\#|\]\./gm;

            if (splArrRegexp.test(cnt)) {
              // tslint:disable-next-line
              cnt = '"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function (strs) {
                return HandleSpecialCharArrObj(strs, nameSpace, localKeys);
              })) + '+ "';
            }
          } else {
            cnt = '" + ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), fNameSpace === 'global' ? false : true, nameSpace, localKeys)) + '+"';
          }
        }
      } else if (ELSE_STMT.test(cnt)) {
        // handling else condition
        cnt = '"; ' + cnt.replace(ELSE_STMT, '} else { \n str = str + "');
      } else if (!!cnt.match(IF_OR_FOR)) {
        // close condition 
        cnt = cnt.replace(IF_OR_FOR, '"; \n } \n str = str + "');
      } else if (SPECIAL_CHAR.test(cnt)) {
        // template string with double slash with special character
        if (cnt.match(SINGLE_SLASH)) {
          cnt = SlashReplace(cnt);
        }

        cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
      } else {
        // template string with double slash
        if (cnt.match(SINGLE_SLASH)) {
          cnt = SlashReplace(cnt);
          cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
        } else {
          // evaluate normal expression
          cnt = '"+' + addNameSpace(cnt.replace(/\,/gi, '+' + nameSpace + '.'), localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '+"';
        }
      }

      return cnt;
    });
  }

  function addNameSpace(str, addNS, nameSpace, ignoreList) {
    return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '.' + str : str;
  }

  function NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {
    var arrObjReg = /^\..*/gm;
    return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !arrObjReg.test(str) ? nameSpace + '.' + str : str;
  } // // Create hashCode for template string to storeCached function
  // function hashCode(str: string): string {
  //     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();
  // }


  function NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {
    return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '["' + str : str;
  } // tslint:disable-next-line


  function SlashReplace(tempStr) {
    // tslint:disable-next-line
    var double = "\\\\";

    if (tempStr.match(DOUBLE_SLASH)) {
      tempStr = tempStr;
    } else {
      tempStr = tempStr.replace(SINGLE_SLASH, double);
    }

    return tempStr;
  }

  function HandleSpecialCharArrObj(str, nameSpaceNew, keys) {
    str = str.trim();
    var windowFunc = /\window\./gm;

    if (!windowFunc.test(str)) {
      var quotes = /'|"/gm;
      var splRegexp = /\@|\$|\#/gm;

      if (splRegexp.test(str)) {
        str = NameSpaceForspecialChar(str, keys.indexOf(str) === -1, nameSpaceNew, keys) + '"]';
      }

      if (ARR_OBJ.test(str)) {
        return NameSpaceArrObj(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);
      } else {
        return addNameSpace(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);
      }
    } else {
      return str;
    }
  }
});;
define('@syncfusion/ej2-base/src/template-engine',["exports", "./template", "./dom", "./util"], function (_exports, _template, _dom, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.getRandomId = getRandomId;
  _exports.compile = compile;
  _exports.updateBlazorTemplate = updateBlazorTemplate;
  _exports.resetBlazorTemplate = resetBlazorTemplate;
  _exports.setTemplateEngine = setTemplateEngine;
  _exports.getTemplateEngine = getTemplateEngine;
  _exports.blazorTemplates = void 0;

  /**
   * Template Engine Bridge
   */
  var HAS_ROW = /^[\n\r.]+\<tr|^\<tr/;
  var HAS_SVG = /^[\n\r.]+\<svg|^\<path|^\<g/;
  var blazorTemplates = {};
  _exports.blazorTemplates = blazorTemplates;

  function getRandomId() {
    return '-' + Math.random().toString(36).substr(2, 5);
  }
  /**
   * Compile the template string into template function.
   * @param  {string} templateString - The template string which is going to convert.
   * @param  {Object} helper? - Helper functions as an object.
   * @private
   */
  //tslint:disable-next-line


  function compile(templateString, helper) {
    var compiler = engineObj.compile(templateString, helper); //tslint:disable-next-line

    return function (data, component, propName, templateId, isStringTemplate, index) {
      var result = compiler(data, component, propName);
      var blazor = 'Blazor';
      var blazorTemplateId = 'BlazorTemplateId';

      if ((0, _util.isBlazor)() && !isStringTemplate) {
        var randomId = getRandomId();
        var blazorId = templateId + randomId;

        if (!blazorTemplates[templateId]) {
          blazorTemplates[templateId] = [];
        }

        if (!(0, _util.isNullOrUndefined)(index)) {
          var keys = Object.keys(blazorTemplates[templateId][index]);

          for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];

            if (key !== blazorTemplateId && data[key]) {
              blazorTemplates[templateId][index][key] = data[key];
            }

            if (key === blazorTemplateId) {
              blazorId = blazorTemplates[templateId][index][key];
            }
          }
        } else {
          data[blazorTemplateId] = blazorId;
          blazorTemplates[templateId].push(data);
        } // tslint:disable-next-line:no-any


        return propName === 'rowTemplate' ? [(0, _dom.createElement)('tr', {
          id: blazorId,
          className: 'e-blazor-template'
        })] : // tslint:disable-next-line:no-any
        [(0, _dom.createElement)('div', {
          id: blazorId,
          className: 'e-blazor-template'
        })];
      }

      if (typeof result === 'string') {
        if (HAS_SVG.test(result)) {
          var ele = (0, _dom.createElement)('svg', {
            innerHTML: result
          });
          return ele.childNodes;
        } else {
          var ele = (0, _dom.createElement)(HAS_ROW.test(result) ? 'table' : 'div', {
            innerHTML: result
          });
          return ele.childNodes;
        }
      } else {
        return result;
      }
    };
  }

  function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {
    var blazor = 'Blazor';

    if ((0, _util.isBlazor)()) {
      var ejsIntrop = 'ejsInterop';
      window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);

      if (isEmpty !== false) {
        blazorTemplates[templateId] = [];
      }
    }
  }

  function resetBlazorTemplate(templateId, templateName, index) {
    var templateDiv = document.getElementById(templateId);

    if (templateDiv) {
      // tslint:disable-next-line:no-any
      var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');

      for (var i = 0; i < innerTemplates.length; i++) {
        var tempId = ' ';

        if (!(0, _util.isNullOrUndefined)(index)) {
          tempId = innerTemplates[index].getAttribute('data-templateId');
        } else {
          tempId = innerTemplates[i].getAttribute('data-templateId');
        }

        var tempElement = document.getElementById(tempId);

        if (tempElement) {
          var length_1 = tempElement.childNodes.length;

          for (var j = 0; j < length_1; j++) {
            if (!(0, _util.isNullOrUndefined)(index)) {
              innerTemplates[index].appendChild(tempElement.childNodes[0]);
              i = innerTemplates.length;
            } else {
              innerTemplates[i].appendChild(tempElement.childNodes[0]);
            }
          }
        }
      }
    }
  }
  /**
   * Set your custom template engine for template rendering.
   * @param  {ITemplateEngine} classObj - Class object for custom template.
   * @private
   */


  function setTemplateEngine(classObj) {
    engineObj.compile = classObj.compile;
  }
  /**
   * Get current template engine for template rendering
   * @param  {ITemplateEngine} classObj - Class object for custom template.
   * @private
   */


  function getTemplateEngine() {
    return engineObj.compile;
  } //Default Engine Class


  var Engine =
  /** @class */
  function () {
    function Engine() {}

    Engine.prototype.compile = function (templateString, helper) {
      if (helper === void 0) {
        helper = {};
      }

      return (0, _template.compile)(templateString, helper);
    };

    return Engine;
  }();

  var engineObj = {
    compile: new Engine().compile
  };
});;
define('@syncfusion/ej2-base/src/touch',["exports", "./util", "./notify-property-change", "./browser", "./base", "./child-property", "./event-handler"], function (_exports, _util, _notifyPropertyChange, _browser, _base, _childProperty, _eventHandler) {
  "use strict";

  _exports.__esModule = true;
  _exports.Touch = _exports.SwipeSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,
   */
  var SwipeSettings =
  /** @class */
  function (_super) {
    __extends(SwipeSettings, _super);

    function SwipeSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _notifyPropertyChange.Property)(50)], SwipeSettings.prototype, "swipeThresholdDistance", void 0);

    return SwipeSettings;
  }(_childProperty.ChildProperty);

  _exports.SwipeSettings = SwipeSettings;
  var swipeRegex = /(Up|Down)/;
  /**
   * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,
   * ```typescript
   *    let node: HTMLElement;
   * let touchObj: Touch = new Touch({
   *    element: node,
   *    tap: function (e) {
   *        // tap handler function code
   *    }
   *    tapHold: function (e) {
   *        // tap hold handler function code
   *    }
   *    scroll: function (e) {
   *        // scroll handler function code
   *    }
   *    swipe: function (e) {
   *        // swipe handler function code
   *    }
   * });
   * ```
   */

  var Touch =
  /** @class */
  function (_super) {
    __extends(Touch, _super);
    /* End-Properties */


    function Touch(element, options) {
      var _this = _super.call(this, options, element) || this;

      _this.touchAction = true;
      _this.tapCount = 0;

      _this.startEvent = function (evt) {
        if (_this.touchAction === true) {
          var point = evt.changedTouches ? evt.changedTouches[0] : evt;

          if (evt.changedTouches !== undefined) {
            _this.touchAction = false;
          }

          _this.isTouchMoved = false;
          _this.movedDirection = '';
          _this.startPoint = _this.lastMovedPoint = {
            clientX: point.clientX,
            clientY: point.clientY
          };
          _this.startEventData = point;
          _this.hScrollLocked = _this.vScrollLocked = false;
          _this.tStampStart = Date.now();
          _this.timeOutTapHold = setTimeout(function () {
            _this.tapHoldEvent(evt);
          }, _this.tapHoldThreshold);

          _eventHandler.EventHandler.add(_this.element, _browser.Browser.touchMoveEvent, _this.moveEvent, _this);

          _eventHandler.EventHandler.add(_this.element, _browser.Browser.touchEndEvent, _this.endEvent, _this);

          _eventHandler.EventHandler.add(_this.element, _browser.Browser.touchCancelEvent, _this.cancelEvent, _this);
        }
      };

      _this.moveEvent = function (evt) {
        var point = evt.changedTouches ? evt.changedTouches[0] : evt;
        _this.movedPoint = point;
        _this.isTouchMoved = !(point.clientX === _this.startPoint.clientX && point.clientY === _this.startPoint.clientY);
        var eScrollArgs = {};

        if (_this.isTouchMoved) {
          clearTimeout(_this.timeOutTapHold);

          _this.calcScrollPoints(evt);

          var scrollArg = {
            startEvents: _this.startEventData,
            originalEvent: evt,
            startX: _this.startPoint.clientX,
            startY: _this.startPoint.clientY,
            distanceX: _this.distanceX,
            distanceY: _this.distanceY,
            scrollDirection: _this.scrollDirection,
            velocity: _this.getVelocity(point)
          };
          eScrollArgs = (0, _util.extend)(eScrollArgs, {}, scrollArg);

          _this.trigger('scroll', eScrollArgs);

          _this.lastMovedPoint = {
            clientX: point.clientX,
            clientY: point.clientY
          };
        }
      };

      _this.cancelEvent = function (evt) {
        clearTimeout(_this.timeOutTapHold);
        clearTimeout(_this.timeOutTap);
        _this.tapCount = 0;

        _this.swipeFn(evt);

        _eventHandler.EventHandler.remove(_this.element, _browser.Browser.touchCancelEvent, _this.cancelEvent);
      };

      _this.endEvent = function (evt) {
        _this.swipeFn(evt);

        if (!_this.isTouchMoved) {
          if (typeof _this.tap === 'function') {
            _this.trigger('tap', {
              originalEvent: evt,
              tapCount: ++_this.tapCount
            });

            _this.timeOutTap = setTimeout(function () {
              _this.tapCount = 0;
            }, _this.tapThreshold);
          }
        }

        _this.modeclear();
      };

      _this.swipeFn = function (evt) {
        clearTimeout(_this.timeOutTapHold);
        clearTimeout(_this.timeOutTap);
        var point = evt;

        if (evt.changedTouches) {
          point = evt.changedTouches[0];
        }

        var diffX = point.clientX - _this.startPoint.clientX;
        var diffY = point.clientY - _this.startPoint.clientY;
        diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);
        diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);
        _this.isTouchMoved = diffX > 1 || diffY > 1;
        _this.endPoint = point;

        _this.calcPoints(evt);

        var swipeArgs = {
          originalEvent: evt,
          startEvents: _this.startEventData,
          startX: _this.startPoint.clientX,
          startY: _this.startPoint.clientY,
          distanceX: _this.distanceX,
          distanceY: _this.distanceY,
          swipeDirection: _this.movedDirection,
          velocity: _this.getVelocity(point)
        };

        if (_this.isTouchMoved) {
          var eSwipeArgs = void 0;
          var tDistance = _this.swipeSettings.swipeThresholdDistance;
          eSwipeArgs = (0, _util.extend)(eSwipeArgs, _this.defaultArgs, swipeArgs);
          var canTrigger = false;
          var ele = _this.element;

          var scrollBool = _this.isScrollable(ele);

          var moved = swipeRegex.test(_this.movedDirection);

          if (tDistance < _this.distanceX && !moved || tDistance < _this.distanceY && moved) {
            if (!scrollBool) {
              canTrigger = true;
            } else {
              canTrigger = _this.checkSwipe(ele, moved);
            }
          }

          if (canTrigger) {
            _this.trigger('swipe', eSwipeArgs);
          }
        }

        _this.modeclear();
      };

      _this.modeclear = function () {
        _this.modeClear = setTimeout(function () {
          _this.touchAction = true;
        }, typeof _this.tap !== 'function' ? 0 : 20);
        _this.lastTapTime = new Date().getTime();

        _eventHandler.EventHandler.remove(_this.element, _browser.Browser.touchMoveEvent, _this.moveEvent);

        _eventHandler.EventHandler.remove(_this.element, _browser.Browser.touchEndEvent, _this.endEvent);

        _eventHandler.EventHandler.remove(_this.element, _browser.Browser.touchCancelEvent, _this.cancelEvent);
      };

      _this.bind();

      return _this;
    } // triggers when property changed 

    /**
     * @private
     * @param newProp
     * @param oldProp
     */


    Touch.prototype.onPropertyChanged = function (newProp, oldProp) {//No Code to handle
    };

    Touch.prototype.bind = function () {
      this.wireEvents();

      if (_browser.Browser.isIE) {
        this.element.classList.add('e-block-touch');
      }
    };
    /**
     * To destroy the touch instance.
     * @return {void}
     */


    Touch.prototype.destroy = function () {
      this.unwireEvents();

      _super.prototype.destroy.call(this);
    }; // Need to changes the event binding once we updated the event handler.


    Touch.prototype.wireEvents = function () {
      _eventHandler.EventHandler.add(this.element, _browser.Browser.touchStartEvent, this.startEvent, this);
    };

    Touch.prototype.unwireEvents = function () {
      _eventHandler.EventHandler.remove(this.element, _browser.Browser.touchStartEvent, this.startEvent);
    };
    /**
     * Returns module name as touch
     * @returns {string}
     * @private
     */


    Touch.prototype.getModuleName = function () {
      return 'touch';
    };
    /**
     * Returns if the HTML element is Scrollable.
     * @param {HTMLElement} element - HTML Element to check if Scrollable.
     * @returns {boolean}
     */


    Touch.prototype.isScrollable = function (element) {
      var eleStyle = getComputedStyle(element);
      var style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;

      if (/(auto|scroll)/.test(style)) {
        return true;
      }

      return false;
    };

    Touch.prototype.tapHoldEvent = function (evt) {
      this.tapCount = 0;
      this.touchAction = true;
      var eTapArgs;

      _eventHandler.EventHandler.remove(this.element, _browser.Browser.touchMoveEvent, this.moveEvent);

      _eventHandler.EventHandler.remove(this.element, _browser.Browser.touchEndEvent, this.endEvent);

      eTapArgs = {
        originalEvent: evt
      };
      this.trigger('tapHold', eTapArgs);

      _eventHandler.EventHandler.remove(this.element, _browser.Browser.touchCancelEvent, this.cancelEvent);
    };

    Touch.prototype.calcPoints = function (evt) {
      var point = evt.changedTouches ? evt.changedTouches[0] : evt;
      this.defaultArgs = {
        originalEvent: evt
      };
      this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX));
      this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY));

      if (this.distanceX > this.distanceY) {
        this.movedDirection = point.clientX > this.startPoint.clientX ? 'Right' : 'Left';
      } else {
        this.movedDirection = point.clientY < this.startPoint.clientY ? 'Up' : 'Down';
      }
    };

    Touch.prototype.calcScrollPoints = function (evt) {
      var point = evt.changedTouches ? evt.changedTouches[0] : evt;
      this.defaultArgs = {
        originalEvent: evt
      };
      this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX));
      this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY));

      if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {
        this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? 'Right' : 'Left';
        this.hScrollLocked = true;
      } else {
        this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? 'Up' : 'Down';
        this.vScrollLocked = true;
      }
    };

    Touch.prototype.getVelocity = function (pnt) {
      var newX = pnt.clientX;
      var newY = pnt.clientY;
      var newT = Date.now();
      var xDist = newX - this.startPoint.clientX;
      var yDist = newY - this.startPoint.clientX;
      var interval = newT - this.tStampStart;
      return Math.sqrt(xDist * xDist + yDist * yDist) / interval;
    }; // tslint:disable-next-line:no-any


    Touch.prototype.checkSwipe = function (ele, flag) {
      var keys = ['scroll', 'offset'];
      var temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];

      if (ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]]) {
        return true;
      }

      return ele[keys[0] + temp[1]] === 0 || ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]];
    };

    __decorate([(0, _notifyPropertyChange.Event)()], Touch.prototype, "tap", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Touch.prototype, "tapHold", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Touch.prototype, "swipe", void 0);

    __decorate([(0, _notifyPropertyChange.Event)()], Touch.prototype, "scroll", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(350)], Touch.prototype, "tapThreshold", void 0);

    __decorate([(0, _notifyPropertyChange.Property)(750)], Touch.prototype, "tapHoldThreshold", void 0);

    __decorate([(0, _notifyPropertyChange.Complex)({}, SwipeSettings)], Touch.prototype, "swipeSettings", void 0);

    Touch = __decorate([_notifyPropertyChange.NotifyPropertyChanges], Touch);
    return Touch;
  }(_base.Base);

  _exports.Touch = Touch;
});;
define('@syncfusion/ej2-base/src/util',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.disableBlazorMode = disableBlazorMode;
  _exports.createInstance = createInstance;
  _exports.setImmediate = setImmediate;
  _exports.getValue = getValue;
  _exports.setValue = setValue;
  _exports.deleteObject = deleteObject;
  _exports.isObject = isObject;
  _exports.getEnumValue = getEnumValue;
  _exports.merge = merge;
  _exports.extend = extend;
  _exports.isNullOrUndefined = isNullOrUndefined;
  _exports.isUndefined = isUndefined;
  _exports.getUniqueID = getUniqueID;
  _exports.debounce = debounce;
  _exports.queryParams = queryParams;
  _exports.isObjectArray = isObjectArray;
  _exports.compareElementParent = compareElementParent;
  _exports.throwError = throwError;
  _exports.print = print;
  _exports.formatUnit = formatUnit;
  _exports.enableBlazorMode = enableBlazorMode;
  _exports.isBlazor = isBlazor;
  _exports.getElement = getElement;
  _exports.getInstance = getInstance;
  _exports.addInstance = addInstance;
  _exports.uniqueID = uniqueID;
  var instances = 'ej2_instances';
  var uid = 0;
  var isBlazorPlatform = false;
  /**
   * Function to check whether the platform is blazor or not.
   * @return {boolean} result
   * @private
   */

  function disableBlazorMode() {
    isBlazorPlatform = false;
  }
  /**
   * Create Instance from constructor function with desired parameters.
   * @param {Function} classFunction - Class function to which need to create instance
   * @param {any[]} params - Parameters need to passed while creating instance
   * @return {any}
   * @private
   */


  function createInstance(classFunction, params) {
    var arrayParam = params;
    arrayParam.unshift(undefined);
    return new (Function.prototype.bind.apply(classFunction, arrayParam))();
  }
  /**
   * To run a callback function immediately after the browser has completed other operations.
   * @param {Function} handler - callback function to be triggered.
   * @return {Function}
   * @private
   */


  function setImmediate(handler) {
    var unbind;
    var num = new Uint16Array(5);
    var intCrypto = window.msCrypto || window.crypto;
    intCrypto.getRandomValues(num);
    var secret = 'ej2' + combineArray(num);

    var messageHandler = function (event) {
      if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {
        handler();
        unbind();
      }
    };

    window.addEventListener('message', messageHandler, false);
    window.postMessage(secret, '*');
    return unbind = function () {
      window.removeEventListener('message', messageHandler);
      handler = messageHandler = secret = undefined;
    };
  }
  /**
   * To get nameSpace value from the desired object.
   * @param {string} nameSpace - String value to the get the inner object
   * @param {any} obj - Object to get the inner object value.
   * @return {any}
   * @private
   */


  function getValue(nameSpace, obj) {
    /* tslint:disable no-any */
    var value = obj;
    var splits = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');

    for (var i = 0; i < splits.length && !isUndefined(value); i++) {
      value = value[splits[i]];
    }

    return value;
  }
  /**
   * To set value for the nameSpace in desired object.
   * @param {string} nameSpace - String value to the get the inner object
   * @param {any} value - Value that you need to set.
   * @param {any} obj - Object to get the inner object value.
   * @return {void}
   * @private
   */


  function setValue(nameSpace, value, obj) {
    var keys = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.');
    var start = obj || {};
    var fromObj = start;
    var i;
    var length = keys.length;
    var key;

    for (i = 0; i < length; i++) {
      key = keys[i];

      if (i + 1 === length) {
        fromObj[key] = value === undefined ? {} : value;
      } else if (isNullOrUndefined(fromObj[key])) {
        fromObj[key] = {};
      }

      fromObj = fromObj[key];
    }

    return start;
  }
  /**
   * Delete an item from Object
   * @param {any} obj - Object in which we need to delete an item.
   * @param {string} params - String value to the get the inner object
   * @return {void}
   * @private
   */


  function deleteObject(obj, key) {
    delete obj[key];
  }
  /**
   * Check weather the given argument is only object.
   * @param {any} obj - Object which is need to check.
   * @return {boolean}
   * @private
   */


  function isObject(obj) {
    var objCon = {};
    return !isNullOrUndefined(obj) && obj.constructor === objCon.constructor;
  }
  /**
   * To get enum value by giving the string.
   * @param {any} enumObject - Enum object.
   * @param {string} enumValue - Enum value to be searched
   * @return {any}
   * @private
   */


  function getEnumValue(enumObject, enumValue) {
    return enumObject[enumValue];
  }
  /**
   * Merge the source object into destination object.
   * @param {any} source - source object which is going to merge with destination object
   * @param {any} destination - object need to be merged
   * @return {void}
   * @private
   */


  function merge(source, destination) {
    if (!isNullOrUndefined(destination)) {
      var temrObj = source;
      var tempProp = destination;
      var keys = Object.keys(destination);
      var deepmerge = 'deepMerge';

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];

        if (!isNullOrUndefined(temrObj[deepmerge]) && temrObj[deepmerge].indexOf(key) !== -1 && (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {
          extend(temrObj[key], temrObj[key], tempProp[key], true);
        } else {
          temrObj[key] = tempProp[key];
        }
      }
    }
  }
  /**
   * Extend the two object with newer one.
   * @param {any} copied - Resultant object after merged
   * @param {Object} first - First object need to merge
   * @param {Object} second - Second object need to merge
   * @return {Object}
   * @private
   */


  function extend(copied, first, second, deep) {
    var result = copied && typeof copied === 'object' ? copied : {};
    var length = arguments.length;

    if (deep) {
      length = length - 1;
    }

    var _loop_1 = function (i) {
      if (!arguments_1[i]) {
        return "continue";
      }

      var obj1 = arguments_1[i];
      Object.keys(obj1).forEach(function (key) {
        var src = result[key];
        var copy = obj1[key];
        var clone;
        var blazorEventExtend = isBlazor() ? !(src instanceof Event) : true;

        if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {
          if (isObject(copy)) {
            clone = src ? src : {};

            if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {
              extend(clone, {}, copy, deep);
            } else {
              result[key] = extend(clone, {}, copy, deep);
            }
          } else {
            clone = src ? src : [];
            result[key] = extend([], clone, copy, deep);
          }
        } else {
          result[key] = copy;
        }
      });
    };

    var arguments_1 = arguments;

    for (var i = 1; i < length; i++) {
      _loop_1(i);
    }

    return result;
  }
  /**
   * To check whether the object is null or undefined.
   * @param {Object} value - To check the object is null or undefined
   * @return {boolean}
   * @private
   */


  function isNullOrUndefined(value) {
    return value === undefined || value === null;
  }
  /**
   * To check whether the object is undefined.
   * @param {Object} value - To check the object is undefined
   * @return {boolean}
   * @private
   */


  function isUndefined(value) {
    return 'undefined' === typeof value;
  }
  /**
   * To return the generated unique name
   * @param {string} definedName - To concatenate the unique id to provided name
   * @return {string}
   * @private
   */


  function getUniqueID(definedName) {
    return definedName + '_' + uid++;
  }
  /**
   * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.
   * @param {Function} eventFunction - Specifies the function to run when the event occurs
   * @param {number} delay - A number that specifies the milliseconds for function delay call option
   * @return {Function}
   * @private
   */


  function debounce(eventFunction, delay) {
    var out; // tslint:disable-next-line

    return function () {
      var _this = this;

      var args = arguments;

      var later = function () {
        out = null;
        return eventFunction.apply(_this, args);
      };

      clearTimeout(out);
      out = setTimeout(later, delay);
    };
  } // Added since lint ignored after added '//tslint:disable-next-line' 

  /* tslint:disable:no-any */

  /**
   * To convert the object to string for query url
   * @param  {Object} data
   * @returns string
   * @private
   */


  function queryParams(data) {
    var array = [];
    var keys = Object.keys(data);

    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
      var key = keys_2[_i];
      array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));
    }

    return array.join('&');
  }
  /**
   * To check whether the given array contains object.
   * @param {T[]} value- Specifies the T type array to be checked.
   * @private
   */


  function isObjectArray(value) {
    var parser = Object.prototype.toString;

    if (parser.call(value) === '[object Array]') {
      if (parser.call(value[0]) === '[object Object]') {
        return true;
      }
    }

    return false;
  }
  /**
   * To check whether the  child element is descendant to parent element or parent and child are same element.
   * @param{Element} - Specifies the child element to compare with parent.
   * @param{Element} - Specifies the parent element.
   * @return boolean
   * @private
   */


  function compareElementParent(child, parent) {
    var node = child;

    if (node === parent) {
      return true;
    } else if (node === document || !node) {
      return false;
    } else {
      return compareElementParent(node.parentNode, parent);
    }
  }
  /**
   * To throw custom error message.
   * @param{string} - Specifies the error message to be thrown.
   * @private
   */


  function throwError(message) {
    try {
      throw new Error(message);
    } catch (e) {
      throw e.message + '\n' + e.stack;
    }
  }
  /**
   * This function is used to print given element
   * @param{Element} element - Specifies the print content element.
   * @param{Window} printWindow - Specifies the print window.
   * @private
   */


  function print(element, printWindow) {
    var div = document.createElement('div');
    var links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));
    var reference = '';

    if (isNullOrUndefined(printWindow)) {
      printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');
    }

    div.appendChild(element.cloneNode(true));

    for (var i = 0, len = links.length; i < len; i++) {
      reference += links[i].outerHTML;
    }

    printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML + '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');
    printWindow.document.close();
    printWindow.focus(); // tslint:disable-next-line

    var interval = setInterval(function () {
      if (printWindow.ready) {
        printWindow.print();
        printWindow.close();
        clearInterval(interval);
      }
    }, 500);
    return printWindow;
  }
  /**
   * Function to normalize the units applied to the element.
   * @param  {number|string} value
   * @return {string} result
   * @private
   */


  function formatUnit(value) {
    var result = value + '';

    if (result === 'auto' || result.indexOf('%') !== -1 || result.indexOf('px') !== -1) {
      return result;
    }

    return result + 'px';
  }
  /**
   * Function to check whether the platform is blazor or not.
   * @return {boolean} result
   * @private
   */


  function enableBlazorMode() {
    isBlazorPlatform = true;
  }
  /**
   * Function to check whether the platform is blazor or not.
   * @return {boolean} result
   * @private
   */


  function isBlazor() {
    return isBlazorPlatform;
  }
  /**
   * Function to convert xPath to DOM element in blazor platform
   * @return {HTMLElement} result
   * @param {HTMLElement | object} element
   * @private
   */


  function getElement(element) {
    var xPath = 'xPath';

    if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {
      return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    }

    return element;
  }
  /**
   * Function to fetch the Instances of a HTML element for the given component.
   * @param {string | HTMLElement} element
   * @param {any} component
   * @return {Object} inst
   * @private
   */
  // tslint:disable-next-line


  function getInstance(element, component) {
    // tslint:disable-next-line:no-any
    var elem = typeof element === 'string' ? document.querySelector(element) : element;

    if (elem[instances]) {
      for (var _i = 0, _a = elem[instances]; _i < _a.length; _i++) {
        var inst = _a[_i];

        if (inst instanceof component) {
          return inst;
        }
      }
    }

    return null;
  }
  /**
   * Function to add instances for the given element.
   * @param {string | HTMLElement} element
   * @param {Object} instance
   * @return {void}
   * @private
   */


  function addInstance(element, instance) {
    // tslint:disable-next-line:no-any
    var elem = typeof element === 'string' ? document.querySelector(element) : element;

    if (elem[instances]) {
      elem[instances].push(instance);
    } else {
      elem[instances] = [instance];
    }
  }
  /**
   * Function to generate the unique id.
   * @return {any}
   * @private
   */
  // tslint:disable-next-line:no-any


  function uniqueID() {
    // tslint:disable-next-line:no-any
    if (typeof window === 'undefined') {
      return;
    } // tslint:disable-next-line:no-any


    var num = new Uint16Array(5);
    var intCrypto = window.msCrypto || window.crypto;
    return intCrypto.getRandomValues(num);
  }

  function combineArray(num) {
    var ret = '';

    for (var i = 0; i < 5; i++) {
      ret += (i ? ',' : '') + num[i];
    }

    return ret;
  }
});;
define('@syncfusion/ej2-buttons/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-buttons/src/button/button',["exports", "@syncfusion/ej2-base", "../common/common"], function (_exports, _ej2Base, _common) {
  "use strict";

  _exports.__esModule = true;
  _exports.Button = _exports.buttonObserver = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var buttonObserver = new _ej2Base.Observer();
  _exports.buttonObserver = buttonObserver;
  var cssClassName = {
    RTL: 'e-rtl',
    BUTTON: 'e-btn',
    PRIMARY: 'e-primary',
    ICONBTN: 'e-icon-btn'
  };
  /**
   * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.
   * ```html
   * <button id="button">Button</button>
   * ```
   * ```typescript
   * <script>
   * var btnObj = new Button();
   * btnObj.appendTo("#button");
   * </script>
   * ```
   */

  var Button =
  /** @class */
  function (_super) {
    __extends(Button, _super);
    /**
     * Constructor for creating the widget
     * @param  {ButtonModel} options?
     * @param  {string|HTMLButtonElement} element?
     */


    function Button(options, element) {
      return _super.call(this, options, element) || this;
    }

    Button.prototype.preRender = function () {// pre render code snippets
    };
    /**
     * Initialize the control rendering
     * @returns void
     * @private
     */


    Button.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        if (!this.disabled) {
          this.wireEvents();
        }

        buttonObserver.notify('component-rendered', {
          id: this.element.id,
          instance: this
        });
      } else {
        this.initialize();
      }

      this.removeRippleEffect = (0, _ej2Base.rippleEffect)(this.element, {
        selector: '.' + cssClassName.BUTTON
      });
      this.renderComplete();
    };

    Button.prototype.initialize = function () {
      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.element], this.cssClass.split(' '));
      }

      if (this.isPrimary) {
        this.element.classList.add(cssClassName.PRIMARY);
      }

      if (!(0, _ej2Base.isBlazor)() || (0, _ej2Base.isBlazor)() && this.getModuleName() !== 'progress-btn') {
        if (this.content) {
          var tempContent = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(this.content) : this.content;
          this.element.innerHTML = tempContent;
        }

        this.setIconCss();
      }

      if (this.enableRtl) {
        this.element.classList.add(cssClassName.RTL);
      }

      if (this.disabled) {
        this.controlStatus(this.disabled);
      } else {
        this.wireEvents();
      }
    };

    Button.prototype.controlStatus = function (disabled) {
      this.element.disabled = disabled;
    };

    Button.prototype.setIconCss = function () {
      if (this.iconCss) {
        var span = this.createElement('span', {
          className: 'e-btn-icon ' + this.iconCss
        });

        if (!this.element.textContent.trim()) {
          this.element.classList.add(cssClassName.ICONBTN);
        } else {
          span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

          if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
            this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
          }
        }

        var node = this.element.childNodes[0];

        if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
          this.element.insertBefore(span, node);
        } else {
          this.element.appendChild(span);
        }
      }
    };

    Button.prototype.wireEvents = function () {
      if (this.isToggle) {
        _ej2Base.EventHandler.add(this.element, 'click', this.btnClickHandler, this);
      }
    };

    Button.prototype.unWireEvents = function () {
      if (this.isToggle) {
        _ej2Base.EventHandler.remove(this.element, 'click', this.btnClickHandler);
      }
    };

    Button.prototype.btnClickHandler = function () {
      if (this.element.classList.contains('e-active')) {
        this.element.classList.remove('e-active');
      } else {
        this.element.classList.add('e-active');
      }
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    Button.prototype.destroy = function () {
      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        var span = void 0;
        var classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger', 'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round', 'e-top-icon-btn', 'e-bottom-icon-btn'];

        if (this.cssClass) {
          classList = classList.concat(this.cssClass.split(' '));
        }

        _super.prototype.destroy.call(this);

        (0, _ej2Base.removeClass)([this.element], classList);

        if (!this.element.getAttribute('class')) {
          this.element.removeAttribute('class');
        }

        if (this.disabled) {
          this.element.removeAttribute('disabled');
        }

        if (this.content) {
          this.element.innerHTML = this.element.innerHTML.replace(this.content, '');
        }

        span = this.element.querySelector('span.e-btn-icon');

        if (span) {
          (0, _ej2Base.detach)(span);
        }
      }

      this.unWireEvents();

      if (_ej2Base.isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */


    Button.prototype.getModuleName = function () {
      return 'btn';
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     * @private
     */


    Button.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * Dynamically injects the required modules to the component.
     * @private
     */


    Button.Inject = function () {// Inject code snippets
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {ButtonModel} newProp
     * @param  {ButtonModel} oldProp
     * @returns void
     * @private
     */


    Button.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'isPrimary':
            if (newProp.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            } else {
              this.element.classList.remove(cssClassName.PRIMARY);
            }

            break;

          case 'disabled':
            this.controlStatus(newProp.disabled);
            break;

          case 'iconCss':
            var span = this.element.querySelector('span.e-btn-icon');

            if (span) {
              if (newProp.iconCss) {
                span.className = 'e-btn-icon ' + newProp.iconCss;

                if (this.element.textContent.trim()) {
                  if (this.iconPosition === 'Left') {
                    span.classList.add('e-icon-left');
                  } else {
                    span.classList.add('e-icon-right');
                  }
                }
              } else {
                (0, _ej2Base.detach)(span);
              }
            } else {
              this.setIconCss();
            }

            break;

          case 'iconPosition':
            (0, _ej2Base.removeClass)([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);
            span = this.element.querySelector('span.e-btn-icon');

            if (span) {
              (0, _ej2Base.detach)(span);
            }

            this.setIconCss();
            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([this.element], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([this.element], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            } else {
              this.element.classList.remove(cssClassName.RTL);
            }

            break;

          case 'content':
            var node = (0, _common.getTextNode)(this.element);

            if (!node) {
              this.element.classList.remove(cssClassName.ICONBTN);
            }

            if (!(0, _ej2Base.isBlazor)()) {
              if (this.enableHtmlSanitizer) {
                newProp.content = _ej2Base.SanitizeHtmlHelper.sanitize(newProp.content);
              }

              this.element.innerHTML = newProp.content;
              this.setIconCss();
            }

            break;

          case 'isToggle':
            if (newProp.isToggle) {
              _ej2Base.EventHandler.add(this.element, 'click', this.btnClickHandler, this);
            } else {
              _ej2Base.EventHandler.remove(this.element, 'click', this.btnClickHandler);

              (0, _ej2Base.removeClass)([this.element], ['e-active']);
            }

            break;
        }
      }
    };
    /**
     * Click the button element
     * its native method
     * @public
     */


    Button.prototype.click = function () {
      this.element.click();
    };
    /**
     * Sets the focus to Button
     * its native method
     * @public
     */


    Button.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Property)('Left')], Button.prototype, "iconPosition", void 0);

    __decorate([(0, _ej2Base.Property)('')], Button.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Button.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Button.prototype, "isPrimary", void 0);

    __decorate([(0, _ej2Base.Property)('')], Button.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('')], Button.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Button.prototype, "isToggle", void 0);

    __decorate([(0, _ej2Base.Property)()], Button.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Button.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Event)()], Button.prototype, "created", void 0);

    Button = __decorate([_ej2Base.NotifyPropertyChanges], Button);
    return Button;
  }(_ej2Base.Component);

  _exports.Button = Button;
});;
define('@syncfusion/ej2-buttons/src/button/index',["exports", "./button"], function (_exports, _button) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_button).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _button[key];
  });
});;
define('@syncfusion/ej2-buttons/src/check-box/check-box',["exports", "@syncfusion/ej2-base", "./../common/common"], function (_exports, _ej2Base, _common) {
  "use strict";

  _exports.__esModule = true;
  _exports.CheckBox = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CHECK = 'e-check';
  var DISABLED = 'e-checkbox-disabled';
  var FRAME = 'e-frame';
  var INDETERMINATE = 'e-stop';
  var LABEL = 'e-label';
  var RIPPLE = 'e-ripple-container';
  var RIPPLECHECK = 'e-ripple-check';
  var RIPPLEINDETERMINATE = 'e-ripple-stop';
  var RTL = 'e-rtl';
  var WRAPPER = 'e-checkbox-wrapper';
  var containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];
  /**
   * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
   * It contains checked, unchecked, and indeterminate states.
   * ```html
   * <input type="checkbox" id="checkbox"/>
   * <script>
   * var checkboxObj = new CheckBox({ label: "Default" });
   * checkboxObj.appendTo("#checkbox");
   * </script>
   * ```
   */

  var CheckBox =
  /** @class */
  function (_super) {
    __extends(CheckBox, _super);
    /**
     * Constructor for creating the widget
     * @private
     */


    function CheckBox(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isFocused = false;
      _this.isMouseClick = false;
      return _this;
    }

    CheckBox.prototype.changeState = function (state) {
      var ariaState;
      var rippleSpan;
      var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];

      if (_ej2Base.isRippleEnabled) {
        rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      }

      if (state === 'check') {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);

        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLEINDETERMINATE);
          rippleSpan.classList.add(RIPPLECHECK);
        }

        ariaState = 'true';
        this.element.checked = true;
      } else if (state === 'uncheck') {
        (0, _ej2Base.removeClass)([frameSpan], [CHECK, INDETERMINATE]);

        if (rippleSpan) {
          (0, _ej2Base.removeClass)([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);
        }

        ariaState = 'false';
        this.element.checked = false;
      } else {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);

        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLECHECK);
          rippleSpan.classList.add(RIPPLEINDETERMINATE);
        }

        ariaState = 'mixed';
        this.element.indeterminate = true;
      }

      this.getWrapper().setAttribute('aria-checked', ariaState);
    };

    CheckBox.prototype.clickHandler = function (event) {
      if (this.isMouseClick) {
        this.focusOutHandler();
        this.isMouseClick = false;
      }

      if (this.indeterminate) {
        this.changeState(this.checked ? 'check' : 'uncheck');
        this.indeterminate = false;
        this.element.indeterminate = false;
      } else if (this.checked) {
        this.changeState('uncheck');
        this.checked = false;
      } else {
        this.changeState('check');
        this.checked = true;
      }

      var changeEventArgs = {
        checked: this.element.checked,
        event: event
      };
      this.trigger('change', changeEventArgs);
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    CheckBox.prototype.destroy = function () {
      var _this = this;

      var wrapper = this.getWrapper();

      _super.prototype.destroy.call(this);

      if (!this.disabled) {
        this.unWireEvents();
      }

      if (this.tagName === 'INPUT') {
        wrapper.parentNode.insertBefore(this.element, wrapper);
        (0, _ej2Base.detach)(wrapper);
        this.element.checked = false;

        if (this.indeterminate) {
          this.element.indeterminate = false;
        }

        ['name', 'value', 'disabled'].forEach(function (key) {
          _this.element.removeAttribute(key);
        });
      } else {
        ['role', 'aria-checked', 'class'].forEach(function (key) {
          wrapper.removeAttribute(key);
        });
        wrapper.innerHTML = '';
      }
    };

    CheckBox.prototype.focusHandler = function () {
      this.isFocused = true;
    };

    CheckBox.prototype.focusOutHandler = function () {
      this.getWrapper().classList.remove('e-focus');
      this.isFocused = false;
    };
    /**
     * Gets the module name.
     * @private
     */


    CheckBox.prototype.getModuleName = function () {
      return 'checkbox';
    };
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */


    CheckBox.prototype.getPersistData = function () {
      return this.addOnPersist(['checked', 'indeterminate']);
    };

    CheckBox.prototype.getWrapper = function () {
      return this.element.parentElement.parentElement;
    };

    CheckBox.prototype.initialize = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }

      if (this.name) {
        this.element.setAttribute('name', this.name);
      }

      if (this.value) {
        this.element.setAttribute('value', this.value);
      }

      if (this.checked) {
        this.changeState('check');
      }

      if (this.indeterminate) {
        this.changeState();
      }

      if (this.disabled) {
        this.setDisabled();
      }
    };

    CheckBox.prototype.initWrapper = function () {
      var wrapper = this.element.parentElement;

      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement('div', {
          className: WRAPPER,
          attrs: {
            'role': 'checkbox',
            'aria-checked': 'false'
          }
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }

      var label = this.createElement('label', {
        attrs: {
          for: this.element.id
        }
      });
      var frameSpan = this.createElement('span', {
        className: 'e-icons ' + FRAME
      });
      wrapper.classList.add('e-wrapper');

      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([wrapper], this.cssClass.split(' '));
      }

      wrapper.appendChild(label);
      label.appendChild(this.element);
      (0, _common.setHiddenInput)(this, label);
      label.appendChild(frameSpan);

      if (_ej2Base.isRippleEnabled) {
        var rippleSpan = this.createElement('span', {
          className: RIPPLE
        });

        if (this.labelPosition === 'Before') {
          label.appendChild(rippleSpan);
        } else {
          label.insertBefore(rippleSpan, frameSpan);
        }

        (0, _ej2Base.rippleEffect)(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }

      if (this.label) {
        this.setText(this.label);
      }
    };

    CheckBox.prototype.keyUpHandler = function () {
      if (this.isFocused) {
        this.getWrapper().classList.add('e-focus');
      }
    };

    CheckBox.prototype.labelMouseHandler = function (e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      (0, _common.rippleMouseHandler)(e, rippleSpan);
    };
    /**
     * Called internally if any of the property value changes.
     * @private
     */


    CheckBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      var wrapper = this.getWrapper();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'checked':
            this.indeterminate = false;
            this.element.indeterminate = false;
            this.changeState(newProp.checked ? 'check' : 'uncheck');
            break;

          case 'indeterminate':
            if (newProp.indeterminate) {
              this.changeState();
            } else {
              this.element.indeterminate = false;
              this.changeState(this.checked ? 'check' : 'uncheck');
            }

            break;

          case 'disabled':
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED);
              wrapper.setAttribute('aria-disabled', 'false');
              this.wireEvents();
            }

            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([wrapper], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([wrapper], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL);
            } else {
              wrapper.classList.remove(RTL);
            }

            break;

          case 'label':
            this.setText(newProp.label);
            break;

          case 'labelPosition':
            var label = wrapper.getElementsByClassName(LABEL)[0];
            var labelWrap = wrapper.getElementsByTagName('label')[0];
            (0, _ej2Base.detach)(label);

            if (newProp.labelPosition === 'After') {
              labelWrap.appendChild(label);
            } else {
              labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
            }

            break;

          case 'name':
            this.element.setAttribute('name', newProp.name);
            break;

          case 'value':
            this.element.setAttribute('value', newProp.value);
            break;

          case 'htmlAttributes':
            this.updateHtmlAttributeToWrapper();
            break;
        }
      }
    };
    /**
     * Initialize Angular, React and Unique ID support.
     * @private
     */


    CheckBox.prototype.preRender = function () {
      var element = this.element;
      this.formElement = (0, _ej2Base.closest)(this.element, 'form');
      this.tagName = this.element.tagName;
      element = (0, _common.wrapperInitialize)(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');
      this.element = element;

      if (this.element.getAttribute('type') !== 'checkbox') {
        this.element.setAttribute('type', 'checkbox');
      }

      if (!this.element.id) {
        this.element.id = (0, _ej2Base.getUniqueID)('e-' + this.getModuleName());
      }
    };
    /**
     * Initialize the control rendering.
     * @private
     */


    CheckBox.prototype.render = function () {
      this.initWrapper();
      this.initialize();

      if (!this.disabled) {
        this.wireEvents();
      }

      this.updateHtmlAttributeToWrapper();
    };

    CheckBox.prototype.setDisabled = function () {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED);
      wrapper.setAttribute('aria-disabled', 'true');
    };

    CheckBox.prototype.setText = function (text) {
      var label = this.getWrapper().getElementsByClassName(LABEL)[0];

      if (label) {
        label.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(text) : text;
        label = this.createElement('span', {
          className: LABEL,
          innerHTML: text
        });
        var labelWrap = this.getWrapper().getElementsByTagName('label')[0];

        if (this.labelPosition === 'Before') {
          labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);
        } else {
          labelWrap.appendChild(label);
        }
      }
    };

    CheckBox.prototype.changeHandler = function (e) {
      e.stopPropagation();
    };

    CheckBox.prototype.formResetHandler = function () {
      this.checked = this.initialCheckedValue;
      this.element.checked = this.initialCheckedValue;
    };

    CheckBox.prototype.unWireEvents = function () {
      var wrapper = this.getWrapper();

      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

      _ej2Base.EventHandler.remove(this.element, 'keyup', this.keyUpHandler);

      _ej2Base.EventHandler.remove(this.element, 'focus', this.focusHandler);

      _ej2Base.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);

      var label = wrapper.getElementsByTagName('label')[0];

      _ej2Base.EventHandler.remove(label, 'mousedown', this.labelMouseHandler);

      _ej2Base.EventHandler.remove(label, 'mouseup', this.labelMouseHandler);

      if (this.formElement) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.formResetHandler);
      }

      if (this.tagName === 'EJS-CHECKBOX') {
        _ej2Base.EventHandler.remove(this.element, 'change', this.changeHandler);
      }
    };

    CheckBox.prototype.wireEvents = function () {
      var wrapper = this.getWrapper();

      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focus', this.focusHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);

      var label = wrapper.getElementsByTagName('label')[0];

      _ej2Base.EventHandler.add(label, 'mousedown', this.labelMouseHandler, this);

      _ej2Base.EventHandler.add(label, 'mouseup', this.labelMouseHandler, this);

      if (this.formElement) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);
      }

      if (this.tagName === 'EJS-CHECKBOX') {
        _ej2Base.EventHandler.add(this.element, 'change', this.changeHandler, this);
      }
    };

    CheckBox.prototype.updateHtmlAttributeToWrapper = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];

          if (containerAttr.indexOf(key) > -1) {
            var wrapper = this.getWrapper();

            if (key === 'class') {
              (0, _ej2Base.addClass)([wrapper], this.htmlAttributes[key].split(' '));
            } else if (key === 'title') {
              wrapper.setAttribute(key, this.htmlAttributes[key]);
            } else if (key === 'style') {
              var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
              frameSpan.setAttribute(key, this.htmlAttributes[key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    /**
     * Click the CheckBox element
     * its native method
     * @public
     * @deprecated
     */


    CheckBox.prototype.click = function () {
      this.element.click();
    };
    /**
     * Sets the focus to CheckBox
     * its native method
     * @public
     * @deprecated
     */


    CheckBox.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Event)()], CheckBox.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], CheckBox.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Property)(false)], CheckBox.prototype, "checked", void 0);

    __decorate([(0, _ej2Base.Property)('')], CheckBox.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], CheckBox.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], CheckBox.prototype, "indeterminate", void 0);

    __decorate([(0, _ej2Base.Property)('')], CheckBox.prototype, "label", void 0);

    __decorate([(0, _ej2Base.Property)('After')], CheckBox.prototype, "labelPosition", void 0);

    __decorate([(0, _ej2Base.Property)('')], CheckBox.prototype, "name", void 0);

    __decorate([(0, _ej2Base.Property)('')], CheckBox.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(false)], CheckBox.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Property)({})], CheckBox.prototype, "htmlAttributes", void 0);

    CheckBox = __decorate([_ej2Base.NotifyPropertyChanges], CheckBox);
    return CheckBox;
  }(_ej2Base.Component);

  _exports.CheckBox = CheckBox;
});;
define('@syncfusion/ej2-buttons/src/check-box/index',["exports", "./check-box"], function (_exports, _checkBox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_checkBox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _checkBox[key];
  });
});;
define('@syncfusion/ej2-buttons/src/chips/chip',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.Chip = void 0;

  /**
   * Represents ChipList `Chip` model class.
   */
  var Chip =
  /** @class */
  function () {
    function Chip() {}

    return Chip;
  }();

  _exports.Chip = Chip;
});;
define('@syncfusion/ej2-buttons/src/chips/chip-list',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.ChipList = _exports.classNames = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var classNames = {
    chipSet: 'e-chip-set',
    chip: 'e-chip',
    avatar: 'e-chip-avatar',
    text: 'e-chip-text',
    icon: 'e-chip-icon',
    delete: 'e-chip-delete',
    deleteIcon: 'e-dlt-btn',
    multiSelection: 'e-multi-selection',
    singleSelection: 'e-selection',
    active: 'e-active',
    chipWrapper: 'e-chip-avatar-wrap',
    iconWrapper: 'e-chip-icon-wrap',
    focused: 'e-focused',
    disabled: 'e-disabled',
    rtl: 'e-rtl'
  };
  /**
   * A chip component is a small block of essential information, mostly used on contacts or filter tags.
   * ```html
   * <div id="chip"></div>
   * ```
   * ```typescript
   * <script>
   * var chipObj = new ChipList();
   * chipObj.appendTo("#chip");
   * </script>
   * ```
   */

  _exports.classNames = classNames;

  var ChipList =
  /** @class */
  function (_super) {
    __extends(ChipList, _super);

    function ChipList(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the event handler
     * @private
     */


    ChipList.prototype.preRender = function () {//prerender
    };
    /**
     * To Initialize the control rendering.
     * @returns void
     * @private
     */


    ChipList.prototype.render = function () {
      this.type = this.chips.length ? 'chipset' : this.text || this.element.innerText ? 'chip' : 'chipset';

      if (!(0, _ej2Base.isBlazor)() || !this.isServerRendered) {
        this.setAttributes();
        this.createChip();
        this.setRtl();
        this.select(this.selectedChips);
      }

      this.wireEvent(false);
      this.rippleFunctin = (0, _ej2Base.rippleEffect)(this.element, {
        selector: '.e-chip'
      });
      this.renderComplete();
    };

    ChipList.prototype.createChip = function () {
      this.innerText = this.element.innerText.trim();

      if ((0, _ej2Base.isBlazor)()) {
        var childElement = this.element.querySelectorAll('.e-chip');

        for (var i = 0; i < childElement.length; i++) {
          if (childElement[i] != null) {
            (0, _ej2Base.detach)(childElement[i]);
          }
        }
      } else {
        this.element.innerHTML = '';
      }

      this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);
    };

    ChipList.prototype.setAttributes = function () {
      if (this.type === 'chip') {
        this.element.tabIndex = 0;
        this.element.setAttribute('role', 'option');
      } else {
        this.element.classList.add(classNames.chipSet);
        this.element.setAttribute('role', 'listbox');

        if (this.selection === 'Multiple') {
          this.element.classList.add(classNames.multiSelection);
          this.element.setAttribute('aria-multiselectable', 'true');
        } else if (this.selection === 'Single') {
          this.element.classList.add(classNames.singleSelection);
          this.element.setAttribute('aria-multiselectable', 'false');
        } else {
          this.element.setAttribute('aria-multiselectable', 'false');
        }
      }
    };

    ChipList.prototype.setRtl = function () {
      this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);
    };

    ChipList.prototype.chipCreation = function (data) {
      var chipListArray = [];

      for (var i = 0; i < data.length; i++) {
        var fieldsData = this.getFieldValues(data[i]);
        var chipArray = this.elementCreation(fieldsData);
        var className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : ' ') + ' ' + fieldsData.cssClass).split(' ').filter(function (css) {
          return css;
        });

        if (this.type === 'chip') {
          chipListArray = chipArray;
          (0, _ej2Base.addClass)([this.element], className);
          this.element.setAttribute('aria-label', fieldsData.text);

          if (fieldsData.value) {
            this.element.setAttribute('data-value', fieldsData.value.toString());
          }
        } else {
          var wrapper = this.createElement('DIV', {
            className: className.join(' '),
            attrs: {
              tabIndex: '0',
              role: 'option',
              'aria-label': fieldsData.text,
              'aria-selected': 'false'
            }
          });

          if (fieldsData.value) {
            wrapper.setAttribute('data-value', fieldsData.value.toString());
          }

          (0, _ej2Base.append)(chipArray, wrapper);
          chipListArray.push(wrapper);
        }
      }

      (0, _ej2Base.append)(chipListArray, this.element);
    };

    ChipList.prototype.getFieldValues = function (data) {
      var chipEnabled = this.enabled.toString() === 'false' ? false : true;
      var fields = {
        text: typeof data === 'object' ? data.text ? data.text.toString() : this.text.toString() : this.type === 'chip' ? this.innerText ? this.innerText : this.text.toString() : data.toString(),
        cssClass: typeof data === 'object' ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),
        leadingIconCss: typeof data === 'object' ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),
        avatarIconCss: typeof data === 'object' ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),
        avatarText: typeof data === 'object' ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),
        trailingIconCss: typeof data === 'object' ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),
        enabled: typeof data === 'object' ? !(0, _ej2Base.isNullOrUndefined)(data.enabled) ? data.enabled.toString() === 'false' ? false : true : chipEnabled : chipEnabled,
        value: typeof data === 'object' ? data.value ? data.value.toString() : null : null
      };
      return fields;
    };

    ChipList.prototype.elementCreation = function (fields) {
      var chipArray = [];

      if (fields.avatarText || fields.avatarIconCss) {
        var className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();
        var chipAvatarElement = this.createElement('span', {
          className: className
        });
        chipAvatarElement.innerText = fields.avatarText;
        chipArray.push(chipAvatarElement);
      } else if (fields.leadingIconCss) {
        var className = (classNames.icon + ' ' + fields.leadingIconCss).trim();
        var chipIconElement = this.createElement('span', {
          className: className
        });
        chipArray.push(chipIconElement);
      }

      var chipTextElement = this.createElement('span', {
        className: classNames.text
      });
      chipTextElement.innerText = fields.text;
      chipArray.push(chipTextElement);

      if (fields.trailingIconCss || this.type !== 'chip' && this.enableDelete) {
        var className = (classNames.delete + ' ' + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();
        var chipdeleteElement = this.createElement('span', {
          className: className
        });
        chipArray.push(chipdeleteElement);
      }

      return chipArray;
    };
    /**
     * A function that finds chip based on given input.
     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.
     */


    ChipList.prototype.find = function (fields) {
      var chipData;
      var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll('.' + classNames.chip)[fields];

      if (chipElement && this.type !== 'chip') {
        chipData = {
          text: undefined,
          index: undefined,
          element: undefined,
          data: undefined
        };
        chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);
        chipData.text = typeof this.chips[chipData.index] === 'object' ? this.chips[chipData.index].text ? this.chips[chipData.index].text.toString() : '' : this.chips[chipData.index].toString();
        chipData.data = this.chips[chipData.index];
        chipData.element = chipElement;
      }

      return chipData;
    };
    /**
     * A function that adds chip items based on given input.
     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or
     *  array of number or array of chip model or string data or number data or chip model.
     */


    ChipList.prototype.add = function (chipsData) {
      var _a;

      if (this.type !== 'chip') {
        var fieldData = chipsData instanceof Array ? chipsData : [chipsData];

        (_a = this.chips).push.apply(_a, fieldData);

        this.chipCreation(fieldData);
      }
    };
    /**
     * A function that selects chip items based on given input.
     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
     *  or chip element or array of chip element.
     */


    ChipList.prototype.select = function (fields) {
      this.onSelect(fields, false);
    };

    ChipList.prototype.onSelect = function (fields, callFromProperty) {
      if (this.type !== 'chip' && this.selection !== 'None') {
        if (callFromProperty) {
          var chipElements = this.element.querySelectorAll('.' + classNames.chip);

          for (var i = 0; i < chipElements.length; i++) {
            chipElements[i].setAttribute('aria-selected', 'false');
            chipElements[i].classList.remove(classNames.active);
          }
        }

        var fieldData = fields instanceof Array ? fields : [fields];

        for (var i = 0; i < fieldData.length; i++) {
          var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];

          if (chipElement instanceof HTMLElement) {
            this.selectionHandler(chipElement);
          }
        }
      }
    };
    /**
     * A function that removes chip items based on given input.
     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number
     *  or chip element or array of chip element.
     */


    ChipList.prototype.remove = function (fields) {
      var _this = this;

      if (this.type !== 'chip') {
        var fieldData = fields instanceof Array ? fields : [fields];
        var chipElements_1 = [];
        var chipCollection_1 = this.element.querySelectorAll('.' + classNames.chip);
        fieldData.forEach(function (data) {
          var chipElement = data instanceof HTMLElement ? data : chipCollection_1[data];

          if (chipElement instanceof HTMLElement) {
            chipElements_1.push(chipElement);
          }
        });
        chipElements_1.forEach(function (element) {
          var chips = _this.element.querySelectorAll('.' + classNames.chip);

          var index = Array.prototype.slice.call(chips).indexOf(element);

          _this.deleteHandler(element, index);
        });
      }
    };
    /**
     * A function that returns selected chips data.
     */


    ChipList.prototype.getSelectedChips = function () {
      var selectedChips;

      if (this.type !== 'chip' && this.selection !== 'None') {
        var selectedItems = {
          texts: [],
          Indexes: [],
          data: [],
          elements: []
        };
        var items = this.element.querySelectorAll('.' + classNames.active);

        for (var i = 0; i < items.length; i++) {
          var chip = items[i];
          selectedItems.elements.push(chip);
          var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);
          selectedItems.Indexes.push(index);
          selectedItems.data.push(this.chips[index]);
          var text = typeof this.chips[index] === 'object' ? this.chips[index].text.toString() : this.chips[index].toString();
          selectedItems.texts.push(text);
        }

        var selectedItem = {
          text: selectedItems.texts[0],
          index: selectedItems.Indexes[0],
          data: selectedItems.data[0],
          element: selectedItems.elements[0]
        };
        selectedChips = !(0, _ej2Base.isNullOrUndefined)(selectedItem.index) ? this.selection === 'Multiple' ? selectedItems : selectedItem : undefined;
      }

      return selectedChips;
    };

    ChipList.prototype.wireEvent = function (unWireEvent) {
      if (!unWireEvent) {
        _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

        _ej2Base.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);

        _ej2Base.EventHandler.add(this.element, 'keydown', this.keyHandler, this);

        _ej2Base.EventHandler.add(this.element, 'keyup', this.keyHandler, this);
      } else {
        _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

        _ej2Base.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);

        _ej2Base.EventHandler.remove(this.element, 'keydown', this.keyHandler);

        _ej2Base.EventHandler.remove(this.element, 'keyup', this.keyHandler);
      }
    };

    ChipList.prototype.keyHandler = function (e) {
      if (e.target.classList.contains(classNames.chip)) {
        if (e.type === 'keydown') {
          if (e.keyCode === 13) {
            this.clickHandler(e);
          } else if (e.keyCode === 46 && this.enableDelete) {
            this.clickHandler(e, true);
          }
        } else if (e.keyCode === 9) {
          this.focusInHandler(e.target);
        }
      }
    };

    ChipList.prototype.focusInHandler = function (chipWrapper) {
      if (!chipWrapper.classList.contains(classNames.focused)) {
        chipWrapper.classList.add(classNames.focused);
      }
    };

    ChipList.prototype.focusOutHandler = function (e) {
      var chipWrapper = (0, _ej2Base.closest)(e.target, '.' + classNames.chip);
      var focusedElement = this.type === 'chip' ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector('.' + classNames.focused);

      if (chipWrapper && focusedElement) {
        focusedElement.classList.remove(classNames.focused);
      }
    };

    ChipList.prototype.clickHandler = function (e, del) {
      var _this = this;

      if (del === void 0) {
        del = false;
      }

      var chipWrapper = (0, _ej2Base.closest)(e.target, '.' + classNames.chip);

      if (chipWrapper) {
        var chipDataArgs = void 0;

        if (this.type !== 'chip') {
          chipDataArgs = this.find(chipWrapper);
        } else {
          var index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);
          chipDataArgs = {
            text: this.innerText ? this.innerText : this.text,
            element: chipWrapper,
            data: this.text,
            index: index
          };
        }

        chipDataArgs.event = e;
        chipDataArgs.cancel = false;
        this.trigger('beforeClick', chipDataArgs, function (observedArgs) {
          if (!observedArgs.cancel) {
            observedArgs.element = (0, _ej2Base.isBlazor)() ? (0, _ej2Base.getElement)(observedArgs.element) : observedArgs.element;

            _this.clickEventHandler(observedArgs.element, e, del);
          }
        });
      }
    };

    ChipList.prototype.clickEventHandler = function (chipWrapper, e, del) {
      var _this = this;

      if (this.type !== 'chip') {
        var chipData = this.find(chipWrapper);
        chipData.event = e;
        var deleteElement = e.target.classList.contains(classNames.delete) ? e.target : del ? chipWrapper.querySelector('.' + classNames.delete) : undefined;

        if (deleteElement && this.enableDelete) {
          chipData.cancel = false;
          var deletedItemArgs = chipData;
          this.trigger('delete', deletedItemArgs, function (observedArgs) {
            if (!observedArgs.cancel) {
              observedArgs.element = (0, _ej2Base.isBlazor)() ? (0, _ej2Base.getElement)(observedArgs.element) : observedArgs.element;

              _this.deleteHandler(observedArgs.element, observedArgs.index);
            }
          });
        } else if (this.selection !== 'None') {
          this.selectionHandler(chipWrapper);
          chipData.selected = chipWrapper.classList.contains(classNames.active);
          var selectedItemArgs = chipData;
          this.trigger('click', selectedItemArgs);
        } else {
          this.focusInHandler(chipWrapper);
          var clickedItemArgs = chipData;
          this.trigger('click', clickedItemArgs);
        }
      } else {
        this.focusInHandler(chipWrapper);
        var clickedItemArgs = {
          text: this.innerText ? this.innerText : this.text,
          element: chipWrapper,
          data: this.text,
          event: e
        };
        this.trigger('click', clickedItemArgs);
      }
    };

    ChipList.prototype.selectionHandler = function (chipWrapper) {
      if (this.selection === 'Single') {
        var activeElement = this.element.querySelector('.' + classNames.active);

        if (activeElement && activeElement !== chipWrapper) {
          activeElement.classList.remove(classNames.active);
          activeElement.setAttribute('aria-selected', 'false');
        }

        this.setProperties({
          selectedChips: null
        }, true);
      } else {
        this.setProperties({
          selectedChips: []
        }, true);
      }

      if (chipWrapper.classList.contains(classNames.active)) {
        chipWrapper.classList.remove(classNames.active);
        chipWrapper.setAttribute('aria-selected', 'false');
      } else {
        chipWrapper.classList.add(classNames.active);
        chipWrapper.setAttribute('aria-selected', 'true');
      }

      this.updateSelectedChips();
    };

    ChipList.prototype.updateSelectedChips = function () {
      var chipListEle = this.element.querySelectorAll('.e-chip');
      var chipCollIndex = [];
      var chipCollValue = [];
      var chip = null;
      var value;

      for (var i = 0; i < chipListEle.length; i++) {
        var selectedEle = this.element.querySelectorAll('.e-chip')[i];

        if (selectedEle.getAttribute('aria-selected') === 'true') {
          value = selectedEle.getAttribute('data-value');

          if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {
            if (value) {
              chip = value;
            } else {
              chip = i;
            }

            break;
          } else {
            if (value) {
              chipCollValue.push(value);
            } else {
              chipCollIndex.push(i);
            }
          }
        }
      }

      this.setProperties({
        selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex
      }, true);
    };

    ChipList.prototype.deleteHandler = function (chipWrapper, index) {
      this.chips.splice(index, 1);
      (0, _ej2Base.detach)(chipWrapper);
    };
    /**
     * It is used to destroy the ChipList component.
     */


    ChipList.prototype.destroy = function () {
      _super.prototype.destroy.call(this);

      (0, _ej2Base.removeClass)([this.element], [classNames.chipSet, classNames.chip, classNames.rtl, classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper, classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter(function (css) {
        return css;
      })));
      this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);
      this.wireEvent(true);
      this.rippleFunctin();

      if ((0, _ej2Base.isBlazor)()) {
        var chipChildElement = this.element.querySelectorAll('.e-chip');

        for (var i = 0; i < chipChildElement.length; i++) {
          if (chipChildElement[i] != null) {
            (0, _ej2Base.detach)(chipChildElement[i]);
          }
        }
      } else {
        this.element.innerHTML = '';
        this.element.innerText = this.innerText;
      }
    };

    ChipList.prototype.removeMultipleAttributes = function (attributes, element) {
      attributes.forEach(function (attr) {
        element.removeAttribute(attr);
      });
    };

    ChipList.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };

    ChipList.prototype.getModuleName = function () {
      return 'chip-list';
    };
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @private
     */


    ChipList.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'chips':
          case 'text':
          case 'avatarText':
          case 'avatarIconCss':
          case 'leadingIconCss':
          case 'trailingIconCss':
          case 'selection':
          case 'enableDelete':
          case 'enabled':
            this.isServerRendered = false;
            this.refresh();
            this.isServerRendered = true;
            break;

          case 'cssClass':
            if (this.type === 'chip') {
              (0, _ej2Base.removeClass)([this.element], oldProp.cssClass.toString().split(' ').filter(function (css) {
                return css;
              }));
              (0, _ej2Base.addClass)([this.element], newProp.cssClass.toString().split(' ').filter(function (css) {
                return css;
              }));
            } else {
              this.isServerRendered = false;
              this.refresh();
              this.isServerRendered = true;
            }

            break;

          case 'selectedChips':
            (0, _ej2Base.removeClass)(this.element.querySelectorAll('.e-active'), 'e-active');
            this.onSelect(newProp.selectedChips, true);
            break;

          case 'enableRtl':
            this.setRtl();
            break;
        }
      }
    };

    __decorate([(0, _ej2Base.Property)([])], ChipList.prototype, "chips", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "avatarText", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "avatarIconCss", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "leadingIconCss", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "trailingIconCss", void 0);

    __decorate([(0, _ej2Base.Property)('')], ChipList.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ChipList.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)([])], ChipList.prototype, "selectedChips", void 0);

    __decorate([(0, _ej2Base.Property)('None')], ChipList.prototype, "selection", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ChipList.prototype, "enableDelete", void 0);

    __decorate([(0, _ej2Base.Event)()], ChipList.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], ChipList.prototype, "click", void 0);

    __decorate([(0, _ej2Base.Event)()], ChipList.prototype, "beforeClick", void 0);

    __decorate([(0, _ej2Base.Event)()], ChipList.prototype, "delete", void 0);

    ChipList = __decorate([_ej2Base.NotifyPropertyChanges], ChipList);
    return ChipList;
  }(_ej2Base.Component);

  _exports.ChipList = ChipList;
});;
define('@syncfusion/ej2-buttons/src/chips/index',["exports", "./chip-list", "./chip"], function (_exports, _chipList, _chip) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_chipList).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _chipList[key];
  });
  Object.keys(_chip).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _chip[key];
  });
});;
define('@syncfusion/ej2-buttons/src/common/common',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.wrapperInitialize = wrapperInitialize;
  _exports.getTextNode = getTextNode;
  _exports.destroy = destroy;
  _exports.preRender = preRender;
  _exports.createCheckBox = createCheckBox;
  _exports.rippleMouseHandler = rippleMouseHandler;
  _exports.setHiddenInput = setHiddenInput;

  /**
   * Initialize wrapper element for angular.
   * @private
   */
  function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
    var input = element;

    if (element.tagName === tag) {
      var ejInstance = (0, _ej2Base.getValue)('ej2_instances', element);
      input = createElement('input', {
        attrs: {
          'type': type
        }
      });
      var props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];

      for (var index = 0, len = element.attributes.length; index < len; index++) {
        if (props.indexOf(element.attributes[index].nodeName) === -1) {
          input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
        }
      }

      (0, _ej2Base.attributes)(element, {
        'class': WRAPPER,
        'role': role,
        'aria-checked': 'false'
      });
      element.appendChild(input);
      (0, _ej2Base.setValue)('ej2_instances', ejInstance, input);
      (0, _ej2Base.deleteObject)(element, 'ej2_instances');
    }

    return input;
  }

  function getTextNode(element) {
    var node;
    var childnode = element.childNodes;

    for (var i = 0; i < childnode.length; i++) {
      node = childnode[i];

      if (node.nodeType === 3) {
        return node;
      }
    }

    return null;
  }
  /**
   * Destroy the button components.
   * @private
   */


  function destroy(ejInst, wrapper, tagName) {
    if (tagName === 'INPUT') {
      wrapper.parentNode.insertBefore(ejInst.element, wrapper);
      (0, _ej2Base.detach)(wrapper);
      ejInst.element.checked = false;
      ['name', 'value', 'disabled'].forEach(function (key) {
        ejInst.element.removeAttribute(key);
      });
    } else {
      ['role', 'aria-checked', 'class'].forEach(function (key) {
        wrapper.removeAttribute(key);
      });
      wrapper.innerHTML = '';
    }
  }

  function preRender(proxy, control, wrapper, element, moduleName) {
    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);
    proxy.element = element;

    if (proxy.element.getAttribute('type') !== 'checkbox') {
      proxy.element.setAttribute('type', 'checkbox');
    }

    if (!proxy.element.id) {
      proxy.element.id = (0, _ej2Base.getUniqueID)('e-' + moduleName);
    }
  }
  /**
   * Creates CheckBox component UI with theming and ripple support.
   * @private
   */


  function createCheckBox(createElement, enableRipple, options) {
    if (enableRipple === void 0) {
      enableRipple = false;
    }

    if (options === void 0) {
      options = {};
    }

    var wrapper = createElement('div', {
      className: 'e-checkbox-wrapper e-css'
    });

    if (options.cssClass) {
      (0, _ej2Base.addClass)([wrapper], options.cssClass.split(' '));
    }

    if (options.enableRtl) {
      wrapper.classList.add('e-rtl');
    }

    if (enableRipple) {
      var rippleSpan = createElement('span', {
        className: 'e-ripple-container'
      });
      (0, _ej2Base.rippleEffect)(rippleSpan, {
        isCenterRipple: true,
        duration: 400
      });
      wrapper.appendChild(rippleSpan);
    }

    var frameSpan = createElement('span', {
      className: 'e-frame e-icons'
    });

    if (options.checked) {
      frameSpan.classList.add('e-check');
    }

    wrapper.appendChild(frameSpan);

    if (options.label) {
      var labelSpan = createElement('span', {
        className: 'e-label',
        innerHTML: options.label
      });
      wrapper.appendChild(labelSpan);
    }

    return wrapper;
  }

  function rippleMouseHandler(e, rippleSpan) {
    if (rippleSpan) {
      var event_1 = document.createEvent('MouseEvents');
      event_1.initEvent(e.type, false, true);
      rippleSpan.dispatchEvent(event_1);
    }
  }
  /**
   * Append hidden input to given element
   * @private
   */


  function setHiddenInput(proxy, wrap) {
    if (proxy.element.getAttribute('ejs-for')) {
      wrap.appendChild(proxy.createElement('input', {
        attrs: {
          'name': proxy.name || proxy.element.name,
          'value': 'false',
          'type': 'hidden'
        }
      }));
    }
  }
});;
define('@syncfusion/ej2-buttons/src/common/index',["exports", "./common"], function (_exports, _common) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_common).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _common[key];
  });
});;
define('@syncfusion/ej2-buttons/src/index',["exports", "./common/index", "./button/index", "./check-box/index", "./radio-button/index", "./switch/index", "./chips/index"], function (_exports, _index, _index2, _index3, _index4, _index5, _index6) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
  Object.keys(_index6).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index6[key];
  });
});;
define('@syncfusion/ej2-buttons/src/radio-button/index',["exports", "./radio-button"], function (_exports, _radioButton) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_radioButton).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _radioButton[key];
  });
});;
define('@syncfusion/ej2-buttons/src/radio-button/radio-button',["exports", "@syncfusion/ej2-base", "./../common/common"], function (_exports, _ej2Base, _common) {
  "use strict";

  _exports.__esModule = true;
  _exports.RadioButton = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var LABEL = 'e-label';
  var RIPPLE = 'e-ripple-container';
  var RTL = 'e-rtl';
  var WRAPPER = 'e-radio-wrapper';
  /**
   * The RadioButton is a graphical user interface element that allows you to select one option from the choices.
   * It contains checked and unchecked states.
   * ```html
   * <input type="radio" id="radio"/>
   * <script>
   * var radioObj = new RadioButton({ label: "Default" });
   * radioObj.appendTo("#radio");
   * </script>
   * ```
   */

  var RadioButton =
  /** @class */
  function (_super) {
    __extends(RadioButton, _super);
    /**
     * Constructor for creating the widget
     * @private
     */


    function RadioButton(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isFocused = false;
      return _this;
    }

    RadioButton_1 = RadioButton;

    RadioButton.prototype.changeHandler = function (event) {
      this.checked = true;
      this.dataBind();
      var changeEventArgs = {
        value: this.value,
        event: event
      };
      this.trigger('change', changeEventArgs);

      if (this.tagName === 'EJS-RADIOBUTTON') {
        event.stopPropagation();
      }
    };

    RadioButton.prototype.updateChange = function (state) {
      var input;
      var instance;
      var radioGrp = this.getRadioGroup();

      for (var i = 0; i < radioGrp.length; i++) {
        input = radioGrp[i];

        if (input !== this.element) {
          instance = (0, _ej2Base.getInstance)(input, RadioButton_1);
          instance.checked = false;

          if (this.tagName === 'EJS-RADIOBUTTON') {
            instance.angularValue = this.value;
          }
        }
      }
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    RadioButton.prototype.destroy = function () {
      var _this = this;

      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        if (!this.disabled) {
          this.unWireEvents();
        }
      } else {
        var radioWrap_1 = this.element.parentElement;

        _super.prototype.destroy.call(this);

        if (!this.disabled) {
          this.unWireEvents();
        }

        if (this.tagName === 'INPUT') {
          radioWrap_1.parentNode.insertBefore(this.element, radioWrap_1);
          (0, _ej2Base.detach)(radioWrap_1);
          this.element.checked = false;
          ['name', 'value', 'disabled'].forEach(function (key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ['role', 'aria-checked', 'class'].forEach(function (key) {
            radioWrap_1.removeAttribute(key);
          });
          radioWrap_1.innerHTML = '';
        }
      }
    };

    RadioButton.prototype.focusHandler = function () {
      this.isFocused = true;
    };

    RadioButton.prototype.focusOutHandler = function () {
      this.getLabel().classList.remove('e-focus');
    };

    RadioButton.prototype.getModuleName = function () {
      return 'radio';
    };
    /**
     * To get the value of selected radio button in a group.
     * @method getSelectedValue
     * @return {string}
     */


    RadioButton.prototype.getSelectedValue = function () {
      var input;
      var radioGrp = this.getRadioGroup();

      for (var i = 0, len = radioGrp.length; i < len; i++) {
        input = radioGrp[i];

        if (input.checked) {
          return input.value;
        }
      }

      return '';
    };

    RadioButton.prototype.getRadioGroup = function () {
      return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute('name') + '"]');
    };
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */


    RadioButton.prototype.getPersistData = function () {
      return this.addOnPersist(['checked']);
    };

    RadioButton.prototype.getLabel = function () {
      return this.element.nextElementSibling;
    };

    RadioButton.prototype.initialize = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }

      this.initWrapper();

      if (this.name) {
        this.element.setAttribute('name', this.name);
      }

      if (this.value) {
        this.element.setAttribute('value', this.value);
      }

      if (this.checked) {
        this.element.checked = true;
      }

      if (this.disabled) {
        this.setDisabled();
      }
    };

    RadioButton.prototype.initWrapper = function () {
      var rippleSpan;
      var wrapper = this.element.parentElement;

      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement('div', {
          className: WRAPPER
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }

      var label = this.createElement('label', {
        attrs: {
          for: this.element.id
        }
      });
      wrapper.appendChild(this.element);
      wrapper.appendChild(label);

      if (_ej2Base.isRippleEnabled) {
        rippleSpan = this.createElement('span', {
          className: RIPPLE
        });
        label.appendChild(rippleSpan);
        (0, _ej2Base.rippleEffect)(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }

      wrapper.classList.add('e-wrapper');

      if (this.enableRtl) {
        label.classList.add(RTL);
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([label], this.cssClass.split(' '));
      }

      if (this.label) {
        this.setText(this.label);
      }
    };

    RadioButton.prototype.keyUpHandler = function () {
      if (this.isFocused) {
        this.getLabel().classList.add('e-focus');
      }
    };

    RadioButton.prototype.labelRippleHandler = function (e) {
      var ripple = this.getLabel().getElementsByClassName(RIPPLE)[0];
      (0, _common.rippleMouseHandler)(e, ripple);
    };

    RadioButton.prototype.formResetHandler = function () {
      this.checked = this.initialCheckedValue;

      if (this.initialCheckedValue) {
        (0, _ej2Base.attributes)(this.element, {
          'checked': 'true'
        });
      }
    };
    /**
     * Called internally if any of the property value changes.
     * @private
     */


    RadioButton.prototype.onPropertyChanged = function (newProp, oldProp) {
      var label = this.getLabel();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'checked':
            if (newProp.checked) {
              this.updateChange(newProp.checked);
            }

            this.element.checked = newProp.checked;
            break;

          case 'disabled':
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              this.wireEvents();
            }

            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([label], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([label], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              label.classList.add(RTL);
            } else {
              label.classList.remove(RTL);
            }

            break;

          case 'label':
            this.setText(newProp.label);
            break;

          case 'labelPosition':
            if (newProp.labelPosition === 'Before') {
              label.classList.add('e-right');
            } else {
              label.classList.remove('e-right');
            }

            break;

          case 'name':
            this.element.setAttribute('name', newProp.name);
            break;

          case 'value':
            this.element.setAttribute('value', newProp.value);
            break;
        }
      }
    };
    /**
     * Initialize checked Property, Angular and React and Unique ID support.
     * @private
     */


    RadioButton.prototype.preRender = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        return;
      }

      var element = this.element;
      this.formElement = (0, _ej2Base.closest)(this.element, 'form');
      this.tagName = this.element.tagName;
      element = (0, _common.wrapperInitialize)(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER, 'radio');
      this.element = element;

      if (this.element.getAttribute('type') !== 'radio') {
        this.element.setAttribute('type', 'radio');
      }

      if (!this.element.id) {
        this.element.id = (0, _ej2Base.getUniqueID)('e-' + this.getModuleName());
      }

      if (this.tagName === 'EJS-RADIOBUTTON') {
        var formControlName = this.element.getAttribute('formcontrolname');

        if (formControlName) {
          this.setProperties({
            'name': formControlName
          }, true);
          this.element.setAttribute('name', formControlName);
        }
      }
    };
    /**
     * Initialize the control rendering
     * @private
     */


    RadioButton.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        if (_ej2Base.isRippleEnabled) {
          var rippleSpan = this.element.parentElement.getElementsByClassName(RIPPLE)[0];
          (0, _ej2Base.rippleEffect)(rippleSpan, {
            duration: 400,
            isCenterRipple: true
          });
        }
      } else {
        this.initialize();
      }

      if (!this.disabled) {
        this.wireEvents();
      }

      this.renderComplete();
    };

    RadioButton.prototype.setDisabled = function () {
      this.element.disabled = true;
    };

    RadioButton.prototype.setText = function (text) {
      var label = this.getLabel();
      var textLabel = label.getElementsByClassName(LABEL)[0];

      if (textLabel) {
        textLabel.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(text) : text;
        textLabel = this.createElement('span', {
          className: LABEL,
          innerHTML: text
        });
        label.appendChild(textLabel);
      }

      if (this.labelPosition === 'Before') {
        this.getLabel().classList.add('e-right');
      } else {
        this.getLabel().classList.remove('e-right');
      }
    };

    RadioButton.prototype.unWireEvents = function () {
      var label = this.getLabel();

      _ej2Base.EventHandler.remove(this.element, 'change', this.changeHandler);

      _ej2Base.EventHandler.remove(this.element, 'focus', this.focusHandler);

      _ej2Base.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);

      _ej2Base.EventHandler.remove(this.element, 'keyup', this.keyUpHandler);

      var rippleLabel = label.getElementsByClassName(LABEL)[0];

      if (rippleLabel) {
        _ej2Base.EventHandler.remove(rippleLabel, 'mousedown', this.labelRippleHandler);

        _ej2Base.EventHandler.remove(rippleLabel, 'mouseup', this.labelRippleHandler);
      }

      if (this.formElement) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.formResetHandler);
      }
    };

    RadioButton.prototype.wireEvents = function () {
      var label = this.getLabel();

      _ej2Base.EventHandler.add(this.element, 'change', this.changeHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focus', this.focusHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);

      var rippleLabel = label.getElementsByClassName(LABEL)[0];

      if (rippleLabel) {
        _ej2Base.EventHandler.add(rippleLabel, 'mousedown', this.labelRippleHandler, this);

        _ej2Base.EventHandler.add(rippleLabel, 'mouseup', this.labelRippleHandler, this);
      }

      if (this.formElement) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);
      }
    };
    /**
     * Click the RadioButton element
     * its native method
     * @public
     */


    RadioButton.prototype.click = function () {
      this.element.click();
    };
    /**
     * Sets the focus to RadioButton
     * its native method
     * @public
     */


    RadioButton.prototype.focusIn = function () {
      this.element.focus();
    };

    var RadioButton_1;

    __decorate([(0, _ej2Base.Event)()], RadioButton.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], RadioButton.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Property)(false)], RadioButton.prototype, "checked", void 0);

    __decorate([(0, _ej2Base.Property)('')], RadioButton.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], RadioButton.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('')], RadioButton.prototype, "label", void 0);

    __decorate([(0, _ej2Base.Property)('After')], RadioButton.prototype, "labelPosition", void 0);

    __decorate([(0, _ej2Base.Property)('')], RadioButton.prototype, "name", void 0);

    __decorate([(0, _ej2Base.Property)('')], RadioButton.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(false)], RadioButton.prototype, "enableHtmlSanitizer", void 0);

    RadioButton = RadioButton_1 = __decorate([_ej2Base.NotifyPropertyChanges], RadioButton);
    return RadioButton;
  }(_ej2Base.Component);

  _exports.RadioButton = RadioButton;
});;
define('@syncfusion/ej2-buttons/src/switch/index',["exports", "./switch"], function (_exports, _switch) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_switch).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _switch[key];
  });
});;
define('@syncfusion/ej2-buttons/src/switch/switch',["exports", "@syncfusion/ej2-base", "./../common/common"], function (_exports, _ej2Base, _common) {
  "use strict";

  _exports.__esModule = true;
  _exports.Switch = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CHECK = 'e-check';
  var DISABLED = 'e-switch-disabled';
  var RIPPLE = 'e-ripple-container';
  var RIPPLE_CHECK = 'e-ripple-check';
  var RTL = 'e-rtl';
  var WRAPPER = 'e-switch-wrapper';
  var ACTIVE = 'e-switch-active';
  /**
   * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
   * ```html
   * <input type="checkbox" id="switch"/>
   * <script>
   * var switchObj = new Switch({});
   * switchObj.appendTo("#switch");
   * </script>
   * ```
   */

  var Switch =
  /** @class */
  function (_super) {
    __extends(Switch, _super);
    /**
     * Constructor for creating the widget.
     * @private
     */


    function Switch(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isFocused = false;
      _this.isDrag = false;
      return _this;
    }

    Switch.prototype.changeState = function (state) {
      var ariaState;
      var rippleSpan;
      var wrapper = this.getWrapper();
      var bar = wrapper.querySelector('.e-switch-inner');
      var handle = wrapper.querySelector('.e-switch-handle');

      if (_ej2Base.isRippleEnabled) {
        rippleSpan = wrapper.getElementsByClassName(RIPPLE)[0];
      }

      if (state) {
        (0, _ej2Base.addClass)([bar, handle], ACTIVE);
        ariaState = 'true';
        this.element.checked = true;
        this.checked = true;

        if (rippleSpan) {
          (0, _ej2Base.addClass)([rippleSpan], [RIPPLE_CHECK]);
        }
      } else {
        (0, _ej2Base.removeClass)([bar, handle], ACTIVE);
        ariaState = 'false';
        this.element.checked = false;
        this.checked = false;

        if (rippleSpan) {
          (0, _ej2Base.removeClass)([rippleSpan], [RIPPLE_CHECK]);
        }
      }

      wrapper.setAttribute('aria-checked', ariaState);
    };

    Switch.prototype.clickHandler = function (evt) {
      this.isDrag = false;
      this.focusOutHandler();
      this.changeState(!this.checked);
      this.element.focus();
      var changeEventArgs = {
        checked: this.element.checked,
        event: evt
      };
      this.trigger('change', changeEventArgs);
    };
    /**
     * Destroys the Switch widget.
     * @returns void
     */


    Switch.prototype.destroy = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        if (!this.disabled) {
          this.unWireEvents();
        }
      } else {
        _super.prototype.destroy.call(this);

        if (!this.disabled) {
          this.unWireEvents();
        }

        (0, _common.destroy)(this, this.getWrapper(), this.tagName);
      }
    };

    Switch.prototype.focusHandler = function () {
      this.isFocused = true;
    };

    Switch.prototype.focusOutHandler = function () {
      this.getWrapper().classList.remove('e-focus');
    };
    /**
     * Gets the module name.
     * @private
     */


    Switch.prototype.getModuleName = function () {
      return 'switch';
    };
    /**
     * Gets the properties to be maintained in the persistence state.
     * @private
     */


    Switch.prototype.getPersistData = function () {
      return this.addOnPersist(['checked']);
    };

    Switch.prototype.getWrapper = function () {
      return this.element.parentElement;
    };

    Switch.prototype.initialize = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.initialSwitchCheckedValue)) {
        this.initialSwitchCheckedValue = this.checked;
      }

      if (this.name) {
        this.element.setAttribute('name', this.name);
      }

      if (this.value) {
        this.element.setAttribute('value', this.value);
      }

      if (this.checked) {
        this.changeState(true);
      }

      if (this.disabled) {
        this.setDisabled();
      }

      if (this.onLabel || this.offLabel) {
        this.setLabel(this.onLabel, this.offLabel);
      }
    };

    Switch.prototype.initWrapper = function () {
      var wrapper = this.element.parentElement;

      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement('div', {
          className: WRAPPER,
          attrs: {
            'role': 'switch',
            'aria-checked': 'false'
          }
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }

      var switchInner = this.createElement('span', {
        className: 'e-switch-inner'
      });
      var onLabel = this.createElement('span', {
        className: 'e-switch-on'
      });
      var offLabel = this.createElement('span', {
        className: 'e-switch-off'
      });
      var handle = this.createElement('span', {
        className: 'e-switch-handle'
      });
      wrapper.appendChild(this.element);
      (0, _common.setHiddenInput)(this, wrapper);
      switchInner.appendChild(onLabel);
      switchInner.appendChild(offLabel);
      wrapper.appendChild(switchInner);
      wrapper.appendChild(handle);

      if (_ej2Base.isRippleEnabled) {
        var rippleSpan = this.createElement('span', {
          className: RIPPLE
        });
        handle.appendChild(rippleSpan);
        (0, _ej2Base.rippleEffect)(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }

      wrapper.classList.add('e-wrapper');

      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([wrapper], this.cssClass.split(' '));
      }
    };
    /**
     * Called internally if any of the property value changes.
     * @private
     */


    Switch.prototype.onPropertyChanged = function (newProp, oldProp) {
      var wrapper = this.getWrapper();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'checked':
            this.changeState(newProp.checked);
            break;

          case 'disabled':
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED);
              wrapper.setAttribute('aria-disabled', 'false');
              this.wireEvents();
            }

            break;

          case 'value':
            this.element.setAttribute('value', newProp.value);
            break;

          case 'name':
            this.element.setAttribute('name', newProp.name);
            break;

          case 'onLabel':
          case 'offLabel':
            this.setLabel(newProp.onLabel, newProp.offLabel);
            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL);
            } else {
              wrapper.classList.remove(RTL);
            }

            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([wrapper], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([wrapper], newProp.cssClass.split(' '));
            }

            break;
        }
      }
    };
    /**
     * Initialize Angular, React and Unique ID support.
     * @private
     */


    Switch.prototype.preRender = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        return;
      }

      var element = this.element;
      this.formElement = (0, _ej2Base.closest)(this.element, 'form');
      this.tagName = this.element.tagName;
      (0, _common.preRender)(this, 'EJS-SWITCH', WRAPPER, element, this.getModuleName());
    };
    /**
     * Initialize control rendering.
     * @private
     */


    Switch.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        if (_ej2Base.isRippleEnabled) {
          (0, _ej2Base.rippleEffect)(this.element.parentElement, {
            duration: 400,
            isCenterRipple: true
          });
        }
      } else {
        this.initWrapper();
        this.initialize();
      }

      if (!this.disabled) {
        this.wireEvents();
      }

      this.renderComplete();
    };

    Switch.prototype.rippleHandler = function (e) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      (0, _common.rippleMouseHandler)(e, rippleSpan);

      if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {
        this.isDrag = true;
        this.isFocused = false;
      }
    };

    Switch.prototype.rippleTouchHandler = function (eventType) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];

      if (rippleSpan) {
        var event_1 = document.createEvent('MouseEvents');
        event_1.initEvent(eventType, false, true);
        rippleSpan.dispatchEvent(event_1);
      }
    };

    Switch.prototype.setDisabled = function () {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED);
      wrapper.setAttribute('aria-disabled', 'true');
    };

    Switch.prototype.setLabel = function (onText, offText) {
      var wrapper = this.getWrapper();

      if (onText) {
        wrapper.querySelector('.e-switch-on').textContent = onText;
      }

      if (offText) {
        wrapper.querySelector('.e-switch-off').textContent = offText;
      }
    };

    Switch.prototype.switchFocusHandler = function () {
      if (this.isFocused) {
        this.getWrapper().classList.add('e-focus');
      }
    };

    Switch.prototype.switchMouseUp = function (e) {
      var target = e.target;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];

      if (e.type === 'touchmove') {
        e.preventDefault();
      }

      if (e.type === 'touchstart') {
        this.isDrag = true;
        this.rippleTouchHandler('mousedown');
      }

      if (this.isDrag) {
        if (e.type === 'mouseup' && target.className.indexOf('e-switch') < 0 || e.type === 'touchend') {
          this.clickHandler(e);
          this.rippleTouchHandler('mouseup');
          e.preventDefault();
        }
      }
    };

    Switch.prototype.formResetHandler = function () {
      this.checked = this.initialSwitchCheckedValue;
      this.element.checked = this.initialSwitchCheckedValue;
    };
    /**
     * Toggle the Switch component state into checked/unchecked.
     * @returns void
     */


    Switch.prototype.toggle = function () {
      this.clickHandler();
    };

    Switch.prototype.wireEvents = function () {
      var wrapper = this.getWrapper();
      var handle = wrapper.querySelector('.e-switch-handle');
      this.delegateMouseUpHandler = this.switchMouseUp.bind(this);
      this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);

      _ej2Base.EventHandler.add(wrapper, 'click', this.clickHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focus', this.focusHandler, this);

      _ej2Base.EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);

      _ej2Base.EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);

      _ej2Base.EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);

      _ej2Base.EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);

      if (this.formElement) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);
      }
    };

    Switch.prototype.unWireEvents = function () {
      var wrapper = this.getWrapper();
      var handle = wrapper.querySelector('.e-switch-handle');

      _ej2Base.EventHandler.remove(wrapper, 'click', this.clickHandler);

      _ej2Base.EventHandler.remove(this.element, 'focus', this.focusHandler);

      _ej2Base.EventHandler.remove(this.element, 'focusout', this.focusOutHandler);

      _ej2Base.EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);

      _ej2Base.EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);

      _ej2Base.EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);

      _ej2Base.EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);

      if (this.formElement) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.formResetHandler);
      }
    };
    /**
     * Click the switch element
     * its native method
     * @public
     */


    Switch.prototype.click = function () {
      this.element.click();
    };
    /**
     * Sets the focus to Switch
     * its native method
     * @public
     */


    Switch.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Event)()], Switch.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], Switch.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Switch.prototype, "checked", void 0);

    __decorate([(0, _ej2Base.Property)('')], Switch.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Switch.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('')], Switch.prototype, "name", void 0);

    __decorate([(0, _ej2Base.Property)('')], Switch.prototype, "onLabel", void 0);

    __decorate([(0, _ej2Base.Property)('')], Switch.prototype, "offLabel", void 0);

    __decorate([(0, _ej2Base.Property)('')], Switch.prototype, "value", void 0);

    Switch = __decorate([_ej2Base.NotifyPropertyChanges], Switch);
    return Switch;
  }(_ej2Base.Component);

  _exports.Switch = Switch;
});;
define('@syncfusion/ej2-data/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-data/src/adaptors',["exports", "@syncfusion/ej2-base", "./util", "./query"], function (_exports, _ej2Base, _util, _query) {
  "use strict";

  _exports.__esModule = true;
  _exports.CacheAdaptor = _exports.RemoteSaveAdaptor = _exports.WebMethodAdaptor = _exports.WebApiAdaptor = _exports.ODataV4Adaptor = _exports.ODataAdaptor = _exports.UrlAdaptor = _exports.JsonAdaptor = _exports.Adaptor = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  /**
   * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.
   * This is the base adaptor class that other adaptors can extend.
   * @hidden
   */
  var Adaptor =
  /** @class */
  function () {
    /**
     * Constructor for Adaptor class
     * @param  {DataOptions} ds?
     * @hidden
     * @returns aggregates
     */
    function Adaptor(ds) {
      // common options for all the adaptors 
      this.options = {
        from: 'table',
        requestType: 'json',
        sortBy: 'sorted',
        select: 'select',
        skip: 'skip',
        group: 'group',
        take: 'take',
        search: 'search',
        count: 'requiresCounts',
        where: 'where',
        aggregates: 'aggregates',
        expand: 'expand'
      };
      /**
       * Specifies the type of adaptor.
       * @default Adaptor
       */

      this.type = Adaptor;
      this.dataSource = ds;
      this.pvt = {};
    }
    /**
     * Returns the data from the query processing.
     * @param  {Object} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @returns Object
     */


    Adaptor.prototype.processResponse = function (data, ds, query, xhr) {
      return data;
    };

    return Adaptor;
  }();

  _exports.Adaptor = Adaptor;

  /**
   * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.
   * @hidden
   */
  var JsonAdaptor =
  /** @class */
  function (_super) {
    __extends(JsonAdaptor, _super);

    function JsonAdaptor() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Process the JSON data based on the provided queries.
     * @param  {DataManager} dataManager
     * @param  {Query} query
     * @returns Object
     */


    JsonAdaptor.prototype.processQuery = function (dataManager, query) {
      var result = dataManager.dataSource.json.slice(0);
      var count = result.length;
      var countFlg = true;
      var ret;
      var key;
      var agg = {};

      for (var i = 0; i < query.queries.length; i++) {
        key = query.queries[i];
        ret = this[key.fn].call(this, result, key.e, query);

        if (key.fn === 'onAggregates') {
          agg[key.e.field + ' - ' + key.e.type] = ret;
        } else {
          result = ret !== undefined ? ret : result;
        }

        if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {
          countFlg = false;
        }

        if (countFlg) {
          count = result.length;
        }
      }

      if (query.isCountRequired) {
        result = {
          result: result,
          count: count,
          aggregates: agg
        };
      }

      return result;
    };
    /**
     * Performs batch update in the JSON array which add, remove and update records.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */


    JsonAdaptor.prototype.batchRequest = function (dm, changes, e) {
      var i;
      var deletedRecordsLen = changes.deletedRecords.length;

      for (i = 0; i < changes.addedRecords.length; i++) {
        this.insert(dm, changes.addedRecords[i]);
      }

      for (i = 0; i < changes.changedRecords.length; i++) {
        this.update(dm, e.key, changes.changedRecords[i]);
      }

      for (i = 0; i < deletedRecordsLen; i++) {
        this.remove(dm, e.key, changes.deletedRecords[i]);
      }

      return changes;
    };
    /**
     * Performs filter operation with the given data and where query.
     * @param  {Object[]} ds
     * @param  {{validate:Function}} e
     */


    JsonAdaptor.prototype.onWhere = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      return ds.filter(function (obj) {
        if (e) {
          return e.validate(obj);
        }
      });
    };
    /**
     * Returns aggregate function based on the aggregate type.
     * @param  {Object[]} ds
     * @param  {{field:string} e
     * @param  {string}} type
     */


    JsonAdaptor.prototype.onAggregates = function (ds, e) {
      var fn = _util.DataUtil.aggregates[e.type];

      if (!ds || !fn || ds.length === 0) {
        return null;
      }

      return fn(ds, e.field);
    };
    /**
     * Performs search operation based on the given query.
     * @param  {Object[]} ds
     * @param  {QueryOptions} e
     */


    JsonAdaptor.prototype.onSearch = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      if (e.fieldNames.length === 0) {
        _util.DataUtil.getFieldList(ds[0], e.fieldNames);
      }

      return ds.filter(function (obj) {
        for (var j = 0; j < e.fieldNames.length; j++) {
          if (e.comparer.call(obj, _util.DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
            return true;
          }
        }

        return false;
      });
    };
    /**
     * Sort the data with given direction and field.
     * @param  {Object[]} ds
     * @param  {{comparer:(a:Object} e
     * @param  {Object} b
     */


    JsonAdaptor.prototype.onSortBy = function (ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }

      var fnCompare;

      var field = _util.DataUtil.getValue(e.fieldName, query);

      if (!field) {
        return ds.sort(e.comparer);
      }

      if (field instanceof Array) {
        field = field.slice(0);

        for (var i = field.length - 1; i >= 0; i--) {
          if (!field[i]) {
            continue;
          }

          fnCompare = e.comparer;

          if (_util.DataUtil.endsWith(field[i], ' desc')) {
            fnCompare = _util.DataUtil.fnSort('descending');
            field[i] = field[i].replace(' desc', '');
          }

          ds = _util.DataUtil.sort(ds, field[i], fnCompare);
        }

        return ds;
      }

      return _util.DataUtil.sort(ds, field, e.comparer);
    };
    /**
     * Group the data based on the given query.
     * @param  {Object[]} ds
     * @param  {QueryOptions} e
     * @param  {Query} query
     */


    JsonAdaptor.prototype.onGroup = function (ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }

      var aggQuery = _query.Query.filterQueries(query.queries, 'onAggregates');

      var agg = [];

      if (aggQuery.length) {
        var tmp = void 0;

        for (var i = 0; i < aggQuery.length; i++) {
          tmp = aggQuery[i].e;
          agg.push({
            type: tmp.type,
            field: _util.DataUtil.getValue(tmp.field, query)
          });
        }
      }

      return _util.DataUtil.group(ds, _util.DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
    };
    /**
     * Retrieves records based on the given page index and size.
     * @param  {Object[]} ds
     * @param  {{pageSize:number} e
     * @param  {number}} pageIndex
     * @param  {Query} query
     */


    JsonAdaptor.prototype.onPage = function (ds, e, query) {
      var size = _util.DataUtil.getValue(e.pageSize, query);

      var start = (_util.DataUtil.getValue(e.pageIndex, query) - 1) * size;
      var end = start + size;

      if (!ds || !ds.length) {
        return ds;
      }

      return ds.slice(start, end);
    };
    /**
     * Retrieves records based on the given start and end index from query.
     * @param  {Object[]} ds
     * @param  {{start:number} e
     * @param  {number}} end
     */


    JsonAdaptor.prototype.onRange = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      return ds.slice(_util.DataUtil.getValue(e.start), _util.DataUtil.getValue(e.end));
    };
    /**
     * Picks the given count of records from the top of the datasource.
     * @param  {Object[]} ds
     * @param  {{nos:number}} e
     */


    JsonAdaptor.prototype.onTake = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      return ds.slice(0, _util.DataUtil.getValue(e.nos));
    };
    /**
     * Skips the given count of records from the data source.
     * @param  {Object[]} ds
     * @param  {{nos:number}} e
     */


    JsonAdaptor.prototype.onSkip = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      return ds.slice(_util.DataUtil.getValue(e.nos));
    };
    /**
     * Selects specified columns from the data source.
     * @param  {Object[]} ds
     * @param  {{fieldNames:string}} e
     */


    JsonAdaptor.prototype.onSelect = function (ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }

      return _util.DataUtil.select(ds, _util.DataUtil.getValue(e.fieldNames));
    };
    /**
     * Inserts new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {number} position
     */


    JsonAdaptor.prototype.insert = function (dm, data, tableName, query, position) {
      if ((0, _ej2Base.isNullOrUndefined)(position)) {
        return dm.dataSource.json.push(data);
      } else {
        return dm.dataSource.json.splice(position, 0, data);
      }
    };
    /**
     * Remove the data from the dataSource based on the key field value.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns null
     */


    JsonAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;

      if (typeof value === 'object' && !(value instanceof Date)) {
        value = value[keyField];
      }

      for (i = 0; i < ds.length; i++) {
        if (ds[i][keyField] === value) {
          break;
        }
      }

      return i !== ds.length ? ds.splice(i, 1) : null;
    };
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns null
     */


    JsonAdaptor.prototype.update = function (dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      var key;

      if (!(0, _ej2Base.isNullOrUndefined)(keyField)) {
        key = (0, _ej2Base.getValue)(keyField, value);
      }

      for (i = 0; i < ds.length; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(keyField) && (0, _ej2Base.getValue)(keyField, ds[i]) === key) {
          break;
        }
      }

      return i < ds.length ? (0, _ej2Base.merge)(ds[i], value) : null;
    };

    return JsonAdaptor;
  }(Adaptor);

  _exports.JsonAdaptor = JsonAdaptor;

  /**
   * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.
   * It interacts with server-side for all DataManager Queries and CRUD operations.
   * @hidden
   */
  var UrlAdaptor =
  /** @class */
  function (_super) {
    __extends(UrlAdaptor, _super);

    function UrlAdaptor() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Process the query to generate request body.
     * @param  {DataManager} dm
     * @param  {Query} query
     * @param  {Object[]} hierarchyFilters?
     * @returns p
     */


    UrlAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
      var queries = this.getQueryRequest(query);

      var singles = _query.Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);

      var params = query.params;
      var url = dm.dataSource.url;
      var temp;
      var skip;
      var take = null;
      var options = this.options;
      var request = {
        sorts: [],
        groups: [],
        filters: [],
        searches: [],
        aggregates: []
      }; // calc Paging & Range

      if ('onPage' in singles) {
        temp = singles.onPage;
        skip = _util.DataUtil.getValue(temp.pageIndex, query);
        take = _util.DataUtil.getValue(temp.pageSize, query);
        skip = (skip - 1) * take;
      } else if ('onRange' in singles) {
        temp = singles.onRange;
        skip = temp.start;
        take = temp.end - temp.start;
      } // Sorting


      for (var i = 0; i < queries.sorts.length; i++) {
        temp = _util.DataUtil.getValue(queries.sorts[i].e.fieldName, query);
        request.sorts.push(_util.DataUtil.callAdaptorFunction(this, 'onEachSort', {
          name: temp,
          direction: queries.sorts[i].e.direction
        }, query));
      } // hierarchy


      if (hierarchyFilters) {
        temp = this.getFiltersFrom(hierarchyFilters, query);

        if (temp) {
          request.filters.push(_util.DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));
        }
      } // Filters


      for (var i = 0; i < queries.filters.length; i++) {
        request.filters.push(_util.DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));
        var keys_3 = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];

        for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];

          if (_util.DataUtil.isNull(request[prop])) {
            delete request[prop];
          }
        }
      } // Searches


      for (var i = 0; i < queries.searches.length; i++) {
        temp = queries.searches[i].e;
        request.searches.push(_util.DataUtil.callAdaptorFunction(this, 'onEachSearch', {
          fields: temp.fieldNames,
          operator: temp.operator,
          key: temp.searchKey,
          ignoreCase: temp.ignoreCase
        }, query));
      } // Grouping


      for (var i = 0; i < queries.groups.length; i++) {
        request.groups.push(_util.DataUtil.getValue(queries.groups[i].e.fieldName, query));
      } // aggregates


      for (var i = 0; i < queries.aggregates.length; i++) {
        temp = queries.aggregates[i].e;
        request.aggregates.push({
          type: temp.type,
          field: _util.DataUtil.getValue(temp.field, query)
        });
      }

      var req = {};
      this.getRequestQuery(options, query, singles, request, req); // Params

      _util.DataUtil.callAdaptorFunction(this, 'addParams', {
        dm: dm,
        query: query,
        params: params,
        reqParams: req
      }); // cleanup


      var keys = Object.keys(req);

      for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
        var prop = keys_2[_a];

        if (_util.DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {
          delete req[prop];
        }
      }

      if (!(options.skip in req && options.take in req) && take !== null) {
        req[options.skip] = _util.DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);
        req[options.take] = _util.DataUtil.callAdaptorFunction(this, 'onTake', take, query);
      }

      var p = this.pvt;
      this.pvt = {};

      if (this.options.requestType === 'json') {
        return {
          data: JSON.stringify(req, _util.DataUtil.parse.jsonDateReplacer),
          url: url,
          pvtData: p,
          type: 'POST',
          contentType: 'application/json; charset=utf-8'
        };
      }

      temp = this.convertToQueryString(req, query, dm);
      temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;
      return {
        type: 'GET',
        url: temp.length ? url.replace(/\/*$/, temp) : url,
        pvtData: p
      };
    };

    UrlAdaptor.prototype.getRequestQuery = function (options, query, singles, request, request1) {
      var param = 'param';
      var req = request1;
      req[options.from] = query.fromTable;

      if (options.apply && query.distincts.length) {
        req[options.apply] = 'onDistinct' in this ? _util.DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';
      }

      if (!query.distincts.length && options.expand) {
        req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? _util.DataUtil.callAdaptorFunction(this, 'onExpand', {
          selects: _util.DataUtil.getValue(singles.onSelect.fieldNames, query),
          expands: query.expands
        }, query) : query.expands;
      }

      req[options.select] = 'onSelect' in singles && !query.distincts.length ? _util.DataUtil.callAdaptorFunction(this, 'onSelect', _util.DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';
      req[options.count] = query.isCountRequired ? _util.DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';
      req[options.search] = request.searches.length ? _util.DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';
      req[options.skip] = 'onSkip' in singles ? _util.DataUtil.callAdaptorFunction(this, 'onSkip', _util.DataUtil.getValue(singles.onSkip.nos, query), query) : '';
      req[options.take] = 'onTake' in singles ? _util.DataUtil.callAdaptorFunction(this, 'onTake', _util.DataUtil.getValue(singles.onTake.nos, query), query) : '';
      req[options.where] = request.filters.length || request.searches.length ? _util.DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';
      req[options.sortBy] = request.sorts.length ? _util.DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';
      req[options.group] = request.groups.length ? _util.DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';
      req[options.aggregates] = request.aggregates.length ? _util.DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';
      req[param] = [];
    };
    /**
     * Convert the object from processQuery to string which can be added query string.
     * @param  {Object} req
     * @param  {Query} query
     * @param  {DataManager} dm
     */


    UrlAdaptor.prototype.convertToQueryString = function (request, query, dm) {
      return ''; // this needs to be overridden
    };
    /**
     * Return the data from the data manager processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Object} request?
     * @param  {CrudOptions} changes?
     */


    UrlAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {
        var handleTimeZone = _util.DataUtil.timeZoneHandling;

        if (ds && !ds.timeZoneHandling) {
          _util.DataUtil.timeZoneHandling = false;
        }

        data = _util.DataUtil.parse.parseJson(data);
        _util.DataUtil.timeZoneHandling = handleTimeZone;
      }

      var requests = request;
      var pvt = requests.pvtData || {};
      var groupDs = data ? data.groupDs : [];

      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {
        return query.isCountRequired ? {
          result: [],
          count: 0
        } : [];
      }

      var d = JSON.parse(requests.data);

      if (d && d.action === 'batch' && data && data.addedRecords) {
        changes.addedRecords = data.addedRecords;
        return changes;
      }

      if (data && data.d) {
        data = data.d;
      }

      var args = {};

      if (data && 'count' in data) {
        args.count = data.count;
      }

      args.result = data && data.result ? data.result : data;
      this.getAggregateResult(pvt, data, args, groupDs, query);
      return _util.DataUtil.isNull(args.count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };
    /**
     * Add the group query to the adaptor`s option.
     * @param  {Object[]} e
     * @returns void
     */


    UrlAdaptor.prototype.onGroup = function (e) {
      this.pvt.groups = e;
      return e;
    };
    /**
     * Add the aggregate query to the adaptor`s option.
     * @param  {Aggregates[]} e
     * @returns void
     */


    UrlAdaptor.prototype.onAggregates = function (e) {
      this.pvt.aggregates = e;
    };
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {Object} e
     */


    UrlAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
      var url;
      var key;
      return {
        type: 'POST',
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: 'batch',
          table: e[url],
          key: e[key]
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @returns void
     */


    UrlAdaptor.prototype.beforeSend = function (dm, request) {// need to extend this method
    };
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName
     */


    UrlAdaptor.prototype.insert = function (dm, data, tableName, query) {
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          value: data,
          table: tableName,
          action: 'insert'
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number|string} value
     * @param  {string} tableName
     */


    UrlAdaptor.prototype.remove = function (dm, keyField, value, tableName, query) {
      return {
        type: 'POST',
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          key: value,
          keyColumn: keyField,
          table: tableName,
          action: 'remove'
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };
    /**
     * Prepare and return request body which is used to update record.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName
     */


    UrlAdaptor.prototype.update = function (dm, keyField, value, tableName, query) {
      return {
        type: 'POST',
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          value: value,
          action: 'update',
          keyColumn: keyField,
          key: value[keyField],
          table: tableName
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };
    /**
     * To generate the predicate based on the filtered query.
     * @param  {Object[]|string[]|number[]} data
     * @param  {Query} query
     * @hidden
     */


    UrlAdaptor.prototype.getFiltersFrom = function (data, query) {
      var key = query.fKey;
      var value;
      var prop = key;
      var pKey = query.key;
      var predicats = [];

      if (typeof data[0] !== 'object') {
        prop = null;
      }

      for (var i = 0; i < data.length; i++) {
        if (typeof data[0] === 'object') {
          value = _util.DataUtil.getObject(pKey || prop, data[i]);
        } else {
          value = data[i];
        }

        predicats.push(new _query.Predicate(key, 'equal', value));
      }

      return _query.Predicate.or(predicats);
    };

    UrlAdaptor.prototype.getAggregateResult = function (pvt, data, args, groupDs, query) {
      var pData = data;

      if (data && data.result) {
        pData = data.result;
      }

      if (pvt && pvt.aggregates && pvt.aggregates.length) {
        var agg = pvt.aggregates;
        var fn = void 0;
        var aggregateData = pData;
        var res = {};

        if (data.aggregate) {
          aggregateData = data.aggregate;
        }

        for (var i = 0; i < agg.length; i++) {
          fn = _util.DataUtil.aggregates[agg[i].type];

          if (fn) {
            res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);
          }
        }

        args.aggregates = res;
      }

      if (pvt && pvt.groups && pvt.groups.length) {
        var groups = pvt.groups;

        for (var i = 0; i < groups.length; i++) {
          var level = null;

          if (!(0, _ej2Base.isNullOrUndefined)(groupDs)) {
            groupDs = _util.DataUtil.group(groupDs, groups[i]);
          }

          var groupQuery = _query.Query.filterQueries(query.queries, 'onGroup')[i].e;

          pData = _util.DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
        }

        args.result = pData;
      }

      return args;
    };

    UrlAdaptor.prototype.getQueryRequest = function (query) {
      var req = {
        sorts: [],
        groups: [],
        filters: [],
        searches: [],
        aggregates: []
      };
      req.sorts = _query.Query.filterQueries(query.queries, 'onSortBy');
      req.groups = _query.Query.filterQueries(query.queries, 'onGroup');
      req.filters = _query.Query.filterQueries(query.queries, 'onWhere');
      req.searches = _query.Query.filterQueries(query.queries, 'onSearch');
      req.aggregates = _query.Query.filterQueries(query.queries, 'onAggregates');
      return req;
    };

    UrlAdaptor.prototype.addParams = function (options) {
      var req = options.reqParams;

      if (options.params.length) {
        req.params = {};
      }

      for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
        var tmp = _a[_i];

        if (req[tmp.key]) {
          throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');
        }

        req[tmp.key] = tmp.value;

        if (tmp.fn) {
          req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
        }

        req.params[tmp.key] = req[tmp.key];
      }
    };

    return UrlAdaptor;
  }(Adaptor);

  _exports.UrlAdaptor = UrlAdaptor;

  /**
   * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.
   * @hidden
   */
  var ODataAdaptor =
  /** @class */
  function (_super) {
    __extends(ODataAdaptor, _super);

    function ODataAdaptor(props) {
      var _this = _super.call(this) || this; // options replaced the default adaptor options


      _this.options = (0, _ej2Base.extend)({}, _this.options, {
        requestType: 'get',
        accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',
        multipartAccept: 'multipart/mixed',
        sortBy: '$orderby',
        select: '$select',
        skip: '$skip',
        take: '$top',
        count: '$inlinecount',
        where: '$filter',
        expand: '$expand',
        batch: '$batch',
        changeSet: '--changeset_',
        batchPre: 'batch_',
        contentId: 'Content-Id: ',
        batchContent: 'Content-Type: multipart/mixed; boundary=',
        changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
        batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
        updateType: 'PUT'
      });
      (0, _ej2Base.extend)(_this.options, props || {});
      return _this;
    }

    ODataAdaptor.prototype.getModuleName = function () {
      return 'ODataAdaptor';
    };
    /**
     * Generate request string based on the filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */


    ODataAdaptor.prototype.onPredicate = function (predicate, query, requiresCast) {
      var returnValue = '';
      var operator;
      var guid;
      var val = predicate.value;
      var type = typeof val;
      var field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;

      if (val instanceof Date) {
        val = 'datetime\'' + _util.DataUtil.parse.replacer(val) + '\'';
      }

      if (type === 'string') {
        val = encodeURIComponent(val);
        val = '\'' + val + '\'';

        if (requiresCast) {
          field = 'cast(' + field + ', \'Edm.String\')';
        }

        if (_util.DataUtil.parse.isGuid(val)) {
          guid = 'guid';
        }

        if (predicate.ignoreCase) {
          if (!guid) {
            field = 'tolower(' + field + ')';
          }

          val = val.toLowerCase();
        }
      }

      operator = _util.DataUtil.odBiOperator[predicate.operator];

      if (operator) {
        returnValue += field;
        returnValue += operator;

        if (guid) {
          returnValue += guid;
        }

        return returnValue + val;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {
        operator = _util.DataUtil.odv4UniOperator[predicate.operator];
      } else {
        operator = _util.DataUtil.odUniOperator[predicate.operator];
      }

      if (operator === 'substringof') {
        var temp = val;
        val = field;
        field = temp;
      }

      returnValue += operator + '(';
      returnValue += field + ',';

      if (guid) {
        returnValue += guid;
      }

      returnValue += val + ')';
      return returnValue;
    };

    ODataAdaptor.prototype.addParams = function (options) {
      _super.prototype.addParams.call(this, options);

      delete options.reqParams.params;
    };
    /**
     * Generate request string based on the multiple filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */


    ODataAdaptor.prototype.onComplexPredicate = function (predicate, query, requiresCast) {
      var res = [];

      for (var i = 0; i < predicate.predicates.length; i++) {
        res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');
      }

      return res.join(' ' + predicate.condition + ' ');
    };
    /**
     * Generate query string based on the multiple filter criteria from query.
     * @param  {Predicate} filter
     * @param  {boolean} requiresCast?
     */


    ODataAdaptor.prototype.onEachWhere = function (filter, query, requiresCast) {
      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
    };
    /**
     * Generate query string based on the multiple filter criteria from query.
     * @param  {string[]} filters
     */


    ODataAdaptor.prototype.onWhere = function (filters) {
      if (this.pvt.search) {
        filters.push(this.onEachWhere(this.pvt.search, null, true));
      }

      return filters.join(' and ');
    };
    /**
     * Generate query string based on the multiple search criteria from query.
     * @param  {{fields:string[]} e
     * @param  {string} operator
     * @param  {string} key
     * @param  {boolean}} ignoreCase
     */


    ODataAdaptor.prototype.onEachSearch = function (e) {
      if (e.fields && e.fields.length === 0) {
        _util.DataUtil.throwError('Query() - Search : oData search requires list of field names to search');
      }

      var filter = this.pvt.search || [];

      for (var i = 0; i < e.fields.length; i++) {
        filter.push(new _query.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
      }

      this.pvt.search = filter;
    };
    /**
     * Generate query string based on the search criteria from query.
     * @param  {Object} e
     */


    ODataAdaptor.prototype.onSearch = function (e) {
      this.pvt.search = _query.Predicate.or(this.pvt.search);
      return '';
    };
    /**
     * Generate query string based on multiple sort criteria from query.
     * @param  {QueryOptions} e
     */


    ODataAdaptor.prototype.onEachSort = function (e) {
      var res = [];

      if (e.name instanceof Array) {
        for (var i = 0; i < e.name.length; i++) {
          res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));
        }
      } else {
        res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));
      }

      return res.join(',');
    };
    /**
     * Returns sort query string.
     * @param  {string[]} e
     */


    ODataAdaptor.prototype.onSortBy = function (e) {
      return e.reverse().join(',');
    };
    /**
     * Adds the group query to the adaptor option.
     * @param  {Object[]} e
     * @returns string
     */


    ODataAdaptor.prototype.onGroup = function (e) {
      this.pvt.groups = e;
      return [];
    };
    /**
     * Returns the select query string.
     * @param  {string[]} e
     */


    ODataAdaptor.prototype.onSelect = function (e) {
      for (var i = 0; i < e.length; i++) {
        e[i] = ODataAdaptor.getField(e[i]);
      }

      return e.join(',');
    };
    /**
     * Add the aggregate query to the adaptor option.
     * @param  {Object[]} e
     * @returns string
     */


    ODataAdaptor.prototype.onAggregates = function (e) {
      this.pvt.aggregates = e;
      return '';
    };
    /**
     * Returns the query string which requests total count from the data source.
     * @param  {boolean} e
     * @returns string
     */


    ODataAdaptor.prototype.onCount = function (e) {
      return e === true ? 'allpages' : '';
    };
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {Ajax} settings?
     */


    ODataAdaptor.prototype.beforeSend = function (dm, request, settings) {
      if (_util.DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {
        request.setRequestHeader('Accept', this.options.multipartAccept);
        request.setRequestHeader('DataServiceVersion', '2.0');
        request.overrideMimeType('text/plain; charset=x-user-defined');
      } else {
        request.setRequestHeader('Accept', this.options.accept);
      }

      request.setRequestHeader('DataServiceVersion', '2.0');
      request.setRequestHeader('MaxDataServiceVersion', '2.0');
    };
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */


    ODataAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
      var metaCheck = 'odata.metadata';

      if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {
        var dataUrls = data[metaCheck].split('/$metadata#');
        this.rootUrl = dataUrls[0];
        this.resourceTableName = dataUrls[1];
      }

      var pvtData = 'pvtData';

      if (!(0, _ej2Base.isNullOrUndefined)(data.d)) {
        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
        var metaData = '__metadata';

        if (!(0, _ej2Base.isNullOrUndefined)(dataCopy)) {
          for (var i = 0; i < dataCopy.length; i++) {
            if (!(0, _ej2Base.isNullOrUndefined)(dataCopy[i][metaData])) {
              delete dataCopy[i][metaData];
            }
          }
        }
      }

      var pvt = request && request[pvtData];
      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);

      if (emptyAndBatch) {
        return emptyAndBatch;
      }

      var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');
      var count = null;
      var version = versionCheck && parseInt(versionCheck, 10) || 2;

      if (query && query.isCountRequired) {
        var oDataCount = '__count';

        if (data[oDataCount] || data['odata.count']) {
          count = data[oDataCount] || data['odata.count'];
        }

        if (data.d) {
          data = data.d;
        }

        if (data[oDataCount] || data['odata.count']) {
          count = data[oDataCount] || data['odata.count'];
        }
      }

      if (version === 3 && data.value) {
        data = data.value;
      }

      if (data.d) {
        data = data.d;
      }

      if (version < 3 && data.results) {
        data = data.results;
      }

      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return _util.DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };
    /**
     * Converts the request object to query string.
     * @param  {Object} req
     * @param  {Query} query
     * @param  {DataManager} dm
     * @returns tableName
     */


    ODataAdaptor.prototype.convertToQueryString = function (request, query, dm) {
      var res = [];
      var table = 'table';
      var tableName = request[table] || '';
      var format = '$format';
      delete request[table];

      if (dm.dataSource.requiresFormat) {
        request[format] = 'json';
      }

      var keys = Object.keys(request);

      for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {
        var prop = keys_4[_i];
        res.push(prop + '=' + request[prop]);
      }

      res = res.join('&');

      if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {
        return res;
      }

      return res.length ? tableName + '?' + res : tableName || '';
    };

    ODataAdaptor.prototype.localTimeReplacer = function (key, convertObj) {
      for (var _i = 0, _a = !(0, _ej2Base.isNullOrUndefined)(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
        var prop = _a[_i];

        if (convertObj[prop] instanceof Date) {
          convertObj[prop] = _util.DataUtil.dateParse.toLocalTime(convertObj[prop]);
        }
      }

      return convertObj;
    };
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */


    ODataAdaptor.prototype.insert = function (dm, data, tableName) {
      return {
        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : ''),
        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
      };
    };
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number} value
     * @param  {string} tableName?
     */


    ODataAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
      var url;

      if (typeof value === 'string' && !_util.DataUtil.parse.isGuid(value)) {
        url = "('" + value + "')";
      } else {
        url = "(" + value + ")";
      }

      return {
        type: 'DELETE',
        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url
      };
    };
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     * @returns this
     */


    ODataAdaptor.prototype.update = function (dm, keyField, value, tableName, query, original) {
      if (this.options.updateType === 'PATCH' && !(0, _ej2Base.isNullOrUndefined)(original)) {
        value = this.compareAndRemove(value, original, keyField);
      }

      var url;

      if (typeof value[keyField] === 'string' && !_util.DataUtil.parse.isGuid(value[keyField])) {
        url = "('" + value[keyField] + "')";
      } else {
        url = "(" + value[keyField] + ")";
      }

      return {
        type: this.options.updateType,
        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? '/' + tableName : '') + url,
        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
        accept: this.options.accept
      };
    };
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     * @returns {Object}
     */


    ODataAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
      var initialGuid = e.guid = _util.DataUtil.getGuid(this.options.batchPre);

      var url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var args = {
        url: e.url,
        key: e.key,
        cid: 1,
        cSet: _util.DataUtil.getGuid(this.options.changeSet)
      };
      var req = '--' + initialGuid + '\n';
      req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\n';
      this.pvt.changeSet = 0;
      req += this.generateInsertRequest(changes.addedRecords, args, dm);
      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
      req += args.cSet + '--\n';
      req += '--' + initialGuid + '--';
      return {
        type: 'POST',
        url: url,
        dataType: 'json',
        contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,
        data: req
      };
    };
    /**
     * Generate the string content from the removed records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     * @returns this
     */


    ODataAdaptor.prototype.generateDeleteRequest = function (arr, e, dm) {
      if (!arr) {
        return '';
      }

      var req = '';
      var stat = {
        'method': 'DELETE ',
        'url': function (data, i, key) {
          var url = _util.DataUtil.getObject(key, data[i]);

          if (typeof url === 'number' || _util.DataUtil.parse.isGuid(url)) {
            return '(' + url + ')';
          } else if (url instanceof Date) {
            var dateTime = data[i][key];
            return '(' + dateTime.toJSON() + ')';
          } else {
            return "('" + url + "')";
          }
        },
        'data': function (data, i) {
          return '';
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req + '\n';
    };
    /**
     * Generate the string content from the inserted records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     */


    ODataAdaptor.prototype.generateInsertRequest = function (arr, e, dm) {
      if (!arr) {
        return '';
      }

      var req = '';
      var stat = {
        'method': 'POST ',
        'url': function (data, i, key) {
          return '';
        },
        'data': function (data, i) {
          return JSON.stringify(data[i]) + '\n\n';
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    /**
     * Generate the string content from the updated records.
     * The result will be send during batch update.
     * @param  {Object[]} arr
     * @param  {RemoteArgs} e
     */


    ODataAdaptor.prototype.generateUpdateRequest = function (arr, e, dm, org) {
      var _this = this;

      if (!arr) {
        return '';
      }

      var req = '';
      arr.forEach(function (change) {
        return change = _this.compareAndRemove(change, org.filter(function (o) {
          return _util.DataUtil.getObject(e.key, o) === _util.DataUtil.getObject(e.key, change);
        })[0], e.key);
      });
      var stat = {
        'method': this.options.updateType + ' ',
        'url': function (data, i, key) {
          if (typeof data[i][key] === 'number' || _util.DataUtil.parse.isGuid(data[i][key])) {
            return '(' + data[i][key] + ')';
          } else if (data[i][key] instanceof Date) {
            var date = data[i][key];
            return '(' + date.toJSON() + ')';
          } else {
            return "('" + data[i][key] + "')";
          }
        },
        'data': function (data, i) {
          return JSON.stringify(data[i]) + '\n\n';
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };

    ODataAdaptor.getField = function (prop) {
      return prop.replace(/\./g, '/');
    };

    ODataAdaptor.prototype.generateBodyContent = function (arr, e, stat, dm) {
      var req = '';

      for (var i = 0; i < arr.length; i++) {
        req += '\n' + e.cSet + '\n';
        req += this.options.changeSetContent + '\n\n';
        req += stat.method;

        if (stat.method === 'POST ') {
          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
        } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {
          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
        } else if (stat.method === 'DELETE ') {
          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\n';
        }

        req += 'Accept: ' + this.options.accept + '\n';
        req += 'Content-Id: ' + this.pvt.changeSet++ + '\n';
        req += this.options.batchChangeSetContentType + '\n';

        if (!(0, _ej2Base.isNullOrUndefined)(arr[i]['@odata.etag'])) {
          req += 'If-Match: ' + arr[i]['@odata.etag'] + '\n\n';
          delete arr[i]['@odata.etag'];
        } else {
          req += '\n';
        }

        req += stat.data(arr, i);
      }

      return req;
    };

    ODataAdaptor.prototype.processBatchResponse = function (data, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {
        return query.isCountRequired ? {
          result: [],
          count: 0
        } : [];
      }

      if (request && this.options.batch && _util.DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {
        var guid = xhr.getResponseHeader('Content-Type');
        var cIdx = void 0;
        var jsonObj = void 0;
        var d = data + '';
        guid = guid.substring(guid.indexOf('=batchresponse') + 1);
        d = d.split(guid);

        if (d.length < 2) {
          return {};
        }

        d = d[1];
        var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);

        if (exVal) {
          d.replace(exVal[0], '');
        }

        var changeGuid = exVal ? exVal[1] : '';
        d = d.split(changeGuid);

        for (var i = d.length; i > -1; i--) {
          if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
            continue;
          }

          cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);

          if (changes.addedRecords[cIdx]) {
            jsonObj = _util.DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
            (0, _ej2Base.extend)({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
          }
        }

        return changes;
      }

      return null;
    };

    ODataAdaptor.prototype.compareAndRemove = function (data, original, key) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(original)) {
        return data;
      }

      Object.keys(data).forEach(function (prop) {
        if (prop !== key && prop !== '@odata.etag') {
          if (_util.DataUtil.isPlainObject(data[prop])) {
            _this.compareAndRemove(data[prop], original[prop]);

            var final = Object.keys(data[prop]).filter(function (data) {
              return data !== '@odata.etag';
            });

            if (final.length === 0) {
              delete data[prop];
            }
          } else if (data[prop] === original[prop]) {
            delete data[prop];
          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
            delete data[prop];
          }
        }
      });
      return data;
    };

    return ODataAdaptor;
  }(UrlAdaptor);

  _exports.ODataAdaptor = ODataAdaptor;

  /**
   * The OData v4 is an improved version of OData protocols.
   * The DataManager uses the ODataV4Adaptor to consume OData v4 services.
   * @hidden
   */
  var ODataV4Adaptor =
  /** @class */
  function (_super) {
    __extends(ODataV4Adaptor, _super);

    function ODataV4Adaptor(props) {
      var _this = _super.call(this, props) || this; // options replaced the default adaptor options


      _this.options = (0, _ej2Base.extend)({}, _this.options, {
        requestType: 'get',
        accept: 'application/json, text/javascript, */*; q=0.01',
        multipartAccept: 'multipart/mixed',
        sortBy: '$orderby',
        select: '$select',
        skip: '$skip',
        take: '$top',
        count: '$count',
        search: '$search',
        where: '$filter',
        expand: '$expand',
        batch: '$batch',
        changeSet: '--changeset_',
        batchPre: 'batch_',
        contentId: 'Content-Id: ',
        batchContent: 'Content-Type: multipart/mixed; boundary=',
        changeSetContent: 'Content-Type: application/http\nContent-Transfer-Encoding: binary ',
        batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',
        updateType: 'PATCH',
        localTime: false,
        apply: '$apply'
      });
      (0, _ej2Base.extend)(_this.options, props || {});
      return _this;
    }
    /**
     * @hidden
     */


    ODataV4Adaptor.prototype.getModuleName = function () {
      return 'ODataV4Adaptor';
    };
    /**
     * Returns the query string which requests total count from the data source.
     * @param  {boolean} e
     * @returns string
     */


    ODataV4Adaptor.prototype.onCount = function (e) {
      return e === true ? 'true' : '';
    };
    /**
     * Generate request string based on the filter criteria from query.
     * @param  {Predicate} pred
     * @param  {boolean} requiresCast?
     */


    ODataV4Adaptor.prototype.onPredicate = function (predicate, query, requiresCast) {
      var returnValue = '';
      var val = predicate.value;
      var isDate = val instanceof Date;
      returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);

      if (isDate) {
        returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');
      }

      if (_util.DataUtil.parse.isGuid(val)) {
        returnValue = returnValue.replace('guid', '').replace(/'/g, '');
      }

      return returnValue;
    };
    /**
     *  Generate query string based on the multiple search criteria from query.
     * @param  {{fields:string[]} e
     * @param  {string} operator
     * @param  {string} key
     * @param  {boolean}} ignoreCase
     */


    ODataV4Adaptor.prototype.onEachSearch = function (e) {
      var search = this.pvt.searches || [];
      search.push(e.key);
      this.pvt.searches = search;
    };
    /**
     *  Generate query string based on the search criteria from query.
     * @param  {Object} e
     */


    ODataV4Adaptor.prototype.onSearch = function (e) {
      return this.pvt.searches.join(' OR ');
    };
    /**
     * Returns the expand query string.
     * @param  {string} e
     */


    ODataV4Adaptor.prototype.onExpand = function (e) {
      var _this = this;

      var selected = {};
      var expanded = {};
      var expands = e.expands.slice();
      var exArr = [];
      var selects = e.selects.filter(function (item) {
        return item.indexOf('.') > -1;
      });
      selects.forEach(function (select) {
        var splits = select.split('.');

        if (!(splits[0] in selected)) {
          selected[splits[0]] = [];
        }

        selected[splits[0]].push(splits[1]);
      }); //Auto expand from select query

      Object.keys(selected).forEach(function (expand) {
        if (expands.indexOf(expand) === -1) {
          expands.push(expand);
        }
      });
      expands.forEach(function (expand) {
        expanded[expand] = expand in selected ? expand + "(" + _this.options.select + "=" + selected[expand].join(',') + ")" : expand;
      });
      Object.keys(expanded).forEach(function (ex) {
        return exArr.push(expanded[ex]);
      });
      return exArr.join(',');
    };
    /**
     * Returns the groupby query string.
     * @param  {string} e
     */


    ODataV4Adaptor.prototype.onDistinct = function (distinctFields) {
      var fields = distinctFields.map(function (field) {
        return ODataAdaptor.getField(field);
      }).join(',');
      return "groupby((" + fields + "))";
    };
    /**
     * Returns the select query string.
     * @param  {string[]} e
     */


    ODataV4Adaptor.prototype.onSelect = function (e) {
      return _super.prototype.onSelect.call(this, e.filter(function (item) {
        return item.indexOf('.') === -1;
      }));
    };
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {Ajax} settings
     * @returns void
     */


    ODataV4Adaptor.prototype.beforeSend = function (dm, request, settings) {
      if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {
        request.setRequestHeader('Prefer', 'return=representation');
      }

      request.setRequestHeader('Accept', this.options.accept);
    };
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */


    ODataV4Adaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
      var metaName = '@odata.context';

      if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {
        var dataUrl = data[metaName].split('/$metadata#');
        this.rootUrl = dataUrl[0];
        this.resourceTableName = dataUrl[1];
      }

      var pvtData = 'pvtData';
      var pvt = request && request[pvtData];

      var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);

      if (emptyAndBatch) {
        return emptyAndBatch;
      }

      var count = null;
      var dataCount = '@odata.count';

      if (query && query.isCountRequired) {
        if (dataCount in data) {
          count = data[dataCount];
        }
      }

      data = !(0, _ej2Base.isNullOrUndefined)(data.value) ? data.value : data;
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return _util.DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count: count,
        aggregates: args.aggregates
      };
    };

    return ODataV4Adaptor;
  }(ODataAdaptor);

  _exports.ODataV4Adaptor = ODataV4Adaptor;

  /**
   * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.
   * The DataManager uses the WebApiAdaptor to consume Web API.
   * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
   * @hidden
   */
  var WebApiAdaptor =
  /** @class */
  function (_super) {
    __extends(WebApiAdaptor, _super);

    function WebApiAdaptor() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    WebApiAdaptor.prototype.getModuleName = function () {
      return 'WebApiAdaptor';
    };
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */


    WebApiAdaptor.prototype.insert = function (dm, data, tableName) {
      return {
        type: 'POST',
        url: dm.dataSource.url,
        data: JSON.stringify(data)
      };
    };
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {number} value
     * @param  {string} tableName?
     */


    WebApiAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
      return {
        type: 'DELETE',
        url: dm.dataSource.url + '/' + value,
        data: JSON.stringify(value)
      };
    };
    /**
     * Prepare and return request body which is used to update record.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     */


    WebApiAdaptor.prototype.update = function (dm, keyField, value, tableName) {
      return {
        type: 'PUT',
        url: dm.dataSource.url,
        data: JSON.stringify(value)
      };
    };

    WebApiAdaptor.prototype.batchRequest = function (dm, changes, e) {
      var _this = this;

      var initialGuid = e.guid = _util.DataUtil.getGuid(this.options.batchPre);

      var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var req = [];

      var _loop_1 = function (i, x) {
        changes.addedRecords.forEach(function (j, d) {
          var stat = {
            'method': 'POST ',
            'url': function (data, i, key) {
              return '';
            },
            'data': function (data, i) {
              return JSON.stringify(data[i]) + '\n\n';
            }
          };
          req.push('--' + initialGuid);
          req.push('Content-Type: application/http; msgtype=request', '');
          req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');
          req.push('Content-Type: ' + 'application/json; charset=utf-8');
          req.push('Host: ' + location.host);
          req.push('', j ? JSON.stringify(j) : '');
        });
      }; //insertion


      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
        _loop_1(i, x);
      }

      var _loop_2 = function (i, x) {
        changes.changedRecords.forEach(function (j, d) {
          var stat = {
            'method': _this.options.updateType + ' ',
            'url': function (data, i, key) {
              return '';
            },
            'data': function (data, i) {
              return JSON.stringify(data[i]) + '\n\n';
            }
          };
          req.push('--' + initialGuid);
          req.push('Content-Type: application/http; msgtype=request', '');
          req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');
          req.push('Content-Type: ' + 'application/json; charset=utf-8');
          req.push('Host: ' + location.host);
          req.push('', j ? JSON.stringify(j) : '');
        });
      }; //updation 


      for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
        _loop_2(i, x);
      }

      var _loop_3 = function (i, x) {
        changes.deletedRecords.forEach(function (j, d) {
          var state = {
            'mtd': 'DELETE ',
            'url': function (data, i, key) {
              var url = _util.DataUtil.getObject(key, data[i]);

              if (typeof url === 'number' || _util.DataUtil.parse.isGuid(url)) {
                return '/' + url;
              } else if (url instanceof Date) {
                var datTime = data[i][key];
                return '/' + datTime.toJSON();
              } else {
                return "/'" + url + "'";
              }
            },
            'data': function (data, i) {
              return '';
            }
          };
          req.push('--' + initialGuid);
          req.push('Content-Type: application/http; msgtype=request', '');
          req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');
          req.push('Content-Type: ' + 'application/json; charset=utf-8');
          req.push('Host: ' + location.host);
          req.push('', j ? JSON.stringify(j) : '');
        });
      }; //deletion


      for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
        _loop_3(i, x);
      }

      req.push('--' + initialGuid + '--', '');
      return {
        type: 'POST',
        url: url,
        contentType: 'multipart/mixed; boundary=' + initialGuid,
        data: req.join('\r\n')
      };
    };
    /**
     * Method will trigger before send the request to server side.
     * Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {Ajax} settings
     * @returns void
     */


    WebApiAdaptor.prototype.beforeSend = function (dm, request, settings) {
      request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
    };
    /**
     * Returns the data from the query processing.
     * @param  {DataResult} data
     * @param  {DataOptions} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Ajax} request?
     * @param  {CrudOptions} changes?
     * @returns aggregateResult
     */


    WebApiAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
      var pvtData = 'pvtData';
      var pvt = request && request[pvtData];
      var count = null;
      var args = {};

      if (request && request.type.toLowerCase() !== 'post') {
        var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');
        var version = versionCheck && parseInt(versionCheck, 10) || 2;

        if (query && query.isCountRequired) {
          if (!_util.DataUtil.isNull(data.Count)) {
            count = data.Count;
          }
        }

        if (version < 3 && data.Items) {
          data = data.Items;
        }

        args.count = count;
        args.result = data;
        this.getAggregateResult(pvt, data, args, null, query);
      }

      args.result = args.result || data;
      return _util.DataUtil.isNull(count) ? args.result : {
        result: args.result,
        count: args.count,
        aggregates: args.aggregates
      };
    };

    return WebApiAdaptor;
  }(ODataAdaptor);

  _exports.WebApiAdaptor = WebApiAdaptor;

  /**
   * WebMethodAdaptor can be used by DataManager to interact with web method.
   * @hidden
   */
  var WebMethodAdaptor =
  /** @class */
  function (_super) {
    __extends(WebMethodAdaptor, _super);

    function WebMethodAdaptor() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Prepare the request body based on the query.
     * The query information can be accessed at the WebMethod using variable named `value`.
     * @param  {DataManager} dm
     * @param  {Query} query
     * @param  {Object[]} hierarchyFilters?
     * @returns application
     */


    WebMethodAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
      var getData = 'data';

      var data = _util.DataUtil.parse.parseJson(obj[getData]);

      var result = {};
      var value = 'value';

      if (data.param) {
        for (var i = 0; i < data.param.length; i++) {
          var param = data.param[i];
          var key = Object.keys(param)[0];
          result[key] = param[key];
        }
      }

      result[value] = data;
      var pvtData = 'pvtData';
      var url = 'url';
      return {
        data: JSON.stringify(result),
        url: obj[url],
        pvtData: obj[pvtData],
        type: 'POST',
        contentType: 'application/json; charset=utf-8'
      };
    };

    return WebMethodAdaptor;
  }(UrlAdaptor);

  _exports.WebMethodAdaptor = WebMethodAdaptor;

  /**
   * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.
   * It interacts with server-side only for CRUD operations.
   * @hidden
   */
  var RemoteSaveAdaptor =
  /** @class */
  function (_super) {
    __extends(RemoteSaveAdaptor, _super);
    /**
     * @hidden
     */


    function RemoteSaveAdaptor() {
      var _this = _super.call(this) || this;

      (0, _ej2Base.setValue)('beforeSend', UrlAdaptor.prototype.beforeSend, _this);
      return _this;
    }

    RemoteSaveAdaptor.prototype.insert = function (dm, data, tableName, query, position) {
      this.pvt.position = position;
      this.updateType = 'add';
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          value: data,
          table: tableName,
          action: 'insert'
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };

    RemoteSaveAdaptor.prototype.remove = function (dm, keyField, val, tableName, query) {
      _super.prototype.remove.call(this, dm, keyField, val);

      return {
        type: 'POST',
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          key: val,
          keyColumn: keyField,
          table: tableName,
          action: 'remove'
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };

    RemoteSaveAdaptor.prototype.update = function (dm, keyField, val, tableName, query) {
      this.updateType = 'update';
      this.updateKey = keyField;
      return {
        type: 'POST',
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          value: val,
          action: 'update',
          keyColumn: keyField,
          key: val[keyField],
          table: tableName
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };

    RemoteSaveAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes, e) {
      var i;

      if (this.updateType === 'add') {
        _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
      }

      if (this.updateType === 'update') {
        _super.prototype.update.call(this, ds, this.updateKey, data);
      }

      this.updateType = undefined;

      if (data.added) {
        for (i = 0; i < data.added.length; i++) {
          _super.prototype.insert.call(this, ds, data.added[i]);
        }
      }

      if (data.changed) {
        for (i = 0; i < data.changed.length; i++) {
          _super.prototype.update.call(this, ds, e.key, data.changed[i]);
        }
      }

      if (data.deleted) {
        for (i = 0; i < data.deleted.length; i++) {
          _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
        }
      }

      return data;
    };
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * Also perform the changes in the locally cached data to sync with the remote data.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */


    RemoteSaveAdaptor.prototype.batchRequest = function (dm, changes, e, query, original) {
      return {
        type: 'POST',
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: JSON.stringify((0, _ej2Base.extend)({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: 'batch',
          table: e.url,
          key: e.key
        }, _util.DataUtil.getAddParams(this, dm, query)))
      };
    };

    RemoteSaveAdaptor.prototype.addParams = function (options) {
      var urlParams = new UrlAdaptor();
      urlParams.addParams(options);
    };

    return RemoteSaveAdaptor;
  }(JsonAdaptor);

  _exports.RemoteSaveAdaptor = RemoteSaveAdaptor;

  /**
   * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.
   * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager
   * @hidden
   */
  var CacheAdaptor =
  /** @class */
  function (_super) {
    __extends(CacheAdaptor, _super);
    /**
     * Constructor for CacheAdaptor class.
     * @param  {CacheAdaptor} adaptor?
     * @param  {number} timeStamp?
     * @param  {number} pageSize?
     * @hidden
     */


    function CacheAdaptor(adaptor, timeStamp, pageSize) {
      var _this = _super.call(this) || this;

      _this.isCrudAction = false;
      _this.isInsertAction = false;

      if (!(0, _ej2Base.isNullOrUndefined)(adaptor)) {
        _this.cacheAdaptor = adaptor;
      }

      _this.pageSize = pageSize;
      _this.guidId = _util.DataUtil.getGuid('cacheAdaptor');
      var obj = {
        keys: [],
        results: []
      };
      window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
      var guid = _this.guidId;

      if (!(0, _ej2Base.isNullOrUndefined)(timeStamp)) {
        setInterval(function () {
          var data;
          data = _util.DataUtil.parse.parseJson(window.localStorage.getItem(guid));
          var forDel = [];

          for (var i = 0; i < data.results.length; i++) {
            var currentTime = +new Date();
            var requestTime = +new Date(data.results[i].timeStamp);
            data.results[i].timeStamp = currentTime - requestTime;

            if (currentTime - requestTime > timeStamp) {
              forDel.push(i);
            }
          }

          for (var i = 0; i < forDel.length; i++) {
            data.results.splice(forDel[i], 1);
            data.keys.splice(forDel[i], 1);
          }

          window.localStorage.removeItem(guid);
          window.localStorage.setItem(guid, JSON.stringify(data));
        }, timeStamp);
      }

      return _this;
    }
    /**
     * It will generate the key based on the URL when we send a request to server.
     * @param  {string} url
     * @param  {Query} query?
     * @hidden
     */


    CacheAdaptor.prototype.generateKey = function (url, query) {
      var queries = this.getQueryRequest(query);

      var singles = _query.Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);

      var key = url;
      var page = 'onPage';

      if (page in singles) {
        key += singles[page].pageIndex;
      }

      queries.sorts.forEach(function (obj) {
        key += obj.e.direction + obj.e.fieldName;
      });
      queries.groups.forEach(function (obj) {
        key += obj.e.fieldName;
      });
      queries.searches.forEach(function (obj) {
        key += obj.e.searchKey;
      });

      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];

        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];

          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({
              fn: 'onWhere',
              e: currentFilter.e.predicates[i],
              filter: query.queries.filter
            });
          }

          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }

      return key;
    };
    /**
     * Process the query to generate request body.
     * If the data is already cached, it will return the cached data.
     * @param  {DataManager} dm
     * @param  {Query} query?
     * @param  {Object[]} hierarchyFilters?
     */


    CacheAdaptor.prototype.processQuery = function (dm, query, hierarchyFilters) {
      var key = this.generateKey(dm.dataSource.url, query);
      var cachedItems;
      cachedItems = _util.DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;

      if (data != null && !this.isCrudAction && !this.isInsertAction) {
        return data;
      }

      this.isCrudAction = null;
      this.isInsertAction = null;
      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    };
    /**
     * Returns the data from the query processing.
     * It will also cache the data for later usage.
     * @param  {DataResult} data
     * @param  {DataManager} ds?
     * @param  {Query} query?
     * @param  {XMLHttpRequest} xhr?
     * @param  {Ajax} request?
     * @param  {CrudOptions} changes?
     */


    CacheAdaptor.prototype.processResponse = function (data, ds, query, xhr, request, changes) {
      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && _util.DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {
        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
      }

      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
      var obj = {};
      obj = _util.DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var index = obj.keys.indexOf(key);

      if (index !== -1) {
        obj.results.splice(index, 1);
        obj.keys.splice(index, 1);
      }

      obj.results[obj.keys.push(key) - 1] = {
        keys: key,
        result: data.result,
        timeStamp: new Date(),
        count: data.count
      };

      while (obj.results.length > this.pageSize) {
        obj.results.splice(0, 1);
        obj.keys.splice(0, 1);
      }

      window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      return data;
    };
    /**
     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.
     * @param  {DataManager} dm
     * @param  {XMLHttpRequest} request
     * @param  {Ajax} settings?
     */


    CacheAdaptor.prototype.beforeSend = function (dm, request, settings) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.cacheAdaptor.options.batch) && _util.DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {
        request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);
      }

      if (!dm.dataSource.crossDomain) {
        request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);
      }
    };
    /**
     * Updates existing record and saves the changes to the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName
     */


    CacheAdaptor.prototype.update = function (dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.update(dm, keyField, value, tableName);
    };
    /**
     * Prepare and returns request body which is used to insert a new record in the table.
     * @param  {DataManager} dm
     * @param  {Object} data
     * @param  {string} tableName?
     */


    CacheAdaptor.prototype.insert = function (dm, data, tableName) {
      this.isInsertAction = true;
      return this.cacheAdaptor.insert(dm, data, tableName);
    };
    /**
     * Prepare and return request body which is used to remove record from the table.
     * @param  {DataManager} dm
     * @param  {string} keyField
     * @param  {Object} value
     * @param  {string} tableName?
     */


    CacheAdaptor.prototype.remove = function (dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.remove(dm, keyField, value, tableName);
    };
    /**
     * Prepare the request body based on the newly added, removed and updated records.
     * The result is used by the batch request.
     * @param  {DataManager} dm
     * @param  {CrudOptions} changes
     * @param  {RemoteArgs} e
     */


    CacheAdaptor.prototype.batchRequest = function (dm, changes, e) {
      return this.cacheAdaptor.batchRequest(dm, changes, e);
    };

    return CacheAdaptor;
  }(UrlAdaptor);

  _exports.CacheAdaptor = CacheAdaptor;
});;
define('@syncfusion/ej2-data/src/index',["exports", "./manager", "./query", "./adaptors", "./util"], function (_exports, _manager, _query, _adaptors, _util) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_manager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _manager[key];
  });
  Object.keys(_query).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _query[key];
  });
  Object.keys(_adaptors).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _adaptors[key];
  });
  Object.keys(_util).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _util[key];
  });
});;
define('@syncfusion/ej2-data/src/manager',["exports", "@syncfusion/ej2-base", "./util", "./query", "./adaptors"], function (_exports, _ej2Base, _util, _query, _adaptors) {
  "use strict";

  _exports.__esModule = true;
  _exports.Deferred = _exports.DataManager = void 0;

  /**
   * DataManager is used to manage and manipulate relational data.
   */
  var DataManager =
  /** @class */
  function () {
    /**
     * Constructor for DataManager class
     * @param  {DataOptions|JSON[]} dataSource?
     * @param  {Query} query?
     * @param  {AdaptorOptions|string} adaptor?
     * @hidden
     */
    function DataManager(dataSource, query, adaptor) {
      var _this = this;
      /** @hidden */


      this.dateParse = true;
      /** @hidden */

      this.timeZoneHandling = true;
      this.requests = [];

      if (!dataSource && !this.dataSource) {
        dataSource = [];
      }

      adaptor = adaptor || dataSource.adaptor;

      if (dataSource && dataSource.timeZoneHandling === false) {
        this.timeZoneHandling = dataSource.timeZoneHandling;
      }

      var data;

      if (dataSource instanceof Array) {
        data = {
          json: dataSource,
          offline: true
        };
      } else if (typeof dataSource === 'object') {
        if (!dataSource.json) {
          dataSource.json = [];
        }

        data = {
          url: dataSource.url,
          insertUrl: dataSource.insertUrl,
          removeUrl: dataSource.removeUrl,
          updateUrl: dataSource.updateUrl,
          crudUrl: dataSource.crudUrl,
          batchUrl: dataSource.batchUrl,
          json: dataSource.json,
          headers: dataSource.headers,
          accept: dataSource.accept,
          data: dataSource.data,
          timeTillExpiration: dataSource.timeTillExpiration,
          cachingPageSize: dataSource.cachingPageSize,
          enableCaching: dataSource.enableCaching,
          requestType: dataSource.requestType,
          key: dataSource.key,
          crossDomain: dataSource.crossDomain,
          jsonp: dataSource.jsonp,
          dataType: dataSource.dataType,
          offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof _adaptors.RemoteSaveAdaptor ? false : dataSource.url ? false : true,
          requiresFormat: dataSource.requiresFormat
        };
      } else {
        _util.DataUtil.throwError('DataManager: Invalid arguments');
      }

      if (data.requiresFormat === undefined && !_util.DataUtil.isCors()) {
        data.requiresFormat = (0, _ej2Base.isNullOrUndefined)(data.crossDomain) ? true : data.crossDomain;
      }

      if (data.dataType === undefined) {
        data.dataType = 'json';
      }

      this.dataSource = data;
      this.defaultQuery = query;

      if (data.url && data.offline && !data.json.length) {
        this.isDataAvailable = false;
        this.adaptor = adaptor || new _adaptors.ODataAdaptor();
        this.dataSource.offline = false;
        this.ready = this.executeQuery(query || new _query.Query());
        this.ready.then(function (e) {
          _this.dataSource.offline = true;
          _this.isDataAvailable = true;
          data.json = e.result;
          _this.adaptor = new _adaptors.JsonAdaptor();
        });
      } else {
        this.adaptor = data.offline ? new _adaptors.JsonAdaptor() : new _adaptors.ODataAdaptor();
      }

      if (!data.jsonp && this.adaptor instanceof _adaptors.ODataAdaptor) {
        data.jsonp = 'callback';
      }

      this.adaptor = adaptor || this.adaptor;

      if (data.enableCaching) {
        this.adaptor = new _adaptors.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
      }

      return this;
    }
    /**
     * Overrides DataManager's default query with given query.
     * @param  {Query} query - Defines the new default query.
     */


    DataManager.prototype.setDefaultQuery = function (query) {
      this.defaultQuery = query;
      return this;
    };
    /**
     * Executes the given query with local data source.
     * @param  {Query} query - Defines the query to retrieve data.
     */


    DataManager.prototype.executeLocal = function (query) {
      if (!this.defaultQuery && !(query instanceof _query.Query)) {
        _util.DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');
      }

      if (!this.dataSource.json) {
        _util.DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');
      }

      query = query || this.defaultQuery;
      var result = this.adaptor.processQuery(this, query);

      if (query.subQuery) {
        var from = query.subQuery.fromTable;
        var lookup = query.subQuery.lookups;
        var res = query.isCountRequired ? result.result : result;

        if (lookup && lookup instanceof Array) {
          _util.DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
        }

        for (var j = 0; j < res.length; j++) {
          if (res[j][from] instanceof Array) {
            res[j] = (0, _ej2Base.extend)({}, {}, res[j]);
            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);
          }
        }
      }

      return this.adaptor.processResponse(result, this, query);
    };
    /**
     * Executes the given query with either local or remote data source.
     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.
     * @param  {Query|Function} query - Defines the query to retrieve data.
     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.
     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.
     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.
     */


    DataManager.prototype.executeQuery = function (query, done, fail, always) {
      var _this = this;

      var makeRequest = 'makeRequest';

      if (typeof query === 'function') {
        always = fail;
        fail = done;
        done = query;
        query = null;
      }

      if (!query) {
        query = this.defaultQuery;
      }

      if (!(query instanceof _query.Query)) {
        _util.DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');
      }

      var deffered = new Deferred();
      var args = {
        query: query
      };

      if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !(0, _ej2Base.isNullOrUndefined)(this.adaptor[makeRequest])) {
        var result = this.adaptor.processQuery(this, query);

        if (!(0, _ej2Base.isNullOrUndefined)(this.adaptor[makeRequest])) {
          this.adaptor[makeRequest](result, deffered, args, query);
        } else if (!(0, _ej2Base.isNullOrUndefined)(result.url)) {
          this.makeRequest(result, deffered, args, query);
        } else {
          args = DataManager.getDeferedArgs(query, result, args);
          deffered.resolve(args);
        }
      } else {
        DataManager.nextTick(function () {
          var res = _this.executeLocal(query);

          args = DataManager.getDeferedArgs(query, res, args);
          deffered.resolve(args);
        });
      }

      if (done || fail) {
        deffered.promise.then(done, fail);
      }

      if (always) {
        deffered.promise.then(always, always);
      }

      return deffered.promise;
    };

    DataManager.getDeferedArgs = function (query, result, args) {
      if (query.isCountRequired) {
        args.result = result.result;
        args.count = result.count;
        args.aggregates = result.aggregates;
      } else {
        args.result = result;
      }

      return args;
    };

    DataManager.nextTick = function (fn) {
      (window.setImmediate || window.setTimeout)(fn, 0);
    };

    DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {
      return (0, _ej2Base.extend)({}, {
        type: 'GET',
        dataType: this.dataSource.dataType,
        crossDomain: this.dataSource.crossDomain,
        jsonp: this.dataSource.jsonp,
        cache: true,
        processData: false,
        onSuccess: fnSuccess,
        onFailure: fnFail
      }, url);
    };

    DataManager.prototype.makeRequest = function (url, deffered, args, query) {
      var _this = this;

      var isSelector = !!query.subQuerySelector;

      var fnFail = function (e) {
        args.error = e;
        deffered.reject(args);
      };

      var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
        args.xhr = xhr;
        args.count = count ? parseInt(count.toString(), 10) : 0;
        args.result = data;
        args.request = request;
        args.aggregates = aggregates;
        args.actual = actual;
        args.virtualSelectRecords = virtualSelectRecords;
        deffered.resolve(args);
      };

      var fnQueryChild = function (data, selector) {
        var subDeffer = new Deferred();
        var childArgs = {
          parent: args
        };
        query.subQuery.isChild = true;

        var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);

        var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);

        if (!isSelector) {
          subDeffer.then(function (subData) {
            if (data) {
              _util.DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);

              process(data, subData.count, subData.xhr);
            }
          }, fnFail);
        }

        return childReq;
      };

      var fnSuccess = function (data, request) {
        if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this.dateParse) {
          data = _util.DataUtil.parse.parseJson(data);
        }

        var result = _this.adaptor.processResponse(data, _this, query, request.httpRequest, request);

        var count = 0;
        var aggregates = null;
        var virtualSelectRecords = 'virtualSelectRecords';
        var virtualRecords = data[virtualSelectRecords];

        if (query.isCountRequired) {
          count = result.count;
          aggregates = result.aggregates;
          result = result.result;
        }

        if (!query.subQuery) {
          process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);
          return;
        }

        if (!isSelector) {
          fnQueryChild(result, request);
        }
      };

      var req = this.extendRequest(url, fnSuccess, fnFail);
      var ajax = new _ej2Base.Ajax(req);

      ajax.beforeSend = function () {
        _this.beforeSend(ajax.httpRequest, ajax);
      };

      req = ajax.send();
      req.catch(function (e) {
        return true;
      }); // to handle failure remote requests.        

      this.requests.push(ajax);

      if (isSelector) {
        var promise = void 0;
        var res = query.subQuerySelector.call(this, {
          query: query.subQuery,
          parent: query
        });

        if (res && res.length) {
          promise = Promise.all([req, fnQueryChild(null, res)]);
          promise.then(function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            var result = args[0];

            var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);

            var count = 0;

            if (query.isCountRequired) {
              count = pResult.count;
              pResult = pResult.result;
            }

            var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);

            count = 0;

            if (query.subQuery.isCountRequired) {
              count = cResult.count;
              cResult = cResult.result;
            }

            _util.DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);

            isSelector = false;
            process(pResult, count, _this.requests[0].httpRequest);
          });
        } else {
          isSelector = false;
        }
      }

      return req;
    };

    DataManager.prototype.beforeSend = function (request, settings) {
      this.adaptor.beforeSend(this, request, settings);
      var headers = this.dataSource.headers;
      var props;

      for (var i = 0; headers && i < headers.length; i++) {
        props = [];
        var keys = Object.keys(headers[i]);

        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          props.push(prop);
          request.setRequestHeader(prop, headers[i][prop]);
        }
      }
    };
    /**
     * Save bulk changes to the given table name.
     * User can add a new record, edit an existing record, and delete a record at the same time.
     * If the datasource from remote, then updated in a single post.
     * @param  {Object} changes - Defines the CrudOptions.
     * @param  {string} key - Defines the column field.
     * @param  {string|Query} tableName - Defines the table name.
     * @param  {Query} query - Sets default query for the DataManager.
     */


    DataManager.prototype.saveChanges = function (changes, key, tableName, query, original) {
      var _this = this;

      if (tableName instanceof _query.Query) {
        query = tableName;
        tableName = null;
      }

      var args = {
        url: tableName,
        key: key || this.dataSource.key
      };
      var req = this.adaptor.batchRequest(this, changes, args, query || new _query.Query(), original);
      var doAjaxRequest = 'doAjaxRequest';

      if (this.dataSource.offline) {
        return req;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else {
        var deff_1 = new Deferred();
        var ajax_1 = new _ej2Base.Ajax(req);

        ajax_1.beforeSend = function () {
          _this.beforeSend(ajax_1.httpRequest, ajax_1);
        };

        ajax_1.onSuccess = function (data, request) {
          deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));
        };

        ajax_1.onFailure = function (e) {
          deff_1.reject([{
            error: e
          }]);
        };

        ajax_1.send().catch(function (e) {
          return true;
        }); // to handle the failure requests.        

        return deff_1.promise;
      }
    };
    /**
     * Inserts new record in the given table.
     * @param  {Object} data - Defines the data to insert.
     * @param  {string|Query} tableName - Defines the table name.
     * @param  {Query} query - Sets default query for the DataManager.
     */


    DataManager.prototype.insert = function (data, tableName, query, position) {
      if (tableName instanceof _query.Query) {
        query = tableName;
        tableName = null;
      }

      var req = this.adaptor.insert(this, data, tableName, query, position);
      var doAjaxRequest = 'doAjaxRequest';

      if (this.dataSource.offline) {
        return req;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else {
        return this.doAjaxRequest(req);
      }
    };
    /**
     * Removes data from the table with the given key.
     * @param  {string} keyField - Defines the column field.
     * @param  {Object} value - Defines the value to find the data in the specified column.
     * @param  {string|Query} tableName - Defines the table name
     * @param  {Query} query - Sets default query for the DataManager.
     */


    DataManager.prototype.remove = function (keyField, value, tableName, query) {
      if (typeof value === 'object') {
        value = value[keyField];
      }

      if (tableName instanceof _query.Query) {
        query = tableName;
        tableName = null;
      }

      var res = this.adaptor.remove(this, keyField, value, tableName, query);
      var doAjaxRequest = 'doAjaxRequest';

      if (this.dataSource.offline) {
        return res;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        return this.doAjaxRequest(res);
      }
    };
    /**
     * Updates existing record in the given table.
     * @param  {string} keyField - Defines the column field.
     * @param  {Object} value - Defines the value to find the data in the specified column.
     * @param  {string|Query} tableName - Defines the table name
     * @param  {Query} query - Sets default query for the DataManager.
     */


    DataManager.prototype.update = function (keyField, value, tableName, query, original) {
      if (tableName instanceof _query.Query) {
        query = tableName;
        tableName = null;
      }

      var res = this.adaptor.update(this, keyField, value, tableName, query, original);
      var doAjaxRequest = 'doAjaxRequest';

      if (this.dataSource.offline) {
        return res;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        return this.doAjaxRequest(res);
      }
    };

    DataManager.prototype.doAjaxRequest = function (res) {
      var _this = this;

      var defer = new Deferred();
      res = (0, _ej2Base.extend)({}, {
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        processData: false
      }, res);
      var ajax = new _ej2Base.Ajax(res);

      ajax.beforeSend = function () {
        _this.beforeSend(ajax.httpRequest, ajax);
      };

      ajax.onSuccess = function (record, request) {
        try {
          _util.DataUtil.parse.parseJson(record);
        } catch (e) {
          record = [];
        }

        record = _this.adaptor.processResponse(_util.DataUtil.parse.parseJson(record), _this, null, request.httpRequest, request);
        defer.resolve(record);
      };

      ajax.onFailure = function (e) {
        defer.reject([{
          error: e
        }]);
      };

      ajax.send().catch(function (e) {
        return true;
      }); // to handle the failure requests.

      return defer.promise;
    };

    return DataManager;
  }();

  _exports.DataManager = DataManager;

  /**
   * Deferred is used to handle asynchronous operation.
   */
  var Deferred =
  /** @class */
  function () {
    function Deferred() {
      var _this = this;
      /**
       * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
       */


      this.promise = new Promise(function (resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      /**
       * Defines the callback function triggers when the Deferred object is resolved.
       */

      this.then = this.promise.then.bind(this.promise);
      /**
       * Defines the callback function triggers when the Deferred object is rejected.
       */

      this.catch = this.promise.catch.bind(this.promise);
    }

    return Deferred;
  }();

  _exports.Deferred = Deferred;
});;
define('@syncfusion/ej2-data/src/query',["exports", "./util"], function (_exports, _util) {
  "use strict";

  _exports.__esModule = true;
  _exports.Predicate = _exports.Query = void 0;

  /**
   * Query class is used to build query which is used by the DataManager to communicate with datasource.
   */
  var Query =
  /** @class */
  function () {
    /**
     * Constructor for Query class.
     * @param  {string|string[]} from?
     * @hidden
     */
    function Query(from) {
      /** @hidden */
      this.subQuery = null;
      /** @hidden */

      this.isChild = false;
      /** @hidden */

      this.distincts = [];
      this.queries = [];
      this.key = '';
      this.fKey = '';

      if (typeof from === 'string') {
        this.fromTable = from;
      } else if (from && from instanceof Array) {
        this.lookups = from;
      }

      this.expands = [];
      this.sortedColumns = [];
      this.groupedColumns = [];
      this.subQuery = null;
      this.isChild = false;
      this.params = [];
      return this;
    }
    /**
     * Sets the primary key.
     * @param  {string} field - Defines the column field.
     */


    Query.prototype.setKey = function (field) {
      this.key = field;
      return this;
    };
    /**
     * Sets default DataManager to execute query.
     * @param  {DataManager} dataManager - Defines the DataManager.
     */


    Query.prototype.using = function (dataManager) {
      this.dataManager = dataManager;
      return this;
    };
    /**
     * Executes query with the given DataManager.
     * @param  {DataManager} dataManager - Defines the DataManager.
     * @param  {Function} done - Defines the success callback.
     * @param  {Function} fail - Defines the failure callback.
     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.
     *
     * <pre>
     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);
     * let query: Query = new Query();
     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });
     * let promise: Promise< Object > = query.execute(dataManager);
     * promise.then((e: { result: Object }) => { });
     * </pre>
     */


    Query.prototype.execute = function (dataManager, done, fail, always) {
      dataManager = dataManager || this.dataManager;

      if (dataManager) {
        return dataManager.executeQuery(this, done, fail, always);
      }

      return _util.DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    /**
     * Executes query with the local datasource.
     * @param  {DataManager} dataManager - Defines the DataManager.
     */


    Query.prototype.executeLocal = function (dataManager) {
      dataManager = dataManager || this.dataManager;

      if (dataManager) {
        return dataManager.executeLocal(this);
      }

      return _util.DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    /**
     * Creates deep copy of the Query object.
     */


    Query.prototype.clone = function () {
      var cloned = new Query();
      cloned.queries = this.queries.slice(0);
      cloned.key = this.key;
      cloned.isChild = this.isChild;
      cloned.dataManager = this.dataManager;
      cloned.fromTable = this.fromTable;
      cloned.params = this.params.slice(0);
      cloned.expands = this.expands.slice(0);
      cloned.sortedColumns = this.sortedColumns.slice(0);
      cloned.groupedColumns = this.groupedColumns.slice(0);
      cloned.subQuerySelector = this.subQuerySelector;
      cloned.subQuery = this.subQuery;
      cloned.fKey = this.fKey;
      cloned.isCountRequired = this.isCountRequired;
      cloned.distincts = this.distincts.slice(0);
      return cloned;
    };
    /**
     * Specifies the name of table to retrieve data in query execution.
     * @param  {string} tableName - Defines the table name.
     */


    Query.prototype.from = function (tableName) {
      this.fromTable = tableName;
      return this;
    };
    /**
     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.
     * @param  {string} key - Defines the key of additional parameter.
     * @param  {Function|string} value - Defines the value for the key.
     */


    Query.prototype.addParams = function (key, value) {
      if (typeof value === 'function') {
        this.params.push({
          key: key,
          fn: value
        });
      } else {
        this.params.push({
          key: key,
          value: value
        });
      }

      return this;
    };
    /**
     * @hidden
     */


    Query.prototype.distinct = function (fields) {
      if (typeof fields === 'string') {
        this.distincts = [].slice.call([fields], 0);
      } else {
        this.distincts = fields.slice(0);
      }

      return this;
    };
    /**
     * Expands the related table.
     * @param  {string|Object[]} tables
     */


    Query.prototype.expand = function (tables) {
      if (typeof tables === 'string') {
        this.expands = [].slice.call([tables], 0);
      } else {
        this.expands = tables.slice(0);
      }

      return this;
    };
    /**
     * Filter data with given filter criteria.
     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string|number|boolean} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */


    Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent) {
      operator = operator ? operator.toLowerCase() : null;
      var predicate = null;

      if (typeof fieldName === 'string') {
        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);
      } else if (fieldName instanceof Predicate) {
        predicate = fieldName;
      }

      this.queries.push({
        fn: 'onWhere',
        e: predicate
      });
      return this;
    };
    /**
     * Search data with given search criteria.
     * @param  {string|number|boolean} searchKey - Defines the search key.
     * @param  {string|string[]} fieldNames - Defines the collection of column fields.
     * @param  {string} operator - Defines the operator how to search data.
     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */


    Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
      if (typeof fieldNames === 'string') {
        fieldNames = [fieldNames];
      }

      operator = operator || 'contains';
      var comparer = _util.DataUtil.fnOperators[operator];
      this.queries.push({
        fn: 'onSearch',
        e: {
          fieldNames: fieldNames,
          operator: operator,
          searchKey: searchKey,
          ignoreCase: ignoreCase,
          ignoreAccent: ignoreAccent,
          comparer: comparer
        }
      });
      return this;
    };
    /**
     * Sort the data with given sort criteria.
     * By default, sort direction is ascending.
     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.
     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.
     */


    Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {
      var order = 'ascending';
      var sorts;
      var temp;

      if (typeof fieldName === 'string' && _util.DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {
        fieldName = fieldName.replace(/ desc$/i, '');
        comparer = 'descending';
      }

      if (!comparer || typeof comparer === 'string') {
        order = comparer ? comparer.toLowerCase() : 'ascending';
        comparer = _util.DataUtil.fnSort(comparer);
      }

      if (isFromGroup) {
        sorts = Query.filterQueries(this.queries, 'onSortBy');

        for (var i = 0; i < sorts.length; i++) {
          temp = sorts[i].e.fieldName;

          if (typeof temp === 'string') {
            if (temp === fieldName) {
              return this;
            }
          } else if (temp instanceof Array) {
            for (var j = 0; j < temp.length; j++) {
              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {
                return this;
              }
            }
          }
        }
      }

      this.queries.push({
        fn: 'onSortBy',
        e: {
          fieldName: fieldName,
          comparer: comparer,
          direction: order
        }
      });
      return this;
    };
    /**
     * Sorts data in descending order.
     * @param  {string} fieldName - Defines the column field.
     */


    Query.prototype.sortByDesc = function (fieldName) {
      return this.sortBy(fieldName, 'descending');
    };
    /**
     * Groups data with the given field name.
     * @param  {string} fieldName - Defines the column field.
     */


    Query.prototype.group = function (fieldName, fn, format) {
      this.sortBy(fieldName, null, true);
      this.queries.push({
        fn: 'onGroup',
        e: {
          fieldName: fieldName,
          comparer: fn ? fn : null,
          format: format ? format : null
        }
      });
      return this;
    };
    /**
     * Gets data based on the given page index and size.
     * @param  {number} pageIndex - Defines the current page index.
     * @param  {number} pageSize - Defines the no of records per page.
     */


    Query.prototype.page = function (pageIndex, pageSize) {
      this.queries.push({
        fn: 'onPage',
        e: {
          pageIndex: pageIndex,
          pageSize: pageSize
        }
      });
      return this;
    };
    /**
     * Gets data based on the given start and end index.
     * @param  {number} start - Defines the start index of the datasource.
     * @param  {number} end - Defines the end index of the datasource.
     */


    Query.prototype.range = function (start, end) {
      this.queries.push({
        fn: 'onRange',
        e: {
          start: start,
          end: end
        }
      });
      return this;
    };
    /**
     * Gets data from the top of the data source based on given number of records count.
     * @param  {number} nos - Defines the no of records to retrieve from datasource.
     */


    Query.prototype.take = function (nos) {
      this.queries.push({
        fn: 'onTake',
        e: {
          nos: nos
        }
      });
      return this;
    };
    /**
     * Skips data with given number of records count from the top of the data source.
     * @param  {number} nos - Defines the no of records skip in the datasource.
     */


    Query.prototype.skip = function (nos) {
      this.queries.push({
        fn: 'onSkip',
        e: {
          nos: nos
        }
      });
      return this;
    };
    /**
     * Selects specified columns from the data source.
     * @param  {string|string[]} fieldNames - Defines the collection of column fields.
     */


    Query.prototype.select = function (fieldNames) {
      if (typeof fieldNames === 'string') {
        fieldNames = [].slice.call([fieldNames], 0);
      }

      this.queries.push({
        fn: 'onSelect',
        e: {
          fieldNames: fieldNames
        }
      });
      return this;
    };
    /**
     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.
     * @param  {Query} query - Defines the query to relate two tables.
     * @param  {Function} selectorFn - Defines the custom function to select records.
     */


    Query.prototype.hierarchy = function (query, selectorFn) {
      this.subQuerySelector = selectorFn;
      this.subQuery = query;
      return this;
    };
    /**
     * Sets the foreign key which is used to get data from the related table.
     * @param  {string} key - Defines the foreign key.
     */


    Query.prototype.foreignKey = function (key) {
      this.fKey = key;
      return this;
    };
    /**
     * It is used to get total number of records in the DataManager execution result.
     */


    Query.prototype.requiresCount = function () {
      this.isCountRequired = true;
      return this;
    }; //type - sum, avg, min, max

    /**
     * Aggregate the data with given type and field name.
     * @param  {string} type - Defines the aggregate type.
     * @param  {string} field - Defines the column field to aggregate.
     */


    Query.prototype.aggregate = function (type, field) {
      this.queries.push({
        fn: 'onAggregates',
        e: {
          field: field,
          type: type
        }
      });
      return this;
    };
    /**
     * Pass array of filterColumn query for performing filter operation.
     * @param  {QueryOptions[]} queries
     * @param  {string} name
     * @hidden
     */


    Query.filterQueries = function (queries, name) {
      return queries.filter(function (q) {
        return q.fn === name;
      });
    };
    /**
     * To get the list of queries which is already filtered in current data source.
     * @param  {Object[]} queries
     * @param  {string[]} singles
     * @hidden
     */


    Query.filterQueryLists = function (queries, singles) {
      var filtered = queries.filter(function (q) {
        return singles.indexOf(q.fn) !== -1;
      });
      var res = {};

      for (var i = 0; i < filtered.length; i++) {
        if (!res[filtered[i].fn]) {
          res[filtered[i].fn] = filtered[i].e;
        }
      }

      return res;
    };

    return Query;
  }();

  _exports.Query = Query;

  /**
   * Predicate class is used to generate complex filter criteria.
   * This will be used by DataManager to perform multiple filtering operation.
   */
  var Predicate =
  /** @class */
  function () {
    /**
     * Constructor for Predicate class.
     * @param  {string|Predicate} field
     * @param  {string} operator
     * @param  {string|number|boolean|Predicate|Predicate[]} value
     * @param  {boolean=false} ignoreCase
     * @hidden
     */
    function Predicate(field, operator, value, ignoreCase, ignoreAccent) {
      if (ignoreCase === void 0) {
        ignoreCase = false;
      }
      /** @hidden */


      this.ignoreAccent = false;
      /** @hidden */

      this.isComplex = false;

      if (typeof field === 'string') {
        this.field = field;
        this.operator = operator.toLowerCase();
        this.value = value;
        this.ignoreCase = ignoreCase;
        this.ignoreAccent = ignoreAccent;
        this.isComplex = false;
        this.comparer = _util.DataUtil.fnOperators.processOperator(this.operator);
      } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {
        this.isComplex = true;
        this.condition = operator.toLowerCase();
        this.predicates = [field];

        if (value instanceof Array) {
          [].push.apply(this.predicates, value);
        } else {
          this.predicates.push(value);
        }
      }

      return this;
    }
    /**
     * Adds n-number of new predicates on existing predicate with “and” condition.
     * @param  {Object[]} args - Defines the collection of predicates.
     */


    Predicate.and = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return Predicate.combinePredicates([].slice.call(args, 0), 'and');
    };
    /**
     * Adds new predicate on existing predicate with “and” condition.
     * @param  {string} field - Defines the column field.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */


    Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);
    };
    /**
     * Adds n-number of new predicates on existing predicate with “or” condition.
     * @param  {Object[]} args - Defines the collection of predicates.
     */


    Predicate.or = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return Predicate.combinePredicates([].slice.call(args, 0), 'or');
    };
    /**
     * Adds new predicate on existing predicate with “or” condition.
     * @param  {string} field - Defines the column field.
     * @param  {string} operator - Defines the operator how to filter data.
     * @param  {string} value - Defines the values to match with data.
     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else
     * filter data with case insensitive.
     */


    Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);
    };
    /**
     * Converts plain JavaScript object to Predicate object.
     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.
     */


    Predicate.fromJson = function (json) {
      if (json instanceof Array) {
        var res = [];

        for (var i = 0, len = json.length; i < len; i++) {
          res.push(this.fromJSONData(json[i]));
        }

        return res;
      }

      var pred = json;
      return this.fromJSONData(pred);
    };
    /**
     * Validate the record based on the predicates.
     * @param  {Object} record - Defines the datasource record.
     */


    Predicate.prototype.validate = function (record) {
      var predicate = this.predicates ? this.predicates : [];
      var isAnd;
      var ret;

      if (!this.isComplex && this.comparer) {
        return this.comparer.call(this, _util.DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
      }

      isAnd = this.condition === 'and';

      for (var i = 0; i < predicate.length; i++) {
        ret = predicate[i].validate(record);

        if (isAnd) {
          if (!ret) {
            return false;
          }
        } else {
          if (ret) {
            return true;
          }
        }
      }

      return isAnd;
    };
    /**
     * Converts predicates to plain JavaScript.
     * This method is uses Json stringify when serializing Predicate object.
     */


    Predicate.prototype.toJson = function () {
      var predicates;
      var p;

      if (this.isComplex) {
        predicates = [];
        p = this.predicates;

        for (var i = 0; i < p.length; i++) {
          predicates.push(p[i].toJson());
        }
      }

      return {
        isComplex: this.isComplex,
        field: this.field,
        operator: this.operator,
        value: this.value,
        ignoreCase: this.ignoreCase,
        ignoreAccent: this.ignoreAccent,
        condition: this.condition,
        predicates: predicates
      };
    };

    Predicate.combinePredicates = function (predicates, operator) {
      if (predicates.length === 1) {
        if (!(predicates[0] instanceof Array)) {
          return predicates[0];
        }

        predicates = predicates[0];
      }

      return new Predicate(predicates[0], operator, predicates.slice(1));
    };

    Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
      if (field instanceof Predicate) {
        return Predicate[condition](pred, field);
      }

      if (typeof field === 'string') {
        return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));
      }

      return _util.DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');
    };

    Predicate.fromJSONData = function (json) {
      var preds = json.predicates || [];
      var len = preds.length;
      var predicates = [];
      var result;

      for (var i = 0; i < len; i++) {
        predicates.push(this.fromJSONData(preds[i]));
      }

      if (!json.isComplex) {
        result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
      } else {
        result = new Predicate(predicates[0], json.condition, predicates.slice(1));
      }

      return result;
    };

    return Predicate;
  }();

  _exports.Predicate = Predicate;
});;
define('@syncfusion/ej2-data/src/util',["exports", "@syncfusion/ej2-base", "./manager", "./query"], function (_exports, _ej2Base, _manager, _query) {
  "use strict";

  _exports.__esModule = true;
  _exports.DataUtil = void 0;
  var consts = {
    GroupGuid: '{271bbba0-1ee7}'
  };
  /**
   * Data manager common utility methods.
   * @hidden
   */

  var DataUtil =
  /** @class */
  function () {
    function DataUtil() {}
    /**
     * Returns the value by invoking the provided parameter function.
     * If the paramater is not of type function then it will be returned as it is.
     * @param  {Function|string|string[]|number} value
     * @param  {Object} inst?
     * @hidden
     */


    DataUtil.getValue = function (value, inst) {
      if (typeof value === 'function') {
        return value.call(inst || {});
      }

      return value;
    };
    /**
     * Returns true if the input string ends with given string.
     * @param  {string} input
     * @param  {string} substr
     */


    DataUtil.endsWith = function (input, substr) {
      return input.slice && input.slice(-substr.length) === substr;
    };
    /**
     * Returns true if the input string starts with given string.
     * @param  {string} str
     * @param  {string} startstr
     */


    DataUtil.startsWith = function (input, start) {
      return input.slice(0, start.length) === start;
    };
    /**
     * To return the sorting function based on the string.
     * @param  {string} order
     * @hidden
     */


    DataUtil.fnSort = function (order) {
      order = order ? DataUtil.toLowerCase(order) : 'ascending';

      if (order === 'ascending') {
        return this.fnAscending;
      }

      return this.fnDescending;
    };
    /**
     * Comparer function which is used to sort the data in ascending order.
     * @param  {string|number} x
     * @param  {string|number} y
     * @returns number
     */


    DataUtil.fnAscending = function (x, y) {
      if ((0, _ej2Base.isNullOrUndefined)(x) && (0, _ej2Base.isNullOrUndefined)(y)) {
        return -1;
      }

      if (y === null || y === undefined) {
        return -1;
      }

      if (typeof x === 'string') {
        return x.localeCompare(y);
      }

      if (x === null || x === undefined) {
        return 1;
      }

      return x - y;
    };
    /**
     * Comparer function which is used to sort the data in descending order.
     * @param  {string|number} x
     * @param  {string|number} y
     * @returns number
     */


    DataUtil.fnDescending = function (x, y) {
      if ((0, _ej2Base.isNullOrUndefined)(x) && (0, _ej2Base.isNullOrUndefined)(y)) {
        return -1;
      }

      if (y === null || y === undefined) {
        return 1;
      }

      if (typeof x === 'string') {
        return x.localeCompare(y) * -1;
      }

      if (x === null || x === undefined) {
        return -1;
      }

      return y - x;
    };

    DataUtil.extractFields = function (obj, fields) {
      var newObj = {};

      for (var i = 0; i < fields.length; i++) {
        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
      }

      return newObj;
    };
    /**
     * Select objects by given fields from jsonArray.
     * @param  {Object[]} jsonArray
     * @param  {string[]} fields
     */


    DataUtil.select = function (jsonArray, fields) {
      var newData = [];

      for (var i = 0; i < jsonArray.length; i++) {
        newData.push(this.extractFields(jsonArray[i], fields));
      }

      return newData;
    };
    /**
     * Group the input data based on the field name.
     * It also performs aggregation of the grouped records based on the aggregates paramater.
     * @param  {Object[]} jsonArray
     * @param  {string} field?
     * @param  {Object[]} agg?
     * @param  {number} level?
     * @param  {Object[]} groupDs?
     */


    DataUtil.group = function (jsonArray, field, aggregates, level, groupDs, format) {
      level = level || 1;
      var jsonData = jsonArray;
      var guid = 'GroupGuid';

      if (jsonData.GroupGuid === consts[guid]) {
        var _loop_1 = function (j) {
          if (!(0, _ej2Base.isNullOrUndefined)(groupDs)) {
            var indx = -1;
            var temp = groupDs.filter(function (e) {
              return e.key === jsonData[j].key;
            });
            indx = groupDs.indexOf(temp[0]);
            jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);
            jsonData[j].count = groupDs[indx].count;
          } else {
            jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);
            jsonData[j].count = jsonData[j].items.length;
          }
        };

        var this_1 = this;

        for (var j = 0; j < jsonData.length; j++) {
          _loop_1(j);
        }

        jsonData.childLevels += 1;
        return jsonData;
      }

      var grouped = {};
      var groupedArray = [];
      groupedArray.GroupGuid = consts[guid];
      groupedArray.level = level;
      groupedArray.childLevels = 0;
      groupedArray.records = jsonData;

      var _loop_2 = function (i) {
        var val = this_2.getVal(jsonData, i, field);

        if (!(0, _ej2Base.isNullOrUndefined)(format)) {
          val = format(val, field);
        }

        if (!grouped[val]) {
          grouped[val] = {
            key: val,
            count: 0,
            items: [],
            aggregates: {},
            field: field
          };
          groupedArray.push(grouped[val]);

          if (!(0, _ej2Base.isNullOrUndefined)(groupDs)) {
            var tempObj = groupDs.filter(function (e) {
              return e.key === grouped[val].key;
            });
            grouped[val].count = tempObj[0].count;
          }
        }

        grouped[val].count = !(0, _ej2Base.isNullOrUndefined)(groupDs) ? grouped[val].count : grouped[val].count += 1;
        grouped[val].items.push(jsonData[i]);
      };

      var this_2 = this;

      for (var i = 0; i < jsonData.length; i++) {
        _loop_2(i);
      }

      if (aggregates && aggregates.length) {
        var _loop_3 = function (i) {
          var res = {};
          var fn = void 0;
          var aggs = aggregates;

          for (var j = 0; j < aggregates.length; j++) {
            fn = DataUtil.aggregates[aggregates[j].type];

            if (!(0, _ej2Base.isNullOrUndefined)(groupDs)) {
              var temp = groupDs.filter(function (e) {
                return e.key === groupedArray[i].key;
              });

              if (fn) {
                res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);
              }
            } else {
              if (fn) {
                res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);
              }
            }
          }

          groupedArray[i].aggregates = res;
        };

        for (var i = 0; i < groupedArray.length; i++) {
          _loop_3(i);
        }
      }

      return jsonData.length && groupedArray || jsonData;
    };
    /**
     * It is used to categorize the multiple items based on a specific field in jsonArray.
     * The hierarchical queries are commonly required when you use foreign key binding.
     * @param  {string} fKey
     * @param  {string} from
     * @param  {Object[]} source
     * @param  {Group} lookup?
     * @param  {string} pKey?
     * @hidden
     */


    DataUtil.buildHierarchy = function (fKey, from, source, lookup, pKey) {
      var i;
      var grp = {};
      var temp;

      if (lookup.result) {
        lookup = lookup.result;
      }

      if (lookup.GroupGuid) {
        this.throwError('DataManager: Do not have support Grouping in hierarchy');
      }

      for (i = 0; i < lookup.length; i++) {
        var fKeyData = this.getObject(fKey, lookup[i]);
        temp = grp[fKeyData] || (grp[fKeyData] = []);
        temp.push(lookup[i]);
      }

      for (i = 0; i < source.length; i++) {
        var fKeyData = this.getObject(pKey || fKey, source[i]);
        source[i][from] = grp[fKeyData];
      }
    };
    /**
     * The method used to get the field names which started with specified characters.
     * @param  {Object} obj
     * @param  {string[]} fields?
     * @param  {string} prefix?
     * @hidden
     */


    DataUtil.getFieldList = function (obj, fields, prefix) {
      if (prefix === undefined) {
        prefix = '';
      }

      if (fields === undefined || fields === null) {
        return this.getFieldList(obj, [], prefix);
      }

      var copyObj = obj;
      var keys = Object.keys(obj);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];

        if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {
          this.getFieldList(copyObj[prop], fields, prefix + prop + '.');
        } else {
          fields.push(prefix + prop);
        }
      }

      return fields;
    };
    /**
     * Gets the value of the property in the given object.
     * The complex object can be accessed by providing the field names concatenated with dot(.).
     * @param  {string} nameSpace - The name of the property to be accessed.
     * @param  {Object} from - Defines the source object.
     */


    DataUtil.getObject = function (nameSpace, from) {
      if (!nameSpace) {
        return from;
      }

      if (!from) {
        return undefined;
      }

      if (nameSpace.indexOf('.') === -1) {
        return from[nameSpace];
      }

      var value = from;
      var splits = nameSpace.split('.');

      for (var i = 0; i < splits.length; i++) {
        if (value == null) {
          break;
        }

        value = value[splits[i]];
      }

      return value;
    };
    /**
     * To set value for the nameSpace in desired object.
     * @param {string} nameSpace - String value to the get the inner object.
     * @param {Object} value - Value that you need to set.
     * @param {Object} obj - Object to get the inner object value.
     * @return { [key: string]: Object; } | Object
     * @hidden
     */


    DataUtil.setValue = function (nameSpace, value, obj) {
      var keys = nameSpace.toString().split('.');
      var start = obj || {};
      var fromObj = start;
      var i;
      var length = keys.length;
      var key;

      for (i = 0; i < length; i++) {
        key = keys[i];

        if (i + 1 === length) {
          fromObj[key] = value === undefined ? undefined : value;
        } else if ((0, _ej2Base.isNullOrUndefined)(fromObj[key])) {
          fromObj[key] = {};
        }

        fromObj = fromObj[key];
      }

      return start;
    };
    /**
     * Sort the given data based on the field and comparer.
     * @param  {Object[]} ds - Defines the input data.
     * @param  {string} field - Defines the field to be sorted.
     * @param  {Function} comparer - Defines the comparer function used to sort the records.
     */


    DataUtil.sort = function (ds, field, comparer) {
      if (ds.length <= 1) {
        return ds;
      }

      var middle = parseInt((ds.length / 2).toString(), 10);
      var left = ds.slice(0, middle);
      var right = ds.slice(middle);
      left = this.sort(left, field, comparer);
      right = this.sort(right, field, comparer);
      return this.merge(left, right, field, comparer);
    };

    DataUtil.ignoreDiacritics = function (value) {
      if (typeof value !== 'string') {
        return value;
      }

      var result = value.split('');
      var newValue = result.map(function (temp) {
        return temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp;
      });
      return newValue.join('');
    };

    DataUtil.merge = function (left, right, fieldName, comparer) {
      var result = [];
      var current;

      while (left.length > 0 || right.length > 0) {
        if (left.length > 0 && right.length > 0) {
          if (comparer) {
            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
          } else {
            current = left[0][fieldName] < left[0][fieldName] ? left : right;
          }
        } else {
          current = left.length > 0 ? left : right;
        }

        result.push(current.shift());
      }

      return result;
    };

    DataUtil.getVal = function (array, index, field) {
      return field ? this.getObject(field, array[index]) : array[index];
    };

    DataUtil.toLowerCase = function (val) {
      return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';
    };
    /**
     * To perform the filter operation with specified adaptor and returns the result.
     * @param  {Object} adaptor
     * @param  {string} fnName
     * @param  {Object} param1?
     * @param  {Object} param2?
     * @hidden
     */


    DataUtil.callAdaptorFunction = function (adaptor, fnName, param1, param2) {
      if (fnName in adaptor) {
        var res = adaptor[fnName](param1, param2);

        if (!(0, _ej2Base.isNullOrUndefined)(res)) {
          param1 = res;
        }
      }

      return param1;
    };

    DataUtil.getAddParams = function (adp, dm, query) {
      var req = {};
      DataUtil.callAdaptorFunction(adp, 'addParams', {
        dm: dm,
        query: query,
        params: query.params,
        reqParams: req
      });
      return req;
    };
    /**
     * Checks wheather the given input is a plain object or not.
     * @param  {Object|Object[]} obj
     */


    DataUtil.isPlainObject = function (obj) {
      return !!obj && obj.constructor === Object;
    };
    /**
     * Returns true when the browser cross origin request.
     */


    DataUtil.isCors = function () {
      var xhr = null;
      var request = 'XMLHttpRequest';

      try {
        xhr = new window[request]();
      } catch (e) {// No exception handling
      }

      return !!xhr && 'withCredentials' in xhr;
    };
    /**
     * Generate random GUID value which will be prefixed with the given value.
     * @param  {string} prefix
     */


    DataUtil.getGuid = function (prefix) {
      var hexs = '0123456789abcdef';
      var rand;
      return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
        if ('crypto' in window && 'getRandomValues' in crypto) {
          var arr = new Uint8Array(1);
          window.crypto.getRandomValues(arr);
          rand = arr[0] % 16 | 0;
        } else {
          rand = Math.random() * 16 | 0;
        }

        return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
      });
    };
    /**
     * Checks wheather the given value is null or not.
     * @param  {string|Object} val
     * @returns boolean
     */


    DataUtil.isNull = function (val) {
      return val === undefined || val === null;
    };
    /**
     * To get the required items from collection of objects.
     * @param  {Object[]} array
     * @param  {string} field
     * @param  {Function} comparer
     * @returns Object
     * @hidden
     */


    DataUtil.getItemFromComparer = function (array, field, comparer) {
      var keyVal;
      var current;
      var key;
      var i = 0;
      var castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';

      if (array.length) {
        while ((0, _ej2Base.isNullOrUndefined)(keyVal) && i < array.length) {
          keyVal = DataUtil.getVal(array, i, field);
          key = array[i++];
        }
      }

      for (; i < array.length; i++) {
        current = DataUtil.getVal(array, i, field);

        if ((0, _ej2Base.isNullOrUndefined)(current)) {
          continue;
        }

        if (castRequired) {
          keyVal = +keyVal;
          current = +current;
        }

        if (comparer(keyVal, current) > 0) {
          keyVal = current;
          key = array[i];
        }
      }

      return key;
    };
    /**
     * To get distinct values of Array or Array of Objects.
     * @param  {Object[]} json
     * @param  {string} field
     * @param  {boolean} requiresCompleteRecord
     * @returns Object[]
     * * distinct array of objects is return when requiresCompleteRecord set as true.
     * @hidden
     */


    DataUtil.distinct = function (json, fieldName, requiresCompleteRecord) {
      requiresCompleteRecord = (0, _ej2Base.isNullOrUndefined)(requiresCompleteRecord) ? false : requiresCompleteRecord;
      var result = [];
      var val;
      var tmp = {};
      json.forEach(function (data, index) {
        val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];

        if (!(val in tmp)) {
          result.push(!requiresCompleteRecord ? val : json[index]);
          tmp[val] = 1;
        }
      });
      return result;
    };
    /**
     * Specifies the value which will be used to adjust the date value to server timezone.
     * @default null
     */


    DataUtil.serverTimezoneOffset = null;
    /**
     * Species whether are not to be parsed with serverTimezoneOffset value.
     * @hidden
     */

    DataUtil.timeZoneHandling = true;
    /**
     * Throw error with the given string as message.
     * @param  {string} er
     */

    DataUtil.throwError = function (error) {
      try {
        throw new Error(error);
      } catch (e) {
        throw e.message + '\n' + e.stack;
      }
    };

    DataUtil.aggregates = {
      /**
       * Calculate sum of the given field in the data.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      sum: function (ds, field) {
        var result = 0;
        var val;
        var castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';

        for (var i = 0; i < ds.length; i++) {
          val = DataUtil.getVal(ds, i, field);

          if (!isNaN(val) && val !== null) {
            if (castRequired) {
              val = +val;
            }

            result += val;
          }
        }

        return result;
      },

      /**
       * Calculate average value of the given field in the data.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      average: function (ds, field) {
        return DataUtil.aggregates.sum(ds, field) / ds.length;
      },

      /**
       * Returns the min value of the data based on the field.
       * @param  {Object[]} ds
       * @param  {string|Function} field
       */
      min: function (ds, field) {
        var comparer;

        if (typeof field === 'function') {
          comparer = field;
          field = null;
        }

        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));
      },

      /**
       * Returns the max value of the data based on the field.
       * @param  {Object[]} ds
       * @param  {string} field
       * @returns number
       */
      max: function (ds, field) {
        var comparer;

        if (typeof field === 'function') {
          comparer = field;
          field = null;
        }

        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));
      },

      /**
       * Returns the total number of true value present in the data based on the given boolean field name.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      truecount: function (ds, field) {
        return new _manager.DataManager(ds).executeLocal(new _query.Query().where(field, 'equal', true, true)).length;
      },

      /**
       * Returns the total number of false value present in the data based on the given boolean field name.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      falsecount: function (ds, field) {
        return new _manager.DataManager(ds).executeLocal(new _query.Query().where(field, 'equal', false, true)).length;
      },

      /**
       * Returns the length of the given data.
       * @param  {Object[]} ds
       * @param  {string} field?
       * @returns number
       */
      count: function (ds, field) {
        return ds.length;
      }
    };
    /**
     * Specifies the Object with filter operators.
     */

    DataUtil.operatorSymbols = {
      '<': 'lessthan',
      '>': 'greaterthan',
      '<=': 'lessthanorequal',
      '>=': 'greaterthanorequal',
      '==': 'equal',
      '!=': 'notequal',
      '*=': 'contains',
      '$=': 'endswith',
      '^=': 'startswith'
    };
    /**
     * Specifies the Object with filter operators which will be used for OData filter query generation.
     * * It will be used for date/number type filter query.
     */

    DataUtil.odBiOperator = {
      '<': ' lt ',
      '>': ' gt ',
      '<=': ' le ',
      '>=': ' ge ',
      '==': ' eq ',
      '!=': ' ne ',
      'lessthan': ' lt ',
      'lessthanorequal': ' le ',
      'greaterthan': ' gt ',
      'greaterthanorequal': ' ge ',
      'equal': ' eq ',
      'notequal': ' ne '
    };
    /**
     * Specifies the Object with filter operators which will be used for OData filter query generation.
     * It will be used for string type filter query.
     */

    DataUtil.odUniOperator = {
      '$=': 'endswith',
      '^=': 'startswith',
      '*=': 'substringof',
      'endswith': 'endswith',
      'startswith': 'startswith',
      'contains': 'substringof'
    };
    /**
     * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.
     * It will be used for string type filter query.
     */

    DataUtil.odv4UniOperator = {
      '$=': 'endswith',
      '^=': 'startswith',
      '*=': 'contains',
      'endswith': 'endswith',
      'startswith': 'startswith',
      'contains': 'contains'
    };
    DataUtil.diacritics = {
      '\u24B6': 'A',
      '\uFF21': 'A',
      '\u00C0': 'A',
      '\u00C1': 'A',
      '\u00C2': 'A',
      '\u1EA6': 'A',
      '\u1EA4': 'A',
      '\u1EAA': 'A',
      '\u1EA8': 'A',
      '\u00C3': 'A',
      '\u0100': 'A',
      '\u0102': 'A',
      '\u1EB0': 'A',
      '\u1EAE': 'A',
      '\u1EB4': 'A',
      '\u1EB2': 'A',
      '\u0226': 'A',
      '\u01E0': 'A',
      '\u00C4': 'A',
      '\u01DE': 'A',
      '\u1EA2': 'A',
      '\u00C5': 'A',
      '\u01FA': 'A',
      '\u01CD': 'A',
      '\u0200': 'A',
      '\u0202': 'A',
      '\u1EA0': 'A',
      '\u1EAC': 'A',
      '\u1EB6': 'A',
      '\u1E00': 'A',
      '\u0104': 'A',
      '\u023A': 'A',
      '\u2C6F': 'A',
      '\uA732': 'AA',
      '\u00C6': 'AE',
      '\u01FC': 'AE',
      '\u01E2': 'AE',
      '\uA734': 'AO',
      '\uA736': 'AU',
      '\uA738': 'AV',
      '\uA73A': 'AV',
      '\uA73C': 'AY',
      '\u24B7': 'B',
      '\uFF22': 'B',
      '\u1E02': 'B',
      '\u1E04': 'B',
      '\u1E06': 'B',
      '\u0243': 'B',
      '\u0182': 'B',
      '\u0181': 'B',
      '\u24B8': 'C',
      '\uFF23': 'C',
      '\u0106': 'C',
      '\u0108': 'C',
      '\u010A': 'C',
      '\u010C': 'C',
      '\u00C7': 'C',
      '\u1E08': 'C',
      '\u0187': 'C',
      '\u023B': 'C',
      '\uA73E': 'C',
      '\u24B9': 'D',
      '\uFF24': 'D',
      '\u1E0A': 'D',
      '\u010E': 'D',
      '\u1E0C': 'D',
      '\u1E10': 'D',
      '\u1E12': 'D',
      '\u1E0E': 'D',
      '\u0110': 'D',
      '\u018B': 'D',
      '\u018A': 'D',
      '\u0189': 'D',
      '\uA779': 'D',
      '\u01F1': 'DZ',
      '\u01C4': 'DZ',
      '\u01F2': 'Dz',
      '\u01C5': 'Dz',
      '\u24BA': 'E',
      '\uFF25': 'E',
      '\u00C8': 'E',
      '\u00C9': 'E',
      '\u00CA': 'E',
      '\u1EC0': 'E',
      '\u1EBE': 'E',
      '\u1EC4': 'E',
      '\u1EC2': 'E',
      '\u1EBC': 'E',
      '\u0112': 'E',
      '\u1E14': 'E',
      '\u1E16': 'E',
      '\u0114': 'E',
      '\u0116': 'E',
      '\u00CB': 'E',
      '\u1EBA': 'E',
      '\u011A': 'E',
      '\u0204': 'E',
      '\u0206': 'E',
      '\u1EB8': 'E',
      '\u1EC6': 'E',
      '\u0228': 'E',
      '\u1E1C': 'E',
      '\u0118': 'E',
      '\u1E18': 'E',
      '\u1E1A': 'E',
      '\u0190': 'E',
      '\u018E': 'E',
      '\u24BB': 'F',
      '\uFF26': 'F',
      '\u1E1E': 'F',
      '\u0191': 'F',
      '\uA77B': 'F',
      '\u24BC': 'G',
      '\uFF27': 'G',
      '\u01F4': 'G',
      '\u011C': 'G',
      '\u1E20': 'G',
      '\u011E': 'G',
      '\u0120': 'G',
      '\u01E6': 'G',
      '\u0122': 'G',
      '\u01E4': 'G',
      '\u0193': 'G',
      '\uA7A0': 'G',
      '\uA77D': 'G',
      '\uA77E': 'G',
      '\u24BD': 'H',
      '\uFF28': 'H',
      '\u0124': 'H',
      '\u1E22': 'H',
      '\u1E26': 'H',
      '\u021E': 'H',
      '\u1E24': 'H',
      '\u1E28': 'H',
      '\u1E2A': 'H',
      '\u0126': 'H',
      '\u2C67': 'H',
      '\u2C75': 'H',
      '\uA78D': 'H',
      '\u24BE': 'I',
      '\uFF29': 'I',
      '\u00CC': 'I',
      '\u00CD': 'I',
      '\u00CE': 'I',
      '\u0128': 'I',
      '\u012A': 'I',
      '\u012C': 'I',
      '\u0130': 'I',
      '\u00CF': 'I',
      '\u1E2E': 'I',
      '\u1EC8': 'I',
      '\u01CF': 'I',
      '\u0208': 'I',
      '\u020A': 'I',
      '\u1ECA': 'I',
      '\u012E': 'I',
      '\u1E2C': 'I',
      '\u0197': 'I',
      '\u24BF': 'J',
      '\uFF2A': 'J',
      '\u0134': 'J',
      '\u0248': 'J',
      '\u24C0': 'K',
      '\uFF2B': 'K',
      '\u1E30': 'K',
      '\u01E8': 'K',
      '\u1E32': 'K',
      '\u0136': 'K',
      '\u1E34': 'K',
      '\u0198': 'K',
      '\u2C69': 'K',
      '\uA740': 'K',
      '\uA742': 'K',
      '\uA744': 'K',
      '\uA7A2': 'K',
      '\u24C1': 'L',
      '\uFF2C': 'L',
      '\u013F': 'L',
      '\u0139': 'L',
      '\u013D': 'L',
      '\u1E36': 'L',
      '\u1E38': 'L',
      '\u013B': 'L',
      '\u1E3C': 'L',
      '\u1E3A': 'L',
      '\u0141': 'L',
      '\u023D': 'L',
      '\u2C62': 'L',
      '\u2C60': 'L',
      '\uA748': 'L',
      '\uA746': 'L',
      '\uA780': 'L',
      '\u01C7': 'LJ',
      '\u01C8': 'Lj',
      '\u24C2': 'M',
      '\uFF2D': 'M',
      '\u1E3E': 'M',
      '\u1E40': 'M',
      '\u1E42': 'M',
      '\u2C6E': 'M',
      '\u019C': 'M',
      '\u24C3': 'N',
      '\uFF2E': 'N',
      '\u01F8': 'N',
      '\u0143': 'N',
      '\u00D1': 'N',
      '\u1E44': 'N',
      '\u0147': 'N',
      '\u1E46': 'N',
      '\u0145': 'N',
      '\u1E4A': 'N',
      '\u1E48': 'N',
      '\u0220': 'N',
      '\u019D': 'N',
      '\uA790': 'N',
      '\uA7A4': 'N',
      '\u01CA': 'NJ',
      '\u01CB': 'Nj',
      '\u24C4': 'O',
      '\uFF2F': 'O',
      '\u00D2': 'O',
      '\u00D3': 'O',
      '\u00D4': 'O',
      '\u1ED2': 'O',
      '\u1ED0': 'O',
      '\u1ED6': 'O',
      '\u1ED4': 'O',
      '\u00D5': 'O',
      '\u1E4C': 'O',
      '\u022C': 'O',
      '\u1E4E': 'O',
      '\u014C': 'O',
      '\u1E50': 'O',
      '\u1E52': 'O',
      '\u014E': 'O',
      '\u022E': 'O',
      '\u0230': 'O',
      '\u00D6': 'O',
      '\u022A': 'O',
      '\u1ECE': 'O',
      '\u0150': 'O',
      '\u01D1': 'O',
      '\u020C': 'O',
      '\u020E': 'O',
      '\u01A0': 'O',
      '\u1EDC': 'O',
      '\u1EDA': 'O',
      '\u1EE0': 'O',
      '\u1EDE': 'O',
      '\u1EE2': 'O',
      '\u1ECC': 'O',
      '\u1ED8': 'O',
      '\u01EA': 'O',
      '\u01EC': 'O',
      '\u00D8': 'O',
      '\u01FE': 'O',
      '\u0186': 'O',
      '\u019F': 'O',
      '\uA74A': 'O',
      '\uA74C': 'O',
      '\u01A2': 'OI',
      '\uA74E': 'OO',
      '\u0222': 'OU',
      '\u24C5': 'P',
      '\uFF30': 'P',
      '\u1E54': 'P',
      '\u1E56': 'P',
      '\u01A4': 'P',
      '\u2C63': 'P',
      '\uA750': 'P',
      '\uA752': 'P',
      '\uA754': 'P',
      '\u24C6': 'Q',
      '\uFF31': 'Q',
      '\uA756': 'Q',
      '\uA758': 'Q',
      '\u024A': 'Q',
      '\u24C7': 'R',
      '\uFF32': 'R',
      '\u0154': 'R',
      '\u1E58': 'R',
      '\u0158': 'R',
      '\u0210': 'R',
      '\u0212': 'R',
      '\u1E5A': 'R',
      '\u1E5C': 'R',
      '\u0156': 'R',
      '\u1E5E': 'R',
      '\u024C': 'R',
      '\u2C64': 'R',
      '\uA75A': 'R',
      '\uA7A6': 'R',
      '\uA782': 'R',
      '\u24C8': 'S',
      '\uFF33': 'S',
      '\u1E9E': 'S',
      '\u015A': 'S',
      '\u1E64': 'S',
      '\u015C': 'S',
      '\u1E60': 'S',
      '\u0160': 'S',
      '\u1E66': 'S',
      '\u1E62': 'S',
      '\u1E68': 'S',
      '\u0218': 'S',
      '\u015E': 'S',
      '\u2C7E': 'S',
      '\uA7A8': 'S',
      '\uA784': 'S',
      '\u24C9': 'T',
      '\uFF34': 'T',
      '\u1E6A': 'T',
      '\u0164': 'T',
      '\u1E6C': 'T',
      '\u021A': 'T',
      '\u0162': 'T',
      '\u1E70': 'T',
      '\u1E6E': 'T',
      '\u0166': 'T',
      '\u01AC': 'T',
      '\u01AE': 'T',
      '\u023E': 'T',
      '\uA786': 'T',
      '\uA728': 'TZ',
      '\u24CA': 'U',
      '\uFF35': 'U',
      '\u00D9': 'U',
      '\u00DA': 'U',
      '\u00DB': 'U',
      '\u0168': 'U',
      '\u1E78': 'U',
      '\u016A': 'U',
      '\u1E7A': 'U',
      '\u016C': 'U',
      '\u00DC': 'U',
      '\u01DB': 'U',
      '\u01D7': 'U',
      '\u01D5': 'U',
      '\u01D9': 'U',
      '\u1EE6': 'U',
      '\u016E': 'U',
      '\u0170': 'U',
      '\u01D3': 'U',
      '\u0214': 'U',
      '\u0216': 'U',
      '\u01AF': 'U',
      '\u1EEA': 'U',
      '\u1EE8': 'U',
      '\u1EEE': 'U',
      '\u1EEC': 'U',
      '\u1EF0': 'U',
      '\u1EE4': 'U',
      '\u1E72': 'U',
      '\u0172': 'U',
      '\u1E76': 'U',
      '\u1E74': 'U',
      '\u0244': 'U',
      '\u24CB': 'V',
      '\uFF36': 'V',
      '\u1E7C': 'V',
      '\u1E7E': 'V',
      '\u01B2': 'V',
      '\uA75E': 'V',
      '\u0245': 'V',
      '\uA760': 'VY',
      '\u24CC': 'W',
      '\uFF37': 'W',
      '\u1E80': 'W',
      '\u1E82': 'W',
      '\u0174': 'W',
      '\u1E86': 'W',
      '\u1E84': 'W',
      '\u1E88': 'W',
      '\u2C72': 'W',
      '\u24CD': 'X',
      '\uFF38': 'X',
      '\u1E8A': 'X',
      '\u1E8C': 'X',
      '\u24CE': 'Y',
      '\uFF39': 'Y',
      '\u1EF2': 'Y',
      '\u00DD': 'Y',
      '\u0176': 'Y',
      '\u1EF8': 'Y',
      '\u0232': 'Y',
      '\u1E8E': 'Y',
      '\u0178': 'Y',
      '\u1EF6': 'Y',
      '\u1EF4': 'Y',
      '\u01B3': 'Y',
      '\u024E': 'Y',
      '\u1EFE': 'Y',
      '\u24CF': 'Z',
      '\uFF3A': 'Z',
      '\u0179': 'Z',
      '\u1E90': 'Z',
      '\u017B': 'Z',
      '\u017D': 'Z',
      '\u1E92': 'Z',
      '\u1E94': 'Z',
      '\u01B5': 'Z',
      '\u0224': 'Z',
      '\u2C7F': 'Z',
      '\u2C6B': 'Z',
      '\uA762': 'Z',
      '\u24D0': 'a',
      '\uFF41': 'a',
      '\u1E9A': 'a',
      '\u00E0': 'a',
      '\u00E1': 'a',
      '\u00E2': 'a',
      '\u1EA7': 'a',
      '\u1EA5': 'a',
      '\u1EAB': 'a',
      '\u1EA9': 'a',
      '\u00E3': 'a',
      '\u0101': 'a',
      '\u0103': 'a',
      '\u1EB1': 'a',
      '\u1EAF': 'a',
      '\u1EB5': 'a',
      '\u1EB3': 'a',
      '\u0227': 'a',
      '\u01E1': 'a',
      '\u00E4': 'a',
      '\u01DF': 'a',
      '\u1EA3': 'a',
      '\u00E5': 'a',
      '\u01FB': 'a',
      '\u01CE': 'a',
      '\u0201': 'a',
      '\u0203': 'a',
      '\u1EA1': 'a',
      '\u1EAD': 'a',
      '\u1EB7': 'a',
      '\u1E01': 'a',
      '\u0105': 'a',
      '\u2C65': 'a',
      '\u0250': 'a',
      '\uA733': 'aa',
      '\u00E6': 'ae',
      '\u01FD': 'ae',
      '\u01E3': 'ae',
      '\uA735': 'ao',
      '\uA737': 'au',
      '\uA739': 'av',
      '\uA73B': 'av',
      '\uA73D': 'ay',
      '\u24D1': 'b',
      '\uFF42': 'b',
      '\u1E03': 'b',
      '\u1E05': 'b',
      '\u1E07': 'b',
      '\u0180': 'b',
      '\u0183': 'b',
      '\u0253': 'b',
      '\u24D2': 'c',
      '\uFF43': 'c',
      '\u0107': 'c',
      '\u0109': 'c',
      '\u010B': 'c',
      '\u010D': 'c',
      '\u00E7': 'c',
      '\u1E09': 'c',
      '\u0188': 'c',
      '\u023C': 'c',
      '\uA73F': 'c',
      '\u2184': 'c',
      '\u24D3': 'd',
      '\uFF44': 'd',
      '\u1E0B': 'd',
      '\u010F': 'd',
      '\u1E0D': 'd',
      '\u1E11': 'd',
      '\u1E13': 'd',
      '\u1E0F': 'd',
      '\u0111': 'd',
      '\u018C': 'd',
      '\u0256': 'd',
      '\u0257': 'd',
      '\uA77A': 'd',
      '\u01F3': 'dz',
      '\u01C6': 'dz',
      '\u24D4': 'e',
      '\uFF45': 'e',
      '\u00E8': 'e',
      '\u00E9': 'e',
      '\u00EA': 'e',
      '\u1EC1': 'e',
      '\u1EBF': 'e',
      '\u1EC5': 'e',
      '\u1EC3': 'e',
      '\u1EBD': 'e',
      '\u0113': 'e',
      '\u1E15': 'e',
      '\u1E17': 'e',
      '\u0115': 'e',
      '\u0117': 'e',
      '\u00EB': 'e',
      '\u1EBB': 'e',
      '\u011B': 'e',
      '\u0205': 'e',
      '\u0207': 'e',
      '\u1EB9': 'e',
      '\u1EC7': 'e',
      '\u0229': 'e',
      '\u1E1D': 'e',
      '\u0119': 'e',
      '\u1E19': 'e',
      '\u1E1B': 'e',
      '\u0247': 'e',
      '\u025B': 'e',
      '\u01DD': 'e',
      '\u24D5': 'f',
      '\uFF46': 'f',
      '\u1E1F': 'f',
      '\u0192': 'f',
      '\uA77C': 'f',
      '\u24D6': 'g',
      '\uFF47': 'g',
      '\u01F5': 'g',
      '\u011D': 'g',
      '\u1E21': 'g',
      '\u011F': 'g',
      '\u0121': 'g',
      '\u01E7': 'g',
      '\u0123': 'g',
      '\u01E5': 'g',
      '\u0260': 'g',
      '\uA7A1': 'g',
      '\u1D79': 'g',
      '\uA77F': 'g',
      '\u24D7': 'h',
      '\uFF48': 'h',
      '\u0125': 'h',
      '\u1E23': 'h',
      '\u1E27': 'h',
      '\u021F': 'h',
      '\u1E25': 'h',
      '\u1E29': 'h',
      '\u1E2B': 'h',
      '\u1E96': 'h',
      '\u0127': 'h',
      '\u2C68': 'h',
      '\u2C76': 'h',
      '\u0265': 'h',
      '\u0195': 'hv',
      '\u24D8': 'i',
      '\uFF49': 'i',
      '\u00EC': 'i',
      '\u00ED': 'i',
      '\u00EE': 'i',
      '\u0129': 'i',
      '\u012B': 'i',
      '\u012D': 'i',
      '\u00EF': 'i',
      '\u1E2F': 'i',
      '\u1EC9': 'i',
      '\u01D0': 'i',
      '\u0209': 'i',
      '\u020B': 'i',
      '\u1ECB': 'i',
      '\u012F': 'i',
      '\u1E2D': 'i',
      '\u0268': 'i',
      '\u0131': 'i',
      '\u24D9': 'j',
      '\uFF4A': 'j',
      '\u0135': 'j',
      '\u01F0': 'j',
      '\u0249': 'j',
      '\u24DA': 'k',
      '\uFF4B': 'k',
      '\u1E31': 'k',
      '\u01E9': 'k',
      '\u1E33': 'k',
      '\u0137': 'k',
      '\u1E35': 'k',
      '\u0199': 'k',
      '\u2C6A': 'k',
      '\uA741': 'k',
      '\uA743': 'k',
      '\uA745': 'k',
      '\uA7A3': 'k',
      '\u24DB': 'l',
      '\uFF4C': 'l',
      '\u0140': 'l',
      '\u013A': 'l',
      '\u013E': 'l',
      '\u1E37': 'l',
      '\u1E39': 'l',
      '\u013C': 'l',
      '\u1E3D': 'l',
      '\u1E3B': 'l',
      '\u017F': 'l',
      '\u0142': 'l',
      '\u019A': 'l',
      '\u026B': 'l',
      '\u2C61': 'l',
      '\uA749': 'l',
      '\uA781': 'l',
      '\uA747': 'l',
      '\u01C9': 'lj',
      '\u24DC': 'm',
      '\uFF4D': 'm',
      '\u1E3F': 'm',
      '\u1E41': 'm',
      '\u1E43': 'm',
      '\u0271': 'm',
      '\u026F': 'm',
      '\u24DD': 'n',
      '\uFF4E': 'n',
      '\u01F9': 'n',
      '\u0144': 'n',
      '\u00F1': 'n',
      '\u1E45': 'n',
      '\u0148': 'n',
      '\u1E47': 'n',
      '\u0146': 'n',
      '\u1E4B': 'n',
      '\u1E49': 'n',
      '\u019E': 'n',
      '\u0272': 'n',
      '\u0149': 'n',
      '\uA791': 'n',
      '\uA7A5': 'n',
      '\u01CC': 'nj',
      '\u24DE': 'o',
      '\uFF4F': 'o',
      '\u00F2': 'o',
      '\u00F3': 'o',
      '\u00F4': 'o',
      '\u1ED3': 'o',
      '\u1ED1': 'o',
      '\u1ED7': 'o',
      '\u1ED5': 'o',
      '\u00F5': 'o',
      '\u1E4D': 'o',
      '\u022D': 'o',
      '\u1E4F': 'o',
      '\u014D': 'o',
      '\u1E51': 'o',
      '\u1E53': 'o',
      '\u014F': 'o',
      '\u022F': 'o',
      '\u0231': 'o',
      '\u00F6': 'o',
      '\u022B': 'o',
      '\u1ECF': 'o',
      '\u0151': 'o',
      '\u01D2': 'o',
      '\u020D': 'o',
      '\u020F': 'o',
      '\u01A1': 'o',
      '\u1EDD': 'o',
      '\u1EDB': 'o',
      '\u1EE1': 'o',
      '\u1EDF': 'o',
      '\u1EE3': 'o',
      '\u1ECD': 'o',
      '\u1ED9': 'o',
      '\u01EB': 'o',
      '\u01ED': 'o',
      '\u00F8': 'o',
      '\u01FF': 'o',
      '\u0254': 'o',
      '\uA74B': 'o',
      '\uA74D': 'o',
      '\u0275': 'o',
      '\u01A3': 'oi',
      '\u0223': 'ou',
      '\uA74F': 'oo',
      '\u24DF': 'p',
      '\uFF50': 'p',
      '\u1E55': 'p',
      '\u1E57': 'p',
      '\u01A5': 'p',
      '\u1D7D': 'p',
      '\uA751': 'p',
      '\uA753': 'p',
      '\uA755': 'p',
      '\u24E0': 'q',
      '\uFF51': 'q',
      '\u024B': 'q',
      '\uA757': 'q',
      '\uA759': 'q',
      '\u24E1': 'r',
      '\uFF52': 'r',
      '\u0155': 'r',
      '\u1E59': 'r',
      '\u0159': 'r',
      '\u0211': 'r',
      '\u0213': 'r',
      '\u1E5B': 'r',
      '\u1E5D': 'r',
      '\u0157': 'r',
      '\u1E5F': 'r',
      '\u024D': 'r',
      '\u027D': 'r',
      '\uA75B': 'r',
      '\uA7A7': 'r',
      '\uA783': 'r',
      '\u24E2': 's',
      '\uFF53': 's',
      '\u00DF': 's',
      '\u015B': 's',
      '\u1E65': 's',
      '\u015D': 's',
      '\u1E61': 's',
      '\u0161': 's',
      '\u1E67': 's',
      '\u1E63': 's',
      '\u1E69': 's',
      '\u0219': 's',
      '\u015F': 's',
      '\u023F': 's',
      '\uA7A9': 's',
      '\uA785': 's',
      '\u1E9B': 's',
      '\u24E3': 't',
      '\uFF54': 't',
      '\u1E6B': 't',
      '\u1E97': 't',
      '\u0165': 't',
      '\u1E6D': 't',
      '\u021B': 't',
      '\u0163': 't',
      '\u1E71': 't',
      '\u1E6F': 't',
      '\u0167': 't',
      '\u01AD': 't',
      '\u0288': 't',
      '\u2C66': 't',
      '\uA787': 't',
      '\uA729': 'tz',
      '\u24E4': 'u',
      '\uFF55': 'u',
      '\u00F9': 'u',
      '\u00FA': 'u',
      '\u00FB': 'u',
      '\u0169': 'u',
      '\u1E79': 'u',
      '\u016B': 'u',
      '\u1E7B': 'u',
      '\u016D': 'u',
      '\u00FC': 'u',
      '\u01DC': 'u',
      '\u01D8': 'u',
      '\u01D6': 'u',
      '\u01DA': 'u',
      '\u1EE7': 'u',
      '\u016F': 'u',
      '\u0171': 'u',
      '\u01D4': 'u',
      '\u0215': 'u',
      '\u0217': 'u',
      '\u01B0': 'u',
      '\u1EEB': 'u',
      '\u1EE9': 'u',
      '\u1EEF': 'u',
      '\u1EED': 'u',
      '\u1EF1': 'u',
      '\u1EE5': 'u',
      '\u1E73': 'u',
      '\u0173': 'u',
      '\u1E77': 'u',
      '\u1E75': 'u',
      '\u0289': 'u',
      '\u24E5': 'v',
      '\uFF56': 'v',
      '\u1E7D': 'v',
      '\u1E7F': 'v',
      '\u028B': 'v',
      '\uA75F': 'v',
      '\u028C': 'v',
      '\uA761': 'vy',
      '\u24E6': 'w',
      '\uFF57': 'w',
      '\u1E81': 'w',
      '\u1E83': 'w',
      '\u0175': 'w',
      '\u1E87': 'w',
      '\u1E85': 'w',
      '\u1E98': 'w',
      '\u1E89': 'w',
      '\u2C73': 'w',
      '\u24E7': 'x',
      '\uFF58': 'x',
      '\u1E8B': 'x',
      '\u1E8D': 'x',
      '\u24E8': 'y',
      '\uFF59': 'y',
      '\u1EF3': 'y',
      '\u00FD': 'y',
      '\u0177': 'y',
      '\u1EF9': 'y',
      '\u0233': 'y',
      '\u1E8F': 'y',
      '\u00FF': 'y',
      '\u1EF7': 'y',
      '\u1E99': 'y',
      '\u1EF5': 'y',
      '\u01B4': 'y',
      '\u024F': 'y',
      '\u1EFF': 'y',
      '\u24E9': 'z',
      '\uFF5A': 'z',
      '\u017A': 'z',
      '\u1E91': 'z',
      '\u017C': 'z',
      '\u017E': 'z',
      '\u1E93': 'z',
      '\u1E95': 'z',
      '\u01B6': 'z',
      '\u0225': 'z',
      '\u0240': 'z',
      '\u2C6C': 'z',
      '\uA763': 'z',
      '\u0386': '\u0391',
      '\u0388': '\u0395',
      '\u0389': '\u0397',
      '\u038A': '\u0399',
      '\u03AA': '\u0399',
      '\u038C': '\u039F',
      '\u038E': '\u03A5',
      '\u03AB': '\u03A5',
      '\u038F': '\u03A9',
      '\u03AC': '\u03B1',
      '\u03AD': '\u03B5',
      '\u03AE': '\u03B7',
      '\u03AF': '\u03B9',
      '\u03CA': '\u03B9',
      '\u0390': '\u03B9',
      '\u03CC': '\u03BF',
      '\u03CD': '\u03C5',
      '\u03CB': '\u03C5',
      '\u03B0': '\u03C5',
      '\u03C9': '\u03C9',
      '\u03C2': '\u03C3'
    };
    DataUtil.fnOperators = {
      /**
       * Returns true when the actual input is equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       * @param  {boolean} ignoreAccent?
       */
      equal: function (actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil.ignoreDiacritics(actual);
          expected = DataUtil.ignoreDiacritics(expected);
        }

        if (ignoreCase) {
          return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);
        }

        return actual === expected;
      },

      /**
       * Returns true when the actual input is not equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      notequal: function (actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil.ignoreDiacritics(actual);
          expected = DataUtil.ignoreDiacritics(expected);
        }

        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);
      },

      /**
       * Returns true when the actual input is less than to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      lessthan: function (actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);
        }

        return actual < expected;
      },

      /**
       * Returns true when the actual input is greater than to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      greaterthan: function (actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);
        }

        return actual > expected;
      },

      /**
       * Returns true when the actual input is less than or equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      lessthanorequal: function (actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);
        }

        return actual <= expected;
      },

      /**
       * Returns true when the actual input is greater than or equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      greaterthanorequal: function (actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);
        }

        return actual >= expected;
      },

      /**
       * Returns true when the actual input contains the given string.
       * @param  {string|number} actual
       * @param  {string|number} expected
       * @param  {boolean} ignoreCase?
       */
      contains: function (actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil.ignoreDiacritics(actual);
          expected = DataUtil.ignoreDiacritics(expected);
        }

        if (ignoreCase) {
          return !(0, _ej2Base.isNullOrUndefined)(actual) && !(0, _ej2Base.isNullOrUndefined)(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;
        }

        return !(0, _ej2Base.isNullOrUndefined)(actual) && !(0, _ej2Base.isNullOrUndefined)(expected) && actual.toString().indexOf(expected) !== -1;
      },

      /**
       * Returns true when the given input value is not null.
       * @param  {string|number} actual
       * @returns boolean
       */
      notnull: function (actual) {
        return actual !== null;
      },

      /**
       * Returns true when the given input value is null.
       * @param  {string|number} actual
       * @returns boolean
       */
      isnull: function (actual) {
        return actual === null;
      },

      /**
       * Returns true when the actual input starts with the given string
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      startswith: function (actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil.ignoreDiacritics(actual);
          expected = DataUtil.ignoreDiacritics(expected);
        }

        if (ignoreCase) {
          return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
        }

        return actual && expected && DataUtil.startsWith(actual, expected);
      },

      /**
       * Returns true when the actual input ends with the given string.
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      endswith: function (actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil.ignoreDiacritics(actual);
          expected = DataUtil.ignoreDiacritics(expected);
        }

        if (ignoreCase) {
          return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));
        }

        return actual && expected && DataUtil.endsWith(actual, expected);
      },

      /**
       * It will return the filter operator based on the filter symbol.
       * @param  {string} operator
       * @hidden
       */
      processSymbols: function (operator) {
        var fnName = DataUtil.operatorSymbols[operator];

        if (fnName) {
          var fn = DataUtil.fnOperators[fnName];
          return fn;
        }

        return DataUtil.throwError('Query - Process Operator : Invalid operator');
      },

      /**
       * It will return the valid filter operator based on the specified operators.
       * @param  {string} operator
       * @hidden
       */
      processOperator: function (operator) {
        var fn = DataUtil.fnOperators[operator];

        if (fn) {
          return fn;
        }

        return DataUtil.fnOperators.processSymbols(operator);
      }
    };
    /**
     * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.
     */

    DataUtil.parse = {
      /**
       * Parse the given string to the plain JavaScript object.
       * @param  {string|Object|Object[]} jsonText
       */
      parseJson: function (jsonText) {
        if (typeof jsonText === 'string') {
          jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);
        } else if (jsonText instanceof Array) {
          DataUtil.parse.iterateAndReviveArray(jsonText);
        } else if (typeof jsonText === 'object' && jsonText !== null) {
          DataUtil.parse.iterateAndReviveJson(jsonText);
        }

        return jsonText;
      },

      /**
       * It will perform on array of values.
       * @param  {string[]|Object[]} array
       * @hidden
       */
      iterateAndReviveArray: function (array) {
        for (var i = 0; i < array.length; i++) {
          if (typeof array[i] === 'object' && array[i] !== null) {
            DataUtil.parse.iterateAndReviveJson(array[i]);
          } else if (typeof array[i] === 'string' && !/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i])) {
            array[i] = DataUtil.parse.jsonReviver('', array[i]);
          } else {
            array[i] = DataUtil.parse.parseJson(array[i]);
          }
        }
      },

      /**
       * It will perform on JSON values
       * @param  {JSON} json
       * @hidden
       */
      iterateAndReviveJson: function (json) {
        var value;
        var keys = Object.keys(json);

        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var prop = keys_2[_i];

          if (DataUtil.startsWith(prop, '__')) {
            continue;
          }

          value = json[prop];

          if (typeof value === 'object') {
            if (value instanceof Array) {
              DataUtil.parse.iterateAndReviveArray(value);
            } else if (value) {
              DataUtil.parse.iterateAndReviveJson(value);
            }
          } else {
            json[prop] = DataUtil.parse.jsonReviver(json[prop], value);
          }
        }
      },

      /**
       * It will perform on JSON values
       * @param  {string} field
       * @param  {string|Date} value
       * @hidden
       */
      jsonReviver: function (field, value) {
        if (typeof value === 'string') {
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
          var offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;

          if (ms) {
            return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;
            var arr = value.split(/[^0-9.]/);

            if (isUTC) {
              value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);
            } else {
              var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));
              var hrs = parseInt(arr[6], 10);
              var mins = parseInt(arr[7], 10);

              if (isNaN(hrs) && isNaN(mins)) {
                return utcFormat;
              }

              if (value.indexOf('+') > -1) {
                utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
              } else {
                utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
              }

              value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);
            }

            if (DataUtil.serverTimezoneOffset == null) {
              value = DataUtil.dateParse.addSelfOffset(value);
            }
          }
        }

        return value;
      },

      /**
       * Check wheather the given value is JSON or not.
       * @param  {Object[]} jsonData
       */
      isJson: function (jsonData) {
        if (typeof jsonData[0] === 'string') {
          return jsonData;
        }

        return DataUtil.parse.parseJson(jsonData);
      },

      /**
       * Checks wheather the given value is GUID or not.
       * @param  {string} value
       */
      isGuid: function (value) {
        var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
        var match = regex.exec(value);
        return match != null;
      },

      /**
       * The method used to replace the value based on the type.
       * @param  {Object} value
       * @param  {boolean} stringify
       * @hidden
       */
      replacer: function (value, stringify) {
        if (DataUtil.isPlainObject(value)) {
          return DataUtil.parse.jsonReplacer(value, stringify);
        }

        if (value instanceof Array) {
          return DataUtil.parse.arrayReplacer(value);
        }

        if (value instanceof Date) {
          return DataUtil.parse.jsonReplacer({
            val: value
          }, stringify).val;
        }

        return value;
      },

      /**
       * It will replace the JSON value.
       * @param  {string} key
       * @param  {Object} val
       * @hidden
       */
      jsonReplacer: function (val, stringify) {
        var value;
        var keys = Object.keys(val);

        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
          var prop = keys_3[_i];
          value = val[prop];

          if (!(value instanceof Date)) {
            continue;
          }

          var d = value;

          if (DataUtil.serverTimezoneOffset == null) {
            val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();
          } else {
            d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);
            val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();
          }
        }

        return val;
      },

      /**
       * It will replace the Array of value.
       * @param  {string} key
       * @param  {Object[]} val
       * @hidden
       */
      arrayReplacer: function (val) {
        for (var i = 0; i < val.length; i++) {
          if (DataUtil.isPlainObject(val[i])) {
            val[i] = DataUtil.parse.jsonReplacer(val[i]);
          } else if (val[i] instanceof Date) {
            val[i] = DataUtil.parse.jsonReplacer({
              date: val[i]
            }).date;
          }
        }

        return val;
      },

      /**
       * It will replace the Date object with respective to UTC format value.
       * @param  {string} key
       * @param  {any} value
       * @hidden
       */

      /* tslint:disable-next-line:no-any */
      jsonDateReplacer: function (key, value) {
        if (key === 'value' && value) {
          if (typeof value === 'string') {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);

            if (ms) {
              value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var arr = value.split(/[^0-9]/);
              value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
            }
          }

          if (value instanceof Date) {
            value = DataUtil.dateParse.addSelfOffset(value);

            if (DataUtil.serverTimezoneOffset === null) {
              return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();
            } else {
              value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);
              return value.toJSON();
            }
          }
        }

        return value;
      }
    };
    /**
     * @hidden
     */

    DataUtil.dateParse = {
      addSelfOffset: function (input) {
        return new Date(+input - input.getTimezoneOffset() * 60000);
      },
      toUTC: function (input) {
        return new Date(+input + input.getTimezoneOffset() * 60000);
      },
      toTimeZone: function (input, offset, utc) {
        if (offset === null) {
          return input;
        }

        var unix = utc ? DataUtil.dateParse.toUTC(input) : input;
        return new Date(+unix - offset * 3600000);
      },
      toLocalTime: function (input) {
        var datefn = input;
        var timeZone = -datefn.getTimezoneOffset();
        var differenceString = timeZone >= 0 ? '+' : '-';

        var localtimefn = function (num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? '0' : '') + norm;
        };

        var val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);
        return val;
      }
    };
    return DataUtil;
  }();

  _exports.DataUtil = DataUtil;
});;
define('@syncfusion/ej2-dropdowns/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete',["exports", "@syncfusion/ej2-base", "../drop-down-list/drop-down-list", "../combo-box/combo-box", "../common/highlight-search", "../common/incremental-search", "../drop-down-base/drop-down-base", "@syncfusion/ej2-inputs", "@syncfusion/ej2-data"], function (_exports, _ej2Base, _dropDownList, _comboBox, _highlightSearch, _incrementalSearch, _dropDownBase, _ej2Inputs, _ej2Data) {
  "use strict";

  _exports.__esModule = true;
  _exports.AutoComplete = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../combo-box/combo-box-model.d.ts'/>


  /* tslint:enable */
  _dropDownList.dropDownListClasses.root = 'e-autocomplete';
  _dropDownList.dropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';
  /**
   * The AutoComplete component provides the matched suggestion list when type into the input,
   * from which the user can select one.
   * ```html
   * <input id="list" type="text"/>
   * ```
   * ```typescript
   *   let atcObj:AutoComplete = new AutoComplete();
   *   atcObj.appendTo("#list");
   * ```
   */

  var AutoComplete =
  /** @class */
  function (_super) {
    __extends(AutoComplete, _super);
    /**
     * * Constructor for creating the widget
     */


    function AutoComplete(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isFiltered = false;
      return _this;
    }

    ;
    /**
     * Initialize the event handler
     * @private
     */

    AutoComplete.prototype.preRender = function () {
      _super.prototype.preRender.call(this);
    };

    AutoComplete.prototype.getLocaleName = function () {
      return 'auto-complete';
    };

    ;

    AutoComplete.prototype.getNgDirective = function () {
      return 'EJS-AUTOCOMPLETE';
    };

    AutoComplete.prototype.getQuery = function (query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _ej2Data.Query();
      var filterType = this.queryString === '' && !(0, _ej2Base.isNullOrUndefined)(this.value) ? 'equal' : this.filterType;
      var queryString = this.queryString === '' && !(0, _ej2Base.isNullOrUndefined)(this.value) ? this.value : this.queryString;

      if (this.isFiltered) {
        return filterQuery;
      }

      if (this.queryString !== null) {
        var dataType = this.typeOfData(this.dataSource).typeof;

        if (!(this.dataSource instanceof _ej2Data.DataManager) && dataType === 'string' || dataType === 'number') {
          filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !(0, _ej2Base.isNullOrUndefined)(this.fields.value) ? this.fields.value : '';
          filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.suggestionCount)) {
        filterQuery.take(this.suggestionCount);
      }

      return filterQuery;
    };

    AutoComplete.prototype.searchLists = function (e) {
      var _this = this;

      this.isTyped = true;
      this.isDataFetched = this.isSelectCustom = false;

      if ((0, _ej2Base.isNullOrUndefined)(this.list)) {
        _super.prototype.renderList.call(this, true);
      }

      this.queryString = this.filterInput.value;

      if (e.keyCode === 40 || e.keyCode === 38) {
        this.queryString = this.queryString === '' ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields);
        return;
      }

      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function (dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }

          _this.isFiltered = true;

          _this.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger('filtering', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel && !_this.isFiltered && !eventArgs.preventDefaultAction) {
          _this.filterAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
     * @param  {Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */


    AutoComplete.prototype.filter = function (dataSource, query, fields) {
      this.isFiltered = true;
      this.filterAction(dataSource, query, fields);
    };

    AutoComplete.prototype.filterAction = function (dataSource, query, fields) {
      this.beforePopupOpen = true;

      if (this.queryString !== '' && this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query);
      } else {
        this.hidePopup();
      }
    };

    AutoComplete.prototype.clearAll = function (e, property) {
      if ((0, _ej2Base.isNullOrUndefined)(property) || !(0, _ej2Base.isNullOrUndefined)(property) && (0, _ej2Base.isNullOrUndefined)(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }

      if (this.beforePopupOpen) {
        this.hidePopup();
      }
    };

    AutoComplete.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {
      this.fixedHeaderElement = null;

      _super.prototype.onActionComplete.call(this, ulElement, list, e);

      var item = this.list.querySelector('.' + _dropDownList.dropDownListClasses.li);

      if (!(0, _ej2Base.isNullOrUndefined)(item)) {
        (0, _ej2Base.removeClass)([item], _dropDownList.dropDownListClasses.focus);
      }

      this.postBackAction();
    };

    AutoComplete.prototype.postBackAction = function () {
      if (this.autofill && !(0, _ej2Base.isNullOrUndefined)(this.liCollections[0])) {
        var items = [this.liCollections[0]];
        var searchItem = (0, _incrementalSearch.Search)(this.inputElement.value, items, 'StartsWith', this.ignoreCase);

        if (!(0, _ej2Base.isNullOrUndefined)(searchItem.item)) {
          _super.prototype.setAutoFill.call(this, this.liCollections[0], true);
        }
      }
    };

    AutoComplete.prototype.setSelection = function (li, e) {
      if (!this.isValidLI(li)) {
        return;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(e) && e.type === 'keydown' && e.action !== 'enter' && this.isValidLI(li)) {
        var value = this.getFormattedValue(li.getAttribute('data-value'));
        this.activeIndex = this.getIndexByValue(value);
        this.setHoverList(li);
        this.selectedLI = li;
        this.setScrollPosition(e);

        if (this.autofill) {
          this.preventAutoFill = false;

          _super.prototype.setAutoFill.call(this, li);
        }

        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
        });
      } else {
        _super.prototype.setSelection.call(this, li, e);
      }
    };

    AutoComplete.prototype.listOption = function (dataSource, fieldsSettings) {
      var _this = this;

      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);

      if ((0, _ej2Base.isNullOrUndefined)(fields.itemCreated)) {
        fields.itemCreated = function (e) {
          if (_this.highlight) {
            (0, _highlightSearch.highlightSearch)(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;

        fields.itemCreated = function (e) {
          if (_this.highlight) {
            (0, _highlightSearch.highlightSearch)(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }

          itemCreated_1.apply(_this, [e]);
        };
      }

      return fields;
    };

    ;

    AutoComplete.prototype.isFiltering = function () {
      return true;
    };

    AutoComplete.prototype.renderPopup = function () {
      this.list.scrollTop = 0;

      _super.prototype.renderPopup.call(this);
    };

    AutoComplete.prototype.isEditTextBox = function () {
      return true && this.inputElement.value.trim() !== '';
    };

    AutoComplete.prototype.isPopupButton = function () {
      return this.showPopupButton;
    };

    AutoComplete.prototype.isSelectFocusItem = function (element) {
      return false;
    };
    /**
     * Search the entered text and show it in the suggestion list if available.
     * @returns void.
     */


    AutoComplete.prototype.showPopup = function () {
      if (!this.enabled) {
        return;
      }

      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }

      this.beforePopupOpen = true;
      this.preventAutoFill = true;

      if ((0, _ej2Base.isNullOrUndefined)(this.list)) {
        this.renderList();
      } else {
        this.resetList(this.dataSource, this.fields);
      }
    };
    /**
     * Hides the popup if it is in open state.
     * @returns void.
     */


    AutoComplete.prototype.hidePopup = function () {
      this.DropDownBaseresetBlazorTemplates(true, false, false, false);

      _super.prototype.hidePopup.call(this);

      this.activeIndex = -1;
    };
    /**
     * Dynamically change the value of properties.
     * @private
     */


    AutoComplete.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (this.getModuleName() === 'autocomplete') {
        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
      }

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'showPopupButton':
            if (this.showPopupButton) {
              var button = _ej2Inputs.Input.appendSpan(_dropDownList.dropDownListClasses.icon, this.inputWrapper.container, this.createElement);

              this.inputWrapper.buttons[0] = button;

              _ej2Base.EventHandler.add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);
            } else {
              (0, _ej2Base.detach)(this.inputWrapper.buttons[0]);
              this.inputWrapper.buttons[0] = null;
            }

            break;

          default:
            var atcProps = void 0;
            atcProps = this.getPropObject(prop, newProp, oldProp);

            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);

            break;
        }
      }
    };
    /**
     * Return the module name of this component.
     * @private
     */


    AutoComplete.prototype.getModuleName = function () {
      return 'autocomplete';
    };
    /**
     * To initialize the control rendering
     * @private
     */


    AutoComplete.prototype.render = function () {
      _super.prototype.render.call(this);
    };

    ;

    __decorate([(0, _ej2Base.Complex)({
      value: null,
      iconCss: null,
      groupBy: null
    }, _dropDownBase.FieldSettings)], AutoComplete.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(true)], AutoComplete.prototype, "ignoreCase", void 0);

    __decorate([(0, _ej2Base.Property)(false)], AutoComplete.prototype, "showPopupButton", void 0);

    __decorate([(0, _ej2Base.Property)(false)], AutoComplete.prototype, "highlight", void 0);

    __decorate([(0, _ej2Base.Property)(20)], AutoComplete.prototype, "suggestionCount", void 0);

    __decorate([(0, _ej2Base.Property)({})], AutoComplete.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AutoComplete.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)(1)], AutoComplete.prototype, "minLength", void 0);

    __decorate([(0, _ej2Base.Property)('Contains')], AutoComplete.prototype, "filterType", void 0);

    __decorate([(0, _ej2Base.Event)()], AutoComplete.prototype, "filtering", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AutoComplete.prototype, "index", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], AutoComplete.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AutoComplete.prototype, "valueTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AutoComplete.prototype, "filterBarPlaceholder", void 0);

    __decorate([(0, _ej2Base.Property)(false)], AutoComplete.prototype, "allowFiltering", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AutoComplete.prototype, "text", void 0);

    AutoComplete = __decorate([_ej2Base.NotifyPropertyChanges], AutoComplete);
    return AutoComplete;
  }(_comboBox.ComboBox);

  _exports.AutoComplete = AutoComplete;
});;
define('@syncfusion/ej2-dropdowns/src/auto-complete/index',["exports", "./auto-complete"], function (_exports, _autoComplete) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_autoComplete).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _autoComplete[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/combo-box/combo-box',["exports", "@syncfusion/ej2-base", "../drop-down-list/drop-down-list", "../drop-down-base/drop-down-base", "../common/incremental-search", "@syncfusion/ej2-popups", "@syncfusion/ej2-inputs"], function (_exports, _ej2Base, _dropDownList, _dropDownBase, _incrementalSearch, _ej2Popups, _ej2Inputs) {
  "use strict";

  _exports.__esModule = true;
  _exports.ComboBox = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>


  /* tslint:enable */
  var SPINNER_CLASS = 'e-atc-spinner-icon';
  _dropDownList.dropDownListClasses.root = 'e-combobox';
  var inputObject = {
    container: null,
    buttons: []
  };
  /**
   * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.
   * ```html
   * <select id="list">
   *      <option value='1'>Badminton</option>
   *      <option value='2'>Basketball</option>
   *      <option value='3'>Cricket</option>
   *      <option value='4'>Football</option>
   *      <option value='5'>Tennis</option>
   * </select>
   * ```
   * ```typescript
   *   let games:ComboBox = new ComboBox();
   *   games.appendTo("#list");
   * ```
   */

  var ComboBox =
  /** @class */
  function (_super) {
    __extends(ComboBox, _super);
    /**
     * *Constructor for creating the component
     */


    function ComboBox(options, element) {
      return _super.call(this, options, element) || this;
    }

    ;
    /**
     * Initialize the event handler
     * @private
     */

    ComboBox.prototype.preRender = function () {
      _super.prototype.preRender.call(this);
    };

    ComboBox.prototype.getLocaleName = function () {
      return 'combo-box';
    };

    ;

    ComboBox.prototype.wireEvent = function () {
      if (this.getModuleName() === 'combobox') {
        _ej2Base.EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);

        _ej2Base.EventHandler.add(this.inputWrapper.container, 'blur', this.onBlur, this);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.inputWrapper.buttons[0])) {
        _ej2Base.EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);
      }

      _ej2Base.EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);

      if (!this.readonly) {
        _ej2Base.EventHandler.add(this.inputElement, 'input', this.onInput, this);

        _ej2Base.EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);

        _ej2Base.EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);
      }

      this.bindCommonEvent();
    };

    ComboBox.prototype.preventBlur = function (e) {
      if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(_dropDownList.dropDownListClasses.input) && _ej2Base.Browser.isDevice || !_ej2Base.Browser.isDevice) {
        e.preventDefault();
      }
    };

    ComboBox.prototype.onBlur = function (e) {
      var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;

      if (!(0, _ej2Base.isNullOrUndefined)(this.listData) && !(0, _ej2Base.isNullOrUndefined)(inputValue) && inputValue !== this.text) {
        this.customValue();
      }

      _super.prototype.onBlur.call(this, e);
    };

    ComboBox.prototype.targetElement = function () {
      return this.inputElement;
    };

    ComboBox.prototype.setOldText = function (text) {
      _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

      this.customValue();
      this.removeSelection();
    };

    ComboBox.prototype.setOldValue = function (value) {
      if (this.allowCustom) {
        this.valueMuteChange(this.value);
      } else {
        this.valueMuteChange(null);
      }

      this.removeSelection();
      this.setHiddenValue();
    };

    ComboBox.prototype.valueMuteChange = function (value) {
      var inputValue = (0, _ej2Base.isNullOrUndefined)(value) ? null : value.toString();

      _ej2Inputs.Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);

      this.setProperties({
        value: value,
        text: value,
        index: null
      }, true);
      this.activeIndex = this.index;
      var fields = this.fields;
      var dataItem = {};
      dataItem[fields.text] = (0, _ej2Base.isNullOrUndefined)(value) ? null : value.toString();
      dataItem[fields.value] = (0, _ej2Base.isNullOrUndefined)(value) ? null : value.toString();
      this.itemData = dataItem;
      this.item = null;

      if (this.previousValue !== this.value) {
        this.detachChangeEvent(null);
      }
    };

    ComboBox.prototype.updateValues = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        var li = this.getElementByValue(this.value);

        if (li) {
          this.setSelection(li, null);
        } else if (this.allowCustom) {
          this.valueMuteChange(this.value);
        } else {
          this.valueMuteChange(null);
        }
      } else if (this.text && (0, _ej2Base.isNullOrUndefined)(this.value)) {
        var li = this.getElementByText(this.text);

        if (li) {
          this.setSelection(li, null);
        } else {
          _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

          this.customValue();
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }

      this.setHiddenValue();

      _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };

    ComboBox.prototype.updateIconState = function () {
      if (this.showClearButton) {
        if (this.inputElement.value !== '' && !this.readonly) {
          (0, _ej2Base.removeClass)([this.inputWrapper.clearButton], _dropDownList.dropDownListClasses.clearIconHide);
        } else {
          (0, _ej2Base.addClass)([this.inputWrapper.clearButton], _dropDownList.dropDownListClasses.clearIconHide);
        }
      }
    };

    ComboBox.prototype.getAriaAttributes = function () {
      var ariaAttributes = {
        'aria-owns': this.element.id + '_options',
        'role': 'combobox',
        'aria-autocomplete': 'both',
        'aria-labelledby': this.hiddenElement.id,
        'aria-hasPopup': 'true',
        'aria-expanded': 'false',
        'aria-readonly': this.readonly.toString(),
        'autocomplete': 'off',
        'autocorrect': 'off',
        'autocapitalize': 'off',
        'spellcheck': 'false'
      };
      return ariaAttributes;
    };

    ComboBox.prototype.searchLists = function (e) {
      this.isTyped = true;

      if (this.isFiltering()) {
        _super.prototype.searchLists.call(this, e);

        if (this.filterInput.value.trim() === '') {
          this.setHoverList(this.ulElement.querySelector('.' + _dropDownList.dropDownListClasses.li));
        }
      } else {
        if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {
          this.setHoverList(this.ulElement.querySelector('.' + _dropDownList.dropDownListClasses.li));
        }

        this.incrementalSearch(e);
      }
    };

    ComboBox.prototype.getNgDirective = function () {
      return 'EJS-COMBOBOX';
    };

    ComboBox.prototype.setSearchBox = function () {
      this.filterInput = this.inputElement;
      return this.isFiltering() ? this.inputWrapper : inputObject;
    };

    ComboBox.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);

      if (this.isSelectCustom) {
        this.removeSelection();
      }

      if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {
        this.inlineSearch();
      }
    };

    ComboBox.prototype.getFocusElement = function () {
      var dataItem = this.isSelectCustom ? {
        text: ''
      } : this.getItemData();
      var selected = this.list.querySelector('.' + _dropDownList.dropDownListClasses.selected);
      var isSelected = dataItem.text === this.inputElement.value && !(0, _ej2Base.isNullOrUndefined)(selected);

      if (isSelected) {
        return selected;
      }

      if ((_ej2Base.Browser.isDevice && !this.isDropDownClick || !_ej2Base.Browser.isDevice) && !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && this.liCollections.length > 0) {
        var inputValue = this.inputElement.value;
        var activeItem = (0, _incrementalSearch.Search)(inputValue, this.liCollections, 'StartsWith', true);
        var activeElement = activeItem.item;

        if (!(0, _ej2Base.isNullOrUndefined)(activeElement)) {
          var count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;
          var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);

          if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {
            this.removeFocus();
            var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
            this.list.scrollTop = count * height + fixedHead;
            (0, _ej2Base.addClass)([activeElement], _dropDownList.dropDownListClasses.focus);
          }
        } else {
          if (this.isSelectCustom && this.inputElement.value.trim() !== '') {
            this.removeFocus();
            this.list.scrollTop = 0;
          }
        }

        return activeElement;
      } else {
        return null;
      }
    };

    ComboBox.prototype.setValue = function (e) {
      if (e && e.type === 'keydown' && e.action === 'enter') {
        this.removeFillSelection();
      }

      if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {
        this.preventAutoFill = false;
        this.inlineSearch(e);
        return false;
      } else {
        return _super.prototype.setValue.call(this, e);
      }
    };

    ComboBox.prototype.checkCustomValue = function () {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();

      if (!(this.allowCustom && (0, _ej2Base.isNullOrUndefined)(dataItem.value) && (0, _ej2Base.isNullOrUndefined)(dataItem.text))) {
        this.setProperties({
          'value': dataItem.value,
          'text': dataItem.text
        });
      }
    };
    /**
     * Shows the spinner loader.
     * @returns void.
     */


    ComboBox.prototype.showSpinner = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        this.spinnerElement = this.getModuleName() === 'autocomplete' ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || _ej2Inputs.Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
        (0, _ej2Base.addClass)([this.spinnerElement], _dropDownList.dropDownListClasses.disableIcon);
        (0, _ej2Popups.createSpinner)({
          target: this.spinnerElement,
          width: _ej2Base.Browser.isDevice ? '16px' : '14px'
        }, this.createElement);
        (0, _ej2Popups.showSpinner)(this.spinnerElement);
      }
    };
    /**
     * Hides the spinner loader.
     * @returns void.
     */


    ComboBox.prototype.hideSpinner = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        (0, _ej2Popups.hideSpinner)(this.spinnerElement);
        (0, _ej2Base.removeClass)([this.spinnerElement], _dropDownList.dropDownListClasses.disableIcon);

        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          (0, _ej2Base.detach)(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = '';
        }

        this.spinnerElement = null;
      }
    };

    ComboBox.prototype.setAutoFill = function (activeElement, isHover) {
      if (!isHover) {
        this.setHoverList(activeElement);
      }

      if (this.autofill && !this.preventAutoFill) {
        var currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();
        var currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));

        if (this.getModuleName() === 'combobox') {
          if (!this.isSelected && this.previousValue !== currentFillValue) {
            this.updateSelectedItem(activeElement, null);
            this.isSelected = true;
            this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));
          } else {
            this.updateSelectedItem(activeElement, null, true);
          }
        }

        if (!this.isAndroidAutoFill(currentValue)) {
          this.setAutoFillSelection(currentValue);
        }
      }
    };

    ComboBox.prototype.isAndroidAutoFill = function (value) {
      if (_ej2Base.Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;

        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    ComboBox.prototype.clearAll = function (e, property) {
      if ((0, _ej2Base.isNullOrUndefined)(property) || !(0, _ej2Base.isNullOrUndefined)(property) && (0, _ej2Base.isNullOrUndefined)(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
    };

    ComboBox.prototype.isSelectFocusItem = function (element) {
      return !(0, _ej2Base.isNullOrUndefined)(element);
    };

    ComboBox.prototype.inlineSearch = function (e) {
      var isKeyNavigate = e && (e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown');
      var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();

      if (!(0, _ej2Base.isNullOrUndefined)(activeElement)) {
        if (!isKeyNavigate) {
          var value = this.getFormattedValue(activeElement.getAttribute('data-value'));
          this.activeIndex = this.getIndexByValue(value);
          this.activeIndex = !(0, _ej2Base.isNullOrUndefined)(this.activeIndex) ? this.activeIndex : null;
        }

        this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;
        this.setAutoFill(activeElement, isKeyNavigate);
      } else if (this.inputElement.value === '') {
        this.activeIndex = null;
        this.list.scrollTop = 0;
        var focusItem = this.list.querySelector('.' + _dropDownList.dropDownListClasses.li);
        this.setHoverList(focusItem);
      } else {
        this.activeIndex = null;
        this.removeSelection();

        if (this.liCollections && this.liCollections.length < 0) {
          this.removeFocus();
        }
      }
    };

    ComboBox.prototype.incrementalSearch = function (e) {
      this.showPopup();

      if (!(0, _ej2Base.isNullOrUndefined)(this.listData)) {
        this.inlineSearch(e);
        e.preventDefault();
      }
    };

    ;

    ComboBox.prototype.setAutoFillSelection = function (currentValue) {
      var selection = this.getSelectionPoints();
      var value = this.inputElement.value.substr(0, selection.start);

      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);

        _ej2Inputs.Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);

        this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
      } else {
        _ej2Inputs.Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);

        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
      }
    };

    ;

    ComboBox.prototype.getValueByText = function (text) {
      return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);
    };

    ComboBox.prototype.unWireEvent = function () {
      if (this.getModuleName() === 'combobox') {
        _ej2Base.EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);

        _ej2Base.EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlur);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.inputWrapper.buttons[0])) {
        _ej2Base.EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);
      }

      _ej2Base.EventHandler.remove(this.inputElement, 'focus', this.targetFocus);

      if (!this.readonly) {
        _ej2Base.EventHandler.remove(this.inputElement, 'input', this.onInput);

        _ej2Base.EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);

        _ej2Base.EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);
      }

      this.unBindCommonEvent();
    };

    ComboBox.prototype.setSelection = function (li, e) {
      _super.prototype.setSelection.call(this, li, e);

      if (!(0, _ej2Base.isNullOrUndefined)(li) && !this.autofill && !this.isDropDownClick) {
        this.removeFocus();
      }
    };

    ComboBox.prototype.selectCurrentItem = function (e) {
      var li;

      if (this.isPopupOpen) {
        li = this.list.querySelector('.' + _dropDownList.dropDownListClasses.focus);

        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }

        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
      }

      if (e.action === 'enter' && this.inputElement.value.trim() === '') {
        this.clearAll(e);
      } else if (this.isTyped && !this.isSelected && (0, _ej2Base.isNullOrUndefined)(li)) {
        this.customValue(e);
      }

      this.hidePopup();
    };

    ComboBox.prototype.setHoverList = function (li) {
      this.removeSelection();

      if (this.isValidLI(li) && !li.classList.contains(_dropDownList.dropDownListClasses.selected)) {
        this.removeFocus();
        li.classList.add(_dropDownList.dropDownListClasses.focus);
      }
    };

    ;

    ComboBox.prototype.targetFocus = function (e) {
      if (_ej2Base.Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = false;
      }

      this.onFocus();
    };

    ComboBox.prototype.dropDownClick = function (e) {
      e.preventDefault();

      if (_ej2Base.Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = true;
      }

      _super.prototype.dropDownClick.call(this, e);
    };

    ComboBox.prototype.customValue = function (e) {
      var _this = this;

      var value = this.getValueByText(this.inputElement.value);

      if (!this.allowCustom && this.inputElement.value !== '') {
        var previousValue = this.previousValue;
        var currentValue = this.value;
        this.setProperties({
          value: value
        });

        if ((0, _ej2Base.isNullOrUndefined)(this.value)) {
          _ej2Inputs.Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);
        }

        if (this.autofill && previousValue === this.value && currentValue !== this.value) {
          this.onChangeEvent(null);
        }
      } else if (this.inputElement.value.trim() !== '') {
        var previousValue_1 = this.value;

        if ((0, _ej2Base.isNullOrUndefined)(value)) {
          var value_1 = this.inputElement.value === '' ? null : this.inputElement.value;
          var eventArgs = void 0;
          eventArgs = {
            text: value_1,
            item: {}
          };

          if (!this.initial) {
            this.trigger('customValueSpecifier', eventArgs, function (eventArgs) {
              _this.updateCustomValueCallback(value_1, eventArgs, previousValue_1, e);
            });
          } else {
            this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);
          }
        } else {
          this.isSelectCustom = false;
          this.setProperties({
            value: value
          });

          if (previousValue_1 !== this.value) {
            this.onChangeEvent(e);
          }
        }
      } else if (this.allowCustom) {
        this.isSelectCustom = true;
      }
    };

    ComboBox.prototype.updateCustomValueCallback = function (value, eventArgs, previousValue, e) {
      var fields = this.fields;
      var item = eventArgs.item;
      var dataItem = {};

      if (item && (0, _ej2Base.getValue)(fields.text, item) && (0, _ej2Base.getValue)(fields.value, item)) {
        dataItem = item;
      } else {
        (0, _ej2Base.setValue)(fields.text, value, dataItem);
        (0, _ej2Base.setValue)(fields.value, value, dataItem);
      }

      this.itemData = dataItem;
      var changeData = {
        text: (0, _ej2Base.getValue)(fields.text, this.itemData),
        value: (0, _ej2Base.getValue)(fields.value, this.itemData),
        index: null
      };
      this.setProperties(changeData, true);
      this.setSelection(null, null);
      this.isSelectCustom = true;

      if (previousValue !== this.value) {
        this.onChangeEvent(e);
      }
    };
    /**
     * Dynamically change the value of properties.
     * @private
     */


    ComboBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (this.getModuleName() === 'combobox') {
        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
      }

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'readonly':
            _ej2Inputs.Input.setReadonly(this.readonly, this.inputElement);

            if (this.readonly) {
              _ej2Base.EventHandler.remove(this.inputElement, 'input', this.onInput);

              _ej2Base.EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);

              _ej2Base.EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);
            } else {
              _ej2Base.EventHandler.add(this.inputElement, 'input', this.onInput, this);

              _ej2Base.EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);

              _ej2Base.EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);
            }

            break;

          case 'allowFiltering':
            this.setSearchBox();

            if (this.isFiltering() && this.getModuleName() === 'combobox' && (0, _ej2Base.isNullOrUndefined)(this.list)) {
              _super.prototype.renderList.call(this);
            }

            break;

          case 'allowCustom':
            break;

          default:
            var comboProps = void 0;
            comboProps = this.getPropObject(prop, newProp, oldProp);

            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);

            break;
        }
      }
    };
    /**
     * To initialize the control rendering.
     * @private
     */


    ComboBox.prototype.render = function () {
      _super.prototype.render.call(this);

      this.setSearchBox();

      if (this.isFiltering() && this.getModuleName() === 'combobox' && (0, _ej2Base.isNullOrUndefined)(this.list)) {
        _super.prototype.renderList.call(this);
      }

      this.renderComplete();
    };

    ;
    /**
     * Return the module name of this component.
     * @private
     */

    ComboBox.prototype.getModuleName = function () {
      return 'combobox';
    };
    /**
     * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     */


    ComboBox.prototype.addItem = function (items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
     * @param  {Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */


    ComboBox.prototype.filter = function (dataSource, query, fields) {
      _super.prototype.filter.call(this, dataSource, query, fields);
    };
    /**
     * Hides the popup if it is in open state.
     * @returns void.
     */


    ComboBox.prototype.hidePopup = function (e) {
      var inputValue = this.inputElement.value === '' ? null : this.inputElement.value;

      if (!(0, _ej2Base.isNullOrUndefined)(this.listData)) {
        var isEscape = this.isEscapeKey;

        if (this.isEscapeKey) {
          _ej2Inputs.Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);

          this.isEscapeKey = false;
        }

        if (this.autofill) {
          this.removeFillSelection();
        }

        var dataItem = this.isSelectCustom ? {
          text: ''
        } : this.getItemData();
        var selected = this.list.querySelector('.' + _dropDownList.dropDownListClasses.selected);

        if (dataItem.text === this.inputElement.value && !(0, _ej2Base.isNullOrUndefined)(selected)) {
          if (this.isSelected) {
            this.onChangeEvent(null);
            this.isSelectCustom = false;
          }

          _super.prototype.hidePopup.call(this);

          return;
        }

        if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {
          var searchItem = (0, _incrementalSearch.Search)(this.inputElement.value, this.liCollections, 'Equal', true);
          this.selectedLI = searchItem.item;

          if ((0, _ej2Base.isNullOrUndefined)(searchItem.index)) {
            searchItem.index = (0, _incrementalSearch.Search)(this.inputElement.value, this.liCollections, 'StartsWith', true).index;
          }

          this.activeIndex = searchItem.index;

          if (!(0, _ej2Base.isNullOrUndefined)(this.selectedLI)) {
            this.updateSelectedItem(this.selectedLI, null, true);
          } else if (isEscape) {
            this.isSelectCustom = true;
            this.removeSelection();
          }
        }

        if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
          this.customValue(e);
        }
      }

      if ((0, _ej2Base.isNullOrUndefined)(this.listData) && this.allowCustom && !(0, _ej2Base.isNullOrUndefined)(inputValue) && inputValue !== this.value) {
        this.customValue();
      }

      _super.prototype.hidePopup.call(this);
    };
    /**
     * Sets the focus to the component for interaction.
     * @returns void.
     */


    ComboBox.prototype.focusIn = function () {
      if (!this.enabled) {
        return;
      }

      if (_ej2Base.Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = true;
      }

      _super.prototype.focusIn.call(this);
    };

    __decorate([(0, _ej2Base.Property)(false)], ComboBox.prototype, "autofill", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ComboBox.prototype, "allowCustom", void 0);

    __decorate([(0, _ej2Base.Property)({})], ComboBox.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ComboBox.prototype, "allowFiltering", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "index", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ComboBox.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Event)()], ComboBox.prototype, "customValueSpecifier", void 0);

    __decorate([(0, _ej2Base.Event)()], ComboBox.prototype, "filtering", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "valueTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], ComboBox.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "filterBarPlaceholder", void 0);

    __decorate([(0, _ej2Base.Complex)({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null
    }, _dropDownBase.FieldSettings)], ComboBox.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ComboBox.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "itemTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ComboBox.prototype, "groupTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('No Records Found')], ComboBox.prototype, "noRecordsTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('The Request Failed')], ComboBox.prototype, "actionFailureTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('None')], ComboBox.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ComboBox.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)([])], ComboBox.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)('StartsWith')], ComboBox.prototype, "filterType", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ComboBox.prototype, "ignoreCase", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], ComboBox.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ComboBox.prototype, "ignoreAccent", void 0);

    __decorate([(0, _ej2Base.Property)()], ComboBox.prototype, "locale", void 0);

    ComboBox = __decorate([_ej2Base.NotifyPropertyChanges], ComboBox);
    return ComboBox;
  }(_dropDownList.DropDownList);

  _exports.ComboBox = ComboBox;
});;
define('@syncfusion/ej2-dropdowns/src/combo-box/index',["exports", "./combo-box"], function (_exports, _comboBox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_comboBox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _comboBox[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/common/highlight-search',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.highlightSearch = highlightSearch;
  _exports.revertHighlightSearch = revertHighlightSearch;

  /**
   * Function helps to find which highlightSearch is to call based on your data.
   * @param  {HTMLElement} element - Specifies an li element.
   * @param  {string} query - Specifies the string to be highlighted.
   * @param  {boolean} ignoreCase - Specifies the ignoreCase option.
   * @param  {HightLightType} type - Specifies the type of highlight.
   */
  function highlightSearch(element, query, ignoreCase, type) {
    if (query === '') {
      return;
    } else {
      var ignoreRegex = ignoreCase ? 'gim' : 'gm';
      query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
      var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';
      findTextNode(element, new RegExp(replaceQuery, ignoreRegex));
    }
  }

  function findTextNode(element, pattern) {
    for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
      if (element.childNodes[index].nodeType === 3) {
        element.innerHTML = element.innerHTML.replace(pattern, '<span class="e-highlight">$1</span>');
        break;
      } else {
        findTextNode(element.childNodes[index], pattern);
      }
    }
  }
  /**
   * Function helps to remove highlighted element based on your data.
   * @param  {HTMLElement} content - Specifies an content element.
   */


  function revertHighlightSearch(content) {
    var contentElement = content.querySelectorAll('.e-highlight');

    for (var i = contentElement.length - 1; i >= 0; i--) {
      var parent_1 = contentElement[i].parentNode;
      var text = document.createTextNode(contentElement[i].textContent);
      parent_1.replaceChild(text, contentElement[i]);
    }
  }
});;
define('@syncfusion/ej2-dropdowns/src/common/incremental-search',["exports"], function (_exports) {
  "use strict";

  _exports.__esModule = true;
  _exports.incrementalSearch = incrementalSearch;
  _exports.Search = Search;

  /**
   * IncrementalSearch module file
   */
  var queryString = '';
  var prevString = '';
  var matches = [];
  var activeClass = 'e-active';
  /**
   * Search and focus the list item based on key code matches with list text content
   * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.
   * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.
   * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen
   * after selected item otherwise it will do from initial.
   * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.
   */

  function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, isBlazor) {
    queryString += String.fromCharCode(keyCode);
    setTimeout(function () {
      queryString = '';
    }, 1000);
    var index;
    queryString = ignoreCase ? queryString.toLowerCase() : queryString;

    if (prevString === queryString) {
      for (var i = 0; i < matches.length; i++) {
        if (matches[i].classList.contains(activeClass)) {
          index = i;
          break;
        }
      }

      index = index + 1;
      return matches[index];
    } else {
      var listItems = items;
      var strLength = queryString.length;
      var text = void 0;
      var item = void 0;
      selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
      var i = selectedIndex;
      matches = [];

      do {
        if (i === listItems.length) {
          i = -1;
        }

        i === -1 ? index = 0 : index = i;
        item = listItems[index];

        if (isBlazor) {
          text = ignoreCase ? item.textContent.trim().toLowerCase() : item.textContent.trim();
        } else {
          text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
        }

        if (text.substr(0, strLength) === queryString) {
          matches.push(listItems[index]);
        }

        i++;
      } while (i !== selectedIndex);

      prevString = queryString;
      return matches[0];
    }
  }

  function Search(inputVal, items, searchType, ignoreCase) {
    var listItems = items;
    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;
    var itemData = {
      item: null,
      index: null
    };

    if (inputVal && inputVal.length) {
      var strLength = inputVal.length;
      var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;

      for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
        var item = itemsData[i];
        var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, '');

        if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) {
          itemData.item = item;
          itemData.index = i;
          return {
            item: item,
            index: i
          };
        }
      }

      return itemData;
    }

    return itemData;
  }
});;
define('@syncfusion/ej2-dropdowns/src/common/index',["exports", "./incremental-search", "./highlight-search"], function (_exports, _incrementalSearch, _highlightSearch) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_incrementalSearch).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _incrementalSearch[key];
  });
  Object.keys(_highlightSearch).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _highlightSearch[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-lists"], function (_exports, _ej2Base, _ej2Data, _ej2Lists) {
  "use strict";

  _exports.__esModule = true;
  _exports.DropDownBase = _exports.dropDownBaseClasses = _exports.FieldSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var FieldSettings =
  /** @class */
  function (_super) {
    __extends(FieldSettings, _super);

    function FieldSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)()], FieldSettings.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)()], FieldSettings.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)()], FieldSettings.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)()], FieldSettings.prototype, "groupBy", void 0);

    __decorate([(0, _ej2Base.Property)()], FieldSettings.prototype, "htmlAttributes", void 0);

    return FieldSettings;
  }(_ej2Base.ChildProperty);

  _exports.FieldSettings = FieldSettings;
  var dropDownBaseClasses = {
    root: 'e-dropdownbase',
    rtl: 'e-rtl',
    content: 'e-content',
    selected: 'e-active',
    hover: 'e-hover',
    noData: 'e-nodata',
    fixedHead: 'e-fixed-head',
    focus: 'e-item-focus',
    li: _ej2Lists.cssClass.li,
    group: _ej2Lists.cssClass.group,
    disabled: _ej2Lists.cssClass.disabled,
    grouping: 'e-dd-group'
  };
  _exports.dropDownBaseClasses = dropDownBaseClasses;
  var ITEMTEMPLATE_PROPERTY = 'ItemTemplate';
  var VALUETEMPLATE_PROPERTY = 'ValueTemplate';
  var GROUPTEMPLATE_PROPERTY = 'GroupTemplate';
  var HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';
  var FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';
  var NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';
  var ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';
  /**
   * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components
   */

  var DropDownBase =
  /** @class */
  function (_super) {
    __extends(DropDownBase, _super);
    /**
     * * Constructor for DropDownBase class
     */


    function DropDownBase(options, element) {
      return _super.call(this, options, element) || this;
    }

    ;

    DropDownBase.prototype.getPropObject = function (prop, newProp, oldProp) {
      var newProperty = new Object();
      var oldProperty = new Object(); // tslint:disable-next-line:no-function-constructor-with-string-args

      var propName = function (prop) {
        return prop;
      };

      newProperty[propName(prop)] = newProp[propName(prop)];
      oldProperty[propName(prop)] = oldProp[propName(prop)];
      var data = new Object();
      data.newProperty = newProperty;
      data.oldProperty = oldProperty;
      return data;
    };

    DropDownBase.prototype.getValueByText = function (text, ignoreCase, ignoreAccent) {
      var value = null;

      if (!(0, _ej2Base.isNullOrUndefined)(this.listData)) {
        if (ignoreCase) {
          value = this.checkValueCase(text, true, ignoreAccent);
        } else {
          value = this.checkValueCase(text, false, ignoreAccent);
        }
      }

      return value;
    };

    ;

    DropDownBase.prototype.checkValueCase = function (text, ignoreCase, ignoreAccent, isTextByValue) {
      var _this = this;

      var value = null;

      if (isTextByValue) {
        value = text;
      }

      var dataSource = this.listData;
      var fields = this.fields;
      var type = this.typeOfData(dataSource).typeof;

      if (type === 'string' || type === 'number' || type === 'boolean') {
        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
          var item = dataSource_1[_i];

          if (!(0, _ej2Base.isNullOrUndefined)(item)) {
            if (ignoreAccent) {
              value = this.checkingAccent(String(item), text, ignoreCase);
            } else {
              if (ignoreCase) {
                if (this.checkIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase);
                }
              } else {
                if (this.checkNonIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                }
              }
            }
          }
        }
      } else {
        if (ignoreCase) {
          dataSource.filter(function (item) {
            var itemValue = (0, _ej2Base.getValue)(fields.value, item);

            if (!(0, _ej2Base.isNullOrUndefined)(itemValue) && _this.checkIgnoreCase((0, _ej2Base.getValue)(fields.text, item).toString(), text)) {
              value = (0, _ej2Base.getValue)(fields.value, item);
            }
          });
        } else {
          if (isTextByValue) {
            dataSource.filter(function (item) {
              var itemValue = (0, _ej2Base.getValue)(fields.value, item);

              if (!(0, _ej2Base.isNullOrUndefined)(itemValue) && !(0, _ej2Base.isNullOrUndefined)(value) && itemValue.toString() === value.toString()) {
                value = (0, _ej2Base.getValue)(fields.text, item);
              }
            });
          } else {
            dataSource.filter(function (item) {
              if (_this.checkNonIgnoreCase((0, _ej2Base.getValue)(fields.text, item), text)) {
                value = (0, _ej2Base.getValue)(fields.value, item);
              }
            });
          }
        }
      }

      return value;
    };

    DropDownBase.prototype.checkingAccent = function (item, text, ignoreCase) {
      var dataItem = _ej2Data.DataUtil.ignoreDiacritics(String(item));

      var textItem = _ej2Data.DataUtil.ignoreDiacritics(text.toString());

      var value = null;

      if (ignoreCase) {
        if (this.checkIgnoreCase(dataItem, textItem)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      } else {
        if (this.checkNonIgnoreCase(String(item), text)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      }

      return value;
    };

    DropDownBase.prototype.checkIgnoreCase = function (item, text) {
      return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
    };

    DropDownBase.prototype.checkNonIgnoreCase = function (item, text) {
      return String(item) === text.toString() ? true : false;
    };

    DropDownBase.prototype.getItemValue = function (dataItem, typedText, ignoreCase, isTextByValue) {
      var value = null;
      var dataSource = this.listData;
      var type = this.typeOfData(dataSource).typeof;

      if (isTextByValue) {
        value = dataItem.toString();
      } else {
        if (ignoreCase) {
          value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));
        } else {
          value = type === 'string' ? typedText : this.getFormattedValue(typedText);
        }
      }

      return value;
    };

    DropDownBase.prototype.l10nUpdate = function (actionFailure) {
      var ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;

      if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {
        this.DropDownBaseresetBlazorTemplates(false, false, true, true);
        var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
        var compiledString = void 0;
        var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        ele.innerHTML = '';
        compiledString = (0, _ej2Base.compile)(template);

        for (var _i = 0, _a = compiledString({}, null, null, templateId, this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          ele.appendChild(item);
        }

        this.DropDownBaseupdateBlazorTemplates(false, false, !actionFailure, actionFailure, false, false, false, false);
      } else {
        var l10nLocale = {
          noRecordsTemplate: 'No Records Found',
          actionFailureTemplate: 'The Request Failed'
        };
        var componentLocale = new _ej2Base.L10n(this.getLocaleName(), {}, this.locale);

        if (componentLocale.getConstant('actionFailureTemplate') !== '') {
          this.l10n = componentLocale;
        } else {
          this.l10n = new _ej2Base.L10n(this.getModuleName() === 'listbox' ? 'listbox' : 'dropdowns', l10nLocale, this.locale);
        }

        ele.innerHTML = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');
      }
    };

    DropDownBase.prototype.getLocaleName = function () {
      return 'drop-down-base';
    };

    ;

    DropDownBase.prototype.getTextByValue = function (value) {
      var text;
      text = this.checkValueCase(value, false, false, true);
      return text;
    };

    DropDownBase.prototype.getFormattedValue = function (value) {
      if (this.listData && this.listData.length) {
        var item = this.typeOfData(this.listData);

        if ((0, _ej2Base.isBlazor)() && (0, _ej2Base.isNullOrUndefined)(value) || value === 'null') {
          return null;
        }

        if (typeof (0, _ej2Base.getValue)(this.fields.value ? this.fields.value : 'value', item.item) === 'number' || item.typeof === 'number') {
          return parseFloat(value);
        }

        if (typeof (0, _ej2Base.getValue)(this.fields.value ? this.fields.value : 'value', item.item) === 'boolean' || item.typeof === 'boolean') {
          return value === 'true';
        }
      }

      return value;
    };
    /**
     * Sets RTL to dropdownbase wrapper
     */


    DropDownBase.prototype.setEnableRtl = function () {
      if (this.list) {
        this.enableRtlElements.push(this.list);
      }

      this.enableRtl ? (0, _ej2Base.addClass)(this.enableRtlElements, dropDownBaseClasses.rtl) : (0, _ej2Base.removeClass)(this.enableRtlElements, dropDownBaseClasses.rtl);
    };

    ;
    /**
     * Initialize the Component.
     */

    DropDownBase.prototype.initialize = function () {
      this.bindEvent = true;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;

      if (this.element.tagName === 'UL') {
        var jsonElement = _ej2Lists.ListBase.createJsonFromElement(this.element);

        this.setProperties({
          fields: {
            text: 'text',
            value: 'text'
          }
        }, true);
        this.resetList(jsonElement, this.fields);
      } else if (this.element.tagName === 'SELECT') {
        var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !(0, _ej2Base.isNullOrUndefined)(this.dataSource) ? true : false;

        if (!dataSource) {
          this.renderItemsBySelect();
        }
      } else {
        this.setListData(this.dataSource, this.fields, this.query);
      }
    };

    ;

    DropDownBase.prototype.DropDownBaseupdateBlazorTemplates = function (item, group, noRecord, action, value, header, footer, isEmpty) {
      if (!this.isStringTemplate) {
        if (this.itemTemplate && item) {
          (0, _ej2Base.updateBlazorTemplate)(this.itemTemplateId, ITEMTEMPLATE_PROPERTY, this, isEmpty);
        }

        if (this.groupTemplate && group) {
          (0, _ej2Base.updateBlazorTemplate)(this.groupTemplateId, GROUPTEMPLATE_PROPERTY, this, isEmpty);
        }

        if (this.noRecordsTemplate && noRecord) {
          (0, _ej2Base.updateBlazorTemplate)(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY, this, isEmpty);
        }

        if (this.actionFailureTemplate && action) {
          (0, _ej2Base.updateBlazorTemplate)(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY, this, isEmpty);
        }

        if (value) {
          (0, _ej2Base.updateBlazorTemplate)(this.valueTemplateId, VALUETEMPLATE_PROPERTY, this, isEmpty);
        }

        if (header) {
          (0, _ej2Base.updateBlazorTemplate)(this.headerTemplateId, HEADERTEMPLATE_PROPERTY, this);
        }

        if (footer) {
          (0, _ej2Base.updateBlazorTemplate)(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY, this);
        }
      }
    };

    DropDownBase.prototype.DropDownBaseresetBlazorTemplates = function (item, group, noRecord, action, value, header, footer) {
      if (!this.isStringTemplate) {
        if (this.itemTemplate && item) {
          (0, _ej2Base.resetBlazorTemplate)(this.itemTemplateId, ITEMTEMPLATE_PROPERTY);
        }

        if (this.groupTemplate && group) {
          (0, _ej2Base.resetBlazorTemplate)(this.groupTemplateId, GROUPTEMPLATE_PROPERTY);
        }

        if (this.noRecordsTemplate && noRecord) {
          (0, _ej2Base.resetBlazorTemplate)(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY);
        }

        if (this.actionFailureTemplate && action) {
          (0, _ej2Base.resetBlazorTemplate)(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY);
        }

        if (value) {
          (0, _ej2Base.resetBlazorTemplate)(this.valueTemplateId, VALUETEMPLATE_PROPERTY);
        }

        if (header) {
          (0, _ej2Base.resetBlazorTemplate)(this.headerTemplateId, HEADERTEMPLATE_PROPERTY);
        }

        if (footer) {
          (0, _ej2Base.resetBlazorTemplate)(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY);
        }
      }
    };
    /**
     * Get the properties to be maintained in persisted state.
     */


    DropDownBase.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };

    ;
    /**
     * Sets the enabled state to DropDownBase.
     */

    DropDownBase.prototype.setEnabled = function () {
      this.element.setAttribute('aria-disabled', this.enabled ? 'false' : 'true');
    };

    ;
    /**
     * Sets the enabled state to DropDownBase.
     */

    DropDownBase.prototype.updateDataAttribute = function (value) {
      var invalidAttr = ['class', 'style', 'id', 'type'];
      var attr = {};

      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }

      (0, _ej2Base.extend)(attr, value, attr);
      this.setProperties({
        htmlAttributes: attr
      }, true);
    };

    DropDownBase.prototype.renderItemsBySelect = function () {
      var element = this.element;
      var fields = {
        value: 'value',
        text: 'text'
      };
      var jsonElement = [];
      var group = element.querySelectorAll('select>optgroup');
      var option = element.querySelectorAll('select>option');
      this.getJSONfromOption(jsonElement, option, fields);

      if (group.length) {
        for (var i = 0; i < group.length; i++) {
          var item = group[i];
          var optionGroup = {};
          optionGroup[fields.text] = item.label;
          optionGroup.isHeader = true;
          var child = item.querySelectorAll('option');
          jsonElement.push(optionGroup);
          this.getJSONfromOption(jsonElement, child, fields);
        }

        var items = element.querySelectorAll('select>option');
      }

      this.fields.text = fields.text;
      this.fields.value = fields.value;
      this.resetList(jsonElement, fields);
    };

    DropDownBase.prototype.getJSONfromOption = function (items, options, fields) {
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        var json = {};
        json[fields.text] = option.innerText;
        json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;
        items.push(json);
      }
    };
    /**
     * Execute before render the list items
     * @private
     */


    DropDownBase.prototype.preRender = function () {
      // there is no event handler
      this.scrollTimer = -1;
      this.enableRtlElements = [];
      this.isRequested = false;
      this.isDataFetched = false;
      this.itemTemplateId = "" + this.element.id + ITEMTEMPLATE_PROPERTY;
      this.valueTemplateId = "" + this.element.id + VALUETEMPLATE_PROPERTY;
      this.groupTemplateId = "" + this.element.id + GROUPTEMPLATE_PROPERTY;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE_PROPERTY;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE_PROPERTY;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE_PROPERTY;
    };
    /**
     * Creates the list items of DropDownBase component.
     */


    DropDownBase.prototype.setListData = function (dataSource, fields, query) {
      var _this = this;

      fields = fields ? fields : this.fields;
      var ulElement;
      this.isActive = true;
      var eventArgs = {
        cancel: false,
        data: dataSource,
        query: query
      };
      this.trigger('actionBegin', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel) {
          _this.showSpinner();

          if (dataSource instanceof _ej2Data.DataManager) {
            _this.isRequested = true;

            if (_this.isDataFetched) {
              _this.emptyDataRequest(fields);

              return;
            }

            eventArgs.data.executeQuery(_this.getQuery(eventArgs.query)).then(function (e) {
              _this.trigger('actionComplete', e, function (e) {
                if (!e.cancel) {
                  var listItems = e.result;

                  if (listItems.length === 0) {
                    _this.isDataFetched = true;
                  }

                  ulElement = _this.renderItems(listItems, fields);

                  _this.onActionComplete(ulElement, listItems, e);

                  if (_this.groupTemplate) {
                    _this.renderGroupTemplate(ulElement);
                  }

                  _this.isRequested = false;

                  _this.bindChildItems(listItems, ulElement, fields, e);
                }
              });
            }).catch(function (e) {
              _this.isRequested = false;

              _this.onActionFailure(e);

              _this.hideSpinner();
            });
          } else {
            var dataManager = new _ej2Data.DataManager(eventArgs.data);

            var listItems = _this.getQuery(eventArgs.query).executeLocal(dataManager);

            var localDataArgs = {
              cancel: false,
              result: listItems
            };

            _this.trigger('actionComplete', localDataArgs, function (localDataArgs) {
              if (!localDataArgs.cancel) {
                ulElement = _this.renderItems(localDataArgs.result, fields);

                _this.onActionComplete(ulElement, localDataArgs.result);

                if (_this.groupTemplate) {
                  _this.renderGroupTemplate(ulElement);
                }

                _this.bindChildItems(localDataArgs.result, ulElement, fields);
              }
            });
          }
        }
      });
    };

    DropDownBase.prototype.bindChildItems = function (listItems, ulElement, fields, e) {
      var _this = this;

      if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {
        setTimeout(function () {
          var childNode = _this.remainingItems(_this.sortedData, fields);

          (0, _ej2Base.append)(childNode, ulElement);

          _this.DropDownBaseupdateBlazorTemplates(true, false, false, false);

          _this.liCollections = _this.list.querySelectorAll('.' + dropDownBaseClasses.li);

          _this.updateListValues();

          _this.raiseDataBound(listItems, e);
        }, 0);
      } else {
        this.raiseDataBound(listItems, e);
      }
    };

    DropDownBase.prototype.updateListValues = function () {// Used this method in component side.
    };

    DropDownBase.prototype.findListElement = function (list, findNode, attribute, value) {
      var liElement = null;
      var listArr = [].slice.call(list.querySelectorAll(findNode));

      for (var index = 0; index < listArr.length; index++) {
        if (listArr[index].getAttribute(attribute) === value + '') {
          liElement = listArr[index];
          break;
        }
      }

      return liElement;
    };

    DropDownBase.prototype.raiseDataBound = function (listItems, e) {
      this.hideSpinner();
      var dataBoundEventArgs = {
        items: listItems,
        e: e
      };
      this.trigger('dataBound', dataBoundEventArgs);
    };

    DropDownBase.prototype.remainingItems = function (dataSource, fields) {
      var spliceData = new _ej2Data.DataManager(dataSource).executeLocal(new _ej2Data.Query().skip(100));

      if (this.itemTemplate) {
        var listElements = this.templateListItem(spliceData, fields);
        return [].slice.call(listElements.childNodes);
      }

      var type = this.typeOfData(spliceData).typeof;

      if (type === 'string' || type === 'number' || type === 'boolean') {
        return _ej2Lists.ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields));
      }

      return _ej2Lists.ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true);
    };

    DropDownBase.prototype.emptyDataRequest = function (fields) {
      var listItems = [];
      this.onActionComplete(this.renderItems(listItems, fields), listItems);
      this.isRequested = false;
      this.hideSpinner();
    };

    DropDownBase.prototype.showSpinner = function () {// Used this method in component side.
    };

    DropDownBase.prototype.hideSpinner = function () {// Used this method in component side.
    };

    DropDownBase.prototype.onActionFailure = function (e) {
      this.liCollections = [];
      this.trigger('actionFailure', e);
      this.l10nUpdate(true);
      (0, _ej2Base.addClass)([this.list], dropDownBaseClasses.noData);
    };

    DropDownBase.prototype.onActionComplete = function (ulElement, list, e) {
      this.listData = list;
      this.list.innerHTML = '';
      this.fixedHeaderElement = (0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
      this.list.appendChild(ulElement);
      this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector('ul');
      this.postRender(this.list, list, this.bindEvent);
    };

    DropDownBase.prototype.postRender = function (listElement, list, bindEvent) {
      var focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);
      var selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);

      if (focusItem && !selectedItem) {
        focusItem.classList.add(dropDownBaseClasses.focus);
      }

      if (list.length <= 0) {
        this.l10nUpdate();
        (0, _ej2Base.addClass)([listElement], dropDownBaseClasses.noData);
      } else {
        listElement.classList.remove(dropDownBaseClasses.noData);
      }
    };
    /**
     * Get the query to do the data operation before list item generation.
     */


    DropDownBase.prototype.getQuery = function (query) {
      return query ? query : this.query ? this.query : new _ej2Data.Query();
    };
    /**
     * To render the template content for group header element.
     */


    DropDownBase.prototype.renderGroupTemplate = function (listEle) {
      if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {
        var dataSource = this.dataSource;
        var option = {
          groupTemplateID: this.groupTemplateId,
          isStringTemplate: this.isStringTemplate
        };
        var headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);

        var tempHeaders = _ej2Lists.ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option);

        this.DropDownBaseupdateBlazorTemplates(false, true, false, false, false, false, false, false);
      }
    };
    /**
     * To create the ul li list items
     */


    DropDownBase.prototype.createListItems = function (dataSource, fields) {
      if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {
        if (fields.groupBy) {
          if (this.sortOrder !== 'None') {
            dataSource = this.getSortedDataSource(dataSource);
          }

          dataSource = _ej2Lists.ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        }

        (0, _ej2Base.addClass)([this.list], dropDownBaseClasses.grouping);
      } else {
        dataSource = this.getSortedDataSource(dataSource);
      }

      var options = this.listOption(dataSource, fields);
      var spliceData = dataSource.length > 100 ? new _ej2Data.DataManager(dataSource).executeLocal(new _ej2Data.Query().take(100)) : dataSource;
      this.sortedData = dataSource;
      return _ej2Lists.ListBase.createList(this.createElement, this.getModuleName() === 'autocomplete' ? spliceData : dataSource, options, true);
    };

    ;

    DropDownBase.prototype.listOption = function (dataSource, fields) {
      var iconCss = (0, _ej2Base.isNullOrUndefined)(fields.iconCss) ? false : true;
      var fieldValues = !(0, _ej2Base.isNullOrUndefined)(fields.properties) ? fields.properties : fields;
      var options = fields.text !== null || fields.value !== null ? {
        fields: fieldValues,
        showIcon: iconCss,
        ariaAttributes: {
          groupItemRole: 'presentation'
        }
      } : {
        fields: {
          value: 'text'
        }
      };
      return (0, _ej2Base.extend)({}, options, fields, true);
    };

    ;

    DropDownBase.prototype.setFloatingHeader = function (e) {
      if ((0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement)) {
        this.fixedHeaderElement = this.createElement('div', {
          className: dropDownBaseClasses.fixedHead
        });

        if (!this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {
          this.fixedHeaderElement.style.display = 'none';
        }

        (0, _ej2Base.prepend)([this.fixedHeaderElement], this.list);
        this.setFixedHeader();
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {
        this.setFixedHeader();
      }

      this.scrollStop(e);
    };

    DropDownBase.prototype.scrollStop = function (e) {
      var target = e.target;
      var liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);
      var topIndex = Math.round(target.scrollTop / liHeight);
      var liCollections = this.list.querySelectorAll('li');

      for (var i = topIndex; i > -1; i--) {
        if (!(0, _ej2Base.isNullOrUndefined)(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {
          var currentLi = liCollections[i];
          this.fixedHeaderElement.innerHTML = currentLi.innerHTML;
          this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';
          this.fixedHeaderElement.style.display = 'block';
          break;
        } else {
          this.fixedHeaderElement.style.display = 'none';
          this.fixedHeaderElement.style.top = 'none';
        }
      }
    };
    /**
     * To render the list items
     */


    DropDownBase.prototype.renderItems = function (listData, fields) {
      var ulElement;

      if (this.itemTemplate && listData) {
        var dataSource = listData;

        if (dataSource && fields.groupBy) {
          if (this.sortOrder !== 'None') {
            dataSource = this.getSortedDataSource(dataSource);
          }

          dataSource = _ej2Lists.ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }

        this.sortedData = dataSource;
        var spliceData = dataSource.length > 100 ? new _ej2Data.DataManager(dataSource).executeLocal(new _ej2Data.Query().take(100)) : dataSource;
        ulElement = this.templateListItem(this.getModuleName() === 'autocomplete' ? spliceData : dataSource, fields);
        var isTempEmpty = this.getModuleName() === 'listbox' ? true : false;
        this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, isTempEmpty);
      } else {
        ulElement = this.createListItems(listData, fields);
      }

      return ulElement;
    };

    ;

    DropDownBase.prototype.templateListItem = function (dataSource, fields) {
      this.DropDownBaseresetBlazorTemplates(true, false, false, false);
      var option = this.listOption(dataSource, fields);
      option.templateID = this.itemTemplateId;
      option.isStringTemplate = this.isStringTemplate;
      return _ej2Lists.ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);
    };

    DropDownBase.prototype.typeOfData = function (items) {
      var item = {
        typeof: null,
        item: null
      };

      for (var i = 0; !(0, _ej2Base.isNullOrUndefined)(items) && i < items.length; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(items[i])) {
          var listDataType = typeof items[i] === 'string' || typeof items[i] === 'number' || typeof items[i] === 'boolean';
          var isNullData = listDataType ? (0, _ej2Base.isNullOrUndefined)(items[i]) : (0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(this.fields.value ? this.fields.value : 'value', items[i]));

          if (!isNullData) {
            return item = {
              typeof: typeof items[i],
              item: items[i]
            };
          }
        }
      }

      return item;
    };

    DropDownBase.prototype.setFixedHeader = function () {
      this.list.parentElement.style.display = 'block';
      var borderWidth = 0;

      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);
      }

      var liWidth = this.liCollections[0].offsetWidth - borderWidth;
      this.fixedHeaderElement.style.width = liWidth.toString() + 'px';
      (0, _ej2Base.setStyleAttribute)(this.fixedHeaderElement, {
        zIndex: 10
      });
      var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);
      this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
    };

    DropDownBase.prototype.getSortedDataSource = function (dataSource) {
      if (dataSource && this.sortOrder !== 'None') {
        var textField = this.fields.text ? this.fields.text : 'text';
        dataSource = _ej2Lists.ListBase.getDataSource(dataSource, _ej2Lists.ListBase.addSorting(this.sortOrder, textField));
      }

      return dataSource;
    };
    /**
     * Return the index of item which matched with given value in data source
     */


    DropDownBase.prototype.getIndexByValue = function (value) {
      var index;
      var listItems = this.getItems();

      for (var i = 0; i < listItems.length; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(value) && listItems[i].getAttribute('data-value') === value.toString()) {
          index = i;
          break;
        }
      }

      return index;
    };

    ;
    /**
     * To dispatch the event manually
     */

    DropDownBase.prototype.dispatchEvent = function (element, type) {
      var evt = document.createEvent('HTMLEvents');
      evt.initEvent(type, false, true);
      element.dispatchEvent(evt);
    };
    /**
     * To set the current fields
     */


    DropDownBase.prototype.setFields = function () {
      if (this.fields.value && !this.fields.text) {
        this.fields.text = this.fields.value;
      } else if (!this.fields.value && this.fields.text) {
        this.fields.value = this.fields.text;
      } else if (!this.fields.value && !this.fields.text) {
        this.fields.value = this.fields.text = 'text';
      }
    };
    /**
     * reset the items list.
     */


    DropDownBase.prototype.resetList = function (dataSource, fields, query) {
      if (this.list) {
        if (this.element.tagName === 'SELECT' && this.element.options.length > 0 || this.element.tagName === 'UL' && this.element.childNodes.length > 0) {
          var data = dataSource instanceof Array ? dataSource.length > 0 : !(0, _ej2Base.isNullOrUndefined)(dataSource);

          if (!data && this.selectData && this.selectData.length > 0) {
            dataSource = this.selectData;
          }
        }

        this.setListData(dataSource, fields, query);
      }
    };

    DropDownBase.prototype.updateSelectElementData = function (isFiltering) {
      if (isFiltering && (0, _ej2Base.isNullOrUndefined)(this.selectData) && this.listData && this.listData.length > 0) {
        this.selectData = this.listData;
      }
    };

    DropDownBase.prototype.updateSelection = function () {// This is for after added the item, need to update the selected index values.
    };

    DropDownBase.prototype.renderList = function () {
      // This is for render the list items.
      this.render();
    };

    DropDownBase.prototype.updateDataSource = function (props) {
      this.resetList(this.dataSource);
    };

    DropDownBase.prototype.setUpdateInitial = function (props, newProp) {
      this.isDataFetched = false;
      var updateData = {};

      for (var j = 0; props.length > j; j++) {
        if (newProp[props[j]] && props[j] === 'fields') {
          this.setFields();
        } else if (newProp[props[j]]) {
          updateData[props[j]] = newProp[props[j]];
        }
      }

      if (Object.keys(updateData).length > 0) {
        if (Object.keys(updateData).indexOf('dataSource') === -1) {
          updateData.dataSource = this.dataSource;
        }

        this.updateDataSource(updateData);
      }
    };
    /**
     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.
     * @private
     */


    DropDownBase.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (this.getModuleName() === 'dropdownbase') {
        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
      }

      this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'query':
          case 'sortOrder':
          case 'dataSource':
          case 'itemTemplate':
            break;

          case 'enableRtl':
            this.setEnableRtl();
            break;

          case 'enabled':
            this.setEnabled();
            break;

          case 'groupTemplate':
            this.renderGroupTemplate(this.list);

            if (this.ulElement && this.fixedHeaderElement) {
              var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);
              this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
            }

            break;

          case 'locale':
            if (this.list && !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && this.liCollections.length === 0) {
              this.l10nUpdate();
            }

            break;

          case 'zIndex':
            this.setProperties({
              zIndex: newProp.zIndex
            }, true);
            this.setZIndex();
            break;
        }
      }
    };

    ;
    /**
     * Build and render the component
     * @private
     */

    DropDownBase.prototype.render = function (isEmptyData) {
      this.list = this.createElement('div', {
        className: dropDownBaseClasses.content,
        attrs: {
          'tabindex': '0'
        }
      });
      this.list.classList.add(dropDownBaseClasses.root);
      this.setFields();
      var rippleModel = {
        duration: 300,
        selector: '.' + dropDownBaseClasses.li
      };
      this.rippleFun = (0, _ej2Base.rippleEffect)(this.list, rippleModel);
      var group = this.element.querySelector('select>optgroup');

      if ((this.fields.groupBy || !(0, _ej2Base.isNullOrUndefined)(group)) && !this.isGroupChecking) {
        _ej2Base.EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);
      }

      if (this.getModuleName() === 'dropdownbase') {
        if (this.element.getAttribute('tabindex')) {
          this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));
        }

        (0, _ej2Base.removeClass)([this.element], dropDownBaseClasses.root);
        this.element.style.display = 'none';
        var wrapperElement = this.createElement('div');
        this.element.parentElement.insertBefore(wrapperElement, this.element);
        wrapperElement.appendChild(this.element);
        wrapperElement.appendChild(this.list);
      }

      this.setEnableRtl();
      this.setEnabled();

      if (!isEmptyData) {
        this.initialize();
      }
    };

    ;
    /**
     * Return the module name of this component.
     * @private
     */

    DropDownBase.prototype.getModuleName = function () {
      return 'dropdownbase';
    };

    ;
    /**
     * Gets all the list items bound on this component.
     * @returns Element[].
     */

    DropDownBase.prototype.getItems = function () {
      return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);
    };

    ;
    /**
     * Adds a new item to the popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     * @deprecated
     */

    DropDownBase.prototype.addItem = function (items, itemIndex) {
      if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox') {
        this.renderList();
      }

      this.DropDownBaseresetBlazorTemplates(true, false, false, false);
      var itemsCount = this.getItems().length;
      var selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);
      items = items instanceof Array ? items : [items];
      var index;
      index = (0, _ej2Base.isNullOrUndefined)(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
      var fields = this.fields;

      if (items && fields.groupBy) {
        items = _ej2Lists.ListBase.groupDataSource(items, fields.properties);
      }

      var liCollections = [];

      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var isHeader = item.isHeader;
        var li = this.createElement('li', {
          className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,
          id: 'option-add-' + i
        });
        var itemText = item instanceof Object ? (0, _ej2Base.getValue)(fields.text, item) : item;

        if (isHeader) {
          li.innerText = itemText;
        }

        if (this.itemTemplate && !isHeader) {
          var compiledString = (0, _ej2Base.compile)(this.itemTemplate);
          (0, _ej2Base.append)(compiledString(item, null, null, this.itemTemplateId, this.isStringTemplate), li);
          this.DropDownBaseupdateBlazorTemplates(true, false, false, false);
        } else if (!isHeader) {
          li.appendChild(document.createTextNode(itemText));
        }

        li.setAttribute('data-value', item instanceof Object ? (0, _ej2Base.getValue)(fields.value, item) : item);
        li.setAttribute('role', 'option');
        this.notify('addItem', {
          module: 'CheckBoxSelection',
          item: li
        });
        liCollections.push(li);
        this.listData.push(item);
        this.updateActionCompleteData(li, item); //Listbox event

        this.trigger('beforeItemRender', {
          element: li,
          item: item
        });
      }

      if (itemsCount === 0 && (0, _ej2Base.isNullOrUndefined)(this.list.querySelector('ul'))) {
        this.list.innerHTML = '';
        this.list.classList.remove(dropDownBaseClasses.noData);
        this.list.appendChild(this.ulElement);
        this.liCollections = liCollections;
        (0, _ej2Base.append)(liCollections, this.ulElement);
        this.updateAddItemList(this.list, itemsCount);
      } else {
        if (this.getModuleName() === 'listbox' && itemsCount === 0) {
          this.ulElement.innerHTML = '';
        }

        var attr = [];

        for (var i = 0; i < items.length; i++) {
          var listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');

          for (var j = 0; j < listGroupItem.length; j++) {
            attr[j] = listGroupItem[j].innerText;
          }

          if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {
            for (var j = 0; j < listGroupItem.length; j++) {
              if (attr[j] === liCollections[i].innerText) {
                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);
                i = i + 1;
                break;
              }
            }
          } else {
            if (this.liCollections[index]) {
              this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
            } else {
              this.ulElement.appendChild(liCollections[i]);
            }
          }

          var tempLi = [].slice.call(this.liCollections);
          tempLi.splice(index, 0, liCollections[i]);
          this.liCollections = tempLi;
          index += 1;

          if (this.getModuleName() === 'multiselect') {
            this.updateDataList();
          }
        }
      }

      if (selectedItemValue || itemIndex === 0) {
        this.updateSelection();
      }
    };

    DropDownBase.prototype.validationAttribute = function (target, hidden) {
      var name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');
      hidden.setAttribute('name', name);
      target.removeAttribute('name');
      var attributes = ['required', 'aria-required', 'form'];

      for (var i = 0; i < attributes.length; i++) {
        if (!target.getAttribute(attributes[i])) {
          continue;
        }

        var attr = target.getAttribute(attributes[i]);
        hidden.setAttribute(attributes[i], attr);
        target.removeAttribute(attributes[i]);
      }
    };

    DropDownBase.prototype.setZIndex = function () {// this is for component wise
    };

    DropDownBase.prototype.updateActionCompleteData = function (li, item) {// this is for ComboBox custom value
    };

    DropDownBase.prototype.updateAddItemList = function (list, itemCount) {// this is for multiselect add item
    };

    DropDownBase.prototype.updateDataList = function () {// this is for multiselect update list items
    };
    /**
     * Gets the data Object that matches the given value.
     * @param { string | number } value - Specifies the value of the list item.
     * @returns Object.
     * @blazorType object
     */


    DropDownBase.prototype.getDataByValue = function (value) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;

        if (type === 'string' || type === 'number' || type === 'boolean') {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];

            if (!(0, _ej2Base.isNullOrUndefined)(item) && item === value) {
              return item;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];

            if (!(0, _ej2Base.isNullOrUndefined)(item) && (0, _ej2Base.getValue)(this.fields.value ? this.fields.value : 'value', item) === value) {
              return item;
            }
          }
        }
      }

      return null;
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */


    DropDownBase.prototype.destroy = function () {
      if (document.body.contains(this.list)) {
        _ej2Base.EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);

        if (!(0, _ej2Base.isNullOrUndefined)(this.rippleFun)) {
          this.rippleFun();
        }

        (0, _ej2Base.detach)(this.list);
      }

      _super.prototype.destroy.call(this);
    };

    ;

    __decorate([(0, _ej2Base.Complex)({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null
    }, FieldSettings)], DropDownBase.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownBase.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownBase.prototype, "itemTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownBase.prototype, "groupTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('No Records Found')], DropDownBase.prototype, "noRecordsTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('The Request Failed')], DropDownBase.prototype, "actionFailureTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('None')], DropDownBase.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(true)], DropDownBase.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)([])], DropDownBase.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownBase.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)('StartsWith')], DropDownBase.prototype, "filterType", void 0);

    __decorate([(0, _ej2Base.Property)(true)], DropDownBase.prototype, "ignoreCase", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], DropDownBase.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownBase.prototype, "ignoreAccent", void 0);

    __decorate([(0, _ej2Base.Property)()], DropDownBase.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "actionBegin", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "actionComplete", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "actionFailure", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "dataBound", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownBase.prototype, "destroyed", void 0);

    DropDownBase = __decorate([_ej2Base.NotifyPropertyChanges], DropDownBase);
    return DropDownBase;
  }(_ej2Base.Component);

  _exports.DropDownBase = DropDownBase;
});;
define('@syncfusion/ej2-dropdowns/src/drop-down-base/index',["exports", "./drop-down-base"], function (_exports, _dropDownBase) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_dropDownBase).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _dropDownBase[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-popups", "@syncfusion/ej2-inputs", "../common/incremental-search", "../drop-down-base/drop-down-base", "@syncfusion/ej2-data"], function (_exports, _ej2Base, _ej2Popups, _ej2Inputs, _incrementalSearch, _dropDownBase, _ej2Data) {
  "use strict";

  _exports.__esModule = true;
  _exports.DropDownList = _exports.dropDownListClasses = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>


  // don't use space in classnames 
  var dropDownListClasses = {
    root: 'e-dropdownlist',
    hover: _dropDownBase.dropDownBaseClasses.hover,
    selected: _dropDownBase.dropDownBaseClasses.selected,
    rtl: _dropDownBase.dropDownBaseClasses.rtl,
    li: _dropDownBase.dropDownBaseClasses.li,
    disable: _dropDownBase.dropDownBaseClasses.disabled,
    base: _dropDownBase.dropDownBaseClasses.root,
    focus: _dropDownBase.dropDownBaseClasses.focus,
    input: 'e-input-group',
    inputFocus: 'e-input-focus',
    icon: 'e-input-group-icon e-ddl-icon',
    iconAnimation: 'e-icon-anim',
    value: 'e-input-value',
    device: 'e-ddl-device',
    backIcon: 'e-input-group-icon e-back-icon e-icons',
    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',
    filterInput: 'e-input-filter',
    filterParent: 'e-filter-parent',
    mobileFilter: 'e-ddl-device-filter',
    footer: 'e-ddl-footer',
    header: 'e-ddl-header',
    clearIcon: 'e-clear-icon',
    clearIconHide: 'e-clear-icon-hide',
    popupFullScreen: 'e-popup-full-page',
    disableIcon: 'e-ddl-disable-icon',
    hiddenElement: 'e-ddl-hidden'
  };
  _exports.dropDownListClasses = dropDownListClasses;
  var inputObject = {
    container: null,
    buttons: []
  };
  /**
   * The DropDownList component contains a list of predefined values from which you can
   * choose a single value.
   * ```html
   * <input type="text" tabindex="1" id="list"> </input>
   * ```
   * ```typescript
   *   let dropDownListObj:DropDownList = new DropDownList();
   *   dropDownListObj.appendTo("#list");
   * ```
   */

  var DropDownList =
  /** @class */
  function (_super) {
    __extends(DropDownList, _super);
    /**
     * * Constructor for creating the DropDownList component.
     */


    function DropDownList(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.previousValue = null;
      return _this;
    }

    ;
    /**
     * Initialize the event handler.
     * @private
     */

    DropDownList.prototype.preRender = function () {
      this.isServerBlazor = (0, _ej2Base.isBlazor)() && this.isServerRendered && this.getModuleName() === 'dropdownlist' ? true : false;

      if (this.isServerBlazor) {
        this.initializeData();
      } else {
        this.element.style.opacity = '0';
        this.initializeData();

        _super.prototype.preRender.call(this);
      }

      this.activeIndex = this.index;
      this.queryString = '';
    };

    DropDownList.prototype.initializeData = function () {
      this.isPopupOpen = false;
      this.isDocumentClick = false;
      this.isInteracted = false;
      this.isFilterFocus = false;
      this.beforePopupOpen = false;
      this.initial = true;
      this.initRemoteRender = false;
      this.isNotSearchList = false;
      this.isTyped = false;
      this.isSelected = false;
      this.preventFocus = false;
      this.preventAutoFill = false;
      this.isValidKey = false;
      this.typedString = '';
      this.isEscapeKey = false;
      this.isPreventBlur = false;
      this.isTabKey = false;
      this.actionCompleteData = {
        isUpdated: false
      };
      this.prevSelectPoints = {};
      this.isSelectCustom = false;
      this.isDropDownClick = false;
      this.preventAltUp = false;
      this.isCustomFilter = false;
      this.isSecondClick = false;
      this.keyConfigure = {
        tab: 'tab',
        enter: '13',
        escape: '27',
        end: '35',
        home: '36',
        down: '40',
        up: '38',
        pageUp: '33',
        pageDown: '34',
        open: 'alt+40',
        close: 'shift+tab',
        hide: 'alt+38',
        space: '32'
      };
    };

    DropDownList.prototype.setZIndex = function () {
      if (this.popupObj) {
        this.popupObj.setProperties({
          'zIndex': this.zIndex
        });
      }
    };

    DropDownList.prototype.renderList = function (isEmptyData) {
      if (!this.isServerBlazor) {
        _super.prototype.render.call(this, isEmptyData);

        this.wireListEvents();
      } else {
        // tslint:disable-next-line
        this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen);
      }
    };

    DropDownList.prototype.floatLabelChange = function () {
      if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {
        var floatElement = this.inputWrapper.container.querySelector('.e-float-text');

        if (this.inputElement.value !== '' || this.isInteracted) {
          (0, _ej2Base.classList)(floatElement, ['e-label-top'], ['e-label-bottom']);
        } else {
          (0, _ej2Base.classList)(floatElement, ['e-label-bottom'], ['e-label-top']);
        }
      }
    };

    DropDownList.prototype.resetHandler = function (e) {
      e.preventDefault();
      this.clearAll(e);
    };

    DropDownList.prototype.resetFocusElement = function () {
      this.removeHover();
      this.removeSelection();
      this.removeFocus();
      this.list.scrollTop = 0;

      if (this.getModuleName() !== 'autocomplete' && !(0, _ej2Base.isNullOrUndefined)(this.ulElement)) {
        var li = this.ulElement.querySelector('.' + dropDownListClasses.li);

        if (li) {
          li.classList.add(dropDownListClasses.focus);
        }
      }
    };

    DropDownList.prototype.clearAll = function (e, properties) {
      if ((0, _ej2Base.isNullOrUndefined)(properties) || !(0, _ej2Base.isNullOrUndefined)(properties) && ((0, _ej2Base.isNullOrUndefined)(properties.dataSource) || !(properties.dataSource instanceof _ej2Data.DataManager) && properties.dataSource.length === 0)) {
        this.isActive = true;
        this.resetSelection(properties);
      }

      var dataItem = this.getItemData();

      if (this.previousValue === dataItem.value) {
        return;
      }

      this.onChangeEvent(e);
    };

    DropDownList.prototype.resetSelection = function (properties) {
      if (this.list) {
        if (!(0, _ej2Base.isNullOrUndefined)(properties) && ((0, _ej2Base.isNullOrUndefined)(properties.dataSource) || !(properties.dataSource instanceof _ej2Data.DataManager) && properties.dataSource.length === 0)) {
          this.selectedLI = null;
          this.actionCompleteData.isUpdated = false;
          this.actionCompleteData.ulElement = null;
          this.actionCompleteData.list = null;
          this.resetList(properties.dataSource);
        } else {
          if (this.allowFiltering && this.getModuleName() !== 'autocomplete' && !(0, _ej2Base.isNullOrUndefined)(this.actionCompleteData.ulElement) && !(0, _ej2Base.isNullOrUndefined)(this.actionCompleteData.list)) {
            var actionList = this.actionCompleteData.ulElement.querySelector('li');
            var ulElement = this.ulElement && this.ulElement.querySelector('li');

            if (this.element.tagName === 'EJS-COMBOBOX' && actionList && ulElement && actionList.childElementCount > 0 && ulElement.childElementCount > 0 && actionList.textContent !== ulElement.textContent && this.itemTemplate) {
              this.cloneElements();
            }

            this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
          }

          this.resetFocusElement();
        }
      }

      this.hiddenElement.innerHTML = '';
      this.inputElement.value = '';
      this.value = null;
      this.itemData = null;
      this.text = null;
      this.index = null;
      this.activeIndex = null;
      this.item = null;
      this.queryString = '';

      if (this.valueTempElement) {
        (0, _ej2Base.detach)(this.valueTempElement);
        this.inputElement.style.display = 'block';
        this.valueTempElement = null;
      }

      this.setSelection(null, null);
      this.isSelectCustom = false;
      this.updateIconState();
      this.cloneElements();
    };

    DropDownList.prototype.setHTMLAttributes = function () {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];

          if (htmlAttr === 'class') {
            this.inputWrapper.container.classList.add(this.htmlAttributes[htmlAttr]);
          } else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {
            this.enabled = false;
            this.setEnable();
          } else if (htmlAttr === 'readonly' && !(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes[htmlAttr])) {
            this.readonly = true;
            this.dataBind();
          } else if (htmlAttr === 'style') {
            this.inputWrapper.container.setAttribute('style', this.htmlAttributes[htmlAttr]);
          } else {
            var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];
            var validateAttr = ['name', 'required'];

            if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              htmlAttr === 'placeholder' ? _ej2Inputs.Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) : this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
            } else {
              this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
            }
          }
        }
      }

      if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {
        this.inputWrapper.container.removeAttribute('tabindex');
      }
    };

    DropDownList.prototype.getAriaAttributes = function () {
      return {
        'aria-disabled': 'false',
        'aria-owns': this.element.id + '_options',
        'role': 'listbox',
        'aria-haspopup': 'true',
        'aria-expanded': 'false',
        'aria-activedescendant': 'null',
        'aria-live': 'polite',
        'aria-labelledby': this.hiddenElement.id
      };
    };

    DropDownList.prototype.setEnableRtl = function () {
      _ej2Inputs.Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);

      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };

    DropDownList.prototype.setEnable = function () {
      _ej2Inputs.Input.setEnabled(this.enabled, this.inputElement);

      if (this.enabled) {
        (0, _ej2Base.removeClass)([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute('aria-disabled', 'false');
        this.targetElement().setAttribute('tabindex', this.tabIndex);
      } else {
        this.hidePopup();
        (0, _ej2Base.addClass)([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute('aria-disabled', 'true');
        this.targetElement().tabIndex = -1;
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     */


    DropDownList.prototype.getPersistData = function () {
      return this.addOnPersist(['value']);
    };

    ;

    DropDownList.prototype.getLocaleName = function () {
      return 'drop-down-list';
    };

    ;

    DropDownList.prototype.preventTabIndex = function (element) {
      if (this.getModuleName() === 'dropdownlist') {
        element.tabIndex = -1;
      }
    };

    DropDownList.prototype.targetElement = function () {
      return this.inputWrapper.container;
    };

    DropDownList.prototype.getNgDirective = function () {
      return 'EJS-DROPDOWNLIST';
    };

    DropDownList.prototype.getElementByText = function (text) {
      return this.getElementByValue(this.getValueByText(text));
    };

    DropDownList.prototype.getElementByValue = function (value) {
      var item;
      var listItems = this.getItems();

      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];

        if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {
          item = liItem;
          break;
        }
      }

      return item;
    };

    ;

    DropDownList.prototype.initValue = function () {
      this.renderList();

      if (this.dataSource instanceof _ej2Data.DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };

    DropDownList.prototype.updateValues = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.setSelection(this.getElementByValue(this.value), null);
      } else if (this.text && (0, _ej2Base.isNullOrUndefined)(this.value)) {
        var element = this.getElementByText(this.text);

        if ((0, _ej2Base.isNullOrUndefined)(element)) {
          this.setProperties({
            text: null
          });
          return;
        } else {
          this.setSelection(element, null);
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }

      this.setHiddenValue();

      _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };

    DropDownList.prototype.onBlur = function (e) {
      if (!this.enabled) {
        return;
      }

      var target = e.relatedTarget;
      var currentTarget = e.target;
      var isPreventBlur = this.isPreventBlur;
      this.isPreventBlur = false; //IE 11 - issue

      if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!(0, _ej2Base.isNullOrUndefined)(currentTarget) || !this.isFilterLayout() && (0, _ej2Base.isNullOrUndefined)(target))) {
        if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {
          this.filterInput.focus();
        } else {
          this.targetElement().focus();
        }

        return;
      }

      if (this.isDocumentClick || !(0, _ej2Base.isNullOrUndefined)(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
        if (!this.beforePopupOpen) {
          this.isDocumentClick = false;
        }

        return;
      }

      if (this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || (0, _ej2Base.isNullOrUndefined)(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== 'dropdownlist' && !this.inputWrapper.container.contains(target) || this.isTabKey) {
        this.isDocumentClick = this.isPopupOpen ? true : false;
        this.focusOutAction();
        this.isTabKey = false;
      }

      if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
        this.isActive = false;
        this.beforePopupOpen = false;
      }
    };

    DropDownList.prototype.focusOutAction = function () {
      this.isInteracted = false;
      this.focusOut();
      this.onFocusOut();
    };

    DropDownList.prototype.onFocusOut = function () {
      if (!this.enabled) {
        return;
      }

      if (this.isSelected) {
        this.isSelectCustom = false;
        this.onChangeEvent(null);
      }

      this.floatLabelChange();
      this.dispatchEvent(this.hiddenElement, 'change');

      if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {
        this.dispatchEvent(this.inputElement, 'blur');
      }

      if (this.inputWrapper.clearButton) {
        (0, _ej2Base.addClass)([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
      }

      this.trigger('blur');
    };

    DropDownList.prototype.onFocus = function (e) {
      if (!this.isInteracted) {
        this.isInteracted = true;
        var args = {
          isInteracted: e ? true : false,
          event: e
        };
        this.trigger('focus', args);
      }

      this.updateIconState();
    };

    DropDownList.prototype.resetValueHandler = function (e) {
      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement && e.target === formElement) {
        var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute('value');
        this.text = val;
      }
    };

    DropDownList.prototype.wireEvent = function () {
      _ej2Base.EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);

      _ej2Base.EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);

      _ej2Base.EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);

      this.bindCommonEvent();
    };

    DropDownList.prototype.bindCommonEvent = function () {
      _ej2Base.EventHandler.add(this.targetElement(), 'blur', this.onBlur, this);

      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement) {
        _ej2Base.EventHandler.add(formElement, 'reset', this.resetValueHandler, this);
      }

      if (!_ej2Base.Browser.isDevice) {
        this.keyboardModule = new _ej2Base.KeyboardEvents(this.targetElement(), {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: 'keydown'
        });
      } else {
        this.keyboardModule = new _ej2Base.KeyboardEvents(this.targetElement(), {
          keyAction: this.mobileKeyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: 'keydown'
        });
      }

      this.bindClearEvent();
    };

    DropDownList.prototype.bindClearEvent = function () {
      if (this.showClearButton) {
        _ej2Base.EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);
      }
    };

    DropDownList.prototype.unBindCommonEvent = function () {
      _ej2Base.EventHandler.remove(this.targetElement(), 'blur', this.onBlur);

      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement) {
        _ej2Base.EventHandler.remove(formElement, 'reset', this.resetValueHandler);
      }

      if (!_ej2Base.Browser.isDevice) {
        this.keyboardModule.destroy();
      }

      if (this.showClearButton) {
        _ej2Base.EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);
      }
    };

    DropDownList.prototype.updateIconState = function () {
      if (this.showClearButton) {
        if (this.inputElement.value !== '' && !this.readonly) {
          (0, _ej2Base.removeClass)([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          (0, _ej2Base.addClass)([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    /**
     * Event binding for list
     */


    DropDownList.prototype.wireListEvents = function () {
      _ej2Base.EventHandler.add(this.list, 'click', this.onMouseClick, this);

      _ej2Base.EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);

      _ej2Base.EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);
    };

    ;

    DropDownList.prototype.onSearch = function (e) {
      if (e.charCode !== 32 && e.charCode !== 13) {
        if (this.list === undefined) {
          if (!this.isServerBlazor) {
            this.renderList();
          } else {
            this.isServerIncrementalSearch = true; // tslint:disable-next-line

            this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true);
          }
        }

        this.searchKeyEvent = e;
        this.onServerIncrementalSearch(e);
      }
    };

    DropDownList.prototype.onServerIncrementalSearch = function (e) {
      if (!this.isRequested && !(0, _ej2Base.isNullOrUndefined)(this.list) && !(0, _ej2Base.isNullOrUndefined)(this.list.querySelector('li')) && this.enabled && !this.readonly) {
        this.incrementalSearch(e);
      }
    };

    DropDownList.prototype.onMouseClick = function (e) {
      var target = e.target;
      var classList = target.classList;
      var li = (0, _ej2Base.closest)(target, '.' + _dropDownBase.dropDownBaseClasses.li);

      if (!this.isValidLI(li)) {
        return;
      }

      this.setSelection(li, e);

      if (_ej2Base.Browser.isDevice && this.isFilterLayout()) {
        history.back();
      } else {
        var delay = 100;
        this.closePopup(delay);
      }
    };

    DropDownList.prototype.onMouseOver = function (e) {
      var currentLi = (0, _ej2Base.closest)(e.target, '.' + _dropDownBase.dropDownBaseClasses.li);
      this.setHover(currentLi);
    };

    ;

    DropDownList.prototype.setHover = function (li) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(_dropDownBase.dropDownBaseClasses.hover)) {
        this.removeHover();
        (0, _ej2Base.addClass)([li], _dropDownBase.dropDownBaseClasses.hover);
      }
    };

    ;

    DropDownList.prototype.onMouseLeave = function (e) {
      this.removeHover();
    };

    ;

    DropDownList.prototype.removeHover = function () {
      var hoveredItem = this.list.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.hover);

      if (hoveredItem && hoveredItem.length) {
        (0, _ej2Base.removeClass)(hoveredItem, _dropDownBase.dropDownBaseClasses.hover);
      }
    };

    ;

    DropDownList.prototype.isValidLI = function (li) {
      return li && li.hasAttribute('role') && li.getAttribute('role') === 'option';
    };

    ;

    DropDownList.prototype.incrementalSearch = function (e) {
      if (this.liCollections.length > 0) {
        var li = (0, _incrementalSearch.incrementalSearch)(e.charCode, this.liCollections, this.activeIndex, true, this.isServerBlazor);

        if (!(0, _ej2Base.isNullOrUndefined)(li)) {
          this.setSelection(li, e);
          this.setScrollPosition();
        }
      }
    };

    ;
    /**
     * Hides the spinner loader.
     * @returns void.
     */

    DropDownList.prototype.hideSpinner = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        (0, _ej2Popups.hideSpinner)(this.spinnerElement);
        (0, _ej2Base.removeClass)([this.spinnerElement], dropDownListClasses.disableIcon);
        this.spinnerElement.innerHTML = '';
        this.spinnerElement = null;
      }
    };
    /**
     * Shows the spinner loader.
     * @returns void.
     */


    DropDownList.prototype.showSpinner = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        this.spinnerElement = _ej2Base.Browser.isDevice && !(0, _ej2Base.isNullOrUndefined)(this.filterInputObj) && this.filterInputObj.buttons[1] || !(0, _ej2Base.isNullOrUndefined)(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
        (0, _ej2Base.addClass)([this.spinnerElement], dropDownListClasses.disableIcon);
        (0, _ej2Popups.createSpinner)({
          target: this.spinnerElement,
          width: _ej2Base.Browser.isDevice ? '16px' : '14px'
        }, this.createElement);
        (0, _ej2Popups.showSpinner)(this.spinnerElement);
      }
    };

    DropDownList.prototype.keyActionHandler = function (e) {
      if (!this.enabled) {
        return;
      }

      var preventAction = e.action === 'pageUp' || e.action === 'pageDown';
      var preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');
      this.isEscapeKey = e.action === 'escape';
      this.isTabKey = !this.isPopupOpen && e.action === 'tab';
      var isNavigation = e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'home' || e.action === 'end';

      if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
        return;
      }

      if (!this.readonly) {
        var isTabAction = e.action === 'tab' || e.action === 'close';

        if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape') {
          this.searchKeyEvent = e;
          this.renderList();
        }

        if ((0, _ej2Base.isNullOrUndefined)(this.list) || !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
          return;
        }

        if (isTabAction && this.isPopupOpen || e.action === 'escape') {
          e.preventDefault();
        }

        this.isSelected = e.action === 'escape' ? false : this.isSelected;
        this.isTyped = isNavigation || e.action === 'escape' ? false : this.isTyped;

        switch (e.action) {
          case 'down':
          case 'up':
            var focusEle = this.list.querySelector('.' + dropDownListClasses.focus);

            if (this.isSelectFocusItem(focusEle)) {
              this.setSelection(focusEle, e);
            } else {
              var nextItem = void 0;
              var index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;
              var startIndex = 0;

              if (this.getModuleName() === 'autocomplete') {
                startIndex = e.action === 'down' && (0, _ej2Base.isNullOrUndefined)(this.activeIndex) ? 0 : this.liCollections.length - 1;
                index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
              }

              nextItem = (0, _ej2Base.isNullOrUndefined)(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
              this.setSelection(nextItem, e);
            }

            e.preventDefault();
            break;

          case 'pageUp':
            this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
            e.preventDefault();
            break;

          case 'pageDown':
            this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
            e.preventDefault();
            break;

          case 'home':
            if (this.getModuleName() === 'dropdownlist') {
              e.preventDefault();

              if (this.activeIndex === 0) {
                return;
              }

              this.setSelection(this.liCollections[0], e);
            }

            break;

          case 'end':
            if (this.getModuleName() === 'dropdownlist') {
              e.preventDefault();
              var lastLi = this.getItems().length - 1;

              if (this.activeIndex === lastLi) {
                return;
              }

              this.setSelection(this.liCollections[lastLi], e);
            }

            break;

          case 'space':
            if (this.getModuleName() === 'dropdownlist') {
              if (!this.beforePopupOpen) {
                this.showPopup();
              }
            }

            break;

          case 'open':
            this.showPopup();
            break;

          case 'hide':
            this.preventAltUp = this.isPopupOpen;
            this.hidePopup();
            this.focusDropDown(e);
            break;

          case 'enter':
            this.selectCurrentItem(e);
            break;

          case 'escape':
          case 'tab':
          case 'close':
            if (this.isPopupOpen) {
              this.hidePopup();
              this.focusDropDown(e);
            }

            break;
        }
      }
    };

    DropDownList.prototype.mobileKeyActionHandler = function (e) {
      if (!this.enabled) {
        return;
      }

      if (this.isEditTextBox() && !this.isPopupOpen) {
        return;
      }

      if (!this.readonly) {
        if (this.list === undefined && !this.isRequested) {
          this.searchKeyEvent = e;
          this.renderList();
        }

        if ((0, _ej2Base.isNullOrUndefined)(this.list) || !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
          return;
        }

        if (e.action === 'enter') {
          this.selectCurrentItem(e);
        }
      }
    };

    DropDownList.prototype.selectCurrentItem = function (e) {
      if (this.isPopupOpen) {
        var li = this.list.querySelector('.' + dropDownListClasses.focus);

        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }

        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }

        this.hidePopup();
        this.focusDropDown(e);
      } else {
        this.showPopup();
      }
    };

    DropDownList.prototype.isSelectFocusItem = function (element) {
      return !(0, _ej2Base.isNullOrUndefined)(element);
    };

    DropDownList.prototype.getPageCount = function () {
      var liHeight = this.list.classList.contains(_dropDownBase.dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');
      return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
    };

    DropDownList.prototype.pageUpSelection = function (steps, event) {
      var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
      this.setSelection(previousItem, event);
    };

    ;

    DropDownList.prototype.pageDownSelection = function (steps, event) {
      var list = this.getItems();
      var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
      this.setSelection(previousItem, event);
    };

    ;

    DropDownList.prototype.unWireEvent = function () {
      _ej2Base.EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);

      _ej2Base.EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);

      _ej2Base.EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);

      this.unBindCommonEvent();
    };
    /**
     * Event un binding for list items.
     */


    DropDownList.prototype.unWireListEvents = function () {
      _ej2Base.EventHandler.remove(this.list, 'click', this.onMouseClick);

      _ej2Base.EventHandler.remove(this.list, 'mouseover', this.onMouseOver);

      _ej2Base.EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);
    };

    ;

    DropDownList.prototype.checkSelector = function (id) {
      return '#' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, '\\$1');
    };

    DropDownList.prototype.onDocumentClick = function (e) {
      var target = e.target;

      if (!(!(0, _ej2Base.isNullOrUndefined)(this.popupObj) && (0, _ej2Base.closest)(target, this.checkSelector(this.popupObj.element.id))) && !this.inputWrapper.container.contains(e.target)) {
        if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
          this.isDocumentClick = true;
          var isActive = this.isRequested;
          this.isInteracted = false;
          this.hidePopup(e);

          if (!isActive) {
            this.onFocusOut();
            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
          }
        }
      } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === 'combobox' && !this.allowFiltering && _ej2Base.Browser.isDevice && target === this.inputWrapper.buttons[0])) {
        this.isPreventBlur = (_ej2Base.Browser.isIE || _ej2Base.Browser.info.name === 'edge') && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
        e.preventDefault();
      }
    };

    DropDownList.prototype.activeStateChange = function () {
      if (this.isDocumentClick) {
        this.hidePopup();
        this.onFocusOut();
        this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
      }
    };

    DropDownList.prototype.focusDropDown = function (e) {
      if (!this.initial && this.isFilterLayout()) {
        this.focusIn(e);
      }
    };

    DropDownList.prototype.dropDownClick = function (e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }

      if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
        return;
      }

      var target = e.target;

      if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {
        e.preventDefault();
      }

      if (!this.readonly) {
        if (this.isPopupOpen) {
          this.hidePopup();

          if (this.isFilterLayout()) {
            this.focusDropDown(e);
          }
        } else {
          this.focusIn(e);
          this.floatLabelChange();
          this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;
          this.isDropDownClick = true;
          this.showPopup();
        }

        var proxy_1 = this;
        var duration = (0, _ej2Base.isBlazor)() ? 1000 : 100;

        if (!this.isSecondClick) {
          setTimeout(function () {
            proxy_1.cloneElements();
            proxy_1.isSecondClick = true;
          }, duration);
        }
      } else {
        this.focusIn(e);
      }
    };

    DropDownList.prototype.cloneElements = function () {
      if (this.list) {
        var ulElement = this.list.querySelector('ul');

        if (ulElement) {
          ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
          this.actionCompleteData.ulElement = ulElement;
        }
      }
    };

    DropDownList.prototype.updateSelectedItem = function (li, e, preventSelect, isSelection) {
      var _this = this;

      this.removeSelection();
      li.classList.add(_dropDownBase.dropDownBaseClasses.selected);
      this.removeHover();
      var value = this.getFormattedValue(li.getAttribute('data-value'));
      var selectedData = this.getDataByValue(value);

      if (!this.initial && !preventSelect && !(0, _ej2Base.isNullOrUndefined)(e)) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e: e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger('select', eventArgs, function (eventArgs) {
          if (eventArgs.cancel) {
            li.classList.remove(_dropDownBase.dropDownBaseClasses.selected);
          } else {
            _this.selectEventCallback(li, e, preventSelect, selectedData, value);

            if (_this.isServerBlazor) {
              // tslint:disable-next-line
              _this.interopAdaptor.invokeMethodAsync('OnServerItemData', _this.itemData);
            }

            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, e, preventSelect, selectedData, value);

        if (this.isServerBlazor) {
          // tslint:disable-next-line
          this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);
        }

        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };

    DropDownList.prototype.selectEventCallback = function (li, e, preventSelect, selectedData, value) {
      this.previousItemData = !(0, _ej2Base.isNullOrUndefined)(this.itemData) ? this.itemData : null;
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector('.' + _dropDownBase.dropDownBaseClasses.focus);

      if (focusedItem) {
        (0, _ej2Base.removeClass)([focusedItem], _dropDownBase.dropDownBaseClasses.focus);
      }

      li.setAttribute('aria-selected', 'true');
      this.activeIndex = this.getIndexByValue(value);
    };

    DropDownList.prototype.activeItem = function (li) {
      if (this.isValidLI(li) && !li.classList.contains(_dropDownBase.dropDownBaseClasses.selected)) {
        this.removeSelection();
        li.classList.add(_dropDownBase.dropDownBaseClasses.selected);
        this.removeHover();
        li.setAttribute('aria-selected', 'true');
      }
    };

    DropDownList.prototype.setValue = function (e) {
      var dataItem = this.getItemData();

      if (dataItem.value === null) {
        if ((0, _ej2Base.isBlazor)() && dataItem.text !== null || dataItem.text !== '') {
          _ej2Inputs.Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
        } else {
          _ej2Inputs.Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
        }
      } else {
        _ej2Inputs.Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }

      if (this.isServerBlazor) {
        // tslint:disable-next-line
        this.interopAdaptor.invokeMethodAsync('OnServerValueTemplate', dataItem);
      }

      if (this.valueTemplate && this.itemData !== null && !this.isServerBlazor) {
        this.DropDownBaseresetBlazorTemplates(false, false, false, false, true);
        this.setValueTemplate();
      } else if (this.inputElement.previousSibling === this.valueTempElement) {
        (0, _ej2Base.detach)(this.valueTempElement);
        this.inputElement.style.display = 'block';
      }

      if (this.previousValue === dataItem.value) {
        this.isSelected = false;
        return true;
      } else {
        this.isSelected = !this.initial ? true : false;
        this.isSelectCustom = false;

        if (this.getModuleName() === 'dropdownlist') {
          this.updateIconState();
        }

        return false;
      }
    };

    DropDownList.prototype.setSelection = function (li, e) {
      if (this.isValidLI(li) && !li.classList.contains(_dropDownBase.dropDownBaseClasses.selected)) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };

    DropDownList.prototype.setSelectOptions = function (li, e) {
      if (this.list) {
        this.removeHover();
      }

      this.previousSelectedLI = !(0, _ej2Base.isNullOrUndefined)(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;

      if (this.setValue(e)) {
        return;
      }

      if (this.isPopupOpen) {
        (0, _ej2Base.attributes)(this.targetElement(), {
          'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
        });

        if (this.isFilterLayout()) {
          (0, _ej2Base.attributes)(this.filterInput, {
            'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
          });
        }
      }

      if (!this.isPopupOpen && !(0, _ej2Base.isNullOrUndefined)(li) || this.isPopupOpen && !(0, _ej2Base.isNullOrUndefined)(e) && (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter')) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }

      if (this.isPopupOpen && !(0, _ej2Base.isNullOrUndefined)(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {
        this.setScrollPosition(e);
      }

      if (_ej2Base.Browser.info.name !== 'mozilla') {
        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-label': this.inputElement.value
        });
        (0, _ej2Base.attributes)(this.targetElement(), {
          'aria-describedby': this.inputElement.id
        });
        this.targetElement().removeAttribute('aria-live');
      }
    };

    DropDownList.prototype.setValueTemplate = function () {
      var compiledString;

      if (!this.valueTempElement) {
        this.valueTempElement = this.createElement('span', {
          className: dropDownListClasses.value
        });
        this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
        this.inputElement.style.display = 'none';
      }

      this.valueTempElement.innerHTML = '';
      var templateData = (0, _ej2Base.isBlazor)() ? JSON.parse(JSON.stringify(this.itemData)) : this.itemData;
      compiledString = (0, _ej2Base.compile)(this.valueTemplate);

      for (var _i = 0, _a = compiledString(templateData, null, null, this.valueTemplateId, this.isStringTemplate); _i < _a.length; _i++) {
        var item = _a[_i];
        this.valueTempElement.appendChild(item);
      }

      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, true, true);
    };

    DropDownList.prototype.removeSelection = function () {
      var selectedItems = this.list.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.selected);

      if (selectedItems.length) {
        (0, _ej2Base.removeClass)(selectedItems, _dropDownBase.dropDownBaseClasses.selected);
        selectedItems[0].removeAttribute('aria-selected');
      }
    };

    ;

    DropDownList.prototype.getItemData = function () {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;

      if (!(0, _ej2Base.isNullOrUndefined)(dataItem)) {
        dataValue = (0, _ej2Base.getValue)(fields.value, dataItem);
        dataText = (0, _ej2Base.getValue)(fields.text, dataItem);
      }

      var value = !(0, _ej2Base.isNullOrUndefined)(dataItem) && !(0, _ej2Base.isUndefined)(dataValue) ? dataValue : dataItem;
      var text = !(0, _ej2Base.isNullOrUndefined)(dataItem) && !(0, _ej2Base.isUndefined)(dataValue) ? dataText : dataItem;
      return {
        value: value,
        text: text
      };
    };
    /**
     * To trigger the change event for list.
     */


    DropDownList.prototype.onChangeEvent = function (eve) {
      var dataItem = this.getItemData();
      var index = this.isSelectCustom ? null : this.activeIndex;
      this.setProperties({
        'index': index,
        'text': dataItem.text,
        'value': dataItem.value
      }, true);
      this.detachChangeEvent(eve);
    };

    ;

    DropDownList.prototype.detachChanges = function (value) {
      var items;

      if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {
        items = Object.defineProperties({}, {
          value: {
            value: value,
            enumerable: true
          },
          text: {
            value: value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }

      return items;
    };

    DropDownList.prototype.detachChangeEvent = function (eve) {
      this.isSelected = false;
      this.previousValue = this.value;
      this.activeIndex = this.index;
      this.typedString = !(0, _ej2Base.isNullOrUndefined)(this.text) ? this.text : '';

      if (!this.initial) {
        var items = this.detachChanges(this.itemData);
        var preItems = void 0;

        if (typeof this.previousItemData === 'string' || typeof this.previousItemData === 'boolean' || typeof this.previousItemData === 'number') {
          preItems = Object.defineProperties({}, {
            value: {
              value: this.previousItemData,
              enumerable: true
            },
            text: {
              value: this.previousItemData,
              enumerable: true
            }
          });
        } else {
          preItems = this.previousItemData;
        }

        this.setHiddenValue();
        var eventArgs = {
          e: eve,
          item: this.item,
          itemData: items,
          previousItem: this.previousSelectedLI,
          previousItemData: preItems,
          isInteracted: eve ? true : false,
          value: this.value,
          element: this.element
        };
        this.trigger('change', eventArgs);
      }

      if (((0, _ej2Base.isNullOrUndefined)(this.value) || this.value === '') && this.floatLabelType !== 'Always') {
        (0, _ej2Base.removeClass)([this.inputWrapper.container], 'e-valid-input');
      }
    };

    DropDownList.prototype.setHiddenValue = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';
        var selectedElement = this.hiddenElement.querySelector('option');
        selectedElement.setAttribute('value', this.value.toString());
      } else {
        this.hiddenElement.innerHTML = '';
      }
    };
    /**
     * Filter bar implementation
     */


    DropDownList.prototype.onFilterUp = function (e) {
      if (this.isValidKey || e.keyCode === 40 || e.keyCode === 38) {
        this.isValidKey = false;

        switch (e.keyCode) {
          case 38: //up arrow 

          case 40:
            //down arrow 
            if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else {
              this.preventAutoFill = false;
            }

            this.preventAltUp = false;
            e.preventDefault();
            break;

          case 46: //delete

          case 8:
            //backspace
            this.typedString = this.filterInput.value;

            if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === '') {
              this.resetFocusElement();
              this.activeIndex = null;

              if (this.getModuleName() === 'autocomplete') {
                this.hidePopup();
              }
            }

            e.preventDefault();
            break;

          default:
            this.typedString = this.filterInput.value;
            this.preventAutoFill = false;
            this.searchLists(e);
            break;
        }
      } else {
        this.isValidKey = false;
      }
    };

    DropDownList.prototype.onFilterDown = function (e) {
      switch (e.keyCode) {
        case 13:
          //enter
          break;

        case 40: //down arrow

        case 38:
          //up arrow 
          this.queryString = this.filterInput.value;
          e.preventDefault();
          break;

        case 9:
          //tab 
          if (this.isPopupOpen) {
            e.preventDefault();
          }

          break;

        default:
          this.prevSelectPoints = this.getSelectionPoints();
          this.queryString = this.filterInput.value;
          break;
      }
    };

    DropDownList.prototype.removeFillSelection = function () {
      if (this.isInteracted) {
        var selection = this.getSelectionPoints();
        this.inputElement.setSelectionRange(selection.end, selection.end);
      }
    };

    DropDownList.prototype.getQuery = function (query) {
      var filterQuery;

      if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _ej2Data.Query();
        var filterType = this.typedString === '' ? 'contains' : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;

        if (!(this.dataSource instanceof _ej2Data.DataManager) && dataType === 'string' || dataType === 'number') {
          filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : '';
          filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new _ej2Data.Query();
      }

      return filterQuery;
    };

    DropDownList.prototype.getSelectionPoints = function () {
      var input = this.inputElement;
      return {
        start: Math.abs(input.selectionStart),
        end: Math.abs(input.selectionEnd)
      };
    };

    DropDownList.prototype.searchLists = function (e) {
      var _this = this;

      this.isTyped = true;
      this.activeIndex = null;

      if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';
      }

      this.isDataFetched = false;

      if (this.isFiltering()) {
        if (this.isServerBlazor) {
          // tslint:disable-next-line
          this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);
        } else {
          var eventArgs_1 = {
            preventDefaultAction: false,
            text: this.filterInput.value,
            updateData: function (dataSource, query, fields) {
              if (eventArgs_1.cancel) {
                return;
              }

              _this.isCustomFilter = true;

              _this.filteringAction(dataSource, query, fields);
            },
            baseEventArgs: e,
            cancel: false
          };
          this.trigger('filtering', eventArgs_1, function (eventArgs) {
            if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {
              _this.filteringAction(_this.dataSource, null, _this.fields);
            }
          });
        }
      }
    };
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
     * @param  {Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     * @deprecated
     */


    DropDownList.prototype.filter = function (dataSource, query, fields) {
      this.isCustomFilter = true;
      this.filteringAction(dataSource, query, fields);
    };

    DropDownList.prototype.filteringAction = function (dataSource, query, fields) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.filterInput)) {
        this.beforePopupOpen = true;

        if (this.filterInput.value.trim() === '' && !this.itemTemplate) {
          this.actionCompleteData.isUpdated = false;
          this.isTyped = false;

          if (!(0, _ej2Base.isNullOrUndefined)(this.actionCompleteData.ulElement) && !(0, _ej2Base.isNullOrUndefined)(this.actionCompleteData.list)) {
            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
          }

          this.isTyped = true;

          if (!(0, _ej2Base.isNullOrUndefined)(this.itemData) && this.getModuleName() === 'dropdownlist') {
            this.focusIndexItem();
            this.setScrollPosition();
          }

          this.isNotSearchList = true;
        } else {
          this.isNotSearchList = false;
          query = this.filterInput.value.trim() === '' ? null : query;
          this.resetList(dataSource, fields, query);
        }
      }
    };

    DropDownList.prototype.setSearchBox = function (popupElement) {
      if (this.isFiltering()) {
        var parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ? popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {
          className: dropDownListClasses.filterParent
        });

        if (this.isServerBlazor) {
          parentElement.innerHTML = '';
        }

        this.filterInput = this.createElement('input', {
          attrs: {
            type: 'text'
          },
          className: dropDownListClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        var backIcon = false;

        if (_ej2Base.Browser.isDevice) {
          backIcon = true;
        }

        this.filterInputObj = _ej2Inputs.Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
          properties: {
            placeholder: this.filterBarPlaceholder
          }
        }, this.createElement);
        (0, _ej2Base.append)([this.filterInputObj.container], parentElement);
        (0, _ej2Base.prepend)([parentElement], popupElement);
        (0, _ej2Base.attributes)(this.filterInput, {
          'aria-disabled': 'false',
          'aria-owns': this.element.id + '_options',
          'role': 'listbox',
          'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null,
          'autocomplete': 'off',
          'autocorrect': 'off',
          'autocapitalize': 'off',
          'spellcheck': 'false'
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);

        if (!_ej2Base.Browser.isDevice && this.clearIconElement) {
          _ej2Base.EventHandler.add(this.clearIconElement, 'click', this.clearText, this);

          this.clearIconElement.style.visibility = 'hidden';
        }

        if (!_ej2Base.Browser.isDevice) {
          this.searchKeyModule = new _ej2Base.KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: 'keydown'
          });
        } else {
          this.searchKeyModule = new _ej2Base.KeyboardEvents(this.filterInput, {
            keyAction: this.mobileKeyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: 'keydown'
          });
        }

        _ej2Base.EventHandler.add(this.filterInput, 'input', this.onInput, this);

        _ej2Base.EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);

        _ej2Base.EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);

        _ej2Base.EventHandler.add(this.filterInput, 'blur', this.onBlur, this);

        return this.filterInputObj;
      } else {
        return inputObject;
      }
    };

    ;

    DropDownList.prototype.onInput = function (e) {
      this.isValidKey = true; // For filtering works in mobile firefox.

      if (_ej2Base.Browser.isDevice && _ej2Base.Browser.info.name === 'mozilla') {
        this.typedString = this.filterInput.value;
        this.preventAutoFill = true;
        this.searchLists(e);
      }
    };

    DropDownList.prototype.onActionFailure = function (e) {
      _super.prototype.onActionFailure.call(this, e);

      if (this.beforePopupOpen) {
        this.renderPopup();
      }
    };

    DropDownList.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {
      var _this = this;

      if (this.isNotSearchList) {
        this.isNotSearchList = false;
        return;
      }

      if (this.isActive) {
        var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;

        _super.prototype.onActionComplete.call(this, ulElement, list, e);

        this.updateSelectElementData(this.allowFiltering);

        if (this.isRequested && !(0, _ej2Base.isNullOrUndefined)(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {
          this.isRequested = false;
          this.keyActionHandler(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }

        if (this.isRequested && !(0, _ej2Base.isNullOrUndefined)(this.searchKeyEvent)) {
          this.incrementalSearch(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }

        this.list.scrollTop = 0;

        if (!(0, _ej2Base.isNullOrUndefined)(ulElement)) {
          (0, _ej2Base.attributes)(ulElement, {
            'id': this.element.id + '_options',
            'role': 'listbox',
            'aria-hidden': 'false'
          });
        }

        if (this.initRemoteRender) {
          this.initial = true;
          this.activeIndex = this.index;
          this.updateValues();
          this.initRemoteRender = false;
          this.initial = false;

          if (this.value && this.dataSource instanceof _ej2Data.DataManager) {
            var checkField_1 = (0, _ej2Base.isNullOrUndefined)(this.fields.value) ? this.fields.text : this.fields.value;
            var checkVal = list.some(function (x) {
              return x[checkField_1] === _this.value;
            });

            if (!checkVal) {
              this.dataSource.executeQuery(this.getQuery(this.query).where(new _ej2Data.Predicate(checkField_1, 'equal', this.value))).then(function (e) {
                if (e.result.length > 0) {
                  _this.addItem(e.result, list.length);

                  _this.updateValues();
                }
              });
            }
          }
        }

        if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {
          if (!this.actionCompleteData.isUpdated || !this.isCustomFilter && !this.isFilterFocus && (this.dataSource instanceof _ej2Data.DataManager || !(0, _ej2Base.isNullOrUndefined)(this.dataSource) && !(0, _ej2Base.isNullOrUndefined)(this.dataSource.length) && this.dataSource.length !== 0)) {
            this.actionCompleteData = {
              ulElement: ulElement.cloneNode(true),
              list: list,
              isUpdated: true
            };
          }

          this.addNewItem(list, selectedItem);

          if (!(0, _ej2Base.isNullOrUndefined)(this.itemData)) {
            this.focusIndexItem();
          }
        }

        if (this.beforePopupOpen) {
          this.renderPopup();
        }
      }
    };

    DropDownList.prototype.addNewItem = function (listData, newElement) {
      var _this = this;

      if (!(0, _ej2Base.isNullOrUndefined)(this.itemData) && !(0, _ej2Base.isNullOrUndefined)(newElement)) {
        var value_1 = this.getItemData().value;
        var isExist = listData.some(function (data) {
          return (typeof data === 'string' || typeof data === 'number') && data === value_1 || (0, _ej2Base.getValue)(_this.fields.value, data) === value_1;
        });

        if (!isExist) {
          this.addItem(this.itemData);
        }
      }
    };

    DropDownList.prototype.updateActionCompleteData = function (li, item) {
      if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {
        this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));

        if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {
          this.actionCompleteData.list.push(item);
        }
      }
    };

    DropDownList.prototype.focusIndexItem = function () {
      var value = this.getItemData().value;
      this.activeIndex = this.getIndexByValue(value);
      var element = this.findListElement(this.list, 'li', 'data-value', value);
      this.selectedLI = element;
      this.activeItem(element);
      this.removeFocus();
    };

    DropDownList.prototype.updateSelection = function () {
      var selectedItem = this.list.querySelector('.' + _dropDownBase.dropDownBaseClasses.selected);

      if (selectedItem) {
        this.setProperties({
          'index': this.getIndexByValue(selectedItem.getAttribute('data-value'))
        });
        this.activeIndex = this.index;
      } else {
        this.removeFocus();
        this.list.querySelector('.' + _dropDownBase.dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
      }
    };

    DropDownList.prototype.removeFocus = function () {
      var highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);

      if (highlightedItem && highlightedItem.length) {
        (0, _ej2Base.removeClass)(highlightedItem, dropDownListClasses.focus);
      }
    };

    ;

    DropDownList.prototype.renderPopup = function () {
      var _this = this;

      if (this.popupObj && document.body.contains(this.popupObj.element)) {
        this.refreshPopup();
        return;
      }

      var args = {
        cancel: false
      };
      this.trigger('beforeOpen', args, function (args) {
        if (!args.cancel) {
          var popupEle = _this.serverPopupEle ? _this.serverPopupEle : _this.createElement('div', {
            id: _this.element.id + '_popup',
            className: 'e-ddl e-popup ' + (_this.cssClass != null ? _this.cssClass : '')
          });

          var searchBox = _this.setSearchBox(popupEle);

          _this.listHeight = (0, _ej2Base.formatUnit)(_this.popupHeight);

          if (_this.headerTemplate && !_this.isServerBlazor) {
            _this.setHeaderTemplate(popupEle);
          }

          (0, _ej2Base.append)([_this.list], popupEle);

          if (_this.footerTemplate && !_this.isServerBlazor) {
            _this.setFooterTemplate(popupEle);
          }

          if (_this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {
            popupEle.appendChild(popupEle.querySelector('.e-ddl-footer'));
          }

          document.body.appendChild(popupEle);

          _this.updateServerPopup(popupEle);

          popupEle.style.visibility = 'hidden';

          if (_this.popupHeight !== 'auto') {
            _this.searchBoxHeight = 0;

            if (!(0, _ej2Base.isNullOrUndefined)(searchBox.container)) {
              _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
              _this.listHeight = (parseInt(_this.listHeight, 10) - _this.searchBoxHeight).toString() + 'px';
            }

            if (_this.headerTemplate || _this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-header')) {
              _this.header = _this.header ? _this.header : popupEle.querySelector('.e-ddl-header');
              var height = Math.round(_this.header.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';
            }

            if (_this.footerTemplate || _this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {
              _this.footer = _this.footer ? _this.footer : popupEle.querySelector('.e-ddl-footer');
              var height = Math.round(_this.footer.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';
            }

            _this.list.style.maxHeight = (parseInt(_this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property

            popupEle.style.maxHeight = (0, _ej2Base.formatUnit)(_this.popupHeight);
          } else {
            popupEle.style.height = 'auto';
          }

          var offsetValue = 0;
          var left = void 0;

          if (!(0, _ej2Base.isNullOrUndefined)(_this.selectedLI) && !(0, _ej2Base.isNullOrUndefined)(_this.activeIndex) && _this.activeIndex >= 0) {
            _this.setScrollPosition();
          } else {
            _this.list.scrollTop = 0;
          }

          if (_ej2Base.Browser.isDevice && !_this.allowFiltering && (_this.getModuleName() === 'dropdownlist' || _this.isDropDownClick && _this.getModuleName() === 'combobox')) {
            offsetValue = _this.getOffsetValue(popupEle);
            var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];
            left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));
          }

          _this.getFocusElement();

          _this.createPopup(popupEle, offsetValue, left);

          _this.checkCollision(popupEle);

          if (_ej2Base.Browser.isDevice) {
            _this.popupObj.element.classList.add(dropDownListClasses.device);

            if (_this.getModuleName() === 'dropdownlist' || _this.getModuleName() === 'combobox' && !_this.allowFiltering && _this.isDropDownClick) {
              _this.popupObj.collision = {
                X: 'fit',
                Y: 'fit'
              };
            }

            if (_this.isFilterLayout()) {
              _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);

              _this.popupObj.position = {
                X: 0,
                Y: 0
              };

              _this.popupObj.dataBind();

              (0, _ej2Base.attributes)(_this.popupObj.element, {
                style: 'left:0px;right:0px;top:0px;bottom:0px;'
              });
              (0, _ej2Base.addClass)([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);

              _this.setSearchBoxPosition();

              _this.backIconElement = searchBox.container.querySelector('.e-back-icon');
              _this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);

              _ej2Base.EventHandler.add(_this.backIconElement, 'click', _this.clickOnBackIcon, _this);

              _ej2Base.EventHandler.add(_this.clearIconElement, 'click', _this.clearText, _this);
            }
          }

          popupEle.style.visibility = 'visible';
          (0, _ej2Base.addClass)([popupEle], 'e-popup-close');

          var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);

          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element = scrollParentElements_1[_i];

            _ej2Base.EventHandler.add(element, 'scroll', _this.scrollHandler, _this);
          }

          if (_ej2Base.Browser.isDevice && _this.isFilterLayout()) {
            _ej2Base.EventHandler.add(_this.list, 'scroll', _this.listScroll, _this);
          }

          (0, _ej2Base.attributes)(_this.targetElement(), {
            'aria-expanded': 'true'
          });
          var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;
          (0, _ej2Base.addClass)([inputParent], [dropDownListClasses.inputFocus]);
          var animModel = {
            name: 'FadeIn',
            duration: 100
          };
          _this.beforePopupOpen = true;
          var popupInstance = (0, _ej2Base.isBlazor)() && _this.isServerRendered ? null : _this.popupObj;
          var eventArgs = {
            popup: popupInstance,
            cancel: false,
            animation: animModel
          };

          _this.trigger('open', eventArgs, function (eventArgs) {
            if (!eventArgs.cancel) {
              _this.serverBlazorUpdateSelection();

              _this.bindServerScrollEvent();

              (0, _ej2Base.addClass)([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);

              _this.popupObj.show(new _ej2Base.Animation(eventArgs.animation), _this.zIndex === 1000 ? _this.element : null);
            } else {
              _this.beforePopupOpen = false;

              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };

    DropDownList.prototype.checkCollision = function (popupEle) {
      if (!_ej2Base.Browser.isDevice || _ej2Base.Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick)) {
        var collision = (0, _ej2Popups.isCollide)(popupEle);

        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';
        }
      }
    };

    DropDownList.prototype.serverBlazorUpdateSelection = function () {
      if (this.isServerBlazor && (this.value !== null || this.index !== null || this.text !== null)) {
        this.removeSelection();
        this.removeFocus();
        this.removeHover();
        this.updateValues();
      }
    };

    DropDownList.prototype.bindServerScrollEvent = function () {
      if (this.isServerBlazor && this.list) {
        if (this.fields.groupBy && !this.isGroupChecking) {
          _ej2Base.EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);

          _ej2Base.EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);
        }
      }
    };

    DropDownList.prototype.updateServerPopup = function (popupEle) {
      if (this.isServerBlazor) {
        if (popupEle && popupEle.querySelector('li')) {
          (0, _ej2Base.removeClass)([this.list], ['e-nodata']);
        }

        this.initial = false;
        popupEle.removeAttribute('style');
      }
    };

    DropDownList.prototype.getOffsetValue = function (popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };

    DropDownList.prototype.createPopup = function (element, offsetValue, left) {
      var _this = this;

      this.popupObj = new _ej2Popups.Popup(element, {
        width: this.setWidth(),
        targetType: 'relative',
        relateTo: this.inputWrapper.container,
        collision: {
          X: 'flip',
          Y: 'flip'
        },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: {
          X: 'left',
          Y: 'bottom'
        },
        zIndex: this.zIndex,
        close: function () {
          if (!_this.isDocumentClick) {
            _this.focusDropDown();
          }

          var isResetItem = _this.getModuleName() === 'autocomplete' ? true : false;

          _this.DropDownBaseresetBlazorTemplates(isResetItem, isResetItem, true, true, false, true, true);

          _this.isNotSearchList = false;
          _this.isDocumentClick = false;

          _this.destroyPopup();

          var formElement = (0, _ej2Base.closest)(_this.inputElement, 'form');

          if (_this.isFiltering() && formElement && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {
            _this.isActive = true;

            _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);
          }
        },
        open: function () {
          _ej2Base.EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);

          _this.isPopupOpen = true;

          var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector('li');

          var ulElement = _this.list.querySelector('ul li');

          if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && actionList && ulElement && actionList.textContent !== ulElement.textContent) {
            _this.cloneElements();
          }

          if (_this.isFilterLayout()) {
            (0, _ej2Base.removeClass)([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            _this.isFilterFocus = true;

            _this.filterInput.focus();

            if (_this.inputWrapper.clearButton) {
              (0, _ej2Base.addClass)([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }
          }

          _this.activeStateChange();
        },
        targetExitViewport: function () {
          if (!_ej2Base.Browser.isDevice) {
            _this.hidePopup();
          }
        }
      });
    };

    DropDownList.prototype.isEmptyList = function () {
      return !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && this.liCollections.length === 0;
    };

    DropDownList.prototype.getFocusElement = function () {// combo-box used this method
    };

    DropDownList.prototype.isFilterLayout = function () {
      return this.getModuleName() === 'dropdownlist' && this.allowFiltering;
    };

    DropDownList.prototype.scrollHandler = function () {
      if (_ej2Base.Browser.isDevice && (this.getModuleName() === 'dropdownlist' && !this.isFilterLayout() || this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick)) {
        this.hidePopup();
      }
    };

    DropDownList.prototype.setSearchBoxPosition = function () {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.popupObj.element.style.maxHeight = '100%';
      this.popupObj.element.style.width = '100%';
      this.list.style.maxHeight = window.innerHeight - searchBoxHeight + 'px';
      this.list.style.height = window.innerHeight - searchBoxHeight + 'px';
      var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);
      (0, _ej2Base.detach)(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };

    DropDownList.prototype.setPopupPosition = function (border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      var listHeight = this.list.offsetHeight / 2;
      var height = (0, _ej2Base.isNullOrUndefined)(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;

      if (lastItemOffsetValue - listHeight < height && !(0, _ej2Base.isNullOrUndefined)(this.liCollections) && this.liCollections.length > 0 && !(0, _ej2Base.isNullOrUndefined)(selectedLI)) {
        var count = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }

      var inputHeight = this.inputWrapper.container.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };

    DropDownList.prototype.setWidth = function () {
      var width = (0, _ej2Base.formatUnit)(this.popupWidth);

      if (width.indexOf('%') > -1) {
        var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + 'px';
      }

      if (_ej2Base.Browser.isDevice && !this.allowFiltering && (this.getModuleName() === 'dropdownlist' || this.isDropDownClick && this.getModuleName() === 'combobox')) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + 'px';
      }

      return width;
    };

    DropDownList.prototype.scrollBottom = function (isInitial) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        boxRange = this.fields.groupBy && !(0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;

        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };

    DropDownList.prototype.scrollTop = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.selectedLI)) {
        var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        nextOffset = this.fields.groupBy && !(0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;

        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !(0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };

    DropDownList.prototype.isEditTextBox = function () {
      return false;
    };

    DropDownList.prototype.isFiltering = function () {
      return this.allowFiltering;
    };

    DropDownList.prototype.isPopupButton = function () {
      return true;
    };

    DropDownList.prototype.setScrollPosition = function (e) {
      if (!(0, _ej2Base.isNullOrUndefined)(e)) {
        switch (e.action) {
          case 'pageDown':
          case 'down':
          case 'end':
            this.scrollBottom();
            break;

          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };

    DropDownList.prototype.clearText = function () {
      this.filterInput.value = '';
      this.searchLists(null);
    };

    DropDownList.prototype.listScroll = function () {
      this.filterInput.blur();
    };

    DropDownList.prototype.setEleWidth = function (width) {
      if (!(0, _ej2Base.isNullOrUndefined)(width)) {
        if (typeof width === 'number') {
          this.inputWrapper.container.style.width = (0, _ej2Base.formatUnit)(width);
        } else if (typeof width === 'string') {
          this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
        }
      }
    };

    DropDownList.prototype.closePopup = function (delay) {
      var _this = this;

      this.isTyped = false;

      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }

      _ej2Base.EventHandler.remove(document, 'mousedown', this.onDocumentClick);

      this.isActive = false;
      this.filterInputObj = null;
      this.isDropDownClick = false;
      this.preventAutoFill = false;
      var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);

      for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
        var element = scrollableParentElements_1[_i];

        _ej2Base.EventHandler.remove(element, 'scroll', this.scrollHandler);
      }

      if (_ej2Base.Browser.isDevice && this.isFilterLayout()) {
        (0, _ej2Base.removeClass)([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);

        _ej2Base.EventHandler.remove(this.list, 'scroll', this.listScroll);
      }

      if (this.isFilterLayout()) {
        if (!_ej2Base.Browser.isDevice) {
          this.searchKeyModule.destroy();

          if (this.clearIconElement) {
            _ej2Base.EventHandler.remove(this.clearIconElement, 'click', this.clearText);
          }
        }

        if (this.backIconElement) {
          _ej2Base.EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);

          _ej2Base.EventHandler.remove(this.clearIconElement, 'click', this.clearText);
        }

        _ej2Base.EventHandler.remove(this.filterInput, 'input', this.onInput);

        _ej2Base.EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);

        _ej2Base.EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);

        _ej2Base.EventHandler.remove(this.filterInput, 'blur', this.onBlur);

        this.filterInput = null;
      }

      (0, _ej2Base.attributes)(this.targetElement(), {
        'aria-expanded': 'false',
        'aria-activedescendant': null
      });
      this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);

      if (this.isFiltering()) {
        this.actionCompleteData.isUpdated = false;
      }

      this.beforePopupOpen = false;
      var animModel = {
        name: 'FadeOut',
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = (0, _ej2Base.isBlazor)() && this.isServerRendered ? null : this.popupObj;
      var eventArgs = {
        popup: popupInstance,
        cancel: false,
        animation: animModel
      };
      this.trigger('close', eventArgs, function (eventArgs) {
        if (!_this.isServerBlazor && !(0, _ej2Base.isNullOrUndefined)(_this.popupObj) && !(0, _ej2Base.isNullOrUndefined)(_this.popupObj.element.querySelector('.e-fixed-head'))) {
          var fixedHeader = _this.popupObj.element.querySelector('.e-fixed-head');

          fixedHeader.parentNode.removeChild(fixedHeader);
          _this.fixedHeaderElement = null;
        }

        if (!eventArgs.cancel) {
          if (_this.getModuleName() === 'autocomplete') {
            _this.rippleFun();
          }

          if (_this.isPopupOpen) {
            _this.popupObj.hide(new _ej2Base.Animation(eventArgs.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };

    DropDownList.prototype.destroyPopup = function () {
      var popupHolderEle = document.querySelector('#' + this.element.id + '_popup_holder');

      if (this.isServerBlazor && this.serverPopupEle && popupHolderEle) {
        popupHolderEle.appendChild(this.serverPopupEle);
      }

      if (this.isServerBlazor) {
        // tslint:disable-next-line
        this.interopAdaptor.invokeMethodAsync('OnServerClosePopup');
      }

      this.isPopupOpen = false;
      this.isFilterFocus = false;
      this.popupObj.destroy();
      (0, _ej2Base.detach)(this.popupObj.element);
    };

    DropDownList.prototype.clickOnBackIcon = function () {
      this.hidePopup();
      this.focusIn();
    };
    /**
     * To Initialize the control rendering
     * @private
     */
    // tslint:disable-next-line


    DropDownList.prototype.render = function () {
      if (this.isServerBlazor) {
        this.inputElement = this.element;
        this.inputWrapper = {
          container: this.element.parentElement
        };
        this.hiddenElement = this.inputWrapper.container.querySelector('select');
        this.inputWrapper.buttons = [this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon')];

        if (this.showClearButton) {
          this.inputWrapper.clearButton = this.inputWrapper.container.querySelector('.e-clear-icon');

          _ej2Inputs.Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);
        }

        _ej2Inputs.Input.bindInitialEvent({
          element: this.element,
          buttons: null,
          customTag: null,
          floatLabelType: this.floatLabelType,
          properties: this.properties
        });

        this.setFields();
        this.wireEvent();
        this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';

        if (!this.enabled) {
          this.targetElement().tabIndex = -1;
        }

        if (this.element.hasAttribute('autofocus')) {
          this.focusIn();
        }
      } else {
        if (this.element.tagName === 'INPUT') {
          this.inputElement = this.element;

          if ((0, _ej2Base.isNullOrUndefined)(this.inputElement.getAttribute('role'))) {
            this.inputElement.setAttribute('role', 'textbox');
          }

          if ((0, _ej2Base.isNullOrUndefined)(this.inputElement.getAttribute('type'))) {
            this.inputElement.setAttribute('type', 'text');
          }
        } else {
          this.inputElement = this.createElement('input', {
            attrs: {
              role: 'textbox',
              type: 'text'
            }
          });

          if (this.element.tagName !== this.getNgDirective()) {
            this.element.style.display = 'none';
          }

          this.element.parentElement.insertBefore(this.inputElement, this.element);
          this.preventTabIndex(this.inputElement);
        }

        this.inputWrapper = _ej2Inputs.Input.createInput({
          element: this.inputElement,
          buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
          floatLabelType: this.floatLabelType,
          properties: {
            readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,
            placeholder: this.placeholder,
            cssClass: this.cssClass,
            enabled: this.enabled,
            enableRtl: this.enableRtl,
            showClearButton: this.showClearButton
          }
        }, this.createElement);

        if (this.element.tagName === this.getNgDirective()) {
          this.element.appendChild(this.inputWrapper.container);
        } else {
          this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
        }

        this.hiddenElement = this.createElement('select', {
          attrs: {
            'aria-hidden': 'true',
            'tabindex': '-1',
            'class': dropDownListClasses.hiddenElement
          }
        });
        (0, _ej2Base.prepend)([this.hiddenElement], this.inputWrapper.container);
        this.validationAttribute(this.element, this.hiddenElement);
        this.setFields();
        this.inputWrapper.container.style.width = (0, _ej2Base.formatUnit)(this.width);
        this.inputWrapper.container.classList.add('e-ddl');
        this.wireEvent();
        this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';
        this.element.removeAttribute('tabindex');
        var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : (0, _ej2Base.getUniqueID)('ej2_dropdownlist');
        this.element.id = id;
        this.hiddenElement.id = id + '_hidden';
        this.targetElement().setAttribute('tabindex', this.tabIndex);
        (0, _ej2Base.attributes)(this.targetElement(), this.getAriaAttributes());
        this.updateDataAttribute(this.htmlAttributes);
        this.setHTMLAttributes();

        if (this.value !== null || this.activeIndex !== null || this.text !== null) {
          this.initValue();
        } else if (this.element.tagName === 'SELECT' && this.element.options[0]) {
          var selectElement = this.element;
          this.value = selectElement.options[selectElement.selectedIndex].value;
          this.text = (0, _ej2Base.isNullOrUndefined)(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
          this.initValue();
        }

        this.preventTabIndex(this.element);

        if (!this.enabled) {
          this.targetElement().tabIndex = -1;
        }

        this.initial = false;
        this.element.style.opacity = '';

        this.inputElement.onselect = function (e) {
          e.stopImmediatePropagation();
        };

        this.inputElement.onchange = function (e) {
          e.stopImmediatePropagation();
        };

        if (this.element.hasAttribute('autofocus')) {
          this.focusIn();
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.text)) {
          this.inputElement.setAttribute('value', this.text);
        }
      }

      this.renderComplete();
    };

    ;

    DropDownList.prototype.setFooterTemplate = function (popupEle) {
      var compiledString;

      if (this.footer) {
        this.footer.innerHTML = '';
      } else {
        this.footer = this.createElement('div');
        (0, _ej2Base.addClass)([this.footer], dropDownListClasses.footer);
      }

      compiledString = (0, _ej2Base.compile)(this.footerTemplate);

      for (var _i = 0, _a = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {
        var item = _a[_i];
        this.footer.appendChild(item);
      }

      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);
      (0, _ej2Base.append)([this.footer], popupEle);
    };

    DropDownList.prototype.setHeaderTemplate = function (popupEle) {
      var compiledString;

      if (this.header) {
        this.header.innerHTML = '';
      } else {
        this.header = this.createElement('div');
        (0, _ej2Base.addClass)([this.header], dropDownListClasses.header);
      }

      compiledString = (0, _ej2Base.compile)(this.headerTemplate);

      for (var _i = 0, _a = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate); _i < _a.length; _i++) {
        var item = _a[_i];
        this.header.appendChild(item);
      }

      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);
      var contentEle = popupEle.querySelector('div.e-content');
      popupEle.insertBefore(this.header, contentEle);
    };

    DropDownList.prototype.setOldText = function (text) {
      this.text = text;
    };

    DropDownList.prototype.setOldValue = function (value) {
      this.value = value;
    };

    DropDownList.prototype.refreshPopup = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(_ej2Base.Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === 'autocomplete')) {
        (0, _ej2Base.removeClass)([this.popupObj.element], 'e-popup-close');
        this.popupObj.refreshPosition(this.inputWrapper.container);
      }
    };

    DropDownList.prototype.checkDatasource = function (newProp) {
      if (newProp.dataSource && !(0, _ej2Base.isNullOrUndefined)(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering) {
        this.list = null;
        this.actionCompleteData = {
          ulElement: null,
          list: null,
          isUpdated: false
        };
      }
    };

    DropDownList.prototype.updateDataSource = function (props) {
      if (this.inputElement.value !== '' || !(0, _ej2Base.isNullOrUndefined)(props) && ((0, _ej2Base.isNullOrUndefined)(props.dataSource) || !(props.dataSource instanceof _ej2Data.DataManager) && props.dataSource.length === 0)) {
        this.clearAll(null, props);
      }

      if (!(!(0, _ej2Base.isNullOrUndefined)(props) && ((0, _ej2Base.isNullOrUndefined)(props.dataSource) || !(props.dataSource instanceof _ej2Data.DataManager) && props.dataSource.length === 0))) {
        this.resetList(this.dataSource);
      }

      if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
        this.checkCustomValue();
      }
    };

    DropDownList.prototype.checkCustomValue = function () {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();
      this.setProperties({
        'value': dataItem.value,
        'text': dataItem.text
      });
    };

    DropDownList.prototype.updateInputFields = function () {
      if (this.getModuleName() === 'dropdownlist') {
        _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    /**
     * Dynamically change the value of properties.
     * @private
     */


    DropDownList.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (this.getModuleName() === 'dropdownlist') {
        if (!this.isServerBlazor) {
          this.checkDatasource(newProp);
          this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
        }
      }

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'query':
          case 'dataSource':
            break;

          case 'htmlAttributes':
            this.setHTMLAttributes();
            break;

          case 'width':
            this.setEleWidth(newProp.width);
            break;

          case 'placeholder':
            _ej2Inputs.Input.setPlaceholder(newProp.placeholder, this.inputElement);

            break;

          case 'filterBarPlaceholder':
            if (this.filterInput) {
              _ej2Inputs.Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
            }

            break;

          case 'readonly':
            if (this.getModuleName() !== 'dropdownlist') {
              _ej2Inputs.Input.setReadonly(newProp.readonly, this.inputElement);
            }

            break;

          case 'cssClass':
            this.setCssClass(newProp, oldProp);
            break;

          case 'enableRtl':
            this.setEnableRtl();
            break;

          case 'enabled':
            this.setEnable();
            break;

          case 'text':
            if (newProp.text === null) {
              this.clearAll();
              break;
            }

            if (!this.list) {
              if (this.dataSource instanceof _ej2Data.DataManager) {
                this.initRemoteRender = true;
              }

              this.renderList();
            }

            if (!this.initRemoteRender) {
              var li = this.getElementByText(newProp.text);

              if (!this.checkValidLi(li)) {
                if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                  this.setSelectionData(newProp.text, oldProp.text, 'text');
                } else {
                  this.setOldText(oldProp.text);
                }
              }

              this.updateInputFields();
            }

            break;

          case 'value':
            if (newProp.value === null) {
              this.clearAll();
              break;
            }

            this.notify('beforeValueChange', {
              newProp: newProp
            }); // gird component value type change

            if (!this.list) {
              if (this.dataSource instanceof _ej2Data.DataManager) {
                this.initRemoteRender = true;
              }

              this.renderList();
            }

            if (!this.initRemoteRender) {
              var item = this.getElementByValue(newProp.value);

              if (!this.checkValidLi(item)) {
                if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                  this.setSelectionData(newProp.value, oldProp.value, 'value');
                } else {
                  this.setOldValue(oldProp.value);
                }
              }

              this.updateInputFields();
            }

            break;

          case 'index':
            if (newProp.index === null) {
              this.clearAll();
              break;
            }

            if (!this.list) {
              if (this.dataSource instanceof _ej2Data.DataManager) {
                this.initRemoteRender = true;
              }

              this.renderList();
            }

            if (!this.initRemoteRender) {
              var element = this.liCollections[newProp.index];

              if (!this.checkValidLi(element)) {
                if (this.liCollections && this.liCollections.length === 100 && this.getModuleName() === 'autocomplete' && this.listData.length > 100) {
                  this.setSelectionData(newProp.index, oldProp.index, 'index');
                } else {
                  this.index = oldProp.index;
                }
              }

              this.updateInputFields();
            }

            break;

          case 'footerTemplate':
            if (this.popupObj) {
              this.setFooterTemplate(this.popupObj.element);
            }

            break;

          case 'headerTemplate':
            if (this.popupObj) {
              this.setHeaderTemplate(this.popupObj.element);
            }

            break;

          case 'valueTemplate':
            if (!(0, _ej2Base.isNullOrUndefined)(this.itemData) && this.valueTemplate != null) {
              this.setValueTemplate();
            }

            break;

          case 'allowFiltering':
            if (this.allowFiltering) {
              this.actionCompleteData = {
                ulElement: this.ulElement,
                list: this.listData,
                isUpdated: true
              };
              this.updateSelectElementData(this.allowFiltering);
            }

            break;

          case 'floatLabelType':
            _ej2Inputs.Input.removeFloating(this.inputWrapper);

            _ej2Inputs.Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);

            break;

          case 'showClearButton':
            _ej2Inputs.Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);

            this.bindClearEvent();
            break;

          default:
            var ddlProps = void 0;
            ddlProps = this.getPropObject(prop, newProp, oldProp);

            _super.prototype.onPropertyChanged.call(this, ddlProps.newProperty, ddlProps.oldProperty);

            break;
        }
      }
    };

    DropDownList.prototype.checkValidLi = function (element) {
      if (this.isValidLI(element)) {
        this.setSelection(element, null);
        return true;
      }

      return false;
    };

    DropDownList.prototype.setSelectionData = function (newProp, oldProp, prop) {
      var _this = this;

      var li;

      this.updateListValues = function () {
        if (prop === 'text') {
          li = _this.getElementByText(newProp);

          if (!_this.checkValidLi(li)) {
            _this.setOldText(oldProp);
          }
        } else if (prop === 'value') {
          li = _this.getElementByValue(newProp);

          if (!_this.checkValidLi(li)) {
            _this.setOldValue(oldProp);
          }
        } else if (prop === 'index') {
          li = _this.liCollections[newProp];

          if (!_this.checkValidLi(li)) {
            _this.index = oldProp;
          }
        }
      };
    };

    DropDownList.prototype.setCssClass = function (newProp, oldProp) {
      if (!(0, _ej2Base.isNullOrUndefined)(oldProp.cssClass) && oldProp.cssClass !== '') {
        (0, _ej2Base.removeClass)([this.inputWrapper.container], oldProp.cssClass.split(' '));
      }

      _ej2Inputs.Input.setCssClass(newProp.cssClass, [this.inputWrapper.container]);

      if (this.popupObj) {
        if (!(0, _ej2Base.isNullOrUndefined)(oldProp.cssClass) && oldProp.cssClass !== '') {
          (0, _ej2Base.removeClass)([this.popupObj.element], oldProp.cssClass.split(' '));
        }

        if (!(0, _ej2Base.isNullOrUndefined)(newProp.cssClass) && newProp.cssClass !== '') {
          (0, _ej2Base.addClass)([this.popupObj.element], newProp.cssClass.split(' '));
        }
      }
    };
    /**
     * Return the module name.
     * @private
     */


    DropDownList.prototype.getModuleName = function () {
      return 'dropdownlist';
    };
    /**
     * Opens the popup that displays the list of items.
     * @returns void.
     */


    DropDownList.prototype.showPopup = function () {
      if (!this.enabled) {
        return;
      }

      if ((0, _ej2Base.isBlazor)() && this.itemTemplate) {
        this.DropDownBaseupdateBlazorTemplates(true, false, false, false);
      }

      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }

      this.beforePopupOpen = true;

      if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
        this.isActive = true;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      } else if ((0, _ej2Base.isNullOrUndefined)(this.list) || !(0, _ej2Base.isUndefined)(this.list) && this.list.classList.contains(_dropDownBase.dropDownBaseClasses.noData)) {
        this.renderList();
      } else if (this.isFiltering() && this.isServerBlazor) {
        this.renderList();
      }

      if (!this.isServerBlazor) {
        this.invokeRenderPopup();
      }

      if (this.isServerBlazor && !(0, _ej2Base.isNullOrUndefined)(this.list)) {
        this.invokeRenderPopup();
      }
    };

    DropDownList.prototype.invokeRenderPopup = function () {
      if (_ej2Base.Browser.isDevice && this.isFilterLayout()) {
        var proxy_2 = this;

        window.onpopstate = function () {
          proxy_2.hidePopup();
        };

        history.pushState({}, '');
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.list.children[0]) || this.list.classList.contains(_dropDownBase.dropDownBaseClasses.noData)) {
        this.renderPopup();
      }

      (0, _ej2Base.attributes)(this.targetElement(), {
        'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null
      });
    };

    DropDownList.prototype.clientRenderPopup = function (data, popupEle) {
      if (popupEle) {
        this.serverPopupEle = popupEle;
        this.list = popupEle.querySelector('.e-dropdownbase.e-content') ? popupEle.querySelector('.e-dropdownbase.e-content') : this.list;
        this.ulElement = this.list.querySelector('ul');
        this.liCollections = this.ulElement ? this.ulElement.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li) : [];
        this.listData = data;
        this.initRemoteRender = false;
        this.serverBlazorUpdateSelection();
        this.wireListEvents();

        if (this.isServerIncrementalSearch && this.searchKeyEvent) {
          this.isServerIncrementalSearch = false;
          this.initial = false;
          this.onServerIncrementalSearch(this.searchKeyEvent);
        }

        if (this.beforePopupOpen) {
          this.invokeRenderPopup();
        }
      } else if (data != null && this.listData !== data) {
        this.listData = data;
        this.initRemoteRender = false;
      }
    };

    DropDownList.prototype.updateclientItemData = function (data) {
      this.listData = data;
    };

    DropDownList.prototype.serverUpdateListElement = function (data, popupEle) {
      this.listData = data;

      if (this.ulElement) {
        this.liCollections = this.ulElement.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li);
      }
    };
    /**
     * Hides the popup if it is in an open state.
     * @returns void.
     */


    DropDownList.prototype.hidePopup = function (e) {
      var isHeader = this.headerTemplate ? true : false;
      var isFooter = this.headerTemplate ? true : false;
      this.DropDownBaseresetBlazorTemplates(false, false, false, false, false, isHeader, isFooter);

      if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {
        _ej2Inputs.Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);

        this.isEscapeKey = false;

        if (!(0, _ej2Base.isNullOrUndefined)(this.index)) {
          var element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);
          this.selectedLI = this.liCollections[this.index] || element;

          if (this.selectedLI) {
            this.updateSelectedItem(this.selectedLI, null, true);

            if (this.valueTemplate && this.itemData !== null) {
              this.setValueTemplate();
            }
          }
        } else {
          this.resetSelection();
        }
      }

      this.closePopup();
      var dataItem = this.getItemData();

      if (this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom || !(0, _ej2Base.isNullOrUndefined)(this.selectedLI) && this.inputElement.value !== dataItem.text)) {
        this.isSelectCustom = false;
        this.clearAll();
      }
    };
    /**
     * Sets the focus on the component for interaction.
     * @returns void.
     */


    DropDownList.prototype.focusIn = function (e) {
      if (!this.enabled) {
        return;
      }

      if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
        return;
      }

      var isFocused = false;

      if (this.preventFocus && _ej2Base.Browser.isDevice) {
        this.inputWrapper.container.tabIndex = 1;
        this.inputWrapper.container.focus();
        this.preventFocus = false;
        isFocused = true;
      }

      if (!isFocused) {
        this.targetElement().focus();
      }

      (0, _ej2Base.addClass)([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      this.onFocus(e);
    };
    /**
     * Moves the focus from the component if the component is already focused.
     * @returns void.
     */


    DropDownList.prototype.focusOut = function () {
      if (!this.enabled) {
        return;
      }

      this.isTyped = true;
      this.hidePopup();
      this.targetElement().blur();
      (0, _ej2Base.removeClass)([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */


    DropDownList.prototype.destroy = function () {
      this.isActive = false;
      this.hidePopup();
      this.unWireEvent();

      if (this.list) {
        this.unWireListEvents();

        if (this.isServerBlazor) {
          if (this.fields.groupBy && !this.isGroupChecking) {
            _ej2Base.EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);
          }
        }
      }

      if (!this.isServerBlazor) {
        if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {
          return;
        }

        var attrArray = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder', 'aria-owns', 'aria-labelledby', 'aria-haspopup', 'aria-expanded', 'aria-activedescendant', 'autocomplete', 'aria-readonly', 'autocorrect', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];

        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }

        this.inputElement.setAttribute('tabindex', this.tabIndex);
        this.inputElement.classList.remove('e-input');

        _ej2Inputs.Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);

        this.element.style.display = 'block';

        if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
          (0, _ej2Base.detach)(this.inputWrapper.container);
        } else {
          this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
          (0, _ej2Base.detach)(this.inputWrapper.container);
        }

        _super.prototype.destroy.call(this);
      }
    };

    ;
    /**
     * Gets all the list items bound on this component.
     * @returns Element[].
     */

    DropDownList.prototype.getItems = function () {
      if (!this.list) {
        if (this.dataSource instanceof _ej2Data.DataManager) {
          this.initRemoteRender = true;
        }

        this.renderList();
      }

      return this.ulElement ? _super.prototype.getItems.call(this) : [];
    };
    /**
     * Allows you to clear the selected values from the component.
     * @returns void.
     */


    DropDownList.prototype.clear = function () {
      this.value = null;
    };

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], DropDownList.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('300px')], DropDownList.prototype, "popupHeight", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], DropDownList.prototype, "popupWidth", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "placeholder", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "filterBarPlaceholder", void 0);

    __decorate([(0, _ej2Base.Property)({})], DropDownList.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "valueTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "headerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "footerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownList.prototype, "allowFiltering", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownList.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(null)], DropDownList.prototype, "index", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], DropDownList.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownList.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "filtering", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "blur", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownList.prototype, "focus", void 0);

    DropDownList = __decorate([_ej2Base.NotifyPropertyChanges], DropDownList);
    return DropDownList;
  }(_dropDownBase.DropDownBase);

  _exports.DropDownList = DropDownList;
});;
define('@syncfusion/ej2-dropdowns/src/drop-down-list/index',["exports", "./drop-down-list"], function (_exports, _dropDownList) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_dropDownList).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _dropDownList[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/index',["exports", "./common/index", "./drop-down-base/index", "./drop-down-list/index", "./combo-box/index", "./auto-complete/index", "./multi-select/index", "./list-box/index"], function (_exports, _index, _index2, _index3, _index4, _index5, _index6, _index7) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
  Object.keys(_index6).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index6[key];
  });
  Object.keys(_index7).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index7[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/list-box/index',["exports", "./list-box"], function (_exports, _listBox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_listBox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _listBox[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/list-box/list-box',["exports", "@syncfusion/ej2-inputs", "../drop-down-base/drop-down-base", "@syncfusion/ej2-base", "@syncfusion/ej2-lists", "@syncfusion/ej2-buttons", "@syncfusion/ej2-popups", "@syncfusion/ej2-data"], function (_exports, _ej2Inputs, _dropDownBase, _ej2Base, _ej2Lists, _ej2Buttons, _ej2Popups, _ej2Data) {
  "use strict";

  _exports.__esModule = true;
  _exports.ListBox = _exports.ToolbarSettings = _exports.SelectionSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>


  var ITEMTEMPLATE_PROPERTY = 'ItemTemplate';

  var SelectionSettings =
  /** @class */
  function (_super) {
    __extends(SelectionSettings, _super);

    function SelectionSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('Multiple')], SelectionSettings.prototype, "mode", void 0);

    __decorate([(0, _ej2Base.Property)(false)], SelectionSettings.prototype, "showCheckbox", void 0);

    __decorate([(0, _ej2Base.Property)(false)], SelectionSettings.prototype, "showSelectAll", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], SelectionSettings.prototype, "checkboxPosition", void 0);

    return SelectionSettings;
  }(_ej2Base.ChildProperty);

  _exports.SelectionSettings = SelectionSettings;

  var ToolbarSettings =
  /** @class */
  function (_super) {
    __extends(ToolbarSettings, _super);

    function ToolbarSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)([])], ToolbarSettings.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('Right')], ToolbarSettings.prototype, "position", void 0);

    return ToolbarSettings;
  }(_ej2Base.ChildProperty);

  _exports.ToolbarSettings = ToolbarSettings;

  /**
   * The ListBox is a graphical user interface component used to display a list of items.
   * Users can select one or more items in the list using a checkbox or by keyboard selection.
   * It supports sorting, grouping, reordering, and drag and drop of items.
   * ```html
   * <select id="listbox">
   *      <option value='1'>Badminton</option>
   *      <option value='2'>Basketball</option>
   *      <option value='3'>Cricket</option>
   *      <option value='4'>Football</option>
   *      <option value='5'>Tennis</option>
   * </select>
   * ```
   * ```typescript
   * <script>
   *   var listObj = new ListBox();
   *   listObj.appendTo("#listbox");
   * </script>
   * ```
   */
  var ListBox =
  /** @class */
  function (_super) {
    __extends(ListBox, _super);
    /**
     * Constructor for creating the ListBox component.
     */


    function ListBox(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isValidKey = false;
      _this.keyDownStatus = false;
      return _this;
    }

    ListBox_1 = ListBox;
    /**
     * Adds a new item to the popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     * @private
     */

    ListBox.prototype.addItem = function (items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };

    ;
    /**
     * Build and render the component
     * @private
     */

    ListBox.prototype.render = function () {
      this.inputString = '';
      this.initLoad = true;
      this.isCustomFiltering = false;
      this.initialSelectedOptions = this.value;

      _super.prototype.render.call(this);

      this.renderComplete();
    };

    ListBox.prototype.initWrapper = function () {
      var hiddenSelect = this.createElement('select', {
        className: 'e-hidden-select',
        attrs: {
          'multiple': ''
        }
      });
      this.list.classList.add('e-listbox-wrapper');

      if (this.itemTemplate) {
        this.list.classList.add('e-list-template');
      }

      this.list.classList.add('e-wrapper');

      if (this.element.tagName === 'EJS-LISTBOX') {
        this.element.setAttribute('tabindex', '0');

        if (this.initLoad) {
          this.element.appendChild(this.list);
        }
      } else {
        if (this.initLoad) {
          this.element.parentElement.insertBefore(this.list, this.element);
        }

        this.list.insertBefore(this.element, this.list.firstChild);
        this.element.style.display = 'none';
      }

      this.list.insertBefore(hiddenSelect, this.list.firstChild);

      if (this.list.getElementsByClassName(_ej2Lists.cssClass.li)[0]) {
        this.list.getElementsByClassName(_ej2Lists.cssClass.li)[0].classList.remove(_dropDownBase.dropDownBaseClasses.focus);
      }

      (0, _ej2Base.removeClass)([this.list], [_dropDownBase.dropDownBaseClasses.content, _dropDownBase.dropDownBaseClasses.root]);
      this.validationAttribute(this.element, hiddenSelect);
      this.list.setAttribute('role', 'listbox');
      (0, _ej2Base.attributes)(this.list, {
        'role': 'listbox',
        'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false'
      });

      if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
        var l10nSelect = new _ej2Base.L10n(this.getModuleName(), {
          selectAllText: 'Select All',
          unSelectAllText: 'Unselect All'
        }, this.locale);
        this.showSelectAll = true;
        this.selectAllText = l10nSelect.getConstant('selectAllText');
        this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');
        this.popupWrapper = this.list;
        this.checkBoxSelectionModule.checkAllParent = null;
        this.notify('selectAll', {});
      }
    };

    ListBox.prototype.initDraggable = function () {
      var _this = this;

      if (this.allowDragAndDrop) {
        new _ej2Lists.Sortable(this.ulElement, {
          scope: this.scope,
          itemClass: _ej2Lists.cssClass.li,
          dragStart: this.triggerDragStart.bind(this),
          drag: this.triggerDrag.bind(this),
          beforeDrop: this.beforeDragEnd.bind(this),
          drop: this.dragEnd.bind(this),
          placeHolder: function () {
            return _this.createElement('span', {
              className: 'e-placeholder'
            });
          },
          helper: function (e) {
            var ele = e.sender.cloneNode(true);
            ele.style.width = _this.getItems()[0].offsetWidth + 'px';

            if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {
              ele.appendChild(_this.createElement('span', {
                className: 'e-list-badge',
                innerHTML: _this.value.length + ''
              }));
            }

            return ele;
          }
        });
      }
    };

    ListBox.prototype.updateActionCompleteData = function (li, item) {
      this.jsonData.push(item);
    };

    ListBox.prototype.initToolbar = function () {
      var scope;
      var pos = this.toolbarSettings.position;
      var prevScope = this.element.getAttribute('data-value');

      if (this.toolbarSettings.items.length) {
        var toolElem = this.createElement('div', {
          className: 'e-listbox-tool',
          attrs: {
            'role': 'toolbar'
          }
        });
        var wrapper = this.createElement('div', {
          className: 'e-listboxtool-wrapper e-' + pos.toLowerCase()
        });
        this.list.parentElement.insertBefore(wrapper, this.list);
        wrapper.appendChild(pos === 'Right' ? this.list : toolElem);
        wrapper.appendChild(pos === 'Right' ? toolElem : this.list);
        this.createButtons(toolElem);

        if (!this.element.id) {
          this.element.id = (0, _ej2Base.getUniqueID)('e-' + this.getModuleName());
        }

        if (this.scope) {
          document.querySelector(this.scope).setAttribute('data-value', this.element.id);
        } else {
          this.updateToolBarState();
        }
      }

      scope = this.element.getAttribute('data-value');

      if (prevScope && scope && prevScope !== scope) {
        this.tBListBox = (0, _ej2Base.getComponent)(document.getElementById(prevScope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      } else if (scope) {
        this.tBListBox = (0, _ej2Base.getComponent)(document.getElementById(scope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      }
    };

    ListBox.prototype.createButtons = function (toolElem) {
      var _this = this;

      var btn;
      var ele;
      var title;
      var l10n = new _ej2Base.L10n(this.getModuleName(), {
        moveUp: 'Move Up',
        moveDown: 'Move Down',
        moveTo: 'Move To',
        moveFrom: 'Move From',
        moveAllTo: 'Move All To',
        moveAllFrom: 'Move All From'
      }, this.locale);
      this.toolbarSettings.items.forEach(function (value) {
        title = l10n.getConstant(value);
        ele = _this.createElement('button', {
          attrs: {
            'type': 'button',
            'data-value': value,
            'title': title,
            'aria-label': title
          }
        });
        toolElem.appendChild(ele);
        btn = new _ej2Buttons.Button({
          iconCss: 'e-icons e-' + value.toLowerCase()
        }, ele);
        btn.createElement = _this.createElement;
      });
    };

    ListBox.prototype.validationAttribute = function (input, hiddenSelect) {
      _super.prototype.validationAttribute.call(this, input, hiddenSelect);

      hiddenSelect.required = input.required;
      input.required = false;
    };

    ListBox.prototype.setHeight = function () {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      ele.style.height = (0, _ej2Base.formatUnit)(this.height);
    };

    ListBox.prototype.setCssClass = function () {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

      if (this.cssClass) {
        (0, _ej2Base.addClass)([wrap], this.cssClass.split(' '));
      }

      if (this.enableRtl) {
        (0, _ej2Base.addClass)([wrap], 'e-rtl');
      }
    };

    ListBox.prototype.setEnable = function () {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

      if (this.enabled) {
        (0, _ej2Base.removeClass)([ele], _ej2Lists.cssClass.disabled);
      } else {
        (0, _ej2Base.addClass)([ele], _ej2Lists.cssClass.disabled);
      }
    };

    ListBox.prototype.showSpinner = function () {
      if (!this.spinner) {
        this.spinner = this.createElement('div', {
          className: 'e-listbox-wrapper',
          styles: 'height:' + (0, _ej2Base.formatUnit)(this.height)
        });
      }

      this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
      (0, _ej2Popups.createSpinner)({
        target: this.spinner
      }, this.createElement);
      (0, _ej2Popups.showSpinner)(this.spinner);
    };

    ListBox.prototype.hideSpinner = function () {
      if (this.spinner.querySelector('.e-spinner-pane')) {
        (0, _ej2Popups.hideSpinner)(this.spinner);
      }

      if (this.spinner.parentElement) {
        (0, _ej2Base.detach)(this.spinner);
      }
    };

    ListBox.prototype.onInput = function () {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }

      this.keyDownStatus = false;
    };

    ListBox.prototype.onActionComplete = function (ulElement, list, e) {
      var searchEle;

      if (this.allowFiltering) {
        searchEle = this.list.getElementsByClassName('e-filter-parent')[0];
      }

      _super.prototype.onActionComplete.call(this, ulElement, list, e);

      if (this.allowFiltering && !(0, _ej2Base.isNullOrUndefined)(searchEle)) {
        this.list.insertBefore(searchEle, this.list.firstElementChild);
      }

      this.initWrapper();
      this.setSelection();
      this.initDraggable();
      this.mainList = this.ulElement;

      if (this.initLoad) {
        this.jsonData = [];
        (0, _ej2Base.extend)(this.jsonData, list, []);
        this.initToolbarAndStyles();
        this.wireEvents();

        if (this.showCheckbox) {
          this.setCheckboxPosition();
        }

        if (this.allowFiltering) {
          this.setFiltering();
        }
      } else {
        if (this.allowFiltering) {
          this.list.getElementsByClassName('e-input-filter')[0].focus();
        }
      }

      this.initLoad = false;
    };

    ListBox.prototype.initToolbarAndStyles = function () {
      this.initToolbar();
      this.setCssClass();
      this.setEnable();
      this.setHeight();
    };

    ListBox.prototype.triggerDragStart = function (args) {
      var _this = this;

      var badge;
      args = (0, _ej2Base.extend)(this.getDragArgs(args), {
        dragSelected: true
      });

      if (_ej2Base.Browser.isIos) {
        this.list.style.overflow = 'hidden';
      }

      this.trigger('dragStart', args, function (dragEventArgs) {
        _this.allowDragAll = dragEventArgs.dragSelected;

        if (!_this.allowDragAll) {
          badge = _this.ulElement.getElementsByClassName('e-list-badge')[0];

          if (badge) {
            (0, _ej2Base.detach)(badge);
          }
        }

        if ((0, _ej2Base.isBlazor)()) {
          args.bindEvents(args.dragElement);
        }
      });
    };

    ListBox.prototype.triggerDrag = function (args) {
      this.trigger('drag', this.getDragArgs(args));
      var listObj = this.getComponent(args.target);

      if (listObj && listObj.listData.length === 0) {
        listObj.ulElement.innerHTML = '';
      }
    };

    ListBox.prototype.beforeDragEnd = function (args) {
      var dragValue = args.droppedElement.getAttribute('data-value');

      if (this.value.indexOf(dragValue) > -1) {
        args.items = this.getDataByValues(this.value);
      } else {
        args.items = this.getDataByValues([dragValue]);
      }

      this.trigger('beforeDrop', args);
    }; // tslint:disable-next-line:max-func-body-length


    ListBox.prototype.dragEnd = function (args) {
      var _this = this;

      var listData;
      var liColl;
      var jsonData;
      var droppedData;
      var selectedOptions;
      var sortedData;
      var dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));
      var listObj = this.getComponent(args.droppedElement);
      var getArgs = this.getDragArgs({
        target: args.droppedElement
      }, true);
      var sourceArgs = {
        previousData: this.dataSource
      };
      var destArgs = {
        previousData: listObj.dataSource
      };
      var dragArgs = (0, _ej2Base.extend)({}, getArgs, {
        target: args.target,
        source: {
          previousData: this.dataSource
        }
      });

      if (listObj !== this) {
        var sourceArgs1 = (0, _ej2Base.extend)(sourceArgs, {
          currentData: this.listData
        });
        dragArgs = (0, _ej2Base.extend)(dragArgs, {
          source: sourceArgs1,
          destination: destArgs
        });
      }

      if (_ej2Base.Browser.isIos) {
        this.list.style.overflow = '';
      }

      if (listObj === this) {
        var ul_1 = this.ulElement;
        listData = [].slice.call(this.listData);
        liColl = [].slice.call(this.liCollections);
        jsonData = [].slice.call(this.jsonData);
        sortedData = [].slice.call(this.sortedData);
        var toSortIdx_1 = args.currentIndex;
        var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);
        var rIdx = listData.indexOf(this.getDataByValue(dropValue));
        var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
        var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
        listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);
        jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);
        sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);
        liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);

        if (this.allowDragAll) {
          selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
          selectedOptions.forEach(function (value) {
            if (value !== dropValue) {
              var idx = listData.indexOf(_this.getDataByValue(value));
              var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));
              var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));

              if (idx > toIdx_1) {
                toIdx_1++;
              }

              listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);
              jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);
              sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);
              liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);
              ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName('e-placeholder')[0]);
            }
          });
        }

        this.listData = listData;
        this.jsonData = jsonData;
        this.sortedData = sortedData;
        this.liCollections = liColl;
      } else {
        var li_1;
        var fLiColl_1 = [].slice.call(this.liCollections);
        var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
        var ul_2 = listObj.ulElement;
        listData = [].slice.call(listObj.listData);
        liColl = [].slice.call(listObj.liCollections);
        jsonData = [].slice.call(listObj.jsonData);
        sortedData = [].slice.call(listObj.sortedData);
        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
        var fListData_1 = [].slice.call(this.listData);
        var fSortData_1 = [].slice.call(this.sortedData);
        selectedOptions.forEach(function (value) {
          droppedData = _this.getDataByValue(value);

          var srcIdx = _this.listData.indexOf(droppedData);

          var jsonSrcIdx = _this.jsonData.indexOf(droppedData);

          var sortIdx = _this.sortedData.indexOf(droppedData);

          fListData_1.splice(srcIdx, 1);

          _this.jsonData.splice(jsonSrcIdx, 1);

          fSortData_1.splice(sortIdx, 1);
          _this.listData = fListData_1;
          _this.sortedData = fSortData_1;
          var rLi = fLiColl_1.splice(srcIdx, 1)[0];
          var destIdx = value === dropValue ? args.currentIndex : currIdx_1;
          listData.splice(destIdx, 0, droppedData);
          jsonData.splice(destIdx, 0, droppedData);
          liColl.splice(destIdx, 0, rLi);
          sortedData.splice(destIdx, 0, droppedData);

          if (!value) {
            var liCollElem = _this.getItems();

            for (var i = 0; i < liCollElem.length; i++) {
              if (liCollElem[i].getAttribute('data-value') === null && liCollElem[i].classList.contains('e-list-item')) {
                li_1 = liCollElem[i];
                break;
              }
            }
          } else {
            li_1 = _this.getItems()[_this.getIndexByValue(value)];
          }

          _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);

          ul_2.insertBefore(li_1, ul_2.getElementsByClassName('e-placeholder')[0]);
          currIdx_1++;
        });
        this.updateSelectedOptions();

        if (this.fields.groupBy) {
          this.ulElement.innerHTML = this.renderItems(this.listData, this.fields).innerHTML;
          this.setSelection();
        }

        if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {
          var sortabale = (0, _ej2Base.getComponent)(ul_2, 'sortable');
          ul_2.innerHTML = listObj.renderItems(listData, listObj.fields).innerHTML;

          if (sortabale.placeHolderElement) {
            ul_2.appendChild(sortabale.placeHolderElement);
          }

          ul_2.appendChild(args.helper);
          listObj.setSelection();
        }

        this.liCollections = fLiColl_1;
        listObj.liCollections = liColl;
        listObj.jsonData = (0, _ej2Base.extend)([], [], jsonData, false);
        listObj.listData = (0, _ej2Base.extend)([], [], listData, false);
        listObj.sortedData = (0, _ej2Base.extend)([], [], sortedData, false);

        if (this.listData.length === 0) {
          this.l10nUpdate();
        }
      }

      if (this === listObj) {
        var sourceArgs1 = (0, _ej2Base.extend)(sourceArgs, {
          currentData: listData
        });
        dragArgs = (0, _ej2Base.extend)(dragArgs, {
          source: sourceArgs1
        });
      } else {
        var dragArgs1 = (0, _ej2Base.extend)(destArgs, {
          currentData: listData
        });
        dragArgs = (0, _ej2Base.extend)(dragArgs, {
          destination: dragArgs1
        });
      }

      this.trigger('drop', dragArgs);
    };

    ListBox.prototype.removeSelected = function (listObj, elems) {
      if (listObj.selectionSettings.showCheckbox) {
        elems.forEach(function (ele) {
          ele.getElementsByClassName('e-frame')[0].classList.remove('e-check');
        });
      } else {
        (0, _ej2Base.removeClass)(elems, _ej2Lists.cssClass.selected);
      }
    };

    ListBox.prototype.getCurIdx = function (listObj, idx) {
      if (listObj.fields.groupBy) {
        idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function (ele) {
          return ele.classList.contains(_ej2Lists.cssClass.group);
        }).length;
      }

      return idx;
    };

    ListBox.prototype.getComponent = function (li) {
      var listObj;
      var ele = this.element.tagName === 'EJS-LISTBOX' ? (0, _ej2Base.closest)(li, '.e-listbox') : (0, _ej2Base.closest)(li, '.e-listbox-wrapper') && (0, _ej2Base.closest)(li, '.e-listbox-wrapper').querySelector('.e-listbox');

      if (ele) {
        listObj = (0, _ej2Base.getComponent)(ele, this.getModuleName());
      }

      return listObj;
    };

    ListBox.prototype.listOption = function (dataSource, fields) {
      this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);
      this.listCurrentOptions = (0, _ej2Base.extend)({}, this.listCurrentOptions, {
        itemCreated: this.triggerBeforeItemRender.bind(this)
      }, true);
      this.notify('listoption', {
        module: 'CheckBoxSelection'
      });
      return this.listCurrentOptions;
    };

    ListBox.prototype.triggerBeforeItemRender = function (e) {
      e.item.setAttribute('tabindex', '-1');
      this.trigger('beforeItemRender', {
        element: e.item,
        item: e.curData
      });
    };

    ListBox.prototype.requiredModules = function () {
      var modules = [];

      if (this.selectionSettings.showCheckbox) {
        modules.push({
          member: 'CheckBoxSelection',
          args: [this]
        });
      }

      return modules;
    };
    /**
     * This method is used to enable or disable the items in the ListBox based on the items and enable argument.
     * @param items Text items that needs to be enabled/disabled.
     * @param enable Set `true`/`false` to enable/disable the list items.
     * @returns void
     */


    ListBox.prototype.enableItems = function (items, enable) {
      var _this = this;

      if (enable === void 0) {
        enable = true;
      }

      var li;
      items.forEach(function (item) {
        li = _this.findListElement(_this.list, 'li', 'data-value', _this.getValueByText(item));

        if (enable) {
          (0, _ej2Base.removeClass)([li], _ej2Lists.cssClass.disabled);
          li.removeAttribute('aria-disabled');
        } else {
          (0, _ej2Base.addClass)([li], _ej2Lists.cssClass.disabled);
          li.setAttribute('aria-disabled', 'true');
        }
      });
    };
    /**
     * Based on the state parameter, specified list item will be selected/deselected.
     * @param items Array of text value of the item.
     * @param state Set `true`/`false` to select/un select the list items.
     * @returns void
     */


    ListBox.prototype.selectItems = function (items, state) {
      if (state === void 0) {
        state = true;
      }

      this.setSelection(items, state, true);
      this.updateSelectedOptions();
    };
    /**
     * Based on the state parameter, entire list item will be selected/deselected.
     * @param state Set `true`/`false` to select/un select the entire list items.
     * @returns void
     */


    ListBox.prototype.selectAll = function (state) {
      if (state === void 0) {
        state = true;
      }

      this.selectAllItems(state);
    };
    /**
     * Adds a new item to the list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the list.
     * @returns {void}.
     */


    ListBox.prototype.addItems = function (items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    /**
     * Removes a item from the list. By default, removed the last item in the list,
     * but you can remove based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to remove the item from the list.
     * @returns {void}.
     */


    ListBox.prototype.removeItems = function (items, itemIndex) {
      this.removeItem(items, itemIndex);
    };
    /**
     * Removes a item from the list. By default, removed the last item in the list,
     * but you can remove based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to remove the item from the list.
     * @returns {void}.
     */


    ListBox.prototype.removeItem = function (items, itemIndex) {
      var liCollections = [];
      var liElement = this.list.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li);

      if (items) {
        items = items instanceof Array ? items : [items];
        var fields = this.fields;
        var dataValue = void 0;
        var objValue = void 0;
        var dupData = [];
        var itemIdx = void 0;
        (0, _ej2Base.extend)(dupData, [], this.listData);

        for (var j = 0; j < items.length; j++) {
          if (items[j] instanceof Object) {
            dataValue = (0, _ej2Base.getValue)(fields.value, items[j]);
          } else {
            dataValue = items[j].toString();
          }

          for (var i = 0, len = dupData.length; i < len; i++) {
            if (dupData[i] instanceof Object) {
              objValue = (0, _ej2Base.getValue)(fields.value, dupData[i]);
            } else {
              objValue = dupData[i].toString();
            }

            if (objValue === dataValue) {
              itemIdx = this.getIndexByValue(dataValue);
              liCollections.push(liElement[itemIdx]);
              this.listData.splice(i, 1);
              this.updateLiCollection(itemIdx);
            }
          }
        }
      } else {
        itemIndex = itemIndex ? itemIndex : 0;
        liCollections.push(liElement[itemIndex]);
        this.listData.splice(itemIndex, 1);
        this.updateLiCollection(itemIndex);
      }

      for (var i = 0; i < liCollections.length; i++) {
        this.ulElement.removeChild(liCollections[i]);
      }
    };
    /**
     * Gets the array of data Object that matches the given array of values.
     * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.
     * @returns object[].
     */


    ListBox.prototype.getDataByValues = function (value) {
      var data = [];

      for (var i = 0; i < value.length; i++) {
        data.push(this.getDataByValue(value[i]));
      }

      return data;
    };
    /**
     * Moves the given value(s) / selected value(s) upwards.
     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).
     * @returns {void}
     */


    ListBox.prototype.moveUp = function (value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem);
    };
    /**
     * Moves the given value(s) / selected value(s) downwards.
     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).
     * @returns {void}
     */


    ListBox.prototype.moveDown = function (value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(false, false, elem);
    };
    /**
     * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.
     * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.
     * @returns {void}
     */


    ListBox.prototype.moveTo = function (value, index, targetId) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      var tlistbox = targetId ? (0, _ej2Base.getComponent)(targetId, ListBox_1) : this.getScopedListBox();
      this.moveData(this, tlistbox, false, elem, index);
    };
    /**
     * Moves all the values from one ListBox to the scoped ListBox.
     * @param  { string } targetId - Specifies the scoped ListBox ID.
     * @param  { string } index - Specifies the index to where the items moved.
     * @returns {void}
     */


    ListBox.prototype.moveAllTo = function (targetId, index) {
      var tlistbox = targetId ? (0, _ej2Base.getComponent)(targetId, ListBox_1) : this.getScopedListBox();
      this.moveAllData(this, tlistbox, false, index);
    };
    /**
     * Returns the updated dataSource in ListBox
     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}
     */


    ListBox.prototype.getDataList = function () {
      return this.jsonData;
    };
    /**
     * Returns the sorted Data in ListBox
     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}
     */


    ListBox.prototype.getSortedList = function () {
      var sortData;
      var tempData;
      sortData = tempData = this.sortedData;

      if (this.fields.groupBy) {
        sortData = [];

        for (var i = 0; i < tempData.length; i++) {
          if (tempData[i].isHeader) {
            continue;
          }

          sortData.push(tempData[i]);
        }
      }

      return sortData;
    };

    ListBox.prototype.getElemByValue = function (value) {
      var elem = [];

      for (var i = 0; i < value.length; i++) {
        elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
      }

      return elem;
    };

    ListBox.prototype.updateLiCollection = function (index) {
      var tempLi = [].slice.call(this.liCollections);
      tempLi.splice(index, 1);
      this.liCollections = tempLi;
    };

    ListBox.prototype.selectAllItems = function (state, event) {
      var _this = this;

      [].slice.call(this.getItems()).forEach(function (li) {
        if (!li.classList.contains(_ej2Lists.cssClass.disabled)) {
          if (_this.selectionSettings.showCheckbox) {
            var ele = li.getElementsByClassName('e-check')[0];

            if (!ele && state || ele && !state) {
              _this.notify('updatelist', {
                li: li
              });

              if (_this.maximumSelectionLength >= _this.list.querySelectorAll('.e-list-item span.e-check').length) {
                _this.checkMaxSelection();
              }
            }
          } else {
            if (state) {
              li.classList.add(_ej2Lists.cssClass.selected);
            } else {
              li.classList.remove(_ej2Lists.cssClass.selected);
            }
          }
        }
      });
      this.updateSelectedOptions();

      if (this.allowFiltering && this.selectionSettings.showCheckbox) {
        var liEle = this.list.getElementsByTagName('li');
        var index = 0;

        if (state) {
          var _loop_1 = function () {
            var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute('data-value'));

            if (!this_1.value.some(function (e) {
              return e === dataValue1;
            })) {
              this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute('data-value')));
            }
          };

          var this_1 = this;

          for (index = 0; index < liEle.length; index++) {
            _loop_1();
          }
        } else {
          var _loop_2 = function () {
            var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute('data-value'));
            this_2.value = this_2.value.filter(function (e) {
              return e !== dataValue2;
            });
          };

          var this_2 = this;

          for (index = 0; index < liEle.length; index++) {
            _loop_2();
          }
        }

        if (document.querySelectorAll('ul').length < 2) {
          this.updateMainList();
        }
      }

      this.triggerChange(this.getSelectedItems(), event);
    };

    ListBox.prototype.updateMainList = function () {
      var mainList = this.mainList.querySelectorAll('.e-list-item');
      var ulList = this.ulElement.querySelectorAll('.e-list-item');
      var mainCount = mainList.length;
      var ulEleCount = ulList.length;

      if (this.selectionSettings.showCheckbox || document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount) {
        var listindex = 0;
        var valueindex = 0;
        var count = 0;

        for (listindex; listindex < mainCount;) {
          if (this.value) {
            for (valueindex; valueindex < this.value.length; valueindex++) {
              if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {
                count++;
              }
            }
          }

          if (!count && this.selectionSettings.showCheckbox) {
            mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');
          }

          if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {
            this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);
            listindex = 0;
          } else {
            listindex++;
          }

          count = 0;
          valueindex = 0;
        }
      }
    };

    ListBox.prototype.wireEvents = function () {
      var form = (0, _ej2Base.closest)(this.element, 'form');
      var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;

      _ej2Base.EventHandler.add(this.list, 'click', this.clickHandler, this);

      _ej2Base.EventHandler.add(wrapper, 'keydown', this.keyDownHandler, this);

      _ej2Base.EventHandler.add(wrapper, 'focusout', this.focusOutHandler, this);

      this.wireToolbarEvent();

      if (this.selectionSettings.showCheckbox) {
        _ej2Base.EventHandler.remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);
      }

      if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {
        _ej2Base.EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);
      }

      if (form) {
        _ej2Base.EventHandler.add(form, 'reset', this.formResetHandler, this);
      }
    };

    ListBox.prototype.wireToolbarEvent = function () {
      if (this.toolbarSettings.items.length) {
        _ej2Base.EventHandler.add(this.getToolElem(), 'click', this.toolbarClickHandler, this);
      }
    };

    ListBox.prototype.unwireEvents = function () {
      var form = (0, _ej2Base.closest)(this.element, 'form');
      var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;

      _ej2Base.EventHandler.remove(this.list, 'click', this.clickHandler);

      _ej2Base.EventHandler.remove(wrapper, 'keydown', this.keyDownHandler);

      _ej2Base.EventHandler.remove(wrapper, 'focusout', this.focusOutHandler);

      if (this.toolbarSettings.items.length) {
        _ej2Base.EventHandler.remove(this.getToolElem(), 'click', this.toolbarClickHandler);
      }

      if (form) {
        _ej2Base.EventHandler.remove(form, 'reset', this.formResetHandler);
      }
    };

    ListBox.prototype.clickHandler = function (e) {
      this.selectHandler(e);
    };

    ;

    ListBox.prototype.checkSelectAll = function () {
      var searchCount = 0;
      var liItems = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li);

      for (var i = 0; i < liItems.length; i++) {
        if (!liItems[i].classList.contains('e-disabled')) {
          searchCount++;
        }
      }

      var len = this.getSelectedItems().length;

      if (this.showSelectAll && searchCount) {
        this.notify('checkSelectAll', {
          module: 'CheckBoxSelection',
          value: searchCount === len ? 'check' : len === 0 ? 'uncheck' : 'indeterminate'
        });
      }
    };

    ListBox.prototype.getQuery = function (query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _ej2Data.Query();

      if (this.allowFiltering) {
        var filterType = this.inputString === '' ? 'contains' : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;

        if (!(this.dataSource instanceof _ej2Data.DataManager) && dataType === 'string' || dataType === 'number') {
          filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : '';
          filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new _ej2Data.Query();
      }

      return filterQuery;
    };

    ListBox.prototype.setFiltering = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.filterParent)) {
        this.filterParent = this.createElement('span', {
          className: 'e-filter-parent'
        });
        this.filterInput = this.createElement('input', {
          attrs: {
            type: 'text'
          },
          className: 'e-input-filter'
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);

        var filterInputObj = _ej2Inputs.Input.createInput({
          element: this.filterInput
        }, this.createElement);

        (0, _ej2Base.append)([filterInputObj.container], this.filterParent);
        (0, _ej2Base.prepend)([this.filterParent], this.list);
        (0, _ej2Base.attributes)(this.filterInput, {
          'aria-disabled': 'false',
          'aria-owns': this.element.id + '_options',
          'role': 'listbox',
          'aria-activedescendant': null,
          'autocomplete': 'off',
          'autocorrect': 'off',
          'autocapitalize': 'off',
          'spellcheck': 'false'
        });
        this.inputString = this.filterInput.value;

        _ej2Base.EventHandler.add(this.filterInput, 'input', this.onInput, this);

        _ej2Base.EventHandler.add(this.filterInput, 'keyup', this.KeyUp, this);

        _ej2Base.EventHandler.add(this.filterInput, 'keydown', this.onKeyDown, this);

        return filterInputObj;
      }
    };

    ListBox.prototype.selectHandler = function (e, isKey) {
      var isSelect = true;
      var currSelIdx;
      var li = (0, _ej2Base.closest)(e.target, '.' + _ej2Lists.cssClass.li);
      var selectedLi = [li];

      if (li) {
        currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);

        if (!this.selectionSettings.showCheckbox) {
          if ((e.ctrlKey || _ej2Base.Browser.isDevice) && this.isSelected(li)) {
            li.classList.remove(_ej2Lists.cssClass.selected);
            li.removeAttribute('aria-selected');
            isSelect = false;
          } else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || _ej2Base.Browser.isDevice))) {
            this.getSelectedItems().forEach(function (ele) {
              ele.removeAttribute('aria-selected');
            });
            (0, _ej2Base.removeClass)(this.getSelectedItems(), _ej2Lists.cssClass.selected);
          }
        } else {
          isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');
        }

        if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {
          selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function (ele) {
            return ele.classList.contains(_ej2Lists.cssClass.li);
          });
        } else {
          this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        }

        if (isSelect) {
          if (!this.selectionSettings.showCheckbox) {
            (0, _ej2Base.addClass)(selectedLi, _ej2Lists.cssClass.selected);
          }

          selectedLi.forEach(function (ele) {
            ele.setAttribute('aria-selected', 'true');
          });
          this.list.setAttribute('aria-activedescendant', li.id);
        }

        if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
          this.notify('updatelist', {
            li: li,
            e: e
          });
        }

        if (this.allowFiltering && !isKey) {
          var liDataValue_1 = this.getFormattedValue(li.getAttribute('data-value'));

          if (!isSelect) {
            this.value = this.value.filter(function (value1) {
              return value1 !== liDataValue_1;
            });
          } else {
            var values = [];
            (0, _ej2Base.extend)(values, this.value);
            values.push(liDataValue_1);
            this.value = values;
          }

          if (document.querySelectorAll('ul').length < 2) {
            this.updateMainList();
          }
        }

        this.updateSelectedOptions();
        this.triggerChange(this.getSelectedItems(), e);
        this.checkMaxSelection();
      }
    };

    ListBox.prototype.triggerChange = function (selectedLis, event) {
      this.trigger('change', {
        elements: selectedLis,
        items: this.getDataByElements(selectedLis),
        value: this.value,
        event: event
      });
    };

    ListBox.prototype.getDataByElems = function (elems) {
      var data = [];

      for (var i = 0, len = elems.length; i < len; i++) {
        data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));
      }

      return data;
    };

    ListBox.prototype.getDataByElements = function (elems) {
      var data = [];
      var value;
      var sIdx = 0;

      if (!(0, _ej2Base.isNullOrUndefined)(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;

        if (type === 'string' || type === 'number' || type === 'boolean') {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];

            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute('data-value'));

              if (!(0, _ej2Base.isNullOrUndefined)(item) && item === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }

            if (elems.length === data.length) {
              break;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];

            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute('data-value'));

              if (!(0, _ej2Base.isNullOrUndefined)(item) && (0, _ej2Base.getValue)(this.fields.value ? this.fields.value : 'value', item) === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }

            if (elems.length === data.length) {
              break;
            }
          }
        }

        return data;
      }

      return null;
    };

    ListBox.prototype.checkMaxSelection = function () {
      var limit = this.list.querySelectorAll('.e-list-item span.e-check').length;

      if (this.selectionSettings.showCheckbox) {
        var index = 0;
        var liCollElem = void 0;
        liCollElem = this.list.getElementsByClassName('e-list-item');

        for (index; index < liCollElem.length; index++) {
          if (!liCollElem[index].querySelector('.e-frame.e-check')) {
            if (limit === this.maximumSelectionLength) {
              liCollElem[index].classList.add('e-disable');
            } else if (liCollElem[index].classList.contains('e-disable')) {
              liCollElem[index].classList.remove('e-disable');
            }
          }
        }
      }
    };

    ListBox.prototype.toolbarClickHandler = function (e) {
      var btn = (0, _ej2Base.closest)(e.target, 'button');

      if (btn) {
        this.toolbarAction = btn.getAttribute('data-value');

        if (btn.disabled) {
          return;
        }

        switch (this.toolbarAction) {
          case 'moveUp':
            this.moveUpDown(true);
            break;

          case 'moveDown':
            this.moveUpDown();
            break;

          case 'moveTo':
            this.moveItemTo();
            break;

          case 'moveFrom':
            this.moveItemFrom();
            break;

          case 'moveAllTo':
            this.moveAllItemTo();
            break;

          case 'moveAllFrom':
            this.moveAllItemFrom();
            break;
        }
      }
    };

    ListBox.prototype.moveUpDown = function (isUp, isKey, value) {
      var _this = this;

      var elems = this.getSelectedItems();
      var tempItems;

      if (value) {
        elems = value;
      }

      if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
        return;
      }

      tempItems = this.getDataByElems(elems);
      var localDataArgs = {
        cancel: false,
        items: tempItems,
        eventName: this.toolbarAction
      };
      this.trigger('actionBegin', localDataArgs);

      if (localDataArgs.cancel) {
        return;
      }

      (isUp ? elems : elems.reverse()).forEach(function (ele) {
        var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll('.e-list-item'), ele);
        var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);
        (0, _ej2Lists.moveTo)(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);

        _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
      });
      this.trigger('actionComplete', {
        items: tempItems,
        eventName: this.toolbarAction
      });
      elems[0].focus();

      if (!isKey && this.toolbarSettings.items.length) {
        this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();
      }

      this.updateToolBarState();
    };

    ListBox.prototype.moveItemTo = function () {
      this.moveData(this, this.getScopedListBox());
    };

    ListBox.prototype.moveItemFrom = function () {
      this.moveData(this.getScopedListBox(), this);
    };
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @private
     */
    // tslint:disable-next-line:max-func-body-length


    ListBox.prototype.moveData = function (fListBox, tListBox, isKey, value, index) {
      var idx = [];
      var dataIdx = [];
      var jsonIdx = [];
      var sortIdx = [];
      var listData = [].slice.call(fListBox.listData);
      var tListData = [].slice.call(tListBox.listData);
      var sortData = [].slice.call(fListBox.sortedData);
      var tSortData = [].slice.call(tListBox.sortedData);
      var fliCollections = [].slice.call(fListBox.liCollections);
      var dataLiIdx = [];
      var tliCollections = [].slice.call(tListBox.liCollections);
      var tempItems = [];
      var data = [];
      var elems = fListBox.getSelectedItems();

      if (value) {
        elems = value;
      }

      var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy;
      fListBox.value = [];

      if (elems.length) {
        this.removeSelected(fListBox, elems);
        elems.forEach(function (ele, i) {
          idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem
          // To update lb view data

          dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele)); // To update lb listdata data

          dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0])); // To update lb sorted data

          sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0])); // To update lb original data

          jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));
        });

        if (this.sortOrder !== 'None') {
          sortIdx.forEach(function (i) {
            tempItems.push(fListBox.sortedData[i]);
          });
        } else {
          jsonIdx.forEach(function (i) {
            tempItems.push(fListBox.jsonData[i]);
          });
        }

        var localDataArgs = {
          cancel: false,
          items: tempItems,
          eventName: this.toolbarAction
        };
        fListBox.trigger('actionBegin', localDataArgs);

        if (localDataArgs.cancel) {
          return;
        }

        var rLiCollection_1 = [];
        dataLiIdx.sort(function (n1, n2) {
          return n1 - n2;
        }).reverse().forEach(function (i) {
          rLiCollection_1.push(fliCollections.splice(i, 1)[0]);
        });
        fListBox.liCollections = fliCollections;

        if (index) {
          var toColl = tliCollections.splice(0, index);
          tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);
        } else {
          tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());
        }

        if (tListBox.listData.length === 0) {
          tListBox.ulElement.innerHTML = '';
        }

        dataIdx.sort(function (n1, n2) {
          return n2 - n1;
        }).forEach(function (i) {
          listData.splice(i, 1)[0];
        });
        sortIdx.sort(function (n1, n2) {
          return n2 - n1;
        }).forEach(function (i) {
          sortData.splice(i, 1)[0];
        });
        jsonIdx.slice().reverse().forEach(function (i) {
          data.push(fListBox.jsonData.splice(i, 1)[0]);
        });

        if (isRefresh) {
          if (fListBox.fields.groupBy) {
            fListBox.ulElement.innerHTML = fListBox.renderItems(listData, fListBox.fields).innerHTML;
          } else {
            elems.forEach(function (ele) {
              (0, _ej2Base.detach)(ele);
            });
          }
        } else {
          (0, _ej2Lists.moveTo)(fListBox.ulElement, tListBox.ulElement, idx, index);
          this.trigger('actionComplete', {
            items: tempItems,
            eventName: this.toolbarAction
          });
        }

        if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
          tListBox.mainList = tListBox.ulElement;
        }

        fListBox.updateMainList();
        var childCnt = fListBox.ulElement.querySelectorAll('.e-list-item').length;
        var ele = void 0;
        var liIdx = void 0;
        var tJsonData = [].slice.call(tListBox.jsonData);
        tSortData = [].slice.call(tListBox.sortedData);

        if (elems.length === 1 && childCnt && !fListBox.selectionSettings.showCheckbox) {
          liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
          ele = fListBox.ulElement.querySelectorAll('.e-list-item')[liIdx];
          fListBox.ulElement.querySelectorAll('.e-list-item')[fListBox.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40)].classList.add(_ej2Lists.cssClass.selected);
        }

        if (isKey) {
          this.list.focus();
        }

        fListBox.listData = listData;
        fListBox.sortedData = sortData;
        index = index ? index : tListData.length;

        for (var i = tempItems.length - 1; i >= 0; i--) {
          tListData.splice(index, 0, tempItems[i]);
          tJsonData.splice(index, 0, tempItems[i]);
          tSortData.splice(index, 0, tempItems[i]);
        }

        tListBox.listData = tListData;
        tListBox.jsonData = tJsonData;
        tListBox.sortedData = tSortData;

        if (isRefresh) {
          tListBox.ulElement.innerHTML = tListBox.renderItems(tListData, tListBox.fields).innerHTML;
          tListBox.setSelection();
        }

        fListBox.updateSelectedOptions();

        if (fListBox.listData.length === 0) {
          fListBox.l10nUpdate();
        }
      }

      if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
        fListBox.value[0] = fListBox.getSelectedItems()[0].innerHTML;
      }
    };

    ListBox.prototype.moveAllItemTo = function () {
      this.moveAllData(this, this.getScopedListBox());
    };

    ListBox.prototype.moveAllItemFrom = function () {
      this.moveAllData(this.getScopedListBox(), this);
    };

    ListBox.prototype.moveAllData = function (fListBox, tListBox, isKey, index) {
      var listData = [].slice.call(tListBox.listData);
      var jsonData = [].slice.call(tListBox.jsonData);
      var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy;
      this.removeSelected(fListBox, fListBox.getSelectedItems());
      var tempItems = [].slice.call(fListBox.jsonData);
      var localDataArgs = {
        cancel: false,
        items: tempItems,
        eventName: this.toolbarAction
      };
      fListBox.trigger('actionBegin', localDataArgs);

      if (localDataArgs.cancel) {
        return;
      }

      if (tListBox.listData.length === 0) {
        tListBox.ulElement.innerHTML = '';
      }

      if (isRefresh) {
        fListBox.ulElement.innerHTML = '';
      } else {
        (0, _ej2Lists.moveTo)(fListBox.ulElement, tListBox.ulElement, Array.apply(null, {
          length: fListBox.ulElement.childElementCount
        }).map(Number.call, Number), index);
        this.trigger('actionComplete', {
          items: tempItems,
          eventName: this.toolbarAction
        });
      }

      if (isKey) {
        this.list.focus();
      }

      index = index ? index : listData.length;

      for (var i = 0; i < fListBox.listData.length; i++) {
        listData.splice(index + i, 0, fListBox.listData[i]);
      }

      for (var i = 0; i < fListBox.jsonData.length; i++) {
        jsonData.splice(index + i, 0, fListBox.jsonData[i]);
      }

      var fliCollections = [].slice.call(fListBox.liCollections);
      var tliCollections = [].slice.call(tListBox.liCollections);
      fListBox.liCollections = [];
      fListBox.value = [];

      if (index) {
        var toColl = tliCollections.splice(0, index);
        tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
      } else {
        tListBox.liCollections = tliCollections.concat(fliCollections);
      }

      listData = listData.filter(function (data) {
        return data.isHeader !== true;
      });
      tListBox.listData = listData;
      tListBox.jsonData = jsonData;
      fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];

      if (isRefresh) {
        tListBox.ulElement.innerHTML = tListBox.renderItems(listData, tListBox.fields).innerHTML;
        this.trigger('actionComplete', {
          items: tempItems,
          eventName: this.toolbarAction
        });
      } else {
        tListBox.sortedData = listData;
      }

      fListBox.updateSelectedOptions();

      if (fListBox.listData.length === 0) {
        fListBox.l10nUpdate();
      }
    };

    ListBox.prototype.changeData = function (fromIdx, toIdx, jsonToIdx, ele) {
      var listData = [].slice.call(this.listData);
      var jsonData = [].slice.call(this.jsonData);
      var sortData = [].slice.call(this.sortedData);
      var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
      var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
      var liColl = [].slice.call(this.liCollections);
      listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
      jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
      sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
      liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
      this.listData = listData;
      this.jsonData = jsonData;
      this.liCollections = liColl;
      this.sortedData = sortData;
    };

    ListBox.prototype.getSelectedItems = function () {
      var ele = [];

      if (this.selectionSettings.showCheckbox) {
        [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach(function (cbox) {
          ele.push((0, _ej2Base.closest)(cbox, '.' + _ej2Lists.cssClass.li));
        });
      } else {
        ele = [].slice.call(this.ulElement.getElementsByClassName(_ej2Lists.cssClass.selected));
      }

      return ele;
    };

    ListBox.prototype.getScopedListBox = function () {
      var _this = this;

      var listObj;

      if (this.scope) {
        [].slice.call(document.querySelectorAll(this.scope)).forEach(function (ele) {
          if ((0, _ej2Base.getComponent)(ele, _this.getModuleName())) {
            listObj = (0, _ej2Base.getComponent)(ele, _this.getModuleName());
          }
        });
      }

      return listObj;
    };

    ListBox.prototype.getDragArgs = function (args, isDragEnd) {
      var elems = this.getSelectedItems();

      if (elems.length) {
        elems.pop();

        if (isDragEnd) {
          elems.push(args.target);
        }
      } else {
        elems = [args.target];
      }

      if ((0, _ej2Base.isBlazor)()) {
        return {
          elements: elems,
          items: this.getDataByElems(elems),
          bindEvents: args.bindEvents,
          dragElement: args.dragElement
        };
      } else {
        return {
          elements: elems,
          items: this.getDataByElems(elems)
        };
      }
    };

    ListBox.prototype.onKeyDown = function (e) {
      this.keyDownHandler(e);
      event.stopPropagation();
    };

    ListBox.prototype.keyDownHandler = function (e) {
      if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {
        e.preventDefault();

        if (e.keyCode === 32 && this.ulElement.children.length) {
          this.selectHandler({
            target: this.ulElement.getElementsByClassName('e-focused')[0],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          });
        } else if (e.keyCode === 65 && e.ctrlKey) {
          this.selectAll();
        } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
          this.moveUpDown(e.keyCode === 38 ? true : false, true);
        } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
          var listObj = this.tBListBox || this.getScopedListBox();

          if (e.keyCode === 39) {
            e.shiftKey ? this.moveAllData(this, listObj, true) : this.moveData(this, listObj, true);
          } else {
            e.shiftKey ? this.moveAllData(listObj, this, true) : this.moveData(listObj, this, true);
          }
        } else if (e.keyCode !== 37 && e.keyCode !== 39) {
          this.upDownKeyHandler(e);
        }
      } else if (this.allowFiltering) {
        if (e.keyCode === 40 || e.keyCode === 38) {
          this.upDownKeyHandler(e);
        }
      }
    };

    ListBox.prototype.upDownKeyHandler = function (e) {
      var ul = this.ulElement;
      var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(_ej2Lists.cssClass.selected)[0];

      if (fli) {
        if (e.keyCode !== 35 && e.keyCode !== 36) {
          fliIdx = Array.prototype.indexOf.call(ul.children, fli);
          e.keyCode === 40 ? fliIdx++ : fliIdx--;

          if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
            return;
          }
        }

        (0, _ej2Base.removeClass)([fli], 'e-focused');
      }

      var cli = ul.children[fliIdx];

      if (cli) {
        fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);

        if (fliIdx === -1) {
          (0, _ej2Base.addClass)([fli], 'e-focused');
          return;
        }

        ul.children[fliIdx].focus();
        ul.children[fliIdx].classList.add('e-focused');

        if (!e.ctrlKey) {
          this.selectHandler({
            target: ul.children[fliIdx],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          }, true);
        }
      }
    };

    ListBox.prototype.KeyUp = function (e) {
      var _this = this;

      var char = String.fromCharCode(e.keyCode);
      var isWordCharacter = char.match(/\w/);

      if (!(0, _ej2Base.isNullOrUndefined)(isWordCharacter)) {
        this.isValidKey = true;
      }

      this.isValidKey = e.keyCode === 8 || this.isValidKey;

      if (this.isValidKey) {
        this.isValidKey = false;

        switch (e.keyCode) {
          default:
            var text = this.targetElement();
            var keyCode = e.keyCode;

            if (this.allowFiltering) {
              var eventArgsData_1 = {
                preventDefaultAction: false,
                text: this.targetElement(),
                updateData: function (dataSource, query, fields) {
                  if (eventArgsData_1.cancel) {
                    return;
                  }

                  _this.isFiltered = true;
                  _this.remoteFilterAction = true;

                  _this.dataUpdater(dataSource, query, fields);
                },
                event: e,
                cancel: false
              };
              this.trigger('filtering', eventArgsData_1, function (args) {
                _this.isDataFetched = false;

                if (eventArgsData_1.cancel || _this.filterInput.value !== '' && _this.isFiltered) {
                  return;
                }

                if (!eventArgsData_1.cancel && !_this.isCustomFiltering && !eventArgsData_1.preventDefaultAction) {
                  _this.inputString = _this.filterInput.value;

                  _this.filteringAction(_this.jsonData, new _ej2Data.Query(), _this.fields);
                }

                if (!_this.isFiltered && !_this.isCustomFiltering && !eventArgsData_1.preventDefaultAction) {
                  _this.dataUpdater(_this.jsonData, new _ej2Data.Query(), _this.fields);
                }
              });
            }

        }
      }
    };
    /**
     * To filter the data from given data source by using query
     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
     * @param  {Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */


    ListBox.prototype.filter = function (dataSource, query, fields) {
      this.isCustomFiltering = true;
      this.filteringAction(dataSource, query, fields);
    };

    ListBox.prototype.filteringAction = function (dataSource, query, fields) {
      this.resetList(dataSource, fields, query);
    };

    ListBox.prototype.targetElement = function () {
      this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];
      return this.targetInputElement.value;
    };

    ListBox.prototype.dataUpdater = function (dataSource, query, fields) {
      this.isDataFetched = false;
      var backCommand = true;

      if (this.targetElement().trim() === '') {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;

        if (backCommand) {
          this.remoteCustomValue = false;
          this.onActionComplete(list, this.jsonData);
          this.notify('reOrder', {
            module: 'CheckBoxSelection',
            enable: this.selectionSettings.showCheckbox,
            e: this
          });
        }
      } else {
        this.resetList(dataSource, fields, query);
      }
    };

    ListBox.prototype.focusOutHandler = function () {
      var ele = this.list.getElementsByClassName('e-focused')[0];

      if (ele) {
        ele.classList.remove('e-focused');
      }
    };

    ListBox.prototype.getValidIndex = function (cli, index, keyCode) {
      var cul = this.ulElement;

      if (cli.classList.contains('e-disabled') || cli.classList.contains(_ej2Lists.cssClass.group)) {
        keyCode === 40 || keyCode === 36 ? index++ : index--;
      }

      if (index < 0 || index === cul.childElementCount) {
        return -1;
      }

      cli = cul.querySelectorAll('.e-list-item')[index];

      if (cli.classList.contains('e-disabled') || cli.classList.contains(_ej2Lists.cssClass.group)) {
        index = this.getValidIndex(cli, index, keyCode);
      }

      return index;
    };

    ListBox.prototype.updateSelectedOptions = function () {
      var _this = this;

      var selectedOptions = [];
      var values = [];
      (0, _ej2Base.extend)(values, this.value);
      this.getSelectedItems().forEach(function (ele) {
        if (!ele.classList.contains('e-grabbed')) {
          selectedOptions.push(_this.getFormattedValue(ele.getAttribute('data-value')));
        }
      });

      if (this.mainList.childElementCount === this.ulElement.childElementCount) {
        if (this.allowFiltering) {
          for (var i = 0; i < selectedOptions.length; i++) {
            if (values.indexOf(selectedOptions[i]) > -1) {
              continue;
            } else {
              values.push(selectedOptions[i]);
            }
          }

          this.setProperties({
            value: values
          }, true);
        } else {
          this.setProperties({
            value: selectedOptions
          }, true);
        }
      }

      this.updateSelectTag();
      this.updateToolBarState();

      if (this.tBListBox) {
        this.tBListBox.updateToolBarState();
      }

      if (this.allowFiltering) {
        this.list.getElementsByClassName('e-input-filter')[0].focus();
      }
    };

    ListBox.prototype.clearSelection = function (values) {
      var _this = this;

      if (values === void 0) {
        values = this.value;
      }

      if (this.selectionSettings.showCheckbox) {
        var dvalue_1;
        this.getSelectedItems().forEach(function (li) {
          dvalue_1 = _this.getFormattedValue(li.getAttribute('data-value'));

          if (values.indexOf(dvalue_1) < 0) {
            li.getElementsByClassName('e-check')[0].classList.remove('e-check');
            li.getElementsByClassName('e-checkbox-wrapper')[0].removeAttribute('aria-checked');
            li.removeAttribute('aria-selected');
          }
        });
      }
    };

    ;

    ListBox.prototype.setSelection = function (values, isSelect, isText) {
      var _this = this;

      if (values === void 0) {
        values = this.value;
      }

      if (isSelect === void 0) {
        isSelect = true;
      }

      if (isText === void 0) {
        isText = false;
      }

      var li;
      var liselect;

      if (values) {
        values.forEach(function (value) {
          li = _this.list.querySelector('[data-value="' + (isText ? _this.getValueByText(value) : value) + '"]');

          if (li) {
            if (_this.selectionSettings.showCheckbox) {
              liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');
            } else {
              liselect = li.classList.contains('e-selected');
            }

            if (!isSelect && liselect || isSelect && !liselect && li) {
              if (_this.selectionSettings.showCheckbox) {
                _this.notify('updatelist', {
                  li: li
                });
              } else {
                if (isSelect) {
                  li.classList.add(_ej2Lists.cssClass.selected);
                  li.setAttribute('aria-selected', 'true');
                } else {
                  li.classList.remove(_ej2Lists.cssClass.selected);
                  li.removeAttribute('aria-selected');
                }
              }
            }
          }
        });
      }

      this.updateSelectTag();
    };

    ListBox.prototype.updateSelectTag = function () {
      var ele = this.getSelectTag();
      var innerHTML = '';
      ele.innerHTML = '';

      if (this.value) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          innerHTML += '<option selected value="' + this.value[i] + '"></option>';
        }

        ele.innerHTML += innerHTML;
      }

      this.checkSelectAll();
    };

    ListBox.prototype.updateToolBarState = function () {
      var _this = this;

      if (this.toolbarSettings.items.length) {
        var listObj_1 = this.getScopedListBox();
        var wrap_1 = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];
        this.toolbarSettings.items.forEach(function (value) {
          var btn = wrap_1.querySelector('[data-value="' + value + '"]');

          switch (value) {
            case 'moveAllTo':
              btn.disabled = _this.ulElement.childElementCount ? false : true;
              break;

            case 'moveAllFrom':
              btn.disabled = listObj_1.ulElement.childElementCount ? false : true;
              break;

            case 'moveFrom':
              btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;
              break;

            case 'moveUp':
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;
              break;

            case 'moveDown':
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;
              break;

            default:
              btn.disabled = _this.value && _this.value.length ? false : true;
              break;
          }
        });
      }
    };

    ListBox.prototype.setCheckboxPosition = function () {
      var listWrap = this.list;

      if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {
        listWrap.classList.remove('e-right');
      }

      if (this.selectionSettings.checkboxPosition === 'Right') {
        listWrap.classList.add('e-right');
      }
    };

    ListBox.prototype.showCheckbox = function (showCheckbox) {
      var index = 0;
      var liColl = this.list.lastElementChild.querySelectorAll('li');
      var liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;

      if (showCheckbox) {
        this.ulElement = this.renderItems(this.listData, this.fields);
        this.mainList = this.ulElement;
        this.list.removeChild(this.list.getElementsByTagName('ul')[0]);
        this.list.appendChild(this.ulElement);

        if (this.selectionSettings.showSelectAll) {
          var l10nShow = new _ej2Base.L10n(this.getModuleName(), {
            selectAllText: 'Select All',
            unSelectAllText: 'Unselect All'
          }, this.locale);
          this.showSelectAll = true;
          this.selectAllText = l10nShow.getConstant('selectAllText');
          this.unSelectAllText = l10nShow.getConstant('unSelectAllText');
          this.popupWrapper = this.list;
          this.checkBoxSelectionModule.checkAllParent = null;
          this.notify('selectAll', {});
          this.checkSelectAll();
        }
      } else {
        if (this.selectionSettings.showSelectAll) {
          this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);
        }

        for (index; index < liCollLen; index++) {
          liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);

          if (liColl[index].hasAttribute('aria-selected')) {
            liColl[index].removeAttribute('aria-selected');
          }
        }

        this.mainList = this.ulElement;
      }

      this.value = [];
    };

    ListBox.prototype.isSelected = function (ele) {
      if (!(0, _ej2Base.isNullOrUndefined)(ele)) {
        return ele.classList.contains(_ej2Lists.cssClass.selected) || ele.querySelector('.e-check') !== null;
      } else {
        return false;
      }
    };

    ListBox.prototype.getSelectTag = function () {
      return this.list.getElementsByClassName('e-hidden-select')[0];
    };

    ListBox.prototype.getToolElem = function () {
      return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];
    };

    ListBox.prototype.formResetHandler = function () {
      this.value = this.initialSelectedOptions;
    };
    /**
     * Return the module name.
     * @private
     */


    ListBox.prototype.getModuleName = function () {
      return 'listbox';
    };
    /**
     * Get the properties to be maintained in the persisted state.
     */


    ListBox.prototype.getPersistData = function () {
      return this.addOnPersist(['value']);
    };

    ListBox.prototype.getLocaleName = function () {
      return 'listbox';
    };

    ;

    ListBox.prototype.destroy = function () {
      if (this.itemTemplate) {
        (0, _ej2Base.resetBlazorTemplate)("" + this.element.id + ITEMTEMPLATE_PROPERTY, ITEMTEMPLATE_PROPERTY);
      }

      this.unwireEvents();

      if (this.element.tagName === 'EJS-LISTBOX') {
        this.element.innerHTML = '';
      } else {
        this.element.style.display = 'inline-block';

        if (this.toolbarSettings.items.length) {
          this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
          (0, _ej2Base.detach)(this.list.nextElementSibling);
        }

        this.list.parentElement.insertBefore(this.element, this.list);
      }

      _super.prototype.destroy.call(this);
    };
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @private
     */
    // tslint:disable-next-line:max-func-body-length


    ListBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;

      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([wrap], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([wrap], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              wrap.classList.add('e-rtl');
            } else {
              wrap.classList.remove('e-rtl');
            }

            break;

          case 'value':
            (0, _ej2Base.removeClass)(this.list.querySelectorAll('.' + _ej2Lists.cssClass.selected), _ej2Lists.cssClass.selected);
            this.clearSelection(this.value);
            this.setSelection();
            break;

          case 'height':
            this.setHeight();
            break;

          case 'enabled':
            this.setEnable();
            break;

          case 'allowDragAndDrop':
            if (newProp.allowDragAndDrop) {
              this.initDraggable();
            } else {
              (0, _ej2Base.getComponent)(this.ulElement, 'sortable').destroy();
            }

            break;

          case 'allowFiltering':
            if (this.allowFiltering) {
              this.setFiltering();
            } else {
              this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);
              this.filterParent = null;
            }

            break;

          case 'scope':
            if (this.allowDragAndDrop) {
              (0, _ej2Base.getComponent)(this.ulElement, 'sortable').scope = newProp.scope;
            }

            if (this.toolbarSettings.items.length) {
              if (oldProp.scope) {
                (0, _ej2Base.getComponent)(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
              }

              if (newProp.scope) {
                (0, _ej2Base.getComponent)(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
              }
            }

            break;

          case 'toolbarSettings':
            var ele = void 0;
            var pos = newProp.toolbarSettings.position;
            var toolElem = this.getToolElem();

            if (pos) {
              (0, _ej2Base.removeClass)([wrap], ['e-right', 'e-left']);
              wrap.classList.add('e-' + pos.toLowerCase());

              if (pos === 'Left') {
                wrap.insertBefore(toolElem, this.list);
              } else {
                wrap.appendChild(toolElem);
              }
            }

            if (newProp.toolbarSettings.items) {
              if (oldProp.toolbarSettings.items.length) {
                ele = this.list.parentElement;
                ele.parentElement.insertBefore(this.list, ele);
                (0, _ej2Base.detach)(ele);
              }

              this.initToolbarAndStyles();
              this.wireToolbarEvent();
            }

            break;

          case 'selectionSettings':
            var showSelectAll = newProp.selectionSettings.showSelectAll;
            var showCheckbox = newProp.selectionSettings.showCheckbox;

            if (!(0, _ej2Base.isNullOrUndefined)(showSelectAll)) {
              this.showSelectAll = showSelectAll;

              if (this.showSelectAll) {
                var l10nSel = new _ej2Base.L10n(this.getModuleName(), {
                  selectAllText: 'Select All',
                  unSelectAllText: 'Unselect All'
                }, this.locale);
                this.checkBoxSelectionModule.checkAllParent = null;
                this.showSelectAll = true;
                this.selectAllText = l10nSel.getConstant('selectAllText');
                this.unSelectAllText = l10nSel.getConstant('selectAllText');
                this.popupWrapper = this.list;
              }

              this.notify('selectAll', {});
              this.checkSelectAll();
            }

            if (!(0, _ej2Base.isNullOrUndefined)(showCheckbox)) {
              this.showCheckbox(showCheckbox);
            }

            if (this.selectionSettings.showCheckbox) {
              this.setCheckboxPosition();
            }

            break;

          case 'dataSource':
            this.jsonData = [].slice.call(this.dataSource);
            break;
        }
      }
    };

    var ListBox_1;

    __decorate([(0, _ej2Base.Complex)({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null
    }, _dropDownBase.FieldSettings)], ListBox.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListBox.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListBox.prototype, "itemTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('None')], ListBox.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ListBox.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)([])], ListBox.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListBox.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)('StartsWith')], ListBox.prototype, "filterType", void 0);

    __decorate([(0, _ej2Base.Property)()], ListBox.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListBox.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)([])], ListBox.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListBox.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListBox.prototype, "allowDragAndDrop", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], ListBox.prototype, "maximumSelectionLength", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListBox.prototype, "allowFiltering", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListBox.prototype, "scope", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ListBox.prototype, "ignoreCase", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "beforeItemRender", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "filtering", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "beforeDrop", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "dragStart", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "drag", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "drop", void 0);

    __decorate([(0, _ej2Base.Event)()], ListBox.prototype, "dataBound", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListBox.prototype, "groupTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('No Records Found')], ListBox.prototype, "noRecordsTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('The Request Failed')], ListBox.prototype, "actionFailureTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], ListBox.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListBox.prototype, "ignoreAccent", void 0);

    __decorate([(0, _ej2Base.Complex)({}, ToolbarSettings)], ListBox.prototype, "toolbarSettings", void 0);

    __decorate([(0, _ej2Base.Complex)({}, SelectionSettings)], ListBox.prototype, "selectionSettings", void 0);

    ListBox = ListBox_1 = __decorate([_ej2Base.NotifyPropertyChanges], ListBox);
    return ListBox;
  }(_dropDownBase.DropDownBase);

  _exports.ListBox = ListBox;
});;
define('@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection',["exports", "@syncfusion/ej2-buttons", "@syncfusion/ej2-inputs", "@syncfusion/ej2-base", "../drop-down-base/drop-down-base"], function (_exports, _ej2Buttons, _ej2Inputs, _ej2Base, _dropDownBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.CheckBoxSelection = void 0;
  var ICON = 'e-icons';
  var CHECKBOXFRAME = 'e-frame';
  var CHECK = 'e-check';
  var CHECKBOXWRAP = 'e-checkbox-wrapper';
  var CHECKBOXRIPPLE = 'e-ripple-container';
  var INDETERMINATE = 'e-stop';
  var checkAllParent = 'e-selectall-parent';
  var searchBackIcon = 'e-input-group-icon e-back-icon e-icons';
  var filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';
  var filterInput = 'e-input-filter';
  var filterParent = 'e-filter-parent';
  var mobileFilter = 'e-ddl-device-filter';
  var clearIcon = 'e-clear-icon';
  var popupFullScreen = 'e-popup-full-page';
  var device = 'e-ddl-device';
  var FOCUS = 'e-input-focus';
  /**
   * The Multiselect enable CheckBoxSelection call this inject module.
   */

  var CheckBoxSelection =
  /** @class */
  function () {
    function CheckBoxSelection(parent) {
      this.activeLi = [];
      this.activeEle = [];
      this.parent = parent;
      this.addEventListener();
    }

    CheckBoxSelection.prototype.getModuleName = function () {
      return 'CheckBoxSelection';
    };

    CheckBoxSelection.prototype.addEventListener = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.parent.on('updatelist', this.listSelection, this);
      this.parent.on('listoption', this.listOption, this);
      this.parent.on('selectAll', this.setSelectAll, this);
      this.parent.on('checkSelectAll', this.checkSelectAll, this);
      this.parent.on('searchBox', this.setSearchBox, this);
      this.parent.on('blur', this.onBlur, this);
      this.parent.on('targetElement', this.targetElement, this);
      this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);
      this.parent.on('inputFocus', this.getFocus, this);
      this.parent.on('reOrder', this.setReorder, this);
      this.parent.on('activeList', this.getActiveList, this);
      this.parent.on('selectAllText', this.setLocale, this);
      this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);

      _ej2Base.EventHandler.add(document, 'mousedown', this.onDocumentClick, this);

      this.parent.on('addItem', this.checboxCreate, this);
    };

    CheckBoxSelection.prototype.removeEventListener = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.parent.off('updatelist', this.listSelection);
      this.parent.off('listoption', this.listOption);
      this.parent.off('selectAll', this.setSelectAll);
      this.parent.off('checkSelectAll', this.checkSelectAll);
      this.parent.off('searchBox', this.setSearchBox);
      this.parent.off('blur', this.onBlur);
      this.parent.off('targetElement', this.targetElement);
      this.parent.off('deviceSearchBox', this.setDeviceSearchBox);
      this.parent.off('inputFocus', this.getFocus);
      this.parent.off('reOrder', this.setReorder);
      this.parent.off('activeList', this.getActiveList);
      this.parent.off('selectAllText', this.setLocale);
      this.parent.off('filterBarPlaceholder', this.setPlaceholder);
      this.parent.off('addItem', this.checboxCreate);

      _ej2Base.EventHandler.remove(document, 'mousedown', this.onDocumentClick);
    };

    CheckBoxSelection.prototype.listOption = function (args) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(this.parent.listCurrentOptions.itemCreated)) {
        this.parent.listCurrentOptions.itemCreated = function (e) {
          _this.checboxCreate(e);
        };
      } else {
        var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;

        this.parent.listCurrentOptions.itemCreated = function (e) {
          _this.checboxCreate(e);

          itemCreated_1.apply(_this, [e]);
        };
      }
    };

    ;

    CheckBoxSelection.prototype.setPlaceholder = function (props) {
      _ej2Inputs.Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);
    };

    CheckBoxSelection.prototype.checboxCreate = function (e) {
      var item;

      if (!(0, _ej2Base.isNullOrUndefined)(e.item)) {
        item = e.item;
      } else {
        item = e;
      }

      if (this.parent.enableGroupCheckBox || item.className !== 'e-list-group-item ' && item.className !== 'e-list-group-item') {
        var checkboxEle = (0, _ej2Buttons.createCheckBox)(this.parent.createElement, true);
        var icon = (0, _ej2Base.select)('div.' + ICON, item);
        var id = item.getAttribute('data-uid');
        item.insertBefore(checkboxEle, item.childNodes[(0, _ej2Base.isNullOrUndefined)(icon) ? 0 : 1]);
        (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkboxEle);
        var frame = (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkboxEle);

        if (this.parent.enableGroupCheckBox) {
          this.parent.popupWrapper.classList.add('e-multiselect-group');
        }

        return item;
      } else {
        return item;
      }
    };

    CheckBoxSelection.prototype.setSelectAll = function () {
      if (this.parent.showSelectAll) {
        if ((0, _ej2Base.isNullOrUndefined)(this.checkAllParent)) {
          this.checkAllParent = this.parent.createElement('div', {
            className: checkAllParent
          });
          this.selectAllSpan = this.parent.createElement('span', {
            className: 'e-all-text'
          });
          this.selectAllSpan.textContent = '';
          this.checkAllParent.appendChild(this.selectAllSpan);
          this.setLocale();
          this.checboxCreate(this.checkAllParent);

          if (this.parent.headerTemplate) {
            if (!(0, _ej2Base.isNullOrUndefined)(this.parent.filterParent)) {
              (0, _ej2Base.append)([this.checkAllParent], this.parent.filterParent);
            } else {
              (0, _ej2Base.append)([this.checkAllParent], this.parent.popupWrapper);
            }
          }

          if (!this.parent.headerTemplate) {
            if (!(0, _ej2Base.isNullOrUndefined)(this.parent.filterParent)) {
              this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
            } else {
              (0, _ej2Base.prepend)([this.checkAllParent], this.parent.popupWrapper);
            }
          }

          _ej2Base.EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);
        }

        if (this.parent.list.classList.contains('e-nodata') || this.parent.listData && this.parent.listData.length <= 1) {
          this.checkAllParent.style.display = 'none';
        } else {
          this.checkAllParent.style.display = 'block';
        }

        this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.checkAllParent)) {
        this.checkAllParent.parentElement.removeChild(this.checkAllParent);
        this.checkAllParent = null;
      }
    };

    CheckBoxSelection.prototype.destroy = function () {
      this.removeEventListener();
    };

    CheckBoxSelection.prototype.listSelection = function (args) {
      var target;

      if (!(0, _ej2Base.isNullOrUndefined)(args.e)) {
        target = !(0, _ej2Base.isNullOrUndefined)(args.e.target) ? args.e.target.classList.contains('e-frame') && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector('.e-checkbox-wrapper').childNodes[1] : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];
      } else {
        target = args.li.lastElementChild.childNodes[1];
      }

      if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
        target = args.li.firstElementChild.childNodes[1];
      }

      if (!(0, _ej2Base.isNullOrUndefined)(target)) {
        this.checkWrapper = (0, _ej2Base.closest)(target, '.' + CHECKBOXWRAP);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.checkWrapper)) {
        var checkElement = (0, _ej2Base.select)('.' + CHECKBOXFRAME, this.checkWrapper);
        var selectAll = false;
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), args.li, args.e, selectAll);
      }
    };

    CheckBoxSelection.prototype.validateCheckNode = function (checkWrap, isCheck, li, e, selectAll) {
      this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll);
    };

    CheckBoxSelection.prototype.clickHandler = function (e) {
      var target;

      if (e.currentTarget.classList.contains(this.checkAllParent.className)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.currentTarget;
      }

      this.checkWrapper = (0, _ej2Base.closest)(target, '.' + CHECKBOXWRAP);
      var selectAll = true;

      if (!(0, _ej2Base.isNullOrUndefined)(this.checkWrapper)) {
        var checkElement = (0, _ej2Base.select)('.' + CHECKBOXFRAME, this.checkWrapper);
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), null, e, selectAll);
      }

      e.preventDefault();
    };

    CheckBoxSelection.prototype.changeState = function (wrapper, state, e, isPrevent, selectAll) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];

      if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        ariaState = 'true';

        if (selectAll) {
          this.parent.selectAllItems(true, e);
          this.setLocale(true);
        }
      } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
        (0, _ej2Base.removeClass)([frameSpan], [CHECK, INDETERMINATE]);
        ariaState = 'false';

        if (selectAll) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE)) {
        (0, _ej2Base.removeClass)([frameSpan], [CHECK]);
        frameSpan.classList.add(INDETERMINATE);
        ariaState = 'false';

        if (selectAll) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      }

      ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;

      if (!(0, _ej2Base.isNullOrUndefined)(ariaState)) {
        wrapper.setAttribute('aria-checked', ariaState);
      }
    };

    CheckBoxSelection.prototype.setSearchBox = function (args) {
      if ((0, _ej2Base.isNullOrUndefined)(this.parent.filterParent)) {
        this.parent.filterParent = this.parent.createElement('span', {
          className: filterParent
        });
        this.filterInput = this.parent.createElement('input', {
          attrs: {
            type: 'text'
          },
          className: filterInput
        });
        this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
        var backIcon = false;

        if (_ej2Base.Browser.isDevice) {
          backIcon = true;
          this.parent.mobFilter = false;
        }

        this.filterInputObj = _ej2Inputs.Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
          properties: {
            placeholder: this.parent.filterBarPlaceholder
          }
        }, this.parent.createElement);
        (0, _ej2Base.append)([this.filterInputObj.container], this.parent.filterParent);
        (0, _ej2Base.prepend)([this.parent.filterParent], args.popupElement);
        (0, _ej2Base.attributes)(this.filterInput, {
          'aria-disabled': 'false',
          'aria-owns': this.parent.element.id + '_options',
          'role': 'listbox',
          'aria-activedescendant': null,
          'autocomplete': 'off',
          'autocorrect': 'off',
          'autocapitalize': 'off',
          'spellcheck': 'false'
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);

        if (!_ej2Base.Browser.isDevice && this.clearIconElement) {
          _ej2Base.EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);

          this.clearIconElement.style.visibility = 'hidden';
        }

        _ej2Base.EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);

        _ej2Base.EventHandler.add(this.filterInput, 'keyup', this.parent.KeyUp, this.parent);

        _ej2Base.EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);

        _ej2Base.EventHandler.add(this.filterInput, 'blur', this.onBlur, this);

        this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
        return this.filterInputObj;
      }
    };

    ;

    CheckBoxSelection.prototype.clickOnBackIcon = function (e) {
      this.parent.hidePopup();
      (0, _ej2Base.removeClass)([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.inputElement.focus();
    };

    CheckBoxSelection.prototype.clearText = function (e) {
      this.parent.targetInputElement.value = '';
      this.parent.refreshPopup();
      this.parent.refreshListItems(null);
      this.clearIconElement.style.visibility = 'hidden';
      this.filterInput.focus();
      this.setReorder(e);
      e.preventDefault();
    };

    CheckBoxSelection.prototype.setDeviceSearchBox = function () {
      this.parent.popupObj.element.classList.add(device);
      this.parent.popupObj.element.classList.add(mobileFilter);
      this.parent.popupObj.position = {
        X: 0,
        Y: 0
      };
      this.parent.popupObj.dataBind();
      (0, _ej2Base.attributes)(this.parent.popupObj.element, {
        style: 'left:0px;right:0px;top:0px;bottom:0px;'
      });
      (0, _ej2Base.addClass)([document.body, this.parent.popupObj.element], popupFullScreen);
      this.setSearchBoxPosition();
      this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');
      this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);
      this.clearIconElement.style.visibility = 'hidden';

      _ej2Base.EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);

      _ej2Base.EventHandler.add(this.clearIconElement, 'click', this.clearText, this);
    };

    CheckBoxSelection.prototype.setSearchBoxPosition = function () {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.parent.popupObj.element.style.maxHeight = '100%';
      this.parent.popupObj.element.style.width = '100%';
      this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight + 'px';
      this.parent.list.style.height = window.innerHeight - searchBoxHeight + 'px';
      var clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);
      (0, _ej2Base.detach)(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };

    CheckBoxSelection.prototype.targetElement = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.clearIconElement)) {
        this.parent.targetInputElement = this.filterInput;
        this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';
      }

      return this.parent.targetInputElement.value;
    };

    CheckBoxSelection.prototype.onBlur = function (e) {
      if (!this.parent.element.classList.contains('e-listbox')) {
        var target = void 0;

        if (this.parent.keyAction) {
          return;
        }

        if (_ej2Base.Browser.isIE) {
          target = !(0, _ej2Base.isNullOrUndefined)(e) && e.target;
        }

        if (!_ej2Base.Browser.isIE) {
          target = !(0, _ej2Base.isNullOrUndefined)(e) && e.relatedTarget;
        }

        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !_ej2Base.Browser.isIE && this.filterInput) {
          this.filterInput.focus();
          return;
        }

        if (this.parent.scrollFocusStatus && this.filterInput) {
          e.preventDefault();
          this.filterInput.focus();
          this.parent.scrollFocusStatus = false;
          return;
        }

        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {
          this.parent.inputFocus = false;
          this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
          this.parent.dispatchEvent(this.parent.hiddenElement, 'change');
        }

        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {
          this.parent.inputFocus = false;
          this.parent.overAllWrapper.classList.remove(FOCUS);
          this.parent.trigger('blur');
          this.parent.focused = true;
        }

        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close') && !_ej2Base.Browser.isDevice) {
          this.parent.hidePopup();
        }
      }
    };

    CheckBoxSelection.prototype.onDocumentClick = function (e) {
      if (!this.parent.element.classList.contains('e-listbox') && this.parent.element.tagName !== 'EJS-LISTBOX') {
        var target = e.target;

        if (!(0, _ej2Base.isNullOrUndefined)(this.parent.popupObj) && (0, _ej2Base.closest)(target, '#' + this.parent.popupObj.element.id)) {
          e.preventDefault();
        }

        if (!(!(0, _ej2Base.isNullOrUndefined)(this.parent.popupObj) && (0, _ej2Base.closest)(target, '#' + this.parent.popupObj.element.id)) && !this.parent.overAllWrapper.contains(e.target)) {
          if (this.parent.overAllWrapper.classList.contains(_dropDownBase.dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
            this.parent.inputFocus = false;
            this.parent.scrollFocusStatus = false;
            this.parent.hidePopup();
            this.parent.onBlur(e);
            this.parent.focused = true;
          }
        } else {
          this.parent.scrollFocusStatus = (_ej2Base.Browser.isIE || _ej2Base.Browser.info.name === 'edge') && document.activeElement === this.filterInput;
        }

        if (!this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') && !this.parent.isPopupOpen()) {
          if (_ej2Base.Browser.isIE) {
            this.parent.onBlur();
          } else {
            this.parent.onBlur(e);
          }
        }

        if (this.filterInput === target) {
          this.filterInput.focus();
        }
      }
    };

    CheckBoxSelection.prototype.getFocus = function (e) {
      this.parent.overAllWrapper.classList.remove(FOCUS);

      if (this.parent.keyAction && e.value !== 'clear') {
        this.parent.keyAction = false;
        return;
      }

      if (e.value === 'focus') {
        this.filterInput.focus();
        this.parent.removeFocus();

        _ej2Base.EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);
      }

      if (e.value === 'clear') {
        this.filterInput.value = '';
        this.clearIconElement.style.visibility = 'hidden';
      }
    };

    CheckBoxSelection.prototype.checkSelectAll = function (e) {
      if (e.value === 'check' && this.checkAllParent.getAttribute('aria-checked') !== 'true') {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale(true);
      }

      if (e.value === 'uncheck') {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }

      if (e.value === 'indeterminate') {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
    };

    CheckBoxSelection.prototype.setLocale = function (unSelect) {
      if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {
        var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
        var compiledString = void 0;
        this.selectAllSpan.textContent = '';
        compiledString = (0, _ej2Base.compile)(template);

        for (var _i = 0, _a = compiledString({}, null, null, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        var l10nLocale = {
          selectAllText: 'Select All',
          unSelectAllText: 'Unselect All'
        };
        var l10n = new _ej2Base.L10n(this.parent.getLocaleName(), {}, this.parent.locale);

        if (l10n.getConstant('selectAllText') === '') {
          l10n = new _ej2Base.L10n('dropdowns', l10nLocale, this.parent.locale);
        }

        this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');
      }
    };

    CheckBoxSelection.prototype.getActiveList = function (args) {
      if (args.li.classList.contains('e-active')) {
        this.activeLi.push(args.li.cloneNode(true));
      } else {
        this.activeLi.splice(args.index, 1);
      }
    };

    CheckBoxSelection.prototype.setReorder = function (args) {
      if (this.parent.enableSelectionOrder && !(0, _ej2Base.isNullOrUndefined)(this.parent.value)) {
        var activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;
        var remLi = void 0;
        var ulEle = this.parent.createElement('ul', {
          className: 'e-list-parent e-ul e-reorder'
        });
        var removeEle = this.parent.createElement('div');

        if (activeLiCount > 0) {
          (0, _ej2Base.append)(this.parent.ulElement.querySelectorAll('li.e-active'), ulEle);
          remLi = this.parent.ulElement.querySelectorAll('li.e-active');
          (0, _ej2Base.addClass)(remLi, 'e-reorder-hide');
          (0, _ej2Base.prepend)([ulEle], this.parent.list);
        }

        this.parent.focusAtFirstListItem();
      }
    };

    return CheckBoxSelection;
  }();

  _exports.CheckBoxSelection = CheckBoxSelection;
});;
define('@syncfusion/ej2-dropdowns/src/multi-select/float-label',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.createFloatLabel = createFloatLabel;
  _exports.updateFloatLabelState = updateFloatLabelState;
  _exports.removeFloating = removeFloating;
  _exports.setPlaceHolder = setPlaceHolder;
  _exports.floatLabelFocus = floatLabelFocus;
  _exports.floatLabelBlur = floatLabelBlur;

  /**
   * FloatLable Moduel
   * Specifies whether to display the floating label above the input element.
   */
  var FLOATLINE = 'e-float-line';
  var FLOATTEXT = 'e-float-text';
  var LABELTOP = 'e-label-top';
  var LABELBOTTOM = 'e-label-bottom';
  /**
   * Function to create Float Label element.
   * @param overAllWrapper - overall wrapper of multiselect.
   * @param element - the given html element.
   * @param inputElement - specify the input wrapper.
   * @param value - Value of the MultiSelect.
   * @param floatLabelType - Specify the FloatLabel Type.
   * @param placeholder - Specify the PlaceHolder text.
   */

  function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
    var floatLinelement;
    var floatLabelElement;
    floatLinelement = (0, _ej2Base.createElement)('span', {
      className: FLOATLINE
    });
    floatLabelElement = (0, _ej2Base.createElement)('label', {
      className: FLOATTEXT
    });

    if (!(0, _ej2Base.isNullOrUndefined)(element.id) && element.id !== '') {
      floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');
      (0, _ej2Base.attributes)(element, {
        'aria-labelledby': floatLabelElement.id
      });
    }

    if (!(0, _ej2Base.isNullOrUndefined)(inputElement.placeholder) && inputElement.placeholder !== '') {
      floatLabelElement.innerHTML = inputElement.placeholder;
      inputElement.removeAttribute('placeholder');
    }

    floatLabelElement.innerHTML = placeholder;
    searchWrapper.appendChild(floatLinelement);
    searchWrapper.appendChild(floatLabelElement);
    overAllWrapper.classList.add('e-float-input');
    updateFloatLabelState(value, floatLabelElement);

    if (floatLabelType === 'Always') {
      if (floatLabelElement.classList.contains(LABELBOTTOM)) {
        (0, _ej2Base.removeClass)([floatLabelElement], LABELBOTTOM);
      }

      (0, _ej2Base.addClass)([floatLabelElement], LABELTOP);
    }
  }
  /**
   * Function to update status of the Float Label element.
   * @param value - Value of the MultiSelect.
   * @param label - float label element.
   */


  function updateFloatLabelState(value, label) {
    if (value && value.length > 0) {
      (0, _ej2Base.addClass)([label], LABELTOP);
      (0, _ej2Base.removeClass)([label], LABELBOTTOM);
    } else {
      (0, _ej2Base.removeClass)([label], LABELTOP);
      (0, _ej2Base.addClass)([label], LABELBOTTOM);
    }
  }
  /**
   * Function to remove Float Label element.
   * @param overAllWrapper - overall wrapper of multiselect.
   * @param componentWrapper - wrapper element of multiselect.
   * @param searchWrapper - search wrapper of multiselect.
   * @param inputElement - specify the input wrapper.
   * @param value - Value of the MultiSelect.
   * @param floatLabelType - Specify the FloatLabel Type.
   * @param placeholder - Specify the PlaceHolder text.
   */


  function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
    var placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);
    var floatLine = componentWrapper.querySelector('.' + FLOATLINE);
    var placeholderText;

    if (!(0, _ej2Base.isNullOrUndefined)(placeholderElement)) {
      placeholderText = placeholderElement.innerText;
      (0, _ej2Base.detach)(searchWrapper.querySelector('.' + FLOATTEXT));
      setPlaceHolder(value, inputElement, placeholderText);

      if (!(0, _ej2Base.isNullOrUndefined)(floatLine)) {
        (0, _ej2Base.detach)(searchWrapper.querySelector('.' + FLOATLINE));
      }
    } else {
      placeholderText = placeholder !== null ? placeholder : '';
      setPlaceHolder(value, inputElement, placeholderText);
    }

    overAllWrapper.classList.remove('e-float-input');
  }
  /**
   * Function to set the placeholder to the element.
   * @param value - Value of the MultiSelect.
   * @param inputElement - specify the input wrapper.
   * @param placeholder - Specify the PlaceHolder text.
   */


  function setPlaceHolder(value, inputElement, placeholder) {
    if (value && value.length) {
      inputElement.placeholder = '';
    } else {
      inputElement.placeholder = placeholder;
    }
  }
  /**
   * Function for focusing the Float Element.
   * @param overAllWrapper - overall wrapper of multiselect.
   * @param componentWrapper - wrapper element of multiselect.
   */


  function floatLabelFocus(overAllWrapper, componentWrapper) {
    overAllWrapper.classList.add('e-input-focus');
    var label = componentWrapper.querySelector('.' + FLOATTEXT);

    if (!(0, _ej2Base.isNullOrUndefined)(label)) {
      (0, _ej2Base.addClass)([label], LABELTOP);

      if (label.classList.contains(LABELBOTTOM)) {
        (0, _ej2Base.removeClass)([label], LABELBOTTOM);
      }
    }
  }
  /**
   * Function to focus the Float Label element.
   * @param overAllWrapper - overall wrapper of multiselect.
   * @param componentWrapper - wrapper element of multiselect.
   * @param value - Value of the MultiSelect.
   * @param floatLabelType - Specify the FloatLabel Type.
   * @param placeholder - Specify the PlaceHolder text.
   */


  function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
    overAllWrapper.classList.remove('e-input-focus');
    var label = componentWrapper.querySelector('.' + FLOATTEXT);

    if (value && value.length <= 0 && floatLabelType === 'Auto' && !(0, _ej2Base.isNullOrUndefined)(label)) {
      if (label.classList.contains(LABELTOP)) {
        (0, _ej2Base.removeClass)([label], LABELTOP);
      }

      (0, _ej2Base.addClass)([label], LABELBOTTOM);
    }
  }
});;
define('@syncfusion/ej2-dropdowns/src/multi-select/index',["exports", "./multi-select", "./checkbox-selection"], function (_exports, _multiSelect, _checkboxSelection) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_multiSelect).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _multiSelect[key];
  });
  Object.keys(_checkboxSelection).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _checkboxSelection[key];
  });
});;
define('@syncfusion/ej2-dropdowns/src/multi-select/multi-select',["exports", "../drop-down-base/drop-down-base", "@syncfusion/ej2-popups", "@syncfusion/ej2-base", "../common/incremental-search", "@syncfusion/ej2-data", "./float-label"], function (_exports, _dropDownBase, _ej2Popups, _ej2Base, _incrementalSearch, _ej2Data, _floatLabel) {
  "use strict";

  _exports.__esModule = true;
  _exports.MultiSelect = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>


  /* tslint:enable */
  var FOCUS = 'e-input-focus';
  var DISABLED = 'e-disabled';
  var OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';
  var ELEMENT_WRAPPER = 'e-multi-select-wrapper';
  var ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';
  var HIDE_LIST = 'e-hide-listitem';
  var DELIMITER_VIEW = 'e-delim-view';
  var CHIP_WRAPPER = 'e-chips-collection';
  var CHIP = 'e-chips';
  var CHIP_CONTENT = 'e-chipcontent';
  var CHIP_CLOSE = 'e-chips-close';
  var CHIP_SELECTED = 'e-chip-selected';
  var SEARCHBOX_WRAPPER = 'e-searcher';
  var DELIMITER_VIEW_WRAPPER = 'e-delimiter';
  var ZERO_SIZE = 'e-zero-size';
  var REMAIN_WRAPPER = 'e-remain';
  var CLOSEICON_CLASS = 'e-chips-close e-close-hooker';
  var DELIMITER_WRAPPER = 'e-delim-values';
  var POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';
  var INPUT_ELEMENT = 'e-dropdownbase';
  var RTL_CLASS = 'e-rtl';
  var CLOSE_ICON_HIDE = 'e-close-icon-hide';
  var MOBILE_CHIP = 'e-mob-chip';
  var FOOTER = 'e-ddl-footer';
  var HEADER = 'e-ddl-header';
  var DISABLE_ICON = 'e-ddl-disable-icon';
  var SPINNER_CLASS = 'e-ms-spinner-icon';
  var HIDDEN_ELEMENT = 'e-multi-hidden';
  var destroy = 'destroy';
  var dropdownIcon = 'e-input-group-icon e-ddl-icon';
  var iconAnimation = 'e-icon-anim';
  var TOTAL_COUNT_WRAPPER = 'e-delim-total';
  var BOX_ELEMENT = 'e-multiselect-box';
  var FILTERPARENT = 'e-filter-parent';
  var CUSTOM_WIDTH = 'e-search-custom-width';
  /**
   * The Multiselect allows the user to pick a more than one value from list of predefined values.
   * ```html
   * <select id="list">
   *      <option value='1'>Badminton</option>
   *      <option value='2'>Basketball</option>
   *      <option value='3'>Cricket</option>
   *      <option value='4'>Football</option>
   *      <option value='5'>Tennis</option>
   * </select>
   * ```
   * ```typescript
   * <script>
   *   var multiselectObj = new Multiselect();
   *   multiselectObj.appendTo("#list");
   * </script>
   * ```
   */

  var MultiSelect =
  /** @class */
  function (_super) {
    __extends(MultiSelect, _super);
    /**
     * Constructor for creating the DropDownList widget.
     */


    function MultiSelect(option, element) {
      var _this = _super.call(this, option, element) || this;

      _this.isValidKey = false;
      _this.selectAllEventData = [];
      _this.selectAllEventEle = [];
      _this.scrollFocusStatus = false;
      _this.keyDownStatus = false;
      return _this;
    }

    ;

    MultiSelect.prototype.enableRTL = function (state) {
      if (state) {
        this.overAllWrapper.classList.add(RTL_CLASS);
      } else {
        this.overAllWrapper.classList.remove(RTL_CLASS);
      }

      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
    };

    MultiSelect.prototype.requiredModules = function () {
      var modules = [];

      if (this.mode === 'CheckBox') {
        this.isGroupChecking = this.enableGroupCheckBox;

        if (this.enableGroupCheckBox) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.enableSelectionOrder = false;
          this.isProtectedOnChange = prevOnChange;
        }

        this.allowCustomValue = false;
        this.hideSelectedItem = false;
        this.closePopupOnSelect = false;
        modules.push({
          member: 'CheckBoxSelection',
          args: [this]
        });
      }

      return modules;
    };

    MultiSelect.prototype.updateHTMLAttribute = function () {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];

          switch (htmlAttr) {
            case 'class':
              this.overAllWrapper.classList.add(this.htmlAttributes[htmlAttr]);
              this.popupWrapper.classList.add(this.htmlAttributes[htmlAttr]);
              break;

            case 'disabled':
              this.enable(false);
              break;

            case 'placeholder':
              if (!this.placeholder) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                this.setProperties({
                  placeholder: this.inputElement.placeholder
                }, true);
                this.refreshPlaceHolder();
              }

              break;

            default:
              var defaultAttr = ['id'];
              var validateAttr = ['name', 'required', 'aria-required', 'form'];
              var containerAttr = ['title', 'role', 'style', 'class'];

              if (defaultAttr.indexOf(htmlAttr) > -1) {
                this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
              } else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
              } else if (containerAttr.indexOf(htmlAttr) > -1) {
                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
              } else {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
              }

              break;
          }
        }
      }
    };

    MultiSelect.prototype.updateReadonly = function (state) {
      if (state || this.mode === 'CheckBox') {
        this.inputElement.setAttribute('readonly', 'true');
      } else {
        this.inputElement.removeAttribute('readonly');
      }
    };

    MultiSelect.prototype.updateClearButton = function (state) {
      if (state) {
        if (this.overAllClear.parentNode) {
          this.overAllClear.style.display = '';
        } else {
          this.componentWrapper.appendChild(this.overAllClear);
        }

        this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
      } else {
        this.overAllClear.style.display = 'none';
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
    };

    MultiSelect.prototype.updateCssClass = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.cssClass) && this.cssClass !== '') {
        (0, _ej2Base.addClass)([this.overAllWrapper], this.cssClass.split(' '));
        (0, _ej2Base.addClass)([this.popupWrapper], this.cssClass.split(' '));
      }
    };

    MultiSelect.prototype.onPopupShown = function () {
      var _this = this;

      var listItems;
      var mainListItems;

      if (_ej2Base.Browser.isDevice && this.mode === 'CheckBox' && this.allowFiltering) {
        var proxy_1 = this;

        window.onpopstate = function () {
          proxy_1.hidePopup();
          proxy_1.inputElement.focus();
        };

        history.pushState({}, '');
      }

      var animModel = {
        name: 'FadeIn',
        duration: 100
      };
      var eventArgs = {
        popup: this.popupObj,
        cancel: false,
        animation: animModel
      };
      this.trigger('open', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel) {
          _this.focusAtFirstListItem();

          document.body.appendChild(_this.popupObj.element);

          if (_this.mode === 'CheckBox' && _this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(_this.fields.groupBy)) {
            _this.updateListItems(_this.list.querySelectorAll('li.e-list-item'), _this.mainList.querySelectorAll('li.e-list-item'));
          }

          if (_this.mode === 'CheckBox' || _this.showDropDownIcon) {
            (0, _ej2Base.addClass)([_this.overAllWrapper], [iconAnimation]);
          }

          _this.refreshPopup();

          _this.popupObj.show(eventArgs.animation, _this.zIndex === 1000 ? _this.element : null);

          (0, _ej2Base.attributes)(_this.inputElement, {
            'aria-expanded': 'true'
          });

          if (_this.isFirstClick) {
            _this.loadTemplate();
          }
        }
      });
    };

    MultiSelect.prototype.updateListItems = function (listItems, mainListItems) {
      for (var i = 0; i < listItems.length; i++) {
        this.findGroupStart(listItems[i]);
        this.findGroupStart(mainListItems[i]);
      }

      this.deselectHeader();
    };

    MultiSelect.prototype.loadTemplate = function () {
      this.refreshListItems(null);

      if (this.mode === 'CheckBox') {
        this.removeFocus();
      }

      this.notify('reOrder', {
        module: 'CheckBoxSelection',
        enable: this.mode === 'CheckBox',
        e: this
      });
    };

    MultiSelect.prototype.setScrollPosition = function () {
      if ((!this.hideSelectedItem && this.mode !== 'CheckBox' || this.mode === 'CheckBox' && !this.enableSelectionOrder) && !(0, _ej2Base.isNullOrUndefined)(this.value) && this.value.length > 0) {
        var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', this.value[this.value.length - 1]);

        if (!(0, _ej2Base.isNullOrUndefined)(valueEle)) {
          this.scrollBottom(valueEle);
        }
      }
    };

    MultiSelect.prototype.focusAtFirstListItem = function () {
      if (this.ulElement && this.ulElement.querySelector('li.' + _dropDownBase.dropDownBaseClasses.li)) {
        var element = void 0;

        if (this.mode === 'CheckBox') {
          this.removeFocus();
          return;
        } else {
          element = this.ulElement.querySelector('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');
        }

        if (element !== null) {
          this.removeFocus();
          this.addListFocus(element);
        }
      }
    };

    MultiSelect.prototype.focusAtLastListItem = function (data) {
      var activeElement;

      if (data) {
        activeElement = (0, _incrementalSearch.Search)(data, this.liCollections, 'StartsWith', this.ignoreCase);
      } else {
        if (this.value && this.value.length) {
          (0, _incrementalSearch.Search)(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);
        } else {
          activeElement = null;
        }
      }

      if (activeElement && activeElement.item !== null) {
        this.addListFocus(activeElement.item);
        this.scrollBottom(activeElement.item, activeElement.index);
      }
    };

    MultiSelect.prototype.getAriaAttributes = function () {
      var ariaAttributes = {
        'aria-disabled': 'false',
        'aria-owns': this.element.id + '_options',
        'role': 'listbox',
        'aria-multiselectable': 'true',
        'aria-activedescendant': 'null',
        'aria-haspopup': 'true',
        'aria-expanded': 'false'
      };
      return ariaAttributes;
    };

    MultiSelect.prototype.updateListARIA = function () {
      (0, _ej2Base.attributes)(this.ulElement, {
        'id': this.element.id + '_options',
        'role': 'listbox',
        'aria-hidden': 'false'
      });
      var disableStatus = this.inputElement.disabled ? true : false;
      (0, _ej2Base.attributes)(this.inputElement, this.getAriaAttributes());

      if (disableStatus) {
        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-disabled': 'true'
        });
      }

      this.ensureAriaDisabled(disableStatus ? 'true' : 'false');
    };

    MultiSelect.prototype.ensureAriaDisabled = function (status) {
      if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {
        var attr = this.htmlAttributes;
        (0, _ej2Base.extend)(attr, {
          'aria-disabled': status
        }, attr);
        this.setProperties({
          htmlAttributes: attr
        }, true);
      }
    };

    MultiSelect.prototype.removelastSelection = function (e) {
      var elements;
      elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);
      var value = elements[elements.length - 1].getAttribute('data-value');

      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.tempValues = this.value.slice();
      }

      this.removeValue(value, e);
      this.removeChipSelection();
      this.updateDelimeter(this.delimiterChar, e);
      this.makeTextBoxEmpty();

      if (this.mainList && this.listData) {
        this.refreshSelection();
      }

      this.checkPlaceholderSize();
    };

    MultiSelect.prototype.onActionFailure = function (e) {
      _super.prototype.onActionFailure.call(this, e);

      this.renderPopup();
      this.onPopupShown();
    };

    MultiSelect.prototype.targetElement = function () {
      this.targetInputElement = this.inputElement;

      if (this.mode === 'CheckBox' && this.allowFiltering) {
        this.notify('targetElement', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox'
        });
      }

      return this.targetInputElement.value;
    };

    MultiSelect.prototype.getForQuery = function (valuecheck) {
      var predicate;
      var field = (0, _ej2Base.isNullOrUndefined)(this.fields.value) ? this.fields.text : this.fields.value;

      for (var i = 0; i < valuecheck.length; i++) {
        if (i === 0) {
          predicate = new _ej2Data.Predicate(field, 'equal', valuecheck[i]);
        } else {
          predicate = predicate.or(field, 'equal', valuecheck[i]);
        }
      }

      return this.getQuery(this.query).where(predicate);
    };

    MultiSelect.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);

      this.updateSelectElementData(this.allowFiltering);
      var proxy = this;
      var valuecheck = [];

      if (!(0, _ej2Base.isNullOrUndefined)(this.value) && !this.allowCustomValue) {
        for (var i = 0; i < this.value.length; i++) {
          var checkEle = this.findListElement(this.allowFiltering && !(0, _ej2Base.isNullOrUndefined)(this.mainList) ? this.mainList : ulElement, 'li', 'data-value', proxy.value[i]);

          if (!checkEle) {
            valuecheck.push(proxy.value[i]);
          }
        }
      }

      if (valuecheck.length > 0 && this.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function (e) {
          proxy.addItem(e.result, list.length);
          proxy.updateActionList(ulElement, list, e);
        });
      } else {
        this.updateActionList(ulElement, list, e);
      }
    };

    MultiSelect.prototype.updateActionList = function (ulElement, list, e, isUpdated) {
      if (this.mode === 'CheckBox' && this.showSelectAll) {
        this.notify('selectAll', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox'
        });
      }

      if (!this.mainList && !this.mainData) {
        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
        this.mainData = list;
        this.mainListCollection = this.liCollections;
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.mainData) && this.mainData.length === 0) {
        this.mainData = list;
      }

      if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering) {
        this.checkForCustomValue(this.tempQuery, this.fields);
        return;
      }

      if (this.value && this.value.length && (this.mode !== 'CheckBox' && this.inputElement.value !== '' || this.mode === 'CheckBox')) {
        this.refreshSelection();
      }

      this.updateListARIA();
      this.unwireListEvents();
      this.wireListEvents();

      if (!(0, _ej2Base.isNullOrUndefined)(this.setInitialValue)) {
        this.setInitialValue();
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.selectAllAction)) {
        this.selectAllAction();
      }

      if (this.setDynValue) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.text) && ((0, _ej2Base.isNullOrUndefined)(this.value) || this.value.length === 0)) {
          this.initialTextUpdate();
        }

        this.initialValueUpdate();
        this.initialUpdate();
        this.refreshPlaceHolder();

        if (this.mode !== 'CheckBox' && this.changeOnBlur) {
          this.updateValueState(null, this.value, null);
        }
      }

      this.renderPopup();

      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.onPopupShown();
      }
    };

    MultiSelect.prototype.refreshSelection = function () {
      var value;
      var element;
      var className = this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected;

      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        for (var index = 0; !(0, _ej2Base.isNullOrUndefined)(this.value[index]); index++) {
          value = this.value[index];
          element = this.findListElement(this.list, 'li', 'data-value', value);

          if (element) {
            (0, _ej2Base.addClass)([element], className);

            if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.group))) {
              (0, _ej2Base.addClass)([element.previousElementSibling], className);
            }

            if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
              this.hideGroupItem(value);
            }

            if (this.hideSelectedItem && element.classList.contains(_dropDownBase.dropDownBaseClasses.focus)) {
              (0, _ej2Base.removeClass)([element], _dropDownBase.dropDownBaseClasses.focus);
              var listEle = element.parentElement.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');

              if (listEle.length > 0) {
                (0, _ej2Base.addClass)([listEle[0]], _dropDownBase.dropDownBaseClasses.focus);
              } else {
                this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;
                this.l10nUpdate();
                (0, _ej2Base.addClass)([this.list], _dropDownBase.dropDownBaseClasses.noData);
              }
            }

            element.setAttribute('aria-selected', 'true');

            if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {
              var ariaValue = element.firstElementChild.getAttribute('aria-checked');

              if ((0, _ej2Base.isNullOrUndefined)(ariaValue) || ariaValue === 'false') {
                var args = {
                  module: 'CheckBoxSelection',
                  enable: this.mode === 'CheckBox',
                  li: element,
                  e: null
                };
                this.notify('updatelist', args);
              }
            }
          }
        }
      }

      this.checkSelectAll();
      this.checkMaxSelection();
    };

    MultiSelect.prototype.hideGroupItem = function (value) {
      var element;
      var element1;
      var className = this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected;
      element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);
      var i = 0;
      var j = 0;
      var temp = true;
      var temp1 = true;

      do {
        if (element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.li)) {
          temp = false;
        }

        if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.group)) {
          i = 10;
        } else {
          element = element.previousElementSibling;
        }

        if (element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.li)) {
          temp1 = false;
        }

        if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(_dropDownBase.dropDownBaseClasses.group)) {
          j = 10;
        } else {
          element1 = element1.nextElementSibling;
        }
      } while (i < 10 || j < 10);

      if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
        (0, _ej2Base.addClass)([element.previousElementSibling], className);
      } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {
        (0, _ej2Base.removeClass)([element.previousElementSibling], className);
      }
    };

    MultiSelect.prototype.checkSelectAll = function () {
      var groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;
      var listItem = this.list.querySelectorAll('li.e-list-item');
      var searchCount = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li).length;
      var searchActiveCount = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.selected).length;

      if (this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        searchActiveCount = searchActiveCount - groupItemLength;
      }

      if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && this.mode === 'CheckBox' && this.showSelectAll) {
        this.notify('checkSelectAll', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox',
          value: 'check'
        });
      } else if (searchCount !== searchActiveCount && this.mode === 'CheckBox' && this.showSelectAll) {
        this.notify('checkSelectAll', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox',
          value: 'uncheck'
        });
      }

      if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
        for (var i = 0; i < listItem.length; i++) {
          this.findGroupStart(listItem[i]);
        }

        this.deselectHeader();
      }
    };

    MultiSelect.prototype.openClick = function (e) {
      if (!this.openOnClick && this.mode !== 'CheckBox') {
        if (this.targetElement() !== '') {
          this.showPopup();
        } else {
          this.hidePopup();
        }
      } else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {
        this.showPopup();
      }
    };

    MultiSelect.prototype.KeyUp = function (e) {
      if (this.mode === 'CheckBox' && !this.openOnClick) {
        var char = String.fromCharCode(e.keyCode);
        var isWordCharacter = char.match(/\w/);

        if (!(0, _ej2Base.isNullOrUndefined)(isWordCharacter)) {
          this.isValidKey = true;
        }
      }

      this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;

      if (this.isValidKey) {
        this.isValidKey = false;
        this.expandTextbox();
        this.showOverAllClear();

        switch (e.keyCode) {
          default:
            // For filtering works in mobile firefox
            this.search(e);
        }
      }
    };
    /**
     * To filter the multiselect data from given data source by using query
     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.
     * @param  {Query} query - Specify the query to filter the data.
     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.
     * @return {void}.
     */


    MultiSelect.prototype.filter = function (dataSource, query, fields) {
      this.isFiltered = true;
      this.remoteFilterAction = true;
      this.dataUpdater(dataSource, query, fields);
    };

    MultiSelect.prototype.getQuery = function (query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new _ej2Data.Query();

      if (this.filterAction) {
        if (this.targetElement() !== null) {
          var dataType = this.typeOfData(this.dataSource).typeof;

          if (!(this.dataSource instanceof _ej2Data.DataManager) && dataType === 'string' || dataType === 'number') {
            filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          } else {
            var fields = this.fields;
            filterQuery.where(!(0, _ej2Base.isNullOrUndefined)(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          }
        }

        return filterQuery;
      } else {
        return query ? query : this.query ? this.query : new _ej2Data.Query();
      }
    };

    MultiSelect.prototype.dataUpdater = function (dataSource, query, fields) {
      this.isDataFetched = false;

      if (this.targetElement().trim() === '') {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;

        if (this.backCommand) {
          this.remoteCustomValue = false;
          this.onActionComplete(list, this.mainData);

          if (this.value && this.value.length) {
            this.refreshSelection();
          }

          if (this.keyCode !== 8) {
            this.focusAtFirstListItem();
          }

          this.notify('reOrder', {
            module: 'CheckBoxSelection',
            enable: this.mode === 'CheckBox',
            e: this
          });
        }
      } else {
        this.resetList(dataSource, fields, query);

        if (this.allowCustomValue) {
          if (!(dataSource instanceof _ej2Data.DataManager)) {
            this.checkForCustomValue(query, fields);
          } else {
            this.remoteCustomValue = true;
            this.tempQuery = query;
          }
        }
      }

      this.refreshPopup();

      if (this.mode === 'CheckBox') {
        this.removeFocus();
      }
    };

    MultiSelect.prototype.checkForCustomValue = function (query, fields) {
      var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);

      if (this.allowCustomValue && dataChecks) {
        var value = this.inputElement.value;
        var field = fields ? fields : this.fields;
        var customData = !(0, _ej2Base.isNullOrUndefined)(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;

        if (typeof customData !== 'string') {
          var dataItem = {};
          (0, _ej2Base.setValue)(field.text, value, dataItem);
          (0, _ej2Base.setValue)(field.value, value, dataItem);
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, dataItem);
          this.resetList(tempData, field, query);
        } else {
          var tempData = [this.inputElement.value];
          this.resetList(tempData, field);
        }
      }

      if (this.value && this.value.length) {
        this.refreshSelection();
      }
    };

    MultiSelect.prototype.getNgDirective = function () {
      return 'EJS-MULTISELECT';
    };

    MultiSelect.prototype.wrapperClick = function (e) {
      this.setDynValue = false;

      if (!this.enabled) {
        return;
      }

      if (e.target === this.overAllClear) {
        e.preventDefault();
        return;
      }

      if (!this.inputFocus) {
        this.inputElement.focus();
      }

      if (!this.readonly) {
        if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE) !== -1) {
          if (this.isPopupOpen()) {
            this.refreshPopup();
          }

          return;
        }

        if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
          this.showPopup();
        } else {
          this.hidePopup();

          if (this.mode === 'CheckBox') {
            this.showOverAllClear();
            this.inputFocus = true;

            if (!this.overAllWrapper.classList.contains(FOCUS)) {
              this.overAllWrapper.classList.add(FOCUS);
            }
          }
        }
      }

      e.preventDefault();
    };

    MultiSelect.prototype.enable = function (state) {
      if (state) {
        this.overAllWrapper.classList.remove(DISABLED);
        this.inputElement.removeAttribute('disabled');
        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-disabled': 'false'
        });
        this.ensureAriaDisabled('false');
      } else {
        this.overAllWrapper.classList.add(DISABLED);
        this.inputElement.setAttribute('disabled', 'true');
        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-disabled': 'true'
        });
        this.ensureAriaDisabled('true');
      }

      if (this.enabled !== state) {
        this.enabled = state;
      }

      this.hidePopup();
    };

    MultiSelect.prototype.onBlur = function (eve) {
      var target;

      if (!(0, _ej2Base.isNullOrUndefined)(eve)) {
        target = eve.relatedTarget;
      }

      if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
        if (this.mode !== 'CheckBox') {
          this.inputElement.focus();
        }

        return;
      }

      if (this.mode === 'CheckBox' && _ej2Base.Browser.isIE && !(0, _ej2Base.isNullOrUndefined)(eve)) {
        this.inputFocus = false;
        this.overAllWrapper.classList.remove(FOCUS);
        return;
      }

      if (this.scrollFocusStatus) {
        if (!(0, _ej2Base.isNullOrUndefined)(eve)) {
          eve.preventDefault();
        }

        this.inputElement.focus();
        this.scrollFocusStatus = false;
        return;
      }

      this.inputFocus = false;
      this.overAllWrapper.classList.remove(FOCUS);

      if (this.mode !== 'Box' && this.mode !== 'CheckBox') {
        this.refreshListItems(null);
        this.updateDelimView();
      }

      if (this.changeOnBlur) {
        this.updateValueState(eve, this.value, this.tempValues);
        this.dispatchEvent(this.hiddenElement, 'change');
      }

      this.overAllClear.style.display = 'none';

      if (this.isPopupOpen()) {
        this.DropDownBaseresetBlazorTemplates(false, false, true, true, false, true, true);
        this.hidePopup();
      }

      this.makeTextBoxEmpty();
      this.trigger('blur');
      this.focused = true;

      if (_ej2Base.Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
        this.removeChipFocus();
      }

      this.removeChipSelection();
      this.refreshInputHight();
      (0, _floatLabel.floatLabelBlur)(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
      this.refreshPlaceHolder();

      if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === 'CheckBox') && !(0, _ej2Base.isNullOrUndefined)(this.mainList)) {
        this.ulElement = this.mainList;
      }

      this.checkPlaceholderSize();
    };

    MultiSelect.prototype.checkPlaceholderSize = function () {
      if (this.showDropDownIcon) {
        var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        this.setPlaceholderSize(downIconWidth);
      }
    };

    MultiSelect.prototype.setPlaceholderSize = function (downIconWidth) {
      if ((0, _ej2Base.isNullOrUndefined)(this.value) || this.value.length === 0) {
        if (this.dropIcon.offsetWidth !== 0) {
          this.searchWrapper.style.width = 'calc(100% - ' + (downIconWidth + 10) + 'px';
        } else {
          (0, _ej2Base.addClass)([this.searchWrapper], CUSTOM_WIDTH);
        }
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.searchWrapper.removeAttribute('style');
        (0, _ej2Base.removeClass)([this.searchWrapper], CUSTOM_WIDTH);
      }
    };

    MultiSelect.prototype.refreshInputHight = function () {
      if ((!this.value || !this.value.length) && ((0, _ej2Base.isNullOrUndefined)(this.text) || this.text === '')) {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      } else {
        this.searchWrapper.classList.add(ZERO_SIZE);
      }
    };

    MultiSelect.prototype.validateValues = function (newValue, oldValue) {
      return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
    };

    MultiSelect.prototype.updateValueState = function (event, newVal, oldVal) {
      var newValue = newVal ? newVal : [];
      var oldValue = oldVal ? oldVal : [];

      if (this.initStatus && this.validateValues(newValue, oldValue)) {
        var eventArgs = {
          e: event,
          oldValue: oldVal,
          value: newVal,
          isInteracted: event ? true : false,
          element: this.element
        };
        this.trigger('change', eventArgs);
        this.updateTempValue();

        if (!this.changeOnBlur) {
          this.dispatchEvent(this.hiddenElement, 'change');
        }
      }
    };

    MultiSelect.prototype.updateTempValue = function () {
      if (!this.value) {
        this.tempValues = this.value;
      } else {
        this.tempValues = this.value.slice();
      }
    };

    MultiSelect.prototype.getPagingCount = function () {
      var height = this.list.classList.contains(_dropDownBase.dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');
      return Math.round(this.list.offsetHeight / parseInt(height, 10));
    };

    MultiSelect.prototype.pageUpSelection = function (steps) {
      var collection = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
      var previousItem;
      previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));
    };

    ;

    MultiSelect.prototype.pageDownSelection = function (steps) {
      var list = this.getItems();
      var collection = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
      var previousItem;
      previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));
    };

    MultiSelect.prototype.getItems = function () {
      if (!this.list) {
        _super.prototype.render.call(this);
      }

      return this.ulElement && this.ulElement.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')') : [];
    };

    MultiSelect.prototype.focusInHandler = function (e) {
      if (this.enabled) {
        this.showOverAllClear();
        this.inputFocus = true;

        if (this.value && this.value.length) {
          if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
            this.chipCollectionWrapper.style.display = '';
          } else {
            this.showDelimWrapper();
          }

          if (this.mode !== 'CheckBox') {
            this.viewWrapper.style.display = 'none';
          }
        }

        if (this.mode !== 'CheckBox') {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        }

        this.checkPlaceholderSize();

        if (this.focused) {
          var args = {
            isInteracted: e ? true : false,
            event: e
          };
          this.trigger('focus', args);
          this.focused = false;
        }

        if (!this.overAllWrapper.classList.contains(FOCUS)) {
          this.overAllWrapper.classList.add(FOCUS);
        }

        (0, _floatLabel.floatLabelFocus)(this.overAllWrapper, this.componentWrapper);

        if (this.isPopupOpen()) {
          this.refreshPopup();
        }

        return true;
      } else {
        return false;
      }
    };

    MultiSelect.prototype.showDelimWrapper = function () {
      if (this.mode === 'CheckBox') {
        this.viewWrapper.style.display = '';
      } else {
        this.delimiterWrapper.style.display = '';
      }

      this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
    };

    MultiSelect.prototype.hideDelimWrapper = function () {
      this.delimiterWrapper.style.display = 'none';
      this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
    };

    MultiSelect.prototype.expandTextbox = function () {
      var size = 5;

      if (this.placeholder) {
        size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;
      }

      if (this.inputElement.value.length > size) {
        this.inputElement.size = this.inputElement.value.length;
      } else {
        this.inputElement.size = size;
      }
    };

    MultiSelect.prototype.isPopupOpen = function () {
      return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
    };

    MultiSelect.prototype.refreshPopup = function () {
      if (this.popupObj && this.mobFilter) {
        this.popupObj.setProperties({
          width: this.calcPopupWidth()
        });
        this.popupObj.refreshPosition(this.overAllWrapper);
      }
    };

    MultiSelect.prototype.checkTextLength = function () {
      return this.targetElement().length < 1;
    };

    MultiSelect.prototype.popupKeyActions = function (e) {
      switch (e.keyCode) {
        case 38:
          this.hidePopup();

          if (this.mode === 'CheckBox') {
            this.inputElement.focus();
          }

          e.preventDefault();
          break;

        case 40:
          if (!this.isPopupOpen()) {
            this.showPopup();
            e.preventDefault();
          }

          break;
      }
    };

    MultiSelect.prototype.updateAriaAttribute = function () {
      var focusedItem = this.list.querySelector('.' + _dropDownBase.dropDownBaseClasses.focus);

      if (!(0, _ej2Base.isNullOrUndefined)(focusedItem)) {
        this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);
      }
    };

    MultiSelect.prototype.homeNavigation = function (isHome) {
      this.removeFocus();
      var scrollEle = this.ulElement.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

      if (scrollEle.length > 0) {
        var element = scrollEle[isHome ? 0 : scrollEle.length - 1];
        element.classList.add(_dropDownBase.dropDownBaseClasses.focus);
        this.scrollBottom(element);
      }
    };

    MultiSelect.prototype.onKeyDown = function (e) {
      if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {
        return;
      }

      this.keyDownStatus = true;

      if (e.keyCode > 111 && e.keyCode < 124) {
        return;
      }

      if (e.altKey) {
        this.popupKeyActions(e);
        return;
      } else if (this.isPopupOpen()) {
        var focusedItem = this.list.querySelector('.' + _dropDownBase.dropDownBaseClasses.focus);
        var activeIndex = void 0;

        switch (e.keyCode) {
          case 36:
          case 35:
            this.homeNavigation(e.keyCode === 36 ? true : false);
            break;

          case 33:
            e.preventDefault();

            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute('data-value'));
              this.pageUpSelection(activeIndex - this.getPagingCount());
              this.updateAriaAttribute();
            }

            return;

          case 34:
            e.preventDefault();

            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute('data-value'));
              this.pageDownSelection(activeIndex + this.getPagingCount());
              this.updateAriaAttribute();
            }

            return;

          case 38:
            this.arrowUp(e);
            break;

          case 40:
            this.arrowDown(e);
            break;

          case 27:
            e.preventDefault();
            this.hidePopup();

            if (this.mode === 'CheckBox') {
              this.inputElement.focus();
            }

            return;

          case 13:
            e.preventDefault();

            if (this.mode !== 'CheckBox') {
              this.selectByKey(e);
            }

            this.checkPlaceholderSize();
            return;

          case 32:
            this.spaceKeySelection(e);
            return;

          case 9:
            e.preventDefault();
            this.hidePopup();
            this.inputElement.focus();
            this.overAllWrapper.classList.add(FOCUS);
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 9:
          case 16:
          case 17:
          case 20:
            return;

          case 40:
            if (this.openOnClick) {
              this.showPopup();
            }

            break;

          case 27:
            e.preventDefault();
            this.escapeAction();
            return;
        }
      }

      if (this.checkTextLength()) {
        this.keyNavigation(e);
      }

      if (this.mode === 'CheckBox' && this.enableSelectionOrder) {
        this.checkBackCommand(e);
      }

      this.expandTextbox();
      this.refreshPopup();
    };

    MultiSelect.prototype.arrowDown = function (e) {
      e.preventDefault();
      this.moveByList(1);
      this.keyAction = true;

      if (document.activeElement.classList.contains('e-input-filter') || this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list) {
        this.list.focus();

        _ej2Base.EventHandler.add(this.list, 'keydown', this.onKeyDown, this);
      }

      this.updateAriaAttribute();
    };

    MultiSelect.prototype.arrowUp = function (e) {
      e.preventDefault();
      this.keyAction = true;
      var list = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

      if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        list = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ',li.' + _dropDownBase.dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
      }

      var focuseElem = this.list.querySelector('li.' + _dropDownBase.dropDownBaseClasses.focus);
      var index = Array.prototype.slice.call(list).indexOf(focuseElem);

      if (index <= 0 && this.mode === 'CheckBox' && this.allowFiltering) {
        this.keyAction = false;
        this.notify('inputFocus', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox',
          value: 'focus'
        });
      } else {
        this.list.focus();
      }

      this.moveByList(-1);
      this.updateAriaAttribute();
    };

    MultiSelect.prototype.spaceKeySelection = function (e) {
      if (this.mode === 'CheckBox') {
        if (!document.activeElement.classList.contains('e-input-filter')) {
          e.preventDefault();
          this.keyAction = true;
          this.list.focus();
        }

        this.selectByKey(e);
      }

      this.checkPlaceholderSize();
    };

    MultiSelect.prototype.checkBackCommand = function (e) {
      if (e.keyCode === 8 && this.targetElement() === '') {
        this.backCommand = false;
      } else {
        this.backCommand = true;
      }
    };

    MultiSelect.prototype.keyNavigation = function (e) {
      if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox' && this.value && this.value.length) {
        switch (e.keyCode) {
          case 37:
            //left arrow   
            e.preventDefault();
            this.moveBy(-1, e);
            break;

          case 39:
            //right arrow  
            e.preventDefault();
            this.moveBy(1, e);
            break;

          case 8:
            this.removelastSelection(e);
            break;

          case 46:
            //del
            this.removeSelectedChip(e);
            break;
        }
      } else if (e.keyCode === 8 && this.mode === 'Delimiter') {
        if (this.value && this.value.length) {
          e.preventDefault();
          var temp = this.value[this.value.length - 1];
          this.removeValue(temp, e);
          this.updateDelimeter(this.delimiterChar, e);
          this.focusAtLastListItem(temp);
        }
      }
    };

    MultiSelect.prototype.selectByKey = function (e) {
      this.removeChipSelection();
      this.selectListByKey(e);

      if (this.hideSelectedItem) {
        this.focusAtFirstListItem();
      }
    };

    MultiSelect.prototype.escapeAction = function () {
      var temp = this.tempValues ? this.tempValues.slice() : [];

      if (this.value && this.validateValues(this.value, temp)) {
        if (this.mode !== 'CheckBox') {
          this.value = temp;
          this.initialValueUpdate();
        }

        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
          this.chipCollectionWrapper.style.display = '';
        } else {
          this.showDelimWrapper();
        }

        this.refreshPlaceHolder();

        if (this.value.length) {
          this.showOverAllClear();
        } else {
          this.hideOverAllClear();
        }
      }

      this.makeTextBoxEmpty();
    };

    MultiSelect.prototype.scrollBottom = function (selectedLI, activeIndex) {
      var currentOffset = this.list.offsetHeight;
      var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      boxRange = this.fields.groupBy && !(0, _ej2Base.isNullOrUndefined)(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;

      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextBottom > currentOffset) {
        this.list.scrollTop = nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = nextOffset;
      }
    };

    MultiSelect.prototype.scrollTop = function (selectedLI, activeIndex) {
      var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
      var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      nextOffset = this.fields.groupBy && !(0, _ej2Base.isUndefined)(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;

      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextOffset < 0) {
        this.list.scrollTop = this.list.scrollTop + nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !(0, _ej2Base.isUndefined)(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
      }
    };

    MultiSelect.prototype.selectListByKey = function (e) {
      var li = this.list.querySelector('li.' + _dropDownBase.dropDownBaseClasses.focus);
      var limit = this.value && this.value.length ? this.value.length : 0;
      var target;

      if (li !== null) {
        if (li.classList.contains('e-active')) {
          limit = limit - 1;
        }

        if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
          this.updateListSelection(li, e);
          this.addListFocus(li);

          if (this.mode === 'CheckBox') {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
            this.checkPlaceholderSize();

            if (this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
              target = li.firstElementChild.lastElementChild;
              this.findGroupStart(target);
              this.deselectHeader();
            }
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }

          this.makeTextBoxEmpty();

          if (this.mode !== 'CheckBox') {
            this.refreshListItems(li.textContent);
          }

          if (!this.changeOnBlur) {
            this.updateValueState(e, this.value, this.tempValues);
          }

          this.refreshPopup();
        } else {
          if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
            target = li.firstElementChild.lastElementChild;
            target.classList.contains('e-check') ? this.selectAllItem(false, e, li) : this.selectAllItem(true, e, li);
          }
        }

        this.refreshSelection();

        if (this.closePopupOnSelect) {
          this.hidePopup();
        }
      }

      this.refreshPlaceHolder();
    };

    MultiSelect.prototype.refreshListItems = function (data) {
      if ((this.allowFiltering || this.mode === 'CheckBox' && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
        var list = void 0;
        list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
        this.focusAtLastListItem(data);

        if (this.value && this.value.length) {
          this.refreshSelection();
        }
      }
    };

    MultiSelect.prototype.removeSelectedChip = function (e) {
      var selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);
      var temp;

      if (selectedElem !== null) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
          this.tempValues = this.value.slice();
        }

        temp = selectedElem.nextElementSibling;

        if (temp !== null) {
          this.removeChipSelection();
          this.addChipSelection(temp, e);
        }

        this.removeValue(selectedElem.getAttribute('data-value'), e);
        this.makeTextBoxEmpty();
      }

      if (this.closePopupOnSelect) {
        this.hidePopup();
      }

      this.checkPlaceholderSize();
    };

    MultiSelect.prototype.moveByTop = function (state) {
      var elements = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li);
      var index;

      if (elements.length > 1) {
        this.removeFocus();
        index = state ? 0 : elements.length - 1;
        this.addListFocus(elements[index]);
        this.scrollBottom(elements[index], index);
      }

      this.updateAriaAttribute();
    };

    MultiSelect.prototype.moveByList = function (position) {
      if (this.list) {
        var elements = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');

        if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
          elements = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ',li.' + _dropDownBase.dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');
        }

        var selectedElem = this.list.querySelector('li.' + _dropDownBase.dropDownBaseClasses.focus);
        var temp = -1;

        if (elements.length) {
          for (var index = 0; index < elements.length; index++) {
            if (elements[index] === selectedElem) {
              temp = index;
              break;
            }
          }

          if (position > 0) {
            if (temp < elements.length - 1) {
              this.removeFocus();
              this.addListFocus(elements[++temp]);
              this.updateCheck(elements[temp]);
              this.scrollBottom(elements[temp], temp);
            }
          } else {
            if (temp > 0) {
              this.removeFocus();
              this.addListFocus(elements[--temp]);
              this.updateCheck(elements[temp]);
              this.scrollTop(elements[temp], temp);
            }
          }
        }
      }
    };

    MultiSelect.prototype.updateCheck = function (element) {
      if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        var checkElement = element.firstElementChild.lastElementChild;

        if (checkElement.classList.contains('e-check')) {
          element.classList.add('e-active');
        } else {
          element.classList.remove('e-active');
        }
      }
    };

    MultiSelect.prototype.moveBy = function (position, e) {
      var elements;
      var selectedElem;
      var temp;
      elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);
      selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);

      if (selectedElem === null) {
        if (position < 0) {
          this.addChipSelection(elements[elements.length - 1], e);
        }
      } else {
        if (position < 0) {
          temp = selectedElem.previousElementSibling;

          if (temp !== null) {
            this.removeChipSelection();
            this.addChipSelection(temp, e);
          }
        } else {
          temp = selectedElem.nextElementSibling;
          this.removeChipSelection();

          if (temp !== null) {
            this.addChipSelection(temp, e);
          }
        }
      }
    };

    MultiSelect.prototype.chipClick = function (e) {
      if (this.enabled) {
        var elem = (0, _ej2Base.closest)(e.target, '.' + CHIP);
        this.removeChipSelection();
        this.addChipSelection(elem, e);
      }
    };

    MultiSelect.prototype.removeChipSelection = function () {
      if (this.chipCollectionWrapper) {
        this.removeChipFocus();
      }
    };

    MultiSelect.prototype.addChipSelection = function (element, e) {
      (0, _ej2Base.addClass)([element], CHIP_SELECTED);
      this.trigger('chipSelection', e);
    };

    MultiSelect.prototype.onChipRemove = function (e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }

      if (this.enabled && !this.readonly) {
        var element = e.target.parentElement;
        var customVal = element.getAttribute('data-value');
        var value = this.getFormattedValue(customVal);

        if (this.allowCustomValue && (customVal !== 'false' && value === false || !(0, _ej2Base.isNullOrUndefined)(value) && value.toString() === 'NaN')) {
          value = customVal;
        }

        if (this.isPopupOpen() && this.mode !== 'CheckBox') {
          this.hidePopup();
        }

        if (!this.inputFocus) {
          this.inputElement.focus();
        }

        this.removeValue(value, e);

        if ((0, _ej2Base.isNullOrUndefined)(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {
          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
          this.onActionComplete(list, this.mainData);
        }

        this.updateDelimeter(this.delimiterChar, e);

        if (this.placeholder && this.floatLabelType === 'Never') {
          this.makeTextBoxEmpty();
          this.checkPlaceholderSize();
        } else {
          this.inputElement.value = '';
        }

        e.preventDefault();
      }
    };

    MultiSelect.prototype.makeTextBoxEmpty = function () {
      this.inputElement.value = '';
      this.refreshPlaceHolder();
    };

    MultiSelect.prototype.refreshPlaceHolder = function () {
      if (this.placeholder && this.floatLabelType === 'Never') {
        if (this.value && this.value.length || !(0, _ej2Base.isNullOrUndefined)(this.text) && this.text !== '') {
          this.inputElement.placeholder = '';
        } else {
          this.inputElement.placeholder = this.placeholder;
        }
      } else {
        this.setFloatLabelType();
      }

      this.expandTextbox();
    };

    MultiSelect.prototype.removeValue = function (value, eve, length, isClearAll) {
      var _this = this;

      var index = this.value.indexOf(this.getFormattedValue(value));

      if (index === -1 && this.allowCustomValue && !(0, _ej2Base.isNullOrUndefined)(value)) {
        index = this.value.indexOf(value.toString());
      }

      var targetEle = eve && eve.target;
      isClearAll = isClearAll || targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;
      var className = this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected;

      if (index !== -1) {
        var element_1 = this.findListElement(this.list, 'li', 'data-value', value);
        var val_1 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element_1,
          itemData: val_1,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger('removing', eventArgs, function (eventArgs) {
          if (eventArgs.cancel) {
            _this.removeIndex++;
          } else {
            var removeVal = _this.value.slice(0);

            removeVal.splice(index, 1);

            _this.setProperties({
              value: [].concat([], removeVal)
            }, true);

            if (element_1 !== null) {
              var hideElement = _this.findListElement(_this.mainList, 'li', 'data-value', value);

              element_1.setAttribute('aria-selected', 'false');
              (0, _ej2Base.removeClass)([element_1], className);

              if (hideElement) {
                hideElement.setAttribute('aria-selected', 'false');
                (0, _ej2Base.removeClass)([element_1, hideElement], className);
              }

              _this.notify('activeList', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox',
                li: element_1,
                e: _this,
                index: index
              });

              _this.notify('updatelist', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox',
                li: element_1,
                e: eve
              });

              (0, _ej2Base.attributes)(_this.inputElement, {
                'aria-activedescendant': element_1.id
              });

              if (_this.value.length !== _this.mainData.length && _this.mode === 'CheckBox' && _this.showSelectAll) {
                _this.notify('checkSelectAll', {
                  module: 'CheckBoxSelection',
                  enable: _this.mode === 'CheckBox',
                  value: 'uncheck'
                });
              }
            }

            if (_this.hideSelectedItem && _this.fields.groupBy) {
              _this.hideGroupItem(value);
            }

            _this.updateMainList(true, value);

            _this.removeChip(value);

            _this.updateChipStatus();

            var limit = _this.value && _this.value.length ? _this.value.length : 0;

            if (limit < _this.maximumSelectionLength) {
              var collection = _this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.e-active)');

              (0, _ej2Base.removeClass)(collection, 'e-disable');
            }

            _this.trigger('removed', eventArgs);

            var targetEle_1 = eve && eve.currentTarget;
            var isSelectAll = targetEle_1 && targetEle_1.classList.contains('e-selectall-parent') ? true : null;

            if (!_this.changeOnBlur && !isClearAll && eve && length && !isSelectAll) {
              _this.updateValueState(eve, _this.value, _this.tempValues);
            }

            if (length) {
              _this.selectAllEventData.push(val_1);

              _this.selectAllEventEle.push(element_1);
            }

            if (length === 1) {
              if (!_this.changeOnBlur) {
                _this.updateValueState(eve, _this.value, _this.tempValues);
              }

              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: false
              };

              _this.trigger('selectedAll', args);

              _this.selectAllEventData = [];
              _this.selectAllEventEle = [];
            }

            if (isClearAll) {
              _this.clearAllCallback(eve, isClearAll);
            }
          }
        });
      }
    };

    MultiSelect.prototype.updateMainList = function (state, value) {
      if (this.allowFiltering || this.mode === 'CheckBox') {
        var element2 = this.findListElement(this.mainList, 'li', 'data-value', value);

        if (element2) {
          if (state) {
            element2.setAttribute('aria-selected', 'false');
            (0, _ej2Base.removeClass)([element2], this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected);

            if (this.mode === 'CheckBox') {
              element2.firstElementChild.setAttribute('aria-checked', 'false');
              (0, _ej2Base.removeClass)([element2.firstElementChild.lastElementChild], 'e-check');
            }
          } else {
            element2.setAttribute('aria-selected', 'true');
            (0, _ej2Base.addClass)([element2], this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected);

            if (this.mode === 'CheckBox') {
              element2.firstElementChild.setAttribute('aria-checked', 'true');
              (0, _ej2Base.addClass)([element2.firstElementChild.lastElementChild], 'e-check');
            }
          }
        }
      }
    };

    MultiSelect.prototype.removeChip = function (value) {
      if (this.chipCollectionWrapper) {
        var element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);

        if (element) {
          (0, _ej2Base.remove)(element);
        }
      }
    };

    MultiSelect.prototype.setWidth = function (width) {
      if (!(0, _ej2Base.isNullOrUndefined)(width)) {
        if (typeof width === 'number') {
          this.overAllWrapper.style.width = (0, _ej2Base.formatUnit)(width);
        } else if (typeof width === 'string') {
          this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
        }
      }
    };

    MultiSelect.prototype.updateChipStatus = function () {
      if (this.value.length) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = '';
        }

        if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
          this.showDelimWrapper();
        }

        this.showOverAllClear();
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = 'none';
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.delimiterWrapper)) {
          this.delimiterWrapper.style.display = 'none';
        }

        this.hideOverAllClear();
      }
    };

    MultiSelect.prototype.addValue = function (value, text, eve) {
      if (!this.value) {
        this.value = [];
      }

      if (this.value.indexOf(value) < 0) {
        this.setProperties({
          value: [].concat([], this.value, [value])
        }, true);
      }

      var element = this.findListElement(this.list, 'li', 'data-value', value);
      this.removeFocus();

      if (element) {
        this.addListFocus(element);
        this.addListSelection(element);
      }

      if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {
        this.addChip(text, value, eve);
      }

      if (this.hideSelectedItem && this.fields.groupBy) {
        this.hideGroupItem(value);
      }

      this.updateChipStatus();
      this.checkMaxSelection();
    };

    MultiSelect.prototype.checkMaxSelection = function () {
      var limit = this.value && this.value.length ? this.value.length : 0;

      if (limit === this.maximumSelectionLength) {
        var collection = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.e-active)');
        (0, _ej2Base.addClass)(collection, 'e-disable');
      }
    };

    MultiSelect.prototype.dispatchSelect = function (value, eve, element, isNotTrigger, length) {
      var _this = this;

      if (this.initStatus && !isNotTrigger) {
        var val_2 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element,
          itemData: val_2,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger('select', eventArgs, function (eventArgs) {
          if (!eventArgs.cancel) {
            if (length) {
              _this.selectAllEventData.push(val_2);

              _this.selectAllEventEle.push(element);
            }

            if (length === 1) {
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: true
              };

              _this.trigger('selectedAll', args);

              _this.selectAllEventData = [];
            }

            _this.updateListSelectEventCallback(value, element, eve);
          }
        });
      }
    };

    MultiSelect.prototype.addChip = function (text, value, e) {
      if (this.chipCollectionWrapper) {
        this.getChip(text, value, e);
      }
    };

    MultiSelect.prototype.removeChipFocus = function () {
      var elements;
      var closeElements;
      elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP);
      closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE.split(' ')[0]);
      (0, _ej2Base.removeClass)(elements, CHIP_SELECTED);

      if (_ej2Base.Browser.isDevice) {
        for (var index = 0; index < closeElements.length; index++) {
          closeElements[index].style.display = 'none';
        }
      }
    };

    MultiSelect.prototype.onMobileChipInteraction = function (e) {
      var chipElem = (0, _ej2Base.closest)(e.target, '.' + CHIP);
      var chipClose = chipElem.querySelector('span.' + CHIP_CLOSE.split(' ')[0]);

      if (this.enabled && !this.readonly) {
        if (!chipElem.classList.contains(CHIP_SELECTED)) {
          this.removeChipFocus();
          chipClose.style.display = '';
          chipElem.classList.add(CHIP_SELECTED);
        }

        this.refreshPopup();
        e.preventDefault();
      }
    };

    MultiSelect.prototype.getChip = function (data, value, e) {
      var _this = this;

      var itemData = {
        text: value,
        value: value
      };
      var chip = this.createElement('span', {
        className: CHIP,
        attrs: {
          'data-value': value,
          'title': data
        }
      });
      var chipContent = this.createElement('span', {
        className: CHIP_CONTENT
      });
      var chipClose = this.createElement('span', {
        className: CHIP_CLOSE
      });

      if (this.mainData) {
        itemData = (0, _ej2Base.isBlazor)() ? JSON.parse(JSON.stringify(this.getDataByValue(value))) : this.getDataByValue(value);
      }

      if (this.valueTemplate && !(0, _ej2Base.isNullOrUndefined)(itemData)) {
        var compiledString = (0, _ej2Base.compile)(this.valueTemplate);

        for (var _i = 0, _a = compiledString(itemData, null, null, this.valueTemplateId, this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          chipContent.appendChild(item);
        }

        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, false, false, false);
      } else {
        chipContent.innerHTML = data;
      }

      chip.appendChild(chipContent);
      var eventArgs = {
        isInteracted: e ? true : false,
        itemData: itemData,
        e: e,
        setClass: function (classes) {
          (0, _ej2Base.addClass)([chip], classes);
        },
        cancel: false
      };
      this.trigger('tagging', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel) {
          if (eventArgs.setClass && typeof eventArgs.setClass === 'string' && (0, _ej2Base.isBlazor)()) {
            (0, _ej2Base.addClass)([chip], eventArgs.setClass);
          }

          if (_ej2Base.Browser.isDevice) {
            chip.classList.add(MOBILE_CHIP);
            (0, _ej2Base.append)([chipClose], chip);
            chipClose.style.display = 'none';

            _ej2Base.EventHandler.add(chip, 'click', _this.onMobileChipInteraction, _this);
          } else {
            _ej2Base.EventHandler.add(chip, 'mousedown', _this.chipClick, _this);

            if (_this.showClearButton) {
              chip.appendChild(chipClose);
            }
          }

          _ej2Base.EventHandler.add(chipClose, 'mousedown', _this.onChipRemove, _this);

          _this.chipCollectionWrapper.appendChild(chip);

          if (!_this.changeOnBlur && e) {
            _this.updateValueState(e, _this.value, _this.tempValues);
          }
        }
      });
    };

    MultiSelect.prototype.calcPopupWidth = function () {
      var width = (0, _ej2Base.formatUnit)(this.popupWidth);

      if (width.indexOf('%') > -1) {
        var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + 'px';
      }

      return width;
    };

    MultiSelect.prototype.mouseIn = function () {
      if (this.enabled && !this.readonly) {
        this.showOverAllClear();
      }
    };

    MultiSelect.prototype.mouseOut = function () {
      if (!this.inputFocus) {
        this.overAllClear.style.display = 'none';
      }
    };

    MultiSelect.prototype.listOption = function (dataSource, fields) {
      var iconCss = (0, _ej2Base.isNullOrUndefined)(fields.iconCss) ? false : true;
      var fieldProperty = (0, _ej2Base.isNullOrUndefined)(fields.properties) ? fields : fields.properties;
      this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
        fields: fieldProperty,
        showIcon: iconCss,
        ariaAttributes: {
          groupItemRole: 'presentation'
        }
      } : {
        fields: {
          value: 'text'
        }
      };
      (0, _ej2Base.extend)(this.listCurrentOptions, this.listCurrentOptions, fields, true);

      if (this.mode === 'CheckBox') {
        this.notify('listoption', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox',
          dataSource: dataSource,
          fieldProperty: fieldProperty
        });
      }

      return this.listCurrentOptions;
    };

    MultiSelect.prototype.renderPopup = function () {
      var _this = this;

      if (!this.list) {
        _super.prototype.render.call(this);
      }

      if (!this.popupObj) {
        var args = {
          cancel: false
        };
        this.trigger('beforeOpen', args, function (args) {
          if (!args.cancel) {
            document.body.appendChild(_this.popupWrapper);

            var checkboxFilter = _this.popupWrapper.querySelector('.' + FILTERPARENT);

            if (_this.mode === 'CheckBox' && !_this.allowFiltering && checkboxFilter && _this.filterParent) {
              checkboxFilter.remove();
              _this.filterParent = null;
            }

            var overAllHeight = parseInt(_this.popupHeight, 10);
            _this.popupWrapper.style.visibility = 'hidden';

            if (_this.headerTemplate) {
              _this.setHeaderTemplate();

              overAllHeight -= _this.header.offsetHeight;
            }

            (0, _ej2Base.append)([_this.list], _this.popupWrapper);

            if (_this.footerTemplate) {
              _this.setFooterTemplate();

              overAllHeight -= _this.footer.offsetHeight;
            }

            if (_this.mode === 'CheckBox' && _this.showSelectAll) {
              _this.notify('selectAll', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox'
              });

              overAllHeight -= _this.selectAllHeight;
            } else if (_this.mode === 'CheckBox' && !_this.showSelectAll && (!_this.headerTemplate || !_this.footerTemplate)) {
              _this.notify('selectAll', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox'
              });

              overAllHeight = parseInt(_this.popupHeight, 10);
            } else if (_this.mode === 'CheckBox' && !_this.showSelectAll) {
              _this.notify('selectAll', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox'
              });

              overAllHeight = parseInt(_this.popupHeight, 10);

              if (_this.headerTemplate && _this.header) {
                overAllHeight -= _this.header.offsetHeight;
              }

              if (_this.footerTemplate && _this.footer) {
                overAllHeight -= _this.footer.offsetHeight;
              }
            }

            if (_this.mode === 'CheckBox') {
              var args_1 = {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox',
                popupElement: _this.popupWrapper
              };

              if (_this.allowFiltering) {
                _this.notify('searchBox', args_1);

                overAllHeight -= _this.searchBoxHeight;
              }

              (0, _ej2Base.addClass)([_this.popupWrapper], 'e-checkbox');
            }

            if (_this.popupHeight !== 'auto') {
              _this.list.style.maxHeight = (0, _ej2Base.formatUnit)(overAllHeight);
              _this.popupWrapper.style.maxHeight = (0, _ej2Base.formatUnit)(_this.popupHeight);
            } else {
              _this.list.style.maxHeight = (0, _ej2Base.formatUnit)(_this.popupHeight);
            }

            _this.popupObj = new _ej2Popups.Popup(_this.popupWrapper, {
              width: _this.calcPopupWidth(),
              targetType: 'relative',
              position: {
                X: 'left',
                Y: 'bottom'
              },
              relateTo: _this.overAllWrapper,
              collision: {
                X: 'flip',
                Y: 'flip'
              },
              offsetY: 1,
              enableRtl: _this.enableRtl,
              zIndex: _this.zIndex,
              close: function () {
                if (_this.popupObj.element.parentElement) {
                  _this.popupObj.unwireScrollEvents();

                  (0, _ej2Base.detach)(_this.popupObj.element);
                }
              },
              open: function () {
                if (!_this.isFirstClick) {
                  var ulElement = _this.list.querySelector('ul');

                  if (ulElement) {
                    if (_this.itemTemplate && _this.mode === 'CheckBox' && (0, _ej2Base.isBlazor)()) {
                      setTimeout(function () {
                        _this.mainList = _this.ulElement;
                      }, 0);
                    } else {
                      if (!(_this.mode !== 'CheckBox' && _this.allowFiltering && _this.targetElement().trim() !== '')) {
                        _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                      }
                    }
                  }

                  _this.isFirstClick = true;
                }

                _this.popupObj.wireScrollEvents();

                if (!(_this.mode !== 'CheckBox' && _this.allowFiltering && _this.targetElement().trim() !== '')) {
                  _this.loadTemplate();
                }

                _this.setScrollPosition();

                if (_this.allowFiltering) {
                  _this.notify('inputFocus', {
                    module: 'CheckBoxSelection',
                    enable: _this.mode === 'CheckBox',
                    value: 'focus'
                  });
                }
              },
              targetExitViewport: function () {
                if (!_ej2Base.Browser.isDevice) {
                  _this.hidePopup();
                }
              }
            });

            _this.popupObj.close();

            _this.popupWrapper.style.visibility = '';

            if (_this.mode === 'CheckBox' && _ej2Base.Browser.isDevice && _this.allowFiltering) {
              _this.notify('deviceSearchBox', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox'
              });
            }
          }
        });
      }
    };

    MultiSelect.prototype.setHeaderTemplate = function () {
      var compiledString;

      if (this.header) {
        this.header.remove();
      }

      this.header = this.createElement('div');
      (0, _ej2Base.addClass)([this.header], HEADER);
      compiledString = (0, _ej2Base.compile)(this.headerTemplate);
      var elements = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate);

      for (var temp = 0; temp < elements.length; temp++) {
        this.header.appendChild(elements[temp]);
      }

      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);

      if (this.mode === 'CheckBox' && this.showSelectAll) {
        (0, _ej2Base.prepend)([this.header], this.popupWrapper);
      } else {
        (0, _ej2Base.append)([this.header], this.popupWrapper);
      }

      _ej2Base.EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);
    };

    MultiSelect.prototype.setFooterTemplate = function () {
      var compiledString;

      if (this.footer) {
        this.footer.remove();
      }

      this.footer = this.createElement('div');
      (0, _ej2Base.addClass)([this.footer], FOOTER);
      compiledString = (0, _ej2Base.compile)(this.footerTemplate);
      var elements = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate);

      for (var temp = 0; temp < elements.length; temp++) {
        this.footer.appendChild(elements[temp]);
      }

      this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);
      (0, _ej2Base.append)([this.footer], this.popupWrapper);

      _ej2Base.EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);
    };

    MultiSelect.prototype.ClearAll = function (e) {
      if (this.enabled && !this.readonly) {
        var temp = void 0;

        if (this.value && this.value.length > 0) {
          var liElement = this.list && this.list.querySelectorAll('li.e-list-item');

          if (liElement && liElement.length > 0) {
            this.selectAllItems(false, e);
          } else {
            this.removeIndex = 0;

            for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
              this.removeValue(temp, e, null, true);
            }
          }
        } else {
          this.clearAllCallback(e);
        }
      }
    };

    MultiSelect.prototype.clearAllCallback = function (e, isClearAll) {
      var tempValues = this.value ? this.value.slice() : [];

      if (this.mainList && this.listData && (this.allowFiltering || this.allowCustomValue)) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
      }

      this.focusAtFirstListItem();
      this.updateDelimeter(this.delimiterChar, e);

      if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {
        this.updateDelimView();
      }

      this.makeTextBoxEmpty();
      this.checkPlaceholderSize();

      if (this.isPopupOpen()) {
        this.refreshPopup();
      }

      if (!this.inputFocus) {
        if (this.changeOnBlur) {
          this.updateValueState(e, this.value, tempValues);
        }

        if (this.mode !== 'CheckBox') {
          this.inputElement.focus();
        }
      }

      if (this.mode === 'CheckBox') {
        this.refreshPlaceHolder();
        this.refreshInputHight();

        if (this.changeOnBlur && isClearAll && this.value && this.value.length === 0) {
          this.updateValueState(e, this.value, this.tempValues);
        }
      }

      if (!this.changeOnBlur && isClearAll && this.value && this.value.length === 0) {
        this.updateValueState(e, this.value, this.tempValues);
      }

      if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));
      }

      e.preventDefault();
    };

    MultiSelect.prototype.windowResize = function () {
      this.refreshPopup();

      if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {
        this.updateDelimView();
      }
    };

    MultiSelect.prototype.resetValueHandler = function (e) {
      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement && e.target === formElement) {
        var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute('data-initial-value');
        this.text = textVal;
      }
    };

    MultiSelect.prototype.wireEvent = function () {
      _ej2Base.EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);

      _ej2Base.EventHandler.add(window, 'resize', this.windowResize, this);

      _ej2Base.EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);

      _ej2Base.EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);

      _ej2Base.EventHandler.add(this.inputElement, 'keyup', this.KeyUp, this);

      if (this.mode !== 'CheckBox') {
        _ej2Base.EventHandler.add(this.inputElement, 'input', this.onInput, this);
      }

      _ej2Base.EventHandler.add(this.inputElement, 'blur', this.onBlur, this);

      _ej2Base.EventHandler.add(this.componentWrapper, 'mousemove', this.mouseIn, this);

      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement) {
        _ej2Base.EventHandler.add(formElement, 'reset', this.resetValueHandler, this);
      }

      _ej2Base.EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);

      _ej2Base.EventHandler.add(this.overAllClear, 'mouseup', this.ClearAll, this);
    };

    MultiSelect.prototype.onInput = function (e) {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }

      this.keyDownStatus = false; // For Filtering works in mobile firefox

      if (_ej2Base.Browser.isDevice && _ej2Base.Browser.info.name === 'mozilla') {
        this.search(e);
      }
    };

    MultiSelect.prototype.search = function (e) {
      var _this = this;

      if (!this.isPopupOpen() && this.openOnClick) {
        this.showPopup();
      }

      this.openClick(e);

      if (this.checkTextLength() && !this.allowFiltering && e.keyCode !== 8) {
        this.focusAtFirstListItem();
      } else {
        var text = this.targetElement();
        this.keyCode = e.keyCode;

        if (this.allowFiltering) {
          var eventArgs_1 = {
            preventDefaultAction: false,
            text: this.targetElement(),
            updateData: function (dataSource, query, fields) {
              if (eventArgs_1.cancel) {
                return;
              }

              _this.isFiltered = true;
              _this.remoteFilterAction = true;

              _this.dataUpdater(dataSource, query, fields);
            },
            event: e,
            cancel: false
          };
          this.trigger('filtering', eventArgs_1, function (eventArgs) {
            if (!eventArgs.cancel) {
              if (!_this.isFiltered && !eventArgs.preventDefaultAction) {
                _this.filterAction = true;

                _this.dataUpdater(_this.dataSource, null, _this.fields);
              }
            }
          });
        } else if (this.allowCustomValue) {
          var query = new _ej2Data.Query();
          query = text !== '' ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;
          this.dataUpdater(this.mainData, query, this.fields);
        } else {
          var liCollections = void 0;
          liCollections = this.list.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + ':not(.e-hide-listitem)');
          var activeElement = (0, _incrementalSearch.Search)(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);

          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
            this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
          } else if (this.targetElement() !== '') {
            this.removeFocus();
          } else {
            this.focusAtFirstListItem();
          }
        }
      }
    };

    MultiSelect.prototype.preRender = function () {
      if (this.allowFiltering === null) {
        this.allowFiltering = this.mode === 'CheckBox' ? true : false;
      }

      this.initializeData();
      this.updateDataAttribute(this.htmlAttributes);

      _super.prototype.preRender.call(this);
    };

    MultiSelect.prototype.getLocaleName = function () {
      return 'multi-select';
    };

    ;

    MultiSelect.prototype.initializeData = function () {
      this.mainListCollection = [];
      this.beforePopupOpen = false;
      this.filterAction = false;
      this.remoteFilterAction = false;
      this.isFirstClick = false;
      this.mobFilter = true;
      this.isFiltered = false;
      this.focused = true;
      this.initial = true;
      this.backCommand = true;
    };

    MultiSelect.prototype.updateData = function (delimiterChar, e) {
      var data = '';
      var delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';
      var text = [];
      var temp;
      var tempData = this.listData;
      this.listData = this.mainData;
      this.hiddenElement.innerHTML = '';

      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        for (var index = 0; !(0, _ej2Base.isNullOrUndefined)(this.value[index]); index++) {
          if (this.listData) {
            temp = this.getTextByValue(this.value[index]);
          } else {
            temp = this.value[index];
          }

          data += temp + delimiterChar + ' ';
          text.push(temp);
          this.hiddenElement.innerHTML += '<option selected value ="' + this.value[index] + '">' + index + '</option>';
        }
      }

      this.setProperties({
        text: text.toString()
      }, true);

      if (delim) {
        this.delimiterWrapper.innerHTML = data;
        this.delimiterWrapper.setAttribute('id', (0, _ej2Base.getUniqueID)('delim_val'));
        this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);
      }

      var targetEle = e && e.target;
      var isClearAll = targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;

      if (!this.changeOnBlur && e && !isClearAll || this.isSelectAll) {
        this.isSelectAll = false;
        this.updateValueState(e, this.value, this.tempValues);
      }

      this.listData = tempData;
      this.addValidInputClass();
    };

    MultiSelect.prototype.initialTextUpdate = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.text)) {
        var textArr = this.text.split(this.delimiterChar);
        var textVal = [];

        for (var index = 0; textArr.length > index; index++) {
          var val = this.getValueByText(textArr[index]);

          if (!(0, _ej2Base.isNullOrUndefined)(val)) {
            textVal.push(val);
          } else if (this.allowCustomValue) {
            textVal.push(textArr[index]);
          }
        }

        if (textVal && textVal.length) {
          this.setProperties({
            value: textVal
          }, true);
        }
      } else {
        this.setProperties({
          value: null
        }, true);
      }
    };

    MultiSelect.prototype.renderList = function (isEmptyData) {
      if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {
        isEmptyData = true;
      }

      _super.prototype.render.call(this, isEmptyData);

      this.unwireListEvents();
      this.wireListEvents();
    };

    MultiSelect.prototype.initialValueUpdate = function () {
      if (this.list) {
        var text = void 0;
        var textField = void 0;
        var valueField = void 0;
        var element = void 0;
        var value = void 0;

        if (this.chipCollectionWrapper) {
          this.chipCollectionWrapper.innerHTML = '';
        }

        this.removeListSelection();

        if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
          for (var index = 0; !(0, _ej2Base.isNullOrUndefined)(this.value[index]); index++) {
            value = this.value[index];
            element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);
            text = this.getTextByValue(value);

            if (element && element.getAttribute('aria-selected') !== 'true' || element && element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem && (this.mode === 'Box' || this.mode === 'Default')) {
              this.addChip(text, value);
              this.addListSelection(element);
            } else if (value && this.allowCustomValue) {
              var indexItem = this.listData.length;
              var newValue = {};
              (0, _ej2Base.setValue)(this.fields.text, value, newValue);
              (0, _ej2Base.setValue)(this.fields.value, value, newValue);
              var noDataEle = this.popupWrapper.querySelector('.' + _dropDownBase.dropDownBaseClasses.noData);
              this.addItem(newValue, indexItem);

              if (this.popupWrapper.contains(noDataEle)) {
                this.list.setAttribute('style', noDataEle.getAttribute('style'));
                this.popupWrapper.replaceChild(this.list, noDataEle);
                this.wireListEvents();
              }

              this.addChip(text, value);
              this.addListSelection(element);
            }
          }
        }

        if (this.mode === 'CheckBox') {
          this.updateDelimView();

          if (this.changeOnBlur) {
            this.updateValueState(null, this.value, this.tempValues);
          }

          this.updateDelimeter(this.delimiterChar);
          this.refreshInputHight();
        } else {
          this.updateDelimeter(this.delimiterChar);
        }

        if (this.mode === 'CheckBox' && this.showSelectAll && ((0, _ej2Base.isNullOrUndefined)(this.value) || !this.value.length)) {
          this.notify('checkSelectAll', {
            module: 'CheckBoxSelection',
            enable: this.mode === 'CheckBox',
            value: 'uncheck'
          });
        }

        if (this.mode === 'Box') {
          this.chipCollectionWrapper.style.display = '';
        } else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
          this.showDelimWrapper();
        }
      }
    };

    MultiSelect.prototype.updateActionCompleteData = function (li, item) {
      if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {
        this.mainList = this.ulElement;
        (0, _ej2Base.addClass)([li], HIDE_LIST);
      }
    };

    MultiSelect.prototype.updateAddItemList = function (list, itemCount) {
      if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + _dropDownBase.dropDownBaseClasses.noData) && list) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector('ul');
        (0, _ej2Base.remove)(this.popupWrapper.querySelector('.e-content'));
        this.popupObj = null;
        this.renderPopup();
      }
    };

    MultiSelect.prototype.updateDataList = function () {
      if (this.mainList && this.ulElement && this.mainList.childElementCount < this.ulElement.childElementCount) {
        this.mainList = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;
      }
    };

    MultiSelect.prototype.isValidLI = function (li) {
      return li && !li.classList.contains(_dropDownBase.dropDownBaseClasses.disabled) && !li.classList.contains(_dropDownBase.dropDownBaseClasses.group) && li.classList.contains(_dropDownBase.dropDownBaseClasses.li);
    };

    ;

    MultiSelect.prototype.updateListSelection = function (li, e, length) {
      var customVal = li.getAttribute('data-value');
      var value = this.getFormattedValue(customVal);

      if (this.allowCustomValue && (customVal !== 'false' && value === false || !(0, _ej2Base.isNullOrUndefined)(value) && value.toString() === 'NaN')) {
        value = customVal;
      }

      var text = this.getTextByValue(value);
      this.removeHover();

      if (!this.value || this.value.indexOf(value) === -1) {
        this.dispatchSelect(value, e, li, li.getAttribute('aria-selected') === 'true', length);
      } else {
        this.removeValue(value, e, length);
      }
    };

    MultiSelect.prototype.updateListSelectEventCallback = function (value, li, e) {
      var _this = this;

      var text = this.getTextByValue(value);

      if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {
        var temp_1 = li.cloneNode(true);
        var data_1 = this.getDataByValue(value);
        var eventArgs = {
          newData: data_1,
          cancel: false
        };
        this.trigger('customValueSelection', eventArgs, function (eventArgs) {
          if (!eventArgs.cancel) {
            (0, _ej2Base.append)([temp_1], _this.mainList);

            _this.mainData.push(data_1);

            _this.remoteCustomValue = false;

            _this.addValue(value, text, e);
          }
        });
      } else {
        this.remoteCustomValue = false;
        this.addValue(value, text, e);
      }
    };

    MultiSelect.prototype.removeListSelection = function () {
      var className = this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected;
      var selectedItems = this.list.querySelectorAll('.' + className);
      var temp = selectedItems.length;

      if (selectedItems && selectedItems.length) {
        (0, _ej2Base.removeClass)(selectedItems, className);

        while (temp > 0) {
          selectedItems[temp - 1].setAttribute('aria-selected', 'false');
          temp--;
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.mainList)) {
        var selectItems = this.mainList.querySelectorAll('.' + className);
        var temp1 = selectItems.length;

        if (selectItems && selectItems.length) {
          (0, _ej2Base.removeClass)(selectItems, className);

          while (temp1 > 0) {
            selectItems[temp1 - 1].setAttribute('aria-selected', 'false');

            if (this.mode === 'CheckBox') {
              if (selectedItems && selectedItems.length > temp1 - 1) {
                selectedItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');
                (0, _ej2Base.removeClass)([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');
              }

              selectItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');
              (0, _ej2Base.removeClass)([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');
            }

            temp1--;
          }
        }
      }
    };

    ;

    MultiSelect.prototype.removeHover = function () {
      var hoveredItem = this.list.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.hover);

      if (hoveredItem && hoveredItem.length) {
        (0, _ej2Base.removeClass)(hoveredItem, _dropDownBase.dropDownBaseClasses.hover);
      }
    };

    ;

    MultiSelect.prototype.removeFocus = function () {
      if (this.list && this.mainList) {
        var hoveredItem = this.list.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.focus);
        var mainlist = this.mainList.querySelectorAll('.' + _dropDownBase.dropDownBaseClasses.focus);

        if (hoveredItem && hoveredItem.length) {
          (0, _ej2Base.removeClass)(hoveredItem, _dropDownBase.dropDownBaseClasses.focus);
          (0, _ej2Base.removeClass)(mainlist, _dropDownBase.dropDownBaseClasses.focus);
        }
      }
    };

    ;

    MultiSelect.prototype.addListHover = function (li) {
      if (this.enabled && this.isValidLI(li)) {
        this.removeHover();
        (0, _ej2Base.addClass)([li], _dropDownBase.dropDownBaseClasses.hover);
      } else {
        if (li !== null && li.classList.contains('e-list-group-item') && this.enableGroupCheckBox && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
          this.removeHover();
          (0, _ej2Base.addClass)([li], _dropDownBase.dropDownBaseClasses.hover);
        }
      }
    };

    ;

    MultiSelect.prototype.addListFocus = function (element) {
      if (this.enabled && this.isValidLI(element)) {
        this.removeFocus();
        (0, _ej2Base.addClass)([element], _dropDownBase.dropDownBaseClasses.focus);
      } else {
        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
          (0, _ej2Base.addClass)([element], _dropDownBase.dropDownBaseClasses.focus);
        }
      }
    };

    MultiSelect.prototype.addListSelection = function (element) {
      var className = this.hideSelectedItem ? HIDE_LIST : _dropDownBase.dropDownBaseClasses.selected;

      if (this.isValidLI(element) && !element.classList.contains(_dropDownBase.dropDownBaseClasses.hover)) {
        (0, _ej2Base.addClass)([element], className);
        this.updateMainList(false, element.getAttribute('data-value'));
        element.setAttribute('aria-selected', 'true');

        if (this.mode === 'CheckBox') {
          var ariaCheck = element.firstElementChild.getAttribute('aria-checked');

          if (ariaCheck === 'false' || (0, _ej2Base.isNullOrUndefined)(ariaCheck)) {
            this.notify('updatelist', {
              module: 'CheckBoxSelection',
              enable: this.mode === 'CheckBox',
              li: element,
              e: this
            });
          }
        }

        this.notify('activeList', {
          module: 'CheckBoxSelection',
          enable: this.mode === 'CheckBox',
          li: element,
          e: this
        });

        if (this.chipCollectionWrapper !== null) {
          this.removeChipSelection();
        }

        (0, _ej2Base.attributes)(this.inputElement, {
          'aria-activedescendant': element.id
        });
      }
    };

    MultiSelect.prototype.updateDelimeter = function (delimChar, e) {
      this.updateData(delimChar, e);
    };

    MultiSelect.prototype.onMouseClick = function (e) {
      this.scrollFocusStatus = false;
      var target = e.target;
      var li = (0, _ej2Base.closest)(target, '.' + _dropDownBase.dropDownBaseClasses.li);
      var headerLi = (0, _ej2Base.closest)(target, '.' + _dropDownBase.dropDownBaseClasses.group);

      if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {
        target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild : e.target;

        if (target.classList.contains('e-check')) {
          this.selectAllItem(false, e);
          target.classList.remove('e-check');
          target.classList.remove('e-stop');
          (0, _ej2Base.closest)(target, '.' + 'e-list-group-item').classList.remove('e-active');
          target.setAttribute('aria-selected', 'false');
        } else {
          this.selectAllItem(true, e);
          target.classList.remove('e-stop');
          target.classList.add('e-check');
          (0, _ej2Base.closest)(target, '.' + 'e-list-group-item').classList.add('e-active');
          target.setAttribute('aria-selected', 'true');
        }

        this.refreshSelection();
        this.checkSelectAll();
      } else {
        if (this.isValidLI(li)) {
          var limit = this.value && this.value.length ? this.value.length : 0;

          if (li.classList.contains('e-active')) {
            limit = limit - 1;
          }

          if (limit < this.maximumSelectionLength) {
            this.updateListSelection(li, e);
            this.checkPlaceholderSize();
            this.addListFocus(li);

            if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
              if (this.mode !== 'CheckBox') {
                this.focusAtLastListItem(li.getAttribute('data-value'));
              }

              this.refreshSelection();
            } else {
              this.makeTextBoxEmpty();
            }
          }

          if (this.mode === 'CheckBox') {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }

          this.checkSelectAll();
          this.refreshPopup();

          if (this.hideSelectedItem) {
            this.focusAtFirstListItem();
          }

          if (this.closePopupOnSelect) {
            this.hidePopup();
          } else {
            e.preventDefault();
          }

          this.makeTextBoxEmpty();
          this.findGroupStart(target);
        } else {
          e.preventDefault();
        }

        if (this.mode !== 'CheckBox') {
          this.refreshListItems((0, _ej2Base.isNullOrUndefined)(li) ? null : li.textContent);
        }

        this.refreshPlaceHolder();
        this.deselectHeader();
      }
    };

    MultiSelect.prototype.findGroupStart = function (target) {
      if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        var count = 0;
        var liChecked = 0;
        var liUnchecked = 0;
        var groupValues = void 0;

        if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {
          while (!target.getElementsByClassName('e-frame').length) {
            target = target.parentElement;
          }
        }

        if (target.classList.contains('e-frame')) {
          target = target.parentElement.parentElement;
        }

        groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);
        groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);

        while (!target.classList.contains('e-list-group-item')) {
          if (target.classList.contains('e-list-icon')) {
            target = target.parentElement;
          }

          target = target.previousElementSibling;

          if (target == null) {
            break;
          }
        }

        this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
      }
    };

    MultiSelect.prototype.findGroupAttrtibutes = function (listElement, checked, unChecked, count, position) {
      while (!listElement.classList.contains('e-list-group-item')) {
        if (listElement.classList.contains('e-list-icon')) {
          listElement = listElement.parentElement;
        }

        if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') && listElement.classList.contains('e-list-item')) {
          checked++;
        } else if (listElement.classList.contains('e-list-item')) {
          unChecked++;
        }

        count++;
        listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;

        if (listElement == null) {
          break;
        }
      }

      return [checked, unChecked, count];
    };

    MultiSelect.prototype.updateCheckBox = function (groupHeader, checked, unChecked, count) {
      if (groupHeader === null) {
        return;
      }

      var checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];

      if (count === checked) {
        checkBoxElement.classList.remove('e-stop');
        checkBoxElement.classList.add('e-check');
        (0, _ej2Base.closest)(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
        groupHeader.setAttribute('aria-selected', 'true');
      } else if (count === unChecked) {
        checkBoxElement.classList.remove('e-check');
        checkBoxElement.classList.remove('e-stop');
        (0, _ej2Base.closest)(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');
        groupHeader.setAttribute('aria-selected', 'false');
      } else if (this.maximumSelectionLength === checked - 1) {
        checkBoxElement.classList.remove('e-stop');
        groupHeader.setAttribute('aria-selected', 'true');
        (0, _ej2Base.closest)(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
        checkBoxElement.classList.add('e-check');
      } else {
        checkBoxElement.classList.remove('e-check');
        checkBoxElement.classList.add('e-stop');
        (0, _ej2Base.closest)(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');
        groupHeader.setAttribute('aria-selected', 'false');
      }
    };

    MultiSelect.prototype.deselectHeader = function () {
      var limit = this.value && this.value.length ? this.value.length : 0;
      var collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');

      if (limit < this.maximumSelectionLength) {
        (0, _ej2Base.removeClass)(collection, 'e-disable');
      }

      if (limit === this.maximumSelectionLength) {
        (0, _ej2Base.addClass)(collection, 'e-disable');
      }
    };

    MultiSelect.prototype.onMouseOver = function (e) {
      var currentLi = (0, _ej2Base.closest)(e.target, '.' + _dropDownBase.dropDownBaseClasses.li);

      if (currentLi === null && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy) && this.enableGroupCheckBox) {
        currentLi = (0, _ej2Base.closest)(e.target, '.' + _dropDownBase.dropDownBaseClasses.group);
      }

      this.addListHover(currentLi);
    };

    MultiSelect.prototype.onMouseLeave = function (e) {
      this.removeHover();
    };

    MultiSelect.prototype.onListMouseDown = function (e) {
      e.preventDefault();
      this.scrollFocusStatus = true;
    };

    MultiSelect.prototype.onDocumentClick = function (e) {
      if (this.mode !== 'CheckBox') {
        var target = e.target;

        if (!(!(0, _ej2Base.isNullOrUndefined)(this.popupObj) && (0, _ej2Base.closest)(target, '#' + this.popupObj.element.id)) && !this.overAllWrapper.contains(e.target)) {
          this.scrollFocusStatus = false;
        } else {
          this.scrollFocusStatus = (_ej2Base.Browser.isIE || _ej2Base.Browser.info.name === 'edge') && document.activeElement === this.inputElement;
        }
      }
    };

    MultiSelect.prototype.wireListEvents = function () {
      _ej2Base.EventHandler.add(document, 'mousedown', this.onDocumentClick, this);

      _ej2Base.EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);

      _ej2Base.EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);

      _ej2Base.EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);

      _ej2Base.EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);
    };

    ;

    MultiSelect.prototype.unwireListEvents = function () {
      _ej2Base.EventHandler.remove(document, 'mousedown', this.onDocumentClick);

      if (this.list) {
        _ej2Base.EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);

        _ej2Base.EventHandler.remove(this.list, 'mouseup', this.onMouseClick);

        _ej2Base.EventHandler.remove(this.list, 'mouseover', this.onMouseOver);

        _ej2Base.EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);
      }
    };

    ;

    MultiSelect.prototype.hideOverAllClear = function () {
      if (!this.value || !this.value.length || this.inputElement.value === '') {
        this.overAllClear.style.display = 'none';
      }
    };

    MultiSelect.prototype.showOverAllClear = function () {
      if ((this.value && this.value.length || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {
        this.overAllClear.style.display = '';
      } else {
        this.overAllClear.style.display = 'none';
      }
    };
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */


    MultiSelect.prototype.focusIn = function () {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */


    MultiSelect.prototype.focusOut = function () {
      if (document.activeElement === this.inputElement && this.enabled) {
        this.inputElement.blur();
      }
    };
    /**
     * Shows the spinner loader.
     * @returns void.
     */


    MultiSelect.prototype.showSpinner = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        if (this.overAllClear.style.display !== 'none') {
          this.spinnerElement = this.overAllClear;
        } else {
          this.spinnerElement = this.createElement('span', {
            className: CLOSEICON_CLASS + ' ' + SPINNER_CLASS
          });
          this.componentWrapper.appendChild(this.spinnerElement);
        }

        (0, _ej2Popups.createSpinner)({
          target: this.spinnerElement,
          width: _ej2Base.Browser.isDevice ? '16px' : '14px'
        }, this.createElement);
        (0, _ej2Base.addClass)([this.spinnerElement], DISABLE_ICON);
        (0, _ej2Popups.showSpinner)(this.spinnerElement);
      }
    };
    /**
     * Hides the spinner loader.
     * @returns void.
     */


    MultiSelect.prototype.hideSpinner = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.spinnerElement)) {
        (0, _ej2Popups.hideSpinner)(this.spinnerElement);
        (0, _ej2Base.removeClass)([this.spinnerElement], DISABLE_ICON);

        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          (0, _ej2Base.detach)(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = '';
        }

        this.spinnerElement = null;
      }
    };

    MultiSelect.prototype.updateDelimView = function () {
      if (this.delimiterWrapper) {
        this.hideDelimWrapper();
      }

      if (this.chipCollectionWrapper) {
        this.chipCollectionWrapper.style.display = 'none';
      }

      this.viewWrapper.style.display = '';
      this.viewWrapper.style.width = '';
      this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);

      if (this.value && this.value.length) {
        var data = '';
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        var overAllContainer = void 0;
        this.viewWrapper.innerHTML = '';
        var l10nLocale = {
          noRecordsTemplate: 'No Records Found',
          actionFailureTemplate: 'The Request Failed',
          overflowCountTemplate: '+${count} more..',
          totalCountTemplate: '${count} selected'
        };
        var l10n = new _ej2Base.L10n(this.getLocaleName(), {}, this.locale);

        if (l10n.getConstant('actionFailureTemplate') === '') {
          l10n = new _ej2Base.L10n('dropdowns', l10nLocale, this.locale);
        }

        var remainContent = l10n.getConstant('overflowCountTemplate');
        var raminElement = this.createElement('span', {
          className: REMAIN_WRAPPER
        });
        var compiledString = (0, _ej2Base.compile)(remainContent);
        var totalCompiledString = (0, _ej2Base.compile)(l10n.getConstant('totalCountTemplate'));
        raminElement.appendChild(compiledString({
          'count': this.value.length
        }, null, null, null, !this.isStringTemplate)[0]);
        this.viewWrapper.appendChild(raminElement);
        var remainSize = raminElement.offsetWidth;
        (0, _ej2Base.remove)(raminElement);

        if (this.showDropDownIcon) {
          downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
          for (var index = 0; !(0, _ej2Base.isNullOrUndefined)(this.value[index]); index++) {
            data += index === 0 ? '' : this.delimiterChar + ' ';
            temp = this.getOverflowVal(index);
            data += temp;
            temp = this.viewWrapper.innerHTML;
            this.viewWrapper.innerHTML = data;
            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
            overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);

            if (wrapperleng + downIconWidth > overAllContainer) {
              if (tempData !== undefined && tempData !== '') {
                temp = tempData;
                index = tempIndex + 1;
              }

              this.viewWrapper.innerHTML = temp;
              remaining = this.value.length - index;
              wrapperleng = this.viewWrapper.offsetWidth;

              while (wrapperleng + remainSize + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== '') {
                var textArr = this.viewWrapper.innerHTML.split(this.delimiterChar);
                textArr.pop();
                this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);
                remaining++;
                wrapperleng = this.viewWrapper.offsetWidth;
              }

              break;
            } else if (wrapperleng + remainSize + downIconWidth <= overAllContainer) {
              tempData = data;
              tempIndex = index;
            } else if (index === 0) {
              tempData = '';
              tempIndex = -1;
            }
          }
        }

        if (remaining > 0) {
          var totalWidth = overAllContainer - downIconWidth;
          this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth));
          this.updateRemainWidth(this.viewWrapper, totalWidth);
          this.updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString);
        }
      } else {
        this.viewWrapper.innerHTML = '';
        this.viewWrapper.style.display = 'none';
      }
    };

    MultiSelect.prototype.updateRemainWidth = function (viewWrapper, totalWidth) {
      if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {
        viewWrapper.style.width = totalWidth + 'px';
      }
    };

    MultiSelect.prototype.updateRemainTemplate = function (raminElement, viewWrapper, remaining, compiledString, totalCompiledString, totalWidth) {
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {
        viewWrapper.removeChild(viewWrapper.firstChild);
      }

      raminElement.innerHTML = '';
      raminElement.appendChild(viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? compiledString({
        'count': remaining
      }, null, null, null, !this.isStringTemplate)[0] : totalCompiledString({
        'count': remaining
      }, null, null, null, !this.isStringTemplate)[0]);

      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
        viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
      } else {
        viewWrapper.classList.add(TOTAL_COUNT_WRAPPER);
        this.updateRemainWidth(viewWrapper, totalWidth);
      }

      return raminElement;
    };

    MultiSelect.prototype.updateRemainingText = function (raminElement, downIconWidth, remaining, compiledString, totalCompiledString) {
      var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
      var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);

      if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
        while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
          var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
          textArr.pop();
          this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);

          if (this.viewWrapper.firstChild.nodeValue === '') {
            this.viewWrapper.removeChild(this.viewWrapper.firstChild);
          }

          remaining++;
          wrapperleng = this.viewWrapper.offsetWidth;
        }

        var totalWidth = overAllContainer - downIconWidth;
        this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth);
      }
    };

    MultiSelect.prototype.getOverflowVal = function (index) {
      var temp;

      if (this.mainData && this.mainData.length) {
        if (this.mode === 'CheckBox') {
          var newTemp = this.listData;
          this.listData = this.mainData;
          temp = this.getTextByValue(this.value[index]);
          this.listData = newTemp;
        } else {
          temp = this.getTextByValue(this.value[index]);
        }
      } else {
        temp = this.value[index];
      }

      return temp;
    };

    MultiSelect.prototype.unWireEvent = function () {
      _ej2Base.EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);

      _ej2Base.EventHandler.remove(window, 'resize', this.windowResize);

      _ej2Base.EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);

      _ej2Base.EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);

      if (this.mode !== 'CheckBox') {
        _ej2Base.EventHandler.remove(this.inputElement, 'input', this.onInput);
      }

      _ej2Base.EventHandler.remove(this.inputElement, 'keyup', this.KeyUp);

      var formElement = (0, _ej2Base.closest)(this.inputElement, 'form');

      if (formElement) {
        _ej2Base.EventHandler.remove(formElement, 'reset', this.resetValueHandler);
      }

      _ej2Base.EventHandler.remove(this.inputElement, 'blur', this.onBlur);

      _ej2Base.EventHandler.remove(this.componentWrapper, 'mousemove', this.mouseIn);

      _ej2Base.EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);

      _ej2Base.EventHandler.remove(this.overAllClear, 'mousedown', this.ClearAll);
    };

    MultiSelect.prototype.selectAllItem = function (state, event, list) {
      var li;
      li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');

      if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !(0, _ej2Base.isNullOrUndefined)(this.fields.groupBy)) {
        var target = event ? event.target : null;
        target = event && event.keyCode === 32 ? list : target;
        target = target && target.classList.contains('e-frame') ? target.parentElement.parentElement : target;

        if (target && target.classList.contains('e-list-group-item')) {
          var listElement = target.nextElementSibling;

          if ((0, _ej2Base.isNullOrUndefined)(listElement)) {
            return;
          }

          while (listElement.classList.contains('e-list-item')) {
            if (state) {
              if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {
                var selectionLimit = this.value && this.value.length ? this.value.length : 0;

                if (listElement.classList.contains('e-active')) {
                  selectionLimit -= 1;
                }

                if (selectionLimit < this.maximumSelectionLength) {
                  this.updateListSelection(listElement, event);
                }
              }
            } else {
              if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {
                this.updateListSelection(listElement, event);
              }
            }

            listElement = listElement.nextElementSibling;

            if (listElement == null) {
              break;
            }
          }

          if (target.classList.contains('e-list-group-item')) {
            var focusedElement = this.list.getElementsByClassName('e-item-focus')[0];

            if (focusedElement) {
              focusedElement.classList.remove('e-item-focus');
            }

            state ? target.classList.add('e-active') : target.classList.remove('e-active');
            target.classList.add('e-item-focus');
          }

          this.textboxValueUpdate();
          this.checkPlaceholderSize();

          if (!this.changeOnBlur && event) {
            this.updateValueState(event, this.value, this.tempValues);
          }
        } else {
          this.updateValue(event, li, state);
        }
      } else {
        this.updateValue(event, li, state);
      }
    };

    MultiSelect.prototype.updateValue = function (event, li, state) {
      var _this = this;

      var length = li.length;

      if (li && li.length) {
        var index_1 = 0;
        var count_1 = 0;

        if (this.enableGroupCheckBox) {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
        } else {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
        }

        while (index_1 < length && index_1 <= 50 && index_1 < count_1) {
          this.updateListSelection(li[index_1], event, length - index_1);
          this.findGroupStart(li[index_1]);
          index_1++;
        }

        this.deselectHeader();

        if (length > 50) {
          setTimeout(function () {
            while (index_1 < length && index_1 < count_1) {
              _this.updateListSelection(li[index_1], event, length - index_1);

              _this.findGroupStart(li[index_1]);

              index_1++;
            }

            _this.deselectHeader();

            _this.textboxValueUpdate(event);
          }, 0);
        }
      }

      this.textboxValueUpdate(event);
      this.checkPlaceholderSize();
    };

    MultiSelect.prototype.textboxValueUpdate = function (event) {
      if (this.mode !== 'Box' && !this.isPopupOpen()) {
        this.updateDelimView();
      } else {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      }

      if (this.mode === 'CheckBox') {
        this.updateDelimView();
        this.updateDelimeter(this.delimiterChar, event);
        this.refreshInputHight();
      } else {
        this.updateDelimeter(this.delimiterChar, event);
      }

      this.refreshPlaceHolder();
    };

    MultiSelect.prototype.setZIndex = function () {
      if (this.popupObj) {
        this.popupObj.setProperties({
          'zIndex': this.zIndex
        });
      }
    };

    MultiSelect.prototype.updateDataSource = function (prop) {
      if ((0, _ej2Base.isNullOrUndefined)(this.list)) {
        this.renderPopup();
      } else {
        this.resetList(this.dataSource);
      }

      if (this.value && this.value.length) {
        this.setProperties({
          'value': this.value
        });
        this.refreshSelection();
      }
    };

    MultiSelect.prototype.onLoadSelect = function () {
      this.setDynValue = true;
      this.renderPopup();
    };

    MultiSelect.prototype.selectAllItems = function (state, event) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(this.list)) {
        this.selectAllAction = function () {
          if (_this.mode === 'CheckBox' && _this.showSelectAll) {
            var args = {
              module: 'CheckBoxSelection',
              enable: _this.mode === 'CheckBox',
              value: state ? 'check' : 'uncheck'
            };

            _this.notify('checkSelectAll', args);
          }

          _this.selectAllItem(state, event);

          _this.selectAllAction = null;
        };

        _super.prototype.render.call(this);
      } else {
        this.selectAllAction = null;

        if (this.mode === 'CheckBox' && this.showSelectAll) {
          var args = {
            value: state ? 'check' : 'uncheck',
            enable: this.mode === 'CheckBox',
            module: 'CheckBoxSelection'
          };
          this.notify('checkSelectAll', args);
        }

        this.selectAllItem(state, event);
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     */


    MultiSelect.prototype.getPersistData = function () {
      return this.addOnPersist(['value']);
    };

    ;
    /**
     * Dynamically change the value of properties.
     * @private
     */

    MultiSelect.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (newProp.dataSource && !(0, _ej2Base.isNullOrUndefined)(Object.keys(newProp.dataSource))) {
        this.mainList = null;
        this.mainData = null;
        this.isFirstClick = false;
      }

      if (this.getModuleName() === 'multiselect') {
        this.filterAction = false;
        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);
      }

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'query':
          case 'dataSource':
            if (this.mode === 'CheckBox' && this.showSelectAll) {
              if (!(0, _ej2Base.isNullOrUndefined)(this.popupObj)) {
                this.popupObj.destroy();
                this.popupObj = null;
              }

              this.renderPopup();
            }

            break;

          case 'htmlAttributes':
            this.updateHTMLAttribute();
            break;

          case 'showClearButton':
            this.updateClearButton(newProp.showClearButton);
            break;

          case 'text':
            this.updateVal(this.value, this.value, 'text');
            break;

          case 'value':
            this.updateVal(this.value, oldProp.value, 'value');
            this.addValidInputClass();
            break;

          case 'width':
            this.setWidth(newProp.width);
            this.popupObj.setProperties({
              width: this.calcPopupWidth()
            });
            break;

          case 'placeholder':
            this.refreshPlaceHolder();
            break;

          case 'filterBarPlaceholder':
            if (this.allowFiltering) {
              this.notify('filterBarPlaceholder', {
                filterBarPlaceholder: newProp.filterBarPlaceholder
              });
            }

            break;

          case 'delimiterChar':
            if (this.mode !== 'Box') {
              this.updateDelimView();
            }

            this.updateData(newProp.delimiterChar);
            break;

          case 'cssClass':
            if (!(0, _ej2Base.isNullOrUndefined)(oldProp.cssClass) && oldProp.cssClass !== '') {
              (0, _ej2Base.removeClass)([this.overAllWrapper], oldProp.cssClass.split(' '));
              (0, _ej2Base.removeClass)([this.popupWrapper], oldProp.cssClass.split(' '));
            }

            this.updateCssClass();
            break;

          case 'enableRtl':
            this.enableRTL(newProp.enableRtl);

            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

            break;

          case 'readonly':
            this.updateReadonly(newProp.readonly);
            this.hidePopup();
            break;

          case 'enabled':
            this.hidePopup();
            this.enable(newProp.enabled);
            break;

          case 'showSelectAll':
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }

            this.renderPopup();
            break;

          case 'showDropDownIcon':
            this.dropDownIcon();
            break;

          case 'floatLabelType':
            this.setFloatLabelType();
            this.addValidInputClass();
            break;

          case 'enableSelectionOrder':
            break;

          case 'selectAllText':
            this.notify('selectAllText', false);
            break;

          case 'popupHeight':
          case 'headerTemplate':
          case 'footerTemplate':
            this.reInitializePoup();
            break;

          case 'allowFiltering':
            if (this.mode === 'CheckBox' && this.popupObj) {
              this.reInitializePoup();
            }

            this.updateSelectElementData(this.allowFiltering);
            break;

          default:
            var msProps = void 0;
            msProps = this.getPropObject(prop, newProp, oldProp);

            _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);

            break;
        }
      }
    };

    MultiSelect.prototype.reInitializePoup = function () {
      if (this.popupObj) {
        this.popupObj.destroy();
        this.popupObj = null;
      }

      this.renderPopup();
    };

    MultiSelect.prototype.updateVal = function (newProp, oldProp, prop) {
      if (!this.list) {
        this.onLoadSelect();
      } else if (!this.inputFocus) {
        if (prop === 'text') {
          this.initialTextUpdate();
          newProp = this.value;
        }

        if (this.value && this.value.length === 0) {
          this.tempValues = oldProp;
        }

        this.initialValueUpdate();

        if (this.mode !== 'Box') {
          this.updateDelimView();
        }

        this.refreshInputHight();
        this.refreshPlaceHolder();

        if (this.mode !== 'CheckBox' && this.changeOnBlur) {
          this.updateValueState(null, newProp, oldProp);
        }

        this.checkPlaceholderSize();
      }

      if (!this.changeOnBlur) {
        this.updateValueState(null, newProp, oldProp);
      }
    };
    /**
     * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,
     * but you can insert based on the index parameter.
     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.
     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.
     * @return {void}.
     */


    MultiSelect.prototype.addItem = function (items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    /**
     * Hides the popup, if the popup in a open state.
     * @returns void
     */


    MultiSelect.prototype.hidePopup = function () {
      var _this = this;

      var delay = 100;

      if (this.isPopupOpen()) {
        var animModel = {
          name: 'FadeOut',
          duration: 100,
          delay: delay ? delay : 0
        };
        var eventArgs = {
          popup: this.popupObj,
          cancel: false,
          animation: animModel
        };
        this.trigger('close', eventArgs, function (eventArgs) {
          if (!eventArgs.cancel) {
            _this.beforePopupOpen = false;

            _this.overAllWrapper.classList.remove(iconAnimation);

            _this.popupObj.hide(new _ej2Base.Animation(eventArgs.animation));

            (0, _ej2Base.attributes)(_this.inputElement, {
              'aria-expanded': 'false'
            });

            if (_this.allowFiltering) {
              _this.notify('inputFocus', {
                module: 'CheckBoxSelection',
                enable: _this.mode === 'CheckBox',
                value: 'clear'
              });
            }

            _this.popupObj.hide();

            (0, _ej2Base.removeClass)([document.body, _this.popupObj.element], 'e-popup-full-page');

            _ej2Base.EventHandler.remove(_this.list, 'keydown', _this.onKeyDown);
          }
        });
      }
    };
    /**
     * Shows the popup, if the popup in a closed state.
     * @returns void
     */


    MultiSelect.prototype.showPopup = function () {
      if (!this.enabled) {
        return;
      }

      if ((0, _ej2Base.isBlazor)() && this.itemTemplate) {
        this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, false);

        if (this.mode !== 'CheckBox' && this.list) {
          this.refreshSelection();
        }
      }

      if (!this.ulElement) {
        this.beforePopupOpen = true;

        _super.prototype.render.call(this);

        return;
      }

      var mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;
      var liLength = this.ulElement.querySelectorAll('li.' + _dropDownBase.dropDownBaseClasses.li + '.' + HIDE_LIST).length;

      if (mainLiLength > 0 && mainLiLength === liLength && liLength === this.mainData.length) {
        this.beforePopupOpen = false;
        return;
      }

      this.onPopupShown();
    };
    /**
     * Based on the state parameter, entire list item will be selected/deselected.
     * parameter
     * `true`   - Selects entire list items.
     * `false`  - Un Selects entire list items.
     * @returns void
     */


    MultiSelect.prototype.selectAll = function (state) {
      this.isSelectAll = true;
      this.selectAllItems(state);
    };

    MultiSelect.prototype.getModuleName = function () {
      return 'multiselect';
    };

    ;
    /**
     * Allows you to clear the selected values from the Multiselect component.
     * @returns void
     */

    MultiSelect.prototype.clear = function () {
      this.selectAll(false);
      this.setProperties({
        value: null
      }, true);
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    MultiSelect.prototype.render = function () {
      this.setDynValue = this.initStatus = false;
      this.isSelectAll = false;
      this.searchWrapper = this.createElement('span', {
        className: SEARCHBOX_WRAPPER + ' ' + (this.mode === 'Box' ? BOX_ELEMENT : '')
      });
      this.viewWrapper = this.createElement('span', {
        className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER,
        styles: 'display:none;'
      });
      this.overAllClear = this.createElement('span', {
        className: CLOSEICON_CLASS,
        styles: 'display:none;'
      });
      this.componentWrapper = this.createElement('div', {
        className: ELEMENT_WRAPPER
      });
      this.overAllWrapper = this.createElement('div', {
        className: OVER_ALL_WRAPPER
      });

      if (this.mode === 'CheckBox') {
        (0, _ej2Base.addClass)([this.overAllWrapper], 'e-checkbox');
      }

      if (_ej2Base.Browser.isDevice) {
        this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
      }

      this.setWidth(this.width);
      this.overAllWrapper.appendChild(this.componentWrapper);
      this.popupWrapper = this.createElement('div', {
        id: this.element.id + '_popup',
        className: POPUP_WRAPPER
      });

      if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {
        this.delimiterWrapper = this.createElement('span', {
          className: DELIMITER_WRAPPER,
          styles: 'display:none'
        });
        this.componentWrapper.appendChild(this.delimiterWrapper);
      } else {
        this.chipCollectionWrapper = this.createElement('span', {
          className: CHIP_WRAPPER,
          styles: 'display:none'
        });

        if (this.mode === 'Default') {
          this.chipCollectionWrapper.setAttribute('id', (0, _ej2Base.getUniqueID)('chip_default'));
        } else if (this.mode === 'Box') {
          this.chipCollectionWrapper.setAttribute('id', (0, _ej2Base.getUniqueID)('chip_box'));
        }

        this.componentWrapper.appendChild(this.chipCollectionWrapper);
      }

      if (this.mode !== 'Box') {
        this.componentWrapper.appendChild(this.viewWrapper);
      }

      this.componentWrapper.appendChild(this.searchWrapper);

      if (this.showClearButton && !_ej2Base.Browser.isDevice) {
        this.componentWrapper.appendChild(this.overAllClear);
      } else {
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }

      this.dropDownIcon();
      this.inputElement = this.createElement('input', {
        className: INPUT_ELEMENT,
        attrs: {
          spellcheck: 'false',
          type: 'text',
          autocomplete: 'off',
          tabindex: '0'
        }
      });

      if (this.mode === 'Default' || this.mode === 'Box') {
        this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);
      }

      if (this.element.tagName !== this.getNgDirective()) {
        this.element.style.display = 'none';
      }

      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.overAllWrapper);
        this.searchWrapper.appendChild(this.inputElement);
      } else {
        this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
        this.searchWrapper.appendChild(this.inputElement);
        this.searchWrapper.appendChild(this.element);
        this.element.removeAttribute('tabindex');
      }

      if (this.floatLabelType !== 'Never') {
        (0, _floatLabel.createFloatLabel)(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      } else if (this.floatLabelType === 'Never') {
        this.refreshPlaceHolder();
      }

      this.addValidInputClass();
      this.element.style.opacity = '';
      var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : (0, _ej2Base.getUniqueID)('ej2_dropdownlist');
      this.element.id = id;
      this.hiddenElement = this.createElement('select', {
        attrs: {
          'aria-hidden': 'true',
          'class': HIDDEN_ELEMENT,
          'tabindex': '-1',
          'multiple': ''
        }
      });
      this.componentWrapper.appendChild(this.hiddenElement);
      this.validationAttribute(this.element, this.hiddenElement);

      if (this.mode !== 'CheckBox') {
        this.hideOverAllClear();
      }

      this.wireEvent();
      this.enable(this.enabled);
      this.enableRTL(this.enableRtl);
      this.checkInitialValue();
      this.renderComplete();
    };

    MultiSelect.prototype.checkInitialValue = function () {
      var _this = this;

      var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !(0, _ej2Base.isNullOrUndefined)(this.dataSource);

      if (!(this.value && this.value.length) && (0, _ej2Base.isNullOrUndefined)(this.text) && !isData && this.element.tagName === 'SELECT' && this.element.options.length > 0) {
        var optionsElement = this.element.options;
        var valueCol = [];
        var textCol = '';

        for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
          var opt = optionsElement[index];

          if (!(0, _ej2Base.isNullOrUndefined)(opt.getAttribute('selected'))) {
            opt.getAttribute('value') ? valueCol.push(opt.getAttribute('value')) : textCol += opt.text + this.delimiterChar;
          }
        }

        if (valueCol.length > 0) {
          this.setProperties({
            value: valueCol
          }, true);
        } else if (textCol !== '') {
          this.setProperties({
            text: textCol
          }, true);
        }

        if (valueCol.length > 0 || textCol !== '') {
          this.refreshInputHight();
          this.refreshPlaceHolder();
        }
      }

      if (this.value && this.value.length || !(0, _ej2Base.isNullOrUndefined)(this.text)) {
        this.renderPopup();
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.text) && ((0, _ej2Base.isNullOrUndefined)(this.value) || this.value.length === 0)) {
        this.initialTextUpdate();
      }

      if (this.value && this.value.length) {
        if (!(this.dataSource instanceof _ej2Data.DataManager)) {
          this.initialValueUpdate();
          this.initialUpdate();
        } else {
          this.setInitialValue = function () {
            _this.initStatus = false;

            _this.initialValueUpdate();

            _this.initialUpdate();

            _this.setInitialValue = null;
            _this.initStatus = true;
          };
        }

        this.updateTempValue();
      } else {
        this.initialUpdate();
      }

      this.initStatus = true;
      this.checkAutoFocus();

      if (!(0, _ej2Base.isNullOrUndefined)(this.text)) {
        this.element.setAttribute('data-initial-value', this.text);
      }
    };

    MultiSelect.prototype.checkAutoFocus = function () {
      if (this.element.hasAttribute('autofocus')) {
        this.inputElement.focus();
      }
    };

    MultiSelect.prototype.setFloatLabelType = function () {
      (0, _floatLabel.removeFloating)(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);

      if (this.floatLabelType !== 'Never') {
        (0, _floatLabel.createFloatLabel)(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      }
    };

    MultiSelect.prototype.addValidInputClass = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.value) && this.value.length || this.floatLabelType === 'Always') {
        (0, _ej2Base.addClass)([this.overAllWrapper], 'e-valid-input');
      } else {
        (0, _ej2Base.removeClass)([this.overAllWrapper], 'e-valid-input');
      }
    };

    MultiSelect.prototype.dropDownIcon = function () {
      if (this.showDropDownIcon) {
        this.dropIcon = this.createElement('span', {
          className: dropdownIcon
        });
        this.componentWrapper.appendChild(this.dropIcon);
        (0, _ej2Base.addClass)([this.componentWrapper], ['e-down-icon']);
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(this.dropIcon)) {
          this.dropIcon.parentElement.removeChild(this.dropIcon);
          (0, _ej2Base.removeClass)([this.componentWrapper], ['e-down-icon']);
        }
      }
    };

    MultiSelect.prototype.initialUpdate = function () {
      if (this.mode !== 'Box') {
        this.updateDelimView();
      }

      this.updateCssClass();
      this.updateHTMLAttribute();
      this.updateReadonly(this.readonly);
      this.refreshInputHight();
      this.checkPlaceholderSize();
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}
     */


    MultiSelect.prototype.destroy = function () {
      if (this.popupObj) {
        this.popupObj.hide();
      }

      this.notify(destroy, {});
      this.unwireListEvents();
      this.unWireEvent();
      this.list = null;
      this.popupObj = null;
      this.mainList = null;
      this.mainData = null;

      _super.prototype.destroy.call(this);

      var temp = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder'];
      var length = temp.length;

      while (length > 0) {
        this.inputElement.removeAttribute(temp[length - 1]);
        length--;
      }

      this.element.removeAttribute('data-initial-value');
      this.element.style.display = 'block';

      if (this.overAllWrapper.parentElement) {
        if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
          (0, _ej2Base.remove)(this.overAllWrapper);
        } else {
          this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
          (0, _ej2Base.remove)(this.overAllWrapper);
        }
      }
    };

    ;

    __decorate([(0, _ej2Base.Complex)({
      text: null,
      value: null,
      iconCss: null,
      groupBy: null
    }, _dropDownBase.FieldSettings)], MultiSelect.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "groupTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('No Records Found')], MultiSelect.prototype, "noRecordsTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('The Request Failed')], MultiSelect.prototype, "actionFailureTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('None')], MultiSelect.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)([])], MultiSelect.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)('StartsWith')], MultiSelect.prototype, "filterType", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], MultiSelect.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "ignoreAccent", void 0);

    __decorate([(0, _ej2Base.Property)()], MultiSelect.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "enableGroupCheckBox", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], MultiSelect.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('300px')], MultiSelect.prototype, "popupHeight", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], MultiSelect.prototype, "popupWidth", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "placeholder", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "filterBarPlaceholder", void 0);

    __decorate([(0, _ej2Base.Property)({})], MultiSelect.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "valueTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "headerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "footerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "itemTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "allowFiltering", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "changeOnBlur", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "allowCustomValue", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], MultiSelect.prototype, "maximumSelectionLength", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MultiSelect.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "hideSelectedItem", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "closePopupOnSelect", void 0);

    __decorate([(0, _ej2Base.Property)('Default')], MultiSelect.prototype, "mode", void 0);

    __decorate([(0, _ej2Base.Property)(',')], MultiSelect.prototype, "delimiterChar", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "ignoreCase", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "showDropDownIcon", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], MultiSelect.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MultiSelect.prototype, "showSelectAll", void 0);

    __decorate([(0, _ej2Base.Property)('Select All')], MultiSelect.prototype, "selectAllText", void 0);

    __decorate([(0, _ej2Base.Property)('Unselect All')], MultiSelect.prototype, "unSelectAllText", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "enableSelectionOrder", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MultiSelect.prototype, "openOnClick", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "removing", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "removed", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "selectedAll", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "blur", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "focus", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "chipSelection", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "filtering", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "tagging", void 0);

    __decorate([(0, _ej2Base.Event)()], MultiSelect.prototype, "customValueSelection", void 0);

    MultiSelect = __decorate([_ej2Base.NotifyPropertyChanges], MultiSelect);
    return MultiSelect;
  }(_dropDownBase.DropDownBase);

  _exports.MultiSelect = MultiSelect;
});;
define('@syncfusion/ej2-inputs/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-inputs/src/color-picker/color-picker',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-splitbuttons", "@syncfusion/ej2-popups", "./../input/index", "./../numerictextbox/index", "./../slider/slider"], function (_exports, _ej2Base, _ej2Splitbuttons, _ej2Popups, _index, _index2, _slider) {
  "use strict";

  _exports.__esModule = true;
  _exports.ColorPicker = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var APPLY = 'e-apply';
  var CANCEL = 'e-cancel';
  var CURRENT = 'e-current';
  var CONTAINER = 'e-container';
  var CTRLBTN = 'e-ctrl-btn';
  var CTRLSWITCH = 'e-switch-ctrl-btn';
  var DISABLED = 'e-disabled';
  var FORMATSWITCH = 'e-value-switch-btn';
  var HANDLER = 'e-handler';
  var HEX = 'e-hex';
  var HIDEHEX = 'e-hide-hex-value';
  var HIDEOPACITY = 'e-hide-opacity';
  var HIDERGBA = 'e-hide-switchable-value';
  var HIDEVALUE = 'e-hide-value';
  var HIDEVALUESWITCH = 'e-hide-valueswitcher';
  var HSVAREA = 'e-hsv-color';
  var HSVCONTAINER = 'e-hsv-container';
  var INPUTWRAPPER = 'e-selected-value';
  var MODESWITCH = 'e-mode-switch-btn';
  var NOCOLOR = 'e-nocolor-item';
  var OPACITY = 'e-opacity-value';
  var PALETTES = 'e-palette';
  var PALETTECONTENT = 'e-color-palette';
  var PICKERCONTENT = 'e-color-picker';
  var PREVIEW = 'e-preview-container';
  var PREVIOUS = 'e-previous';
  var RTL = 'e-rtl';
  var SHOWVALUE = 'e-show-value';
  var SELECT = 'e-selected';
  var SPLITPREVIEW = 'e-split-preview';
  var TILE = 'e-tile';
  var presets = {
    default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b', '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7', '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4', '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d', '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176', '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58', '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835', '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d', '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825', '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']
  };
  /**
   * ColorPicker component is a user interface to select and adjust color values. It provides supports for various
   * color specification like Red Green Blue, Hue Saturation Value and Hex codes.
   * ```html
   * <input type="color" id="color-picker">
   * ```
   * ```typescript
   * <script>
   *   let colorPickerObj: ColorPicker = new ColorPicker(null , "#color-picker");
   * </script>
   * ```
   */

  var ColorPicker =
  /** @class */
  function (_super) {
    __extends(ColorPicker, _super);

    function ColorPicker(options, element) {
      return _super.call(this, options, element) || this;
    }

    ColorPicker.prototype.preRender = function () {
      var ele = this.element;
      this.formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (this.formElement) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);
      }

      var localeText = {
        Apply: 'Apply',
        Cancel: 'Cancel',
        ModeSwitcher: 'Switch Mode'
      };
      this.l10n = new _ej2Base.L10n('colorpicker', localeText, this.locale);

      if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {
        ele.setAttribute('name', ele.id);
      }
    };
    /**
     * To Initialize the component rendering
     * @private
     */


    ColorPicker.prototype.render = function () {
      this.initWrapper();

      if (this.inline) {
        this.createWidget();
      } else {
        this.createSplitBtn();
      }

      if (!this.enableOpacity) {
        (0, _ej2Base.addClass)([this.container.parentElement], HIDEOPACITY);
      }

      this.renderComplete();
    };

    ColorPicker.prototype.initWrapper = function () {
      var wrapper = this.createElement('div', {
        className: 'e-' + this.getModuleName() + '-wrapper'
      });
      this.element.parentNode.insertBefore(wrapper, this.element);
      wrapper.appendChild(this.element);
      (0, _ej2Base.attributes)(this.element, {
        'tabindex': '-1',
        'spellcheck': 'false'
      });
      this.container = this.createElement('div', {
        className: CONTAINER
      });
      this.getWrapper().appendChild(this.container);
      var value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';

      if (this.noColor && this.mode === 'Palette' && this.value === '') {
        value = '';
      }

      var slicedValue = value.slice(0, 7);

      if ((0, _ej2Base.isNullOrUndefined)(this.initialInputValue)) {
        this.initialInputValue = slicedValue;
      }

      this.element.value = slicedValue;

      if (this.enableOpacity) {
        this.setProperties({
          'value': value
        }, true);
      } else {
        this.setProperties({
          'value': slicedValue
        }, true);
      }

      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([wrapper], this.cssClass.split(' '));
      }

      this.tileRipple = (0, _ej2Base.rippleEffect)(this.container, {
        selector: '.' + TILE
      });
      this.ctrlBtnRipple = (0, _ej2Base.rippleEffect)(this.container, {
        selector: '.e-btn'
      });
    };

    ColorPicker.prototype.getWrapper = function () {
      return this.element.parentElement;
    };

    ColorPicker.prototype.createWidget = function () {
      if (this.mode === 'Palette') {
        this.createPalette();

        if (!this.inline) {
          this.firstPaletteFocus();
        }
      } else {
        this.createPicker();

        if (!this.inline) {
          this.getDragHandler().focus();
        }
      }

      this.isRgb = true;
      this.createInput();
      this.createCtrlBtn();

      if (!this.disabled) {
        this.wireEvents();
      }

      if (this.inline && this.disabled) {
        this.toggleDisabled(true);
      }

      if (_ej2Base.Browser.isDevice) {
        this.refreshPopupPos();
      }
    };

    ColorPicker.prototype.createSplitBtn = function () {
      var _this = this;

      var splitButton = this.createElement('button', {
        className: 'e-split-colorpicker'
      });
      this.getWrapper().appendChild(splitButton);
      this.splitBtn = new _ej2Splitbuttons.SplitButton({
        iconCss: 'e-selected-color',
        target: this.container,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        open: this.onOpen.bind(this),
        click: function (args) {
          _this.trigger('change', {
            currentValue: {
              hex: _this.value.slice(0, 7),
              rgba: _this.convertToRgbString(_this.hexToRgb(_this.value))
            },
            previousValue: {
              hex: null,
              rgba: null
            },
            value: _this.value
          });
        }
      });
      this.splitBtn.createElement = this.createElement;
      this.splitBtn.appendTo(splitButton);
      var preview = this.createElement('span', {
        className: SPLITPREVIEW
      });
      (0, _ej2Base.select)('.e-selected-color', splitButton).appendChild(preview);
      preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      var popupEle = this.getPopupEle();
      (0, _ej2Base.addClass)([popupEle], 'e-colorpicker-popup');

      if (this.cssClass) {
        (0, _ej2Base.addClass)([popupEle], this.cssClass.split(' '));
      }

      if (_ej2Base.Browser.isDevice) {
        var popupInst = this.getPopupInst();
        popupInst.relateTo = document.body;
        popupInst.position = {
          X: 'center',
          Y: 'center'
        };
        popupInst.targetType = 'container';
        popupInst.collision = {
          X: 'fit',
          Y: 'fit'
        };
        popupInst.offsetY = 4;
        popupEle.style.zIndex = (0, _ej2Popups.getZindexPartial)(this.splitBtn.element).toString();
      }

      this.bindCallBackEvent();
    };

    ColorPicker.prototype.onOpen = function (args) {
      this.trigger('open', {
        element: this.container
      });
    };

    ColorPicker.prototype.getPopupInst = function () {
      return (0, _ej2Base.getInstance)(this.getPopupEle(), _ej2Popups.Popup);
    };

    ColorPicker.prototype.bindCallBackEvent = function () {
      var _this = this;

      this.splitBtn.beforeOpen = function (args) {
        var callBackPromise = new _ej2Splitbuttons.Deferred();

        _this.trigger('beforeOpen', args, function (observeOpenArgs) {
          if (!observeOpenArgs.cancel) {
            var popupEle = _this.getPopupEle();

            popupEle.style.top = (0, _ej2Base.formatUnit)(0 + pageYOffset);
            popupEle.style.left = (0, _ej2Base.formatUnit)(0 + pageXOffset);
            popupEle.style.display = 'block';

            _this.createWidget();

            popupEle.style.display = '';

            if (_ej2Base.Browser.isDevice) {
              _this.modal = _this.createElement('div');
              _this.modal.className = 'e-' + _this.getModuleName() + ' e-modal';
              _this.modal.style.display = 'none';
              document.body.insertBefore(_this.modal, popupEle);
              document.body.className += ' e-colorpicker-overflow';
              _this.modal.style.display = 'block';
              _this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();
            }
          }

          args.cancel = observeOpenArgs.cancel;
          callBackPromise.resolve(observeOpenArgs);
        });

        return callBackPromise;
      };

      this.splitBtn.beforeClose = function (args) {
        var callBackPromise = new _ej2Splitbuttons.Deferred();

        if (!(0, _ej2Base.isNullOrUndefined)(args.event)) {
          var beforeCloseArgs = {
            element: _this.container,
            event: args.event,
            cancel: false
          };

          _this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
            if (_ej2Base.Browser.isDevice && args.event.target === _this.modal) {
              observedCloseArgs.cancel = true;
            }

            if (!observedCloseArgs.cancel) {
              _this.onPopupClose();
            }

            args.cancel = observedCloseArgs.cancel;
            callBackPromise.resolve(observedCloseArgs);
          });
        } else {
          callBackPromise.resolve(args);
        }

        return callBackPromise;
      };
    };

    ColorPicker.prototype.onPopupClose = function () {
      this.unWireEvents();
      this.destroyOtherComp();
      this.container.style.width = '';
      (0, _ej2Base.select)('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      this.container.innerHTML = '';
      (0, _ej2Base.removeClass)([this.container], [PICKERCONTENT, PALETTECONTENT]);

      if (_ej2Base.Browser.isDevice && this.modal) {
        (0, _ej2Base.removeClass)([document.body], 'e-colorpicker-overflow');
        this.modal.style.display = 'none';
        this.modal.outerHTML = '';
        this.modal = null;
      }
    };

    ColorPicker.prototype.createPalette = function () {
      (0, _ej2Base.classList)(this.container, [PALETTECONTENT], [PICKERCONTENT]);

      if (this.presetColors) {
        var paletteGroup = this.createElement('div', {
          className: 'e-custom-palette'
        });
        this.appendElement(paletteGroup);
        var keys = Object.keys(this.presetColors);

        if (keys.length === 1) {
          this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);
        } else {
          for (var i = 0, len = keys.length; i < len; i++) {
            this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
          }
        }

        if ((0, _ej2Base.selectAll)('.e-row', paletteGroup).length > 10) {
          (0, _ej2Base.addClass)([paletteGroup], 'e-palette-group');
        }
      } else {
        this.appendPalette(presets.default, 'default');
      }

      if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {
        this.setNoColor();
      }

      var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
      this.container.style.width = (0, _ej2Base.formatUnit)(this.container.children[0].offsetWidth + width + width);
      this.rgb = this.hexToRgb(this.roundValue(this.value));
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
    };

    ColorPicker.prototype.firstPaletteFocus = function () {
      if (!(0, _ej2Base.select)('.' + SELECT, this.container.children[0])) {
        (0, _ej2Base.selectAll)('.' + PALETTES, this.container)[0].focus();
      }
    };

    ColorPicker.prototype.appendPalette = function (colors, key, refEle) {
      var palette = this.createElement('div', {
        className: PALETTES,
        attrs: {
          'tabindex': '0'
        }
      });

      if (refEle) {
        refEle.appendChild(palette);
      } else {
        this.appendElement(palette);
      }

      var row;
      var tile;
      var roundedColor;

      for (var i = 0, len = colors.length; i < len; i++) {
        if (i === 0 || i % this.columns === 0) {
          row = this.createElement('div', {
            className: 'e-row',
            attrs: {
              'role': 'row'
            }
          });
          palette.appendChild(row);
        }

        roundedColor = this.roundValue(colors[i]).toLowerCase();
        tile = this.createElement('span', {
          className: TILE,
          attrs: {
            'role': 'gridcell',
            'aria-label': roundedColor,
            'aria-selected': 'false'
          }
        });
        this.trigger('beforeTileRender', {
          element: tile,
          presetName: key,
          value: colors[i]
        });
        row.appendChild(tile);

        if (this.value === roundedColor) {
          this.addTileSelection(tile);
          palette.focus();
        }

        tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
      }
    };

    ColorPicker.prototype.setNoColor = function () {
      var noColorEle = this.container.querySelector('.e-row').children[0];
      noColorEle.classList.add(NOCOLOR);

      if (!this.value) {
        noColorEle.classList.add(SELECT);
        (0, _ej2Base.closest)(noColorEle, '.' + PALETTES).focus();
      }

      ['aria-selected', 'aria-label'].forEach(function (attr) {
        noColorEle.removeAttribute(attr);
      });
      noColorEle.style.backgroundColor = '';
    };

    ColorPicker.prototype.appendElement = function (ele, insertPos) {
      if (insertPos === void 0) {
        insertPos = 0;
      }

      var refEle = this.container.children[insertPos];
      refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);
    };

    ColorPicker.prototype.addTileSelection = function (ele) {
      ele.classList.add(SELECT);
      ele.setAttribute('aria-selected', 'true');
    };

    ColorPicker.prototype.createPicker = function () {
      (0, _ej2Base.classList)(this.container, [PICKERCONTENT], [PALETTECONTENT]);
      var hsvContainer = this.createElement('div', {
        className: HSVCONTAINER
      });
      this.appendElement(hsvContainer);
      hsvContainer.appendChild(this.createElement('div', {
        className: HSVAREA
      }));
      var dragHandler = this.createElement('span', {
        className: HANDLER,
        attrs: {
          'tabindex': '0'
        }
      });
      hsvContainer.appendChild(dragHandler);
      this.rgb = this.hexToRgb(this.value);
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
      this.setHsvContainerBg();
      this.setHandlerPosition();
      this.createSlider();
      this.createDragTooltip();
    };

    ColorPicker.prototype.setHsvContainerBg = function (h) {
      if (h === void 0) {
        h = this.hsv[0];
      }

      this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
    };

    ColorPicker.prototype.getHsvContainer = function () {
      return (0, _ej2Base.select)('.' + HSVCONTAINER, this.container);
    };

    ColorPicker.prototype.setHandlerPosition = function () {
      var dragHandler = this.getDragHandler();
      var hsvArea = (0, _ej2Base.select)('.' + HSVAREA, this.container);

      if (this.enableRtl) {
        dragHandler.style.left = (0, _ej2Base.formatUnit)(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);
      } else {
        dragHandler.style.left = (0, _ej2Base.formatUnit)(hsvArea.offsetWidth * this.hsv[1] / 100);
      }

      dragHandler.style.top = (0, _ej2Base.formatUnit)(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
    };

    ColorPicker.prototype.createSlider = function () {
      var sliderPreviewWrapper = this.createElement('div', {
        className: 'e-slider-preview'
      });
      this.appendElement(sliderPreviewWrapper, 1);
      this.createPreview(sliderPreviewWrapper);
      var sliderWrapper = this.createElement('div', {
        className: 'e-colorpicker-slider'
      });
      sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
      var slider = this.createElement('div', {
        className: 'e-hue-slider'
      });
      sliderWrapper.appendChild(slider);
      this.hueSlider = new _slider.Slider({
        value: this.hsv[0],
        min: 0,
        max: 359,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.hueChange.bind(this)
      });
      this.hueSlider.createElement = this.createElement;
      this.hueSlider.appendTo(slider);

      if (this.enableOpacity) {
        slider = this.createElement('div', {
          className: 'e-opacity-slider'
        });
        sliderWrapper.appendChild(slider);
        this.createOpacitySlider(slider);
      }
    };

    ColorPicker.prototype.createOpacitySlider = function (slider) {
      this.opacitySlider = new _slider.Slider({
        value: this.rgb[3] * 100,
        min: 0,
        max: 100,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.opacityChange.bind(this)
      });
      this.opacitySlider.createElement = this.createElement;
      this.opacitySlider.appendTo(slider);
      var opacityBgTrack = this.createElement('div', {
        className: 'e-opacity-empty-track'
      });
      slider.appendChild(opacityBgTrack);
      this.updateOpacitySliderBg();
    };

    ColorPicker.prototype.updateOpacitySliderBg = function () {
      var direction = this.enableRtl ? 'to left' : 'to right';
      (0, _ej2Base.select)('.e-slider-track', this.opacitySlider.element).style.background = 'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';
    };

    ColorPicker.prototype.hueChange = function (args) {
      this.hsv[0] = args.value;
      this.setHsvContainerBg();
      this.convertToOtherFormat();
    };

    ColorPicker.prototype.opacityChange = function (args) {
      var value = args.value;
      var pValue = this.rgbToHex(this.rgb);
      this.hsv[3] = value / 100;
      this.rgb[3] = value / 100;
      var cValue = this.rgbToHex(this.rgb);
      this.updateOpacityInput(value);
      var rgb = this.convertToRgbString(this.rgb);
      this.updatePreview(rgb);
      this.triggerEvent(cValue, pValue, rgb);
    };

    ColorPicker.prototype.updateOpacityInput = function (value) {
      if (!this.getWrapper().classList.contains(HIDEVALUE)) {
        var opacityTextBoxInst = (0, _ej2Base.getInstance)((0, _ej2Base.select)('.' + OPACITY, this.container), _index2.NumericTextBox);
        opacityTextBoxInst.value = value;
        opacityTextBoxInst.dataBind();
      }
    };

    ColorPicker.prototype.createPreview = function (parentEle) {
      var previewContainer = this.createElement('div', {
        className: PREVIEW
      });
      parentEle.appendChild(previewContainer);
      var preview = this.createElement('span', {
        className: 'e-preview ' + CURRENT
      });
      previewContainer.appendChild(preview);
      var colorValue = this.convertToRgbString(this.rgb);
      preview.style.backgroundColor = colorValue;
      preview = this.createElement('span', {
        className: 'e-preview ' + PREVIOUS
      });
      previewContainer.appendChild(preview);
      preview.style.backgroundColor = colorValue;
    };

    ColorPicker.prototype.isPicker = function () {
      return !this.container.classList.contains(PALETTECONTENT);
    };

    ColorPicker.prototype.getPopupEle = function () {
      return this.container.parentElement;
    };

    ColorPicker.prototype.createNumericInput = function (element, value, label, max) {
      var _this = this;

      var numericInput = new _index2.NumericTextBox({
        value: value,
        placeholder: label,
        min: 0,
        max: max,
        format: '###.##',
        showSpinButton: false,
        floatLabelType: 'Always',
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        readonly: this.isPicker() ? false : true,
        change: function (args) {
          if (args.event) {
            _this.inputHandler(args.event);
          }
        }
      });
      numericInput.createElement = this.createElement;
      numericInput.appendTo(element);
    };

    ColorPicker.prototype.createInput = function () {
      var isPicker = this.isPicker();
      var wrapper = this.getWrapper();

      if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
        var inputWrap = this.createElement('div', {
          className: INPUTWRAPPER
        });
        isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);
        var container = this.createElement('div', {
          className: 'e-input-container'
        });
        inputWrap.appendChild(container);

        if (!wrapper.classList.contains(HIDEVALUESWITCH)) {
          this.appendValueSwitchBtn(inputWrap);
        }

        if (!wrapper.classList.contains(HIDEHEX)) {
          var hexInput = this.createElement('input', {
            className: HEX,
            attrs: {
              'maxlength': '7',
              'spellcheck': 'false'
            }
          });
          container.appendChild(hexInput);

          _index.Input.createInput({
            element: hexInput,
            floatLabelType: 'Always',
            properties: {
              placeholder: 'HEX',
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              readonly: this.isPicker() ? false : true
            }
          }, this.createElement);

          _index.Input.setValue(this.value.slice(0, 7), hexInput);

          hexInput.addEventListener('input', this.inputHandler.bind(this));
        }

        if (!wrapper.classList.contains(HIDERGBA)) {
          var label = void 0;
          var value = void 0;

          if (this.isRgb) {
            label = 'RGB';
            value = this.rgb;
          } else {
            label = 'HSV';
            value = this.hsv;
          }

          var clsName = ['rh', 'gs', 'bv'];

          for (var i = 0; i < 3; i++) {
            this.createNumericInput(container.appendChild(this.createElement('input', {
              className: 'e-' + clsName[i] + '-value'
            })), value[i], label[i], 255);
          }

          if (this.enableOpacity) {
            this.appendOpacityValue(container);
          }
        }
      }
    };

    ColorPicker.prototype.appendOpacityValue = function (container) {
      this.createNumericInput(container.appendChild(this.createElement('input', {
        className: OPACITY
      })), this.rgb[3] * 100, 'A', 100);
    };

    ColorPicker.prototype.appendValueSwitchBtn = function (targetEle) {
      var valueSwitchBtn = this.createElement('button', {
        className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH
      });
      targetEle.appendChild(valueSwitchBtn);

      if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {
        valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));
      }
    };

    ColorPicker.prototype.createCtrlBtn = function () {
      if (this.modeSwitcher || this.showButtons) {
        this.l10n.setLocale(this.locale);
        var btnWrapper = this.createElement('div', {
          className: CTRLSWITCH
        });
        this.container.appendChild(btnWrapper);

        if (this.showButtons) {
          var controlBtnWrapper = this.createElement('div', {
            className: CTRLBTN
          });
          btnWrapper.appendChild(controlBtnWrapper);
          var apply = this.l10n.getConstant('Apply');
          controlBtnWrapper.appendChild(this.createElement('button', {
            innerHTML: apply,
            className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,
            attrs: {
              'title': apply
            }
          }));
          var cancel = this.l10n.getConstant('Cancel');
          controlBtnWrapper.appendChild(this.createElement('button', {
            innerHTML: cancel,
            className: 'e-btn e-css e-flat e-small ' + CANCEL,
            attrs: {
              'title': cancel
            }
          }));
        }

        if (this.modeSwitcher) {
          this.appendModeSwitchBtn();
        }
      }
    };

    ColorPicker.prototype.appendModeSwitchBtn = function () {
      var modeSwitcher = this.createElement('button', {
        className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH,
        attrs: {
          title: this.l10n.getConstant('ModeSwitcher')
        }
      });
      (0, _ej2Base.select)('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, (0, _ej2Base.select)('.' + CTRLBTN, this.container));
    };

    ColorPicker.prototype.createDragTooltip = function () {
      var _this = this;

      var tooltip = new _ej2Popups.Tooltip({
        opensOn: 'Custom',
        showTipPointer: false,
        cssClass: 'e-color-picker-tooltip',
        beforeOpen: function (args) {
          _this.tooltipEle = args.element;
        },
        animation: {
          open: {
            effect: 'None'
          },
          close: {
            effect: 'None'
          }
        }
      });
      tooltip.createElement = this.createElement;
      tooltip.appendTo(this.container);
      tooltip.open(this.container);
      this.tooltipEle.style.zIndex = (0, _ej2Popups.getZindexPartial)(this.tooltipEle).toString();
      (0, _ej2Base.select)('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {
        className: 'e-tip-transparent'
      }));
    };

    ColorPicker.prototype.getTooltipInst = function () {
      return (0, _ej2Base.getInstance)(this.container, _ej2Popups.Tooltip);
    };

    ColorPicker.prototype.setTooltipOffset = function (value) {
      this.getTooltipInst().offsetY = value;
    };

    ColorPicker.prototype.toggleDisabled = function (enable) {
      enable ? this.getWrapper().classList.add(DISABLED) : this.getWrapper().classList.remove(DISABLED);

      if (this.showButtons) {
        [].slice.call((0, _ej2Base.selectAll)('.e-btn', this.container)).forEach(function (ele) {
          enable ? (0, _ej2Base.attributes)(ele, {
            'disabled': ''
          }) : ele.removeAttribute('disabled');
        });
      }
    };

    ColorPicker.prototype.convertToRgbString = function (rgb) {
      return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';
    };

    ColorPicker.prototype.convertToHsvString = function (hsv) {
      return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';
    };

    ColorPicker.prototype.updateHsv = function () {
      this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
      this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
      this.setHandlerPosition();
    };

    ColorPicker.prototype.convertToOtherFormat = function (isKey) {
      if (isKey === void 0) {
        isKey = false;
      }

      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.hsvToRgb.apply(this, this.hsv);
      var cValue = this.rgbToHex(this.rgb);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.updateInput(cValue);
      this.triggerEvent(cValue, pValue, rgba, isKey);
    };

    ColorPicker.prototype.updateInput = function (value) {
      var wrapper = this.getWrapper();

      if (!wrapper.classList.contains(HIDEVALUE)) {
        if (!wrapper.classList.contains(HIDEHEX)) {
          _index.Input.setValue(value.substr(0, 7), (0, _ej2Base.select)('.' + HEX, this.container));
        }

        if (!wrapper.classList.contains(HIDERGBA)) {
          if (this.isRgb) {
            this.updateValue(this.rgb, false);
          } else {
            this.updateValue(this.hsv, false);
          }
        }
      }
    };

    ColorPicker.prototype.updatePreview = function (value) {
      if (this.enableOpacity) {
        this.updateOpacitySliderBg();
      }

      (0, _ej2Base.select)('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;
      (0, _ej2Base.select)('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;
      (0, _ej2Base.select)('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
    };

    ColorPicker.prototype.getDragHandler = function () {
      return (0, _ej2Base.select)('.' + HANDLER, this.container);
    };

    ColorPicker.prototype.removeTileSelection = function () {
      var selectedEle = [].slice.call((0, _ej2Base.selectAll)('.' + SELECT, this.container.children[0]));
      selectedEle.forEach(function (ele) {
        ele.classList.remove(SELECT);
        ele.setAttribute('aria-selected', 'false');
      });
    };

    ColorPicker.prototype.convertRgbToNumberArray = function (value) {
      return value.slice(value.indexOf('(') + 1, value.indexOf(')')).split(',').map(function (n, i) {
        return i !== 3 ? parseInt(n, 10) : parseFloat(n);
      });
    };
    /**
     * To get color value in specified type.
     * @param value - Specify the color value.
     * @param type - Specify the type to which the specified color needs to be converted.
     * @method getValue
     * @return {string}
     */


    ColorPicker.prototype.getValue = function (value, type) {
      if (!value) {
        value = this.value;
      }

      type = !type ? 'hex' : type.toLowerCase();

      if (value[0] === 'r') {
        var cValue = this.convertRgbToNumberArray(value);

        if (type === 'hex' || type === 'hexa') {
          var hex = this.rgbToHex(cValue);
          return type === 'hex' ? hex.slice(0, 7) : hex;
        } else {
          if (type === 'hsv') {
            return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));
          } else {
            if (type === 'hsva') {
              return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));
            } else {
              return 'null';
            }
          }
        }
      } else {
        if (value[0] === 'h') {
          var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));

          if (type === 'rgba') {
            return this.convertToRgbString(cValue);
          } else {
            if (type === 'hex' || type === 'hexa') {
              var hex = this.rgbToHex(cValue);
              return type === 'hex' ? hex.slice(0, 7) : hex;
            } else {
              if (type === 'rgb') {
                return this.convertToRgbString(cValue.slice(0, 3));
              } else {
                return 'null';
              }
            }
          }
        } else {
          value = this.roundValue(value);
          var rgb = this.hexToRgb(value);

          if (type === 'rgb' || type === 'hsv') {
            rgb = rgb.slice(0, 3);
          }

          if (type === 'rgba' || type === 'rgb') {
            return this.convertToRgbString(rgb);
          } else {
            if (type === 'hsva' || type === 'hsv') {
              return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));
            } else {
              if (type === 'hex') {
                return value.slice(0, 7);
              } else {
                if (type === 'a') {
                  return rgb[3].toString();
                } else {
                  return 'null';
                }
              }
            }
          }
        }
      }
    };
    /**
     * To show/hide ColorPicker popup based on current state of the SplitButton.
     * @method toggle
     * @return {void}
     */


    ColorPicker.prototype.toggle = function () {
      this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */


    ColorPicker.prototype.getModuleName = function () {
      return 'colorpicker';
    };
    /**
     * Gets the properties to be maintained in the persisted state.
     * @return {string}
     */


    ColorPicker.prototype.getPersistData = function () {
      return this.addOnPersist(['value']);
    };

    ColorPicker.prototype.wireEvents = function () {
      if (this.isPicker()) {
        var dragHandler = this.getDragHandler();

        _ej2Base.EventHandler.add(dragHandler, 'keydown', this.pickerKeyDown, this);

        _ej2Base.EventHandler.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);

        if (this.modeSwitcher || this.showButtons) {
          this.addCtrlSwitchEvent();
        }

        _ej2Base.EventHandler.add((0, _ej2Base.select)('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);
      } else {
        _ej2Base.EventHandler.add(this.container, 'click', this.paletteClickHandler, this);

        _ej2Base.EventHandler.add(this.container, 'keydown', this.paletteKeyDown, this);
      }
    };

    ColorPicker.prototype.formResetHandler = function () {
      this.value = this.initialInputValue;
      (0, _ej2Base.attributes)(this.element, {
        'value': this.initialInputValue
      });
    };

    ColorPicker.prototype.addCtrlSwitchEvent = function () {
      _ej2Base.EventHandler.add((0, _ej2Base.select)('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler, this);
    };

    ColorPicker.prototype.pickerKeyDown = function (e) {
      switch (e.keyCode) {
        case 39:
          this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
          break;

        case 37:
          this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
          break;

        case 38:
          this.handlerDragPosition(2, 1, e);
          break;

        case 40:
          this.handlerDragPosition(2, -1, e);
          break;

        case 13:
          e.preventDefault();
          var cValue = this.rgbToHex(this.rgb);
          this.enterKeyHandler(cValue, e);
      }
    };

    ColorPicker.prototype.enterKeyHandler = function (value, e) {
      this.triggerChangeEvent(value);

      if (!this.inline) {
        this.closePopup(e);
        this.splitBtn.element.focus();
      }
    };

    ColorPicker.prototype.closePopup = function (e) {
      var _this = this;

      var beforeCloseArgs = {
        element: this.container,
        event: e,
        cancel: false
      };
      this.trigger('beforeClose', beforeCloseArgs, function (observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          _this.splitBtn.toggle();

          _this.onPopupClose();
        }
      });
    };

    ColorPicker.prototype.triggerChangeEvent = function (value) {
      var hex = value.slice(0, 7);
      this.trigger('change', {
        currentValue: {
          hex: hex,
          rgba: this.convertToRgbString(this.rgb)
        },
        previousValue: {
          hex: this.value.slice(0, 7),
          rgba: this.convertToRgbString(this.hexToRgb(this.value))
        },
        value: this.enableOpacity ? value : hex
      });

      if (this.enableOpacity) {
        this.setProperties({
          'value': value
        }, true);
      } else {
        this.setProperties({
          'value': hex
        }, true);
      }

      this.element.value = hex ? hex : '#000000';
    };

    ColorPicker.prototype.handlerDragPosition = function (prob, value, e) {
      e.preventDefault();
      this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);

      if (this.hsv[prob] < 0) {
        this.hsv[prob] = 0;
      }

      this.updateHsv();
      this.convertToOtherFormat(true);
    };

    ColorPicker.prototype.handlerDown = function (e) {
      e.preventDefault();
      var x;
      var y;

      if (e.type === 'mousedown') {
        this.clientX = Math.abs(e.pageX - pageXOffset);
        this.clientY = Math.abs(e.pageY - pageYOffset);
        this.setTooltipOffset(8);
      } else {
        this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
        this.setTooltipOffset(-8);
      }

      this.setHsv(this.clientX, this.clientY);
      this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';
      this.updateHsv();
      this.convertToOtherFormat();
      this.getDragHandler().focus();

      _ej2Base.EventHandler.add(document, 'mousemove touchmove', this.handlerMove, this);

      _ej2Base.EventHandler.add(document, 'mouseup touchend', this.handlerEnd, this);
    };

    ColorPicker.prototype.handlerMove = function (e) {
      if (e.type !== 'touchmove') {
        e.preventDefault();
      }

      var x;
      var y;

      if (e.type === 'mousemove') {
        x = Math.abs(e.pageX - pageXOffset);
        y = Math.abs(e.pageY - pageYOffset);
      } else {
        x = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        y = Math.abs(e.changedTouches[0].pageY - pageYOffset);
      }

      this.setHsv(x, y);
      var dragHandler = this.getDragHandler();
      var left = parseInt(dragHandler.style.left, 10);
      var top = parseInt(dragHandler.style.top, 10);
      this.updateHsv();
      this.convertToOtherFormat();
      this.getTooltipInst().refresh(dragHandler);

      if (!this.tooltipEle.style.transform) {
        if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {
          (0, _ej2Base.select)('.' + HSVAREA, this.container).style.cursor = 'pointer';
          dragHandler.style.transition = 'none';

          if (!this.inline) {
            this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
          }

          this.tooltipEle.style.transform = 'rotate(45deg)';
          dragHandler.classList.add('e-hide-handler');
        }
      }
    };

    ColorPicker.prototype.setHsv = function (clientX, clientY) {
      var ele = (0, _ej2Base.select)('.' + HSVAREA, this.container);
      var position = ele.getBoundingClientRect();

      if (this.enableRtl) {
        clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);
      } else {
        clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;
      }

      clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;
      this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;
      this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;
    };

    ColorPicker.prototype.handlerEnd = function (e) {
      if (e.type !== 'touchend') {
        e.preventDefault();
      }

      _ej2Base.EventHandler.remove(document, 'mousemove touchmove', this.handlerMove);

      _ej2Base.EventHandler.remove(document, 'mouseup touchend', this.handlerEnd);

      var dragHandler = this.getDragHandler();
      (0, _ej2Base.select)('.' + HSVAREA, this.container).style.cursor = '';

      if (this.tooltipEle.style.transform) {
        this.tooltipEle.style.transform = '';
        dragHandler.classList.remove('e-hide-handler');
      }

      if (!this.inline && !this.showButtons) {
        this.closePopup(e);
      }
    };

    ColorPicker.prototype.btnClickHandler = function (e) {
      var target = e.target;

      if ((0, _ej2Base.closest)(target, '.' + MODESWITCH)) {
        e.stopPropagation();
        this.switchToPalette();
      } else {
        if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
          this.ctrlBtnClick(target, e);
        }
      }
    };

    ColorPicker.prototype.switchToPalette = function () {
      this.trigger('beforeModeSwitch', {
        element: this.container,
        mode: 'Palette'
      });
      this.unWireEvents();
      this.destroyOtherComp();
      (0, _ej2Base.detach)((0, _ej2Base.select)('.e-slider-preview', this.container));

      if (!this.getWrapper().classList.contains(HIDEVALUE)) {
        (0, _ej2Base.remove)((0, _ej2Base.select)('.' + INPUTWRAPPER, this.container));
      }

      (0, _ej2Base.detach)(this.getHsvContainer());
      this.createPalette();
      this.firstPaletteFocus();
      this.createInput();
      this.refreshPopupPos();
      this.wireEvents();
      this.trigger('onModeSwitch', {
        element: this.container,
        mode: 'Palette'
      });
    };

    ColorPicker.prototype.refreshPopupPos = function () {
      if (!this.inline) {
        var popupEle = this.getPopupEle();
        popupEle.style.left = (0, _ej2Base.formatUnit)(0 + pageXOffset);
        popupEle.style.top = (0, _ej2Base.formatUnit)(0 + pageYOffset);
        this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
      }
    };

    ColorPicker.prototype.formatSwitchHandler = function (e) {
      var target = e.target.parentElement;

      if (this.isRgb) {
        this.updateValue(this.hsv, true, 3, [360, 100, 100]);
        this.isRgb = false;
      } else {
        this.updateValue(this.rgb, true, 2);
        this.isRgb = true;
      }
    };

    ColorPicker.prototype.updateValue = function (value, format, idx, max) {
      var clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];
      var inst;

      for (var i = 0, len = clsName.length; i < len; i++) {
        inst = (0, _ej2Base.getInstance)((0, _ej2Base.select)('.' + clsName[i], this.container), _index2.NumericTextBox);
        inst.value = Math.round(value[i]);

        if (format) {
          inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();
          inst.max = max ? max[i] : 255;
        }

        inst.dataBind();
      }
    };

    ColorPicker.prototype.previewHandler = function (e) {
      var target = e.target;
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);

      if (!this.rgb[3]) {
        this.rgb[3] = 1;
      }

      var cValue = this.rgbToHex(this.rgb);
      var hsv = this.rgbToHsv.apply(this, this.rgb);

      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({
          'value': hsv[0]
        }, true);
        this.hueSlider.refresh();
      }

      this.setHsvContainerBg(hsv[0]);

      if (this.enableOpacity && hsv[3] !== this.hsv[3]) {
        this.opacitySlider.setProperties({
          'value': hsv[3] * 100
        }, true);
        this.opacitySlider.refresh();
        this.updateOpacitySliderBg();
      }

      this.hsv = hsv;
      this.setHandlerPosition();
      this.updateInput(cValue);
      (0, _ej2Base.select)('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
      this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
    };

    ColorPicker.prototype.paletteClickHandler = function (e) {
      e.preventDefault();
      var target = e.target;

      if (target.classList.contains(TILE)) {
        this.removeTileSelection();
        this.addTileSelection(target);

        if (target.classList.contains(NOCOLOR)) {
          this.noColorTile();
        } else {
          var cValue = target.getAttribute('aria-label');
          var pValue = this.rgbToHex(this.rgb);
          this.rgb = this.hexToRgb(this.roundValue(cValue));
          this.hsv = this.rgbToHsv.apply(this, this.rgb);

          if (this.getWrapper().classList.contains(SHOWVALUE)) {
            this.updateInput(cValue);
          }

          this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
        }

        if (!this.inline && !this.showButtons) {
          this.closePopup(e);
        }
      } else {
        if ((0, _ej2Base.closest)(target, '.' + MODESWITCH)) {
          this.switchToPicker();
        } else {
          if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
            this.ctrlBtnClick(target, e);
          } else {
            if (this.getWrapper().classList.contains(SHOWVALUE) && (0, _ej2Base.closest)(target, '.' + FORMATSWITCH)) {
              this.formatSwitchHandler(e);
            }
          }
        }
      }
    };

    ColorPicker.prototype.noColorTile = function (isKey) {
      if (isKey === void 0) {
        isKey = false;
      }

      var pValue = this.rgbToHex(this.rgb);
      this.rgb = [];
      this.hsv = [];
      this.triggerEvent('', pValue, '', isKey);
    };

    ColorPicker.prototype.switchToPicker = function () {
      var wrapper = this.getWrapper();
      this.trigger('beforeModeSwitch', {
        element: this.container,
        mode: 'Picker'
      });
      this.unWireEvents();
      [].slice.call((0, _ej2Base.selectAll)('.' + PALETTES, this.container)).forEach(function (ele) {
        (0, _ej2Base.detach)(ele);
      });

      if (wrapper.classList.contains(SHOWVALUE)) {
        (0, _ej2Base.detach)((0, _ej2Base.select)('.' + INPUTWRAPPER, this.container));
      }

      this.container.style.width = '';
      var grpEle = (0, _ej2Base.select)('.e-custom-palette', this.container);

      if (this.presetColors) {
        (0, _ej2Base.remove)(grpEle);
      }

      this.createPicker();
      this.getDragHandler().focus();
      this.createInput();
      this.refreshPopupPos();
      this.wireEvents();
      this.trigger('onModeSwitch', {
        element: this.container,
        mode: 'Picker'
      });
    };

    ColorPicker.prototype.ctrlBtnClick = function (ele, e) {
      if (ele.classList.contains(APPLY)) {
        var cValue = this.rgbToHex(this.rgb);
        this.triggerChangeEvent(cValue);
      }

      if (!this.inline) {
        this.closePopup(e);
        this.splitBtn.element.focus();
      }
    };

    ColorPicker.prototype.paletteKeyDown = function (e) {
      var target = e.target;

      if (!target.classList.contains(PALETTES)) {
        return;
      }

      var selectedEle;
      var idx;
      var tiles = [].slice.call((0, _ej2Base.selectAll)('.' + TILE, target));
      var prevSelectedEle = tiles.filter(function (tile) {
        return tile.classList.contains('e-selected');
      }).pop();

      switch (!e.altKey && e.keyCode) {
        case 39:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];
          this.keySelectionChanges(selectedEle);
          break;

        case 37:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];
          this.keySelectionChanges(selectedEle);
          break;

        case 38:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;
          selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];
          this.keySelectionChanges(selectedEle);
          break;

        case 40:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;

          if (tiles[idx]) {
            selectedEle = tiles[idx];
          } else {
            idx %= tiles.length;
            idx += tiles[tiles.length - 1].parentElement.childElementCount;
            selectedEle = tiles[idx];
          }

          this.keySelectionChanges(selectedEle);
          break;

        case 13:
          e.preventDefault();

          if (prevSelectedEle) {
            var cValue = prevSelectedEle.getAttribute('aria-label');
            this.enterKeyHandler(cValue ? cValue : '', e);
          }

      }
    };

    ColorPicker.prototype.keySelectionChanges = function (newEle) {
      this.removeTileSelection();
      this.addTileSelection(newEle);

      if (newEle.classList.contains(NOCOLOR)) {
        this.noColorTile(true);
      } else {
        var cValue = newEle.getAttribute('aria-label');
        var pValue = this.rgbToHex(this.rgb);
        this.rgb = this.hexToRgb(cValue);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);

        if (this.getWrapper().classList.contains(SHOWVALUE)) {
          this.updateInput(cValue);
        }

        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);
      }
    };

    ColorPicker.prototype.tilePosition = function (items, element, cIdx) {
      items = Array.prototype.slice.call(items);
      var n = items.length;
      var emptyCount = this.columns - items[n - 1].parentElement.childElementCount;
      var idx = items.indexOf(element);
      idx += cIdx;
      idx < 0 ? idx += n + emptyCount : idx %= n + emptyCount;
      return idx;
    };

    ColorPicker.prototype.inputHandler = function (e) {
      var target = e.target;

      if (!target.value.length) {
        return;
      }

      var hsv;
      var pValue;
      var label = (0, _ej2Base.select)('.e-float-text', target.parentElement).textContent;

      switch (label) {
        case 'HEX':
          var value = '';

          if (target.value[0] === '#' && target.value.length !== 5 || target.value[0] !== '#' && target.value.length !== 4) {
            value = this.roundValue(target.value);
          }

          if (value.length === 9) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hexToRgb(value + value.substr(-2));
            this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
          } else {
            return;
          }

          break;

        case 'R':
          if (this.rgb[0] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[0] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }

          break;

        case 'G':
          if (this.rgb[1] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[1] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }

          break;

        case 'B':
          if (this.rgb[2] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[2] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }

          break;

        case 'H':
          this.hueSlider.value = Number(target.value);
          break;

        case 'S':
          if (this.hsv[1] !== Number(target.value)) {
            this.hsv[1] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat();
          }

          break;

        case 'V':
          if (this.hsv[2] !== Number(target.value)) {
            this.hsv[2] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat();
          }

          break;

        case 'A':
          this.opacitySlider.value = Number(target.value);
          break;
      }
    };

    ColorPicker.prototype.inputValueChange = function (hsv, pValue, value) {
      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({
          'value': hsv[0]
        }, true);
        this.hueSlider.refresh();
        this.setHsvContainerBg(hsv[0]);
      }

      this.hsv = hsv;
      var cValue = this.rgbToHex(this.rgb);
      this.setHandlerPosition();
      this.updateInput(value ? value : cValue);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.triggerEvent(cValue, pValue, rgba);
    };

    ColorPicker.prototype.triggerEvent = function (cValue, pValue, rgba, isKey) {
      if (isKey === void 0) {
        isKey = false;
      }

      var hex = cValue.slice(0, 7);

      if (!this.showButtons && !isKey) {
        this.trigger('change', {
          currentValue: {
            hex: hex,
            rgba: rgba
          },
          previousValue: {
            hex: this.value.slice(0, 7),
            rgba: this.convertToRgbString(this.hexToRgb(this.value))
          },
          value: cValue
        });
        this.setProperties({
          'value': cValue
        }, true);
        this.element.value = hex ? hex : '#000000';
      } else {
        this.trigger('select', {
          currentValue: {
            hex: hex,
            rgba: rgba
          },
          previousValue: {
            hex: pValue.slice(0, 7),
            rgba: this.convertToRgbString(this.hexToRgb(pValue))
          }
        });
      }
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     * @method destroy
     * @return {void}
     */


    ColorPicker.prototype.destroy = function () {
      var _this = this;

      var wrapper = this.getWrapper();

      _super.prototype.destroy.call(this);

      ['tabindex', 'spellcheck'].forEach(function (attr) {
        _this.element.removeAttribute(attr);
      });

      if (this.inline) {
        this.unWireEvents();
        this.destroyOtherComp();
      } else {
        if (this.isPopupOpen()) {
          this.unWireEvents();
          this.destroyOtherComp();
        }

        this.splitBtn.destroy();
        this.splitBtn = null;
      }

      this.tileRipple();
      this.tileRipple = null;
      this.ctrlBtnRipple();
      this.ctrlBtnRipple = null;
      (0, _ej2Base.detach)(this.element.nextElementSibling);
      wrapper.parentElement.insertBefore(this.element, wrapper);
      (0, _ej2Base.detach)(wrapper);
      this.container = null;

      if (this.formElement) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.formResetHandler);
      }
    };

    ColorPicker.prototype.destroyOtherComp = function () {
      if (this.isPicker()) {
        this.hueSlider.destroy();

        if (this.enableOpacity) {
          this.opacitySlider.destroy();
          this.opacitySlider = null;
        }

        this.hueSlider = null;
        var tooltipInst = this.getTooltipInst();
        tooltipInst.close();
        tooltipInst.destroy();
        this.tooltipEle = null;
      }
    };

    ColorPicker.prototype.isPopupOpen = function () {
      return this.getPopupEle().classList.contains('e-popup-open');
    };

    ColorPicker.prototype.unWireEvents = function () {
      if (this.isPicker()) {
        var wrapper = this.getWrapper();
        var dragHandler = this.getDragHandler();

        _ej2Base.EventHandler.remove(dragHandler, 'keydown', this.pickerKeyDown);

        _ej2Base.EventHandler.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);

        if (this.modeSwitcher || this.showButtons) {
          _ej2Base.EventHandler.remove((0, _ej2Base.select)('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);
        }

        _ej2Base.EventHandler.remove((0, _ej2Base.select)('.' + PREVIOUS, this.container), 'click', this.previewHandler);
      } else {
        _ej2Base.EventHandler.remove(this.container, 'click', this.paletteClickHandler);

        _ej2Base.EventHandler.remove(this.container, 'keydown', this.paletteKeyDown);
      }
    };

    ColorPicker.prototype.roundValue = function (value) {
      if (!value) {
        return '';
      }

      if (value[0] !== '#') {
        value = '#' + value;
      }

      var len = value.length;

      if (len === 4) {
        value += 'f';
        len = 5;
      }

      if (len === 5) {
        var tempValue = '';

        for (var i = 1, len_1 = value.length; i < len_1; i++) {
          tempValue += value.charAt(i) + value.charAt(i);
        }

        value = '#' + tempValue;
        len = 9;
      }

      if (len === 7) {
        value += 'ff';
      }

      return value;
    };

    ColorPicker.prototype.hexToRgb = function (hex) {
      if (!hex) {
        return [];
      }

      hex = hex.trim();

      if (hex.length !== 9) {
        hex = this.roundValue(hex);
      }

      var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
      hex = hex.slice(1, 7);
      var bigInt = parseInt(hex, 16);
      var h = [];
      h.push(bigInt >> 16 & 255);
      h.push(bigInt >> 8 & 255);
      h.push(bigInt & 255);
      h.push(opacity);
      return h;
    };

    ColorPicker.prototype.rgbToHsv = function (r, g, b, opacity) {
      if (this.rgb && !this.rgb.length) {
        return [];
      }

      r /= 255;
      g /= 255;
      b /= 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h;
      var s;
      var v = max;
      var d = max - min;
      s = max === 0 ? 0 : d / max;

      if (max === min) {
        h = 0;
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;

          case g:
            h = (b - r) / d + 2;
            break;

          case b:
            h = (r - g) / d + 4;
            break;
        }

        h /= 6;
      }

      var hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];

      if (!(0, _ej2Base.isNullOrUndefined)(opacity)) {
        hsv.push(opacity);
      }

      return hsv;
    };

    ColorPicker.prototype.hsvToRgb = function (h, s, v, opacity) {
      var r;
      var g;
      var b;
      var i;
      var f;
      var p;
      var q;
      var t;
      s /= 100;
      v /= 100;

      if (s === 0) {
        r = g = b = v;
        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];
      }

      h /= 60;
      i = Math.floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));

      switch (i) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;

        case 1:
          r = q;
          g = v;
          b = p;
          break;

        case 2:
          r = p;
          g = v;
          b = t;
          break;

        case 3:
          r = p;
          g = q;
          b = v;
          break;

        case 4:
          r = t;
          g = p;
          b = v;
          break;

        default:
          r = v;
          g = p;
          b = q;
      }

      var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];

      if (!(0, _ej2Base.isNullOrUndefined)(opacity)) {
        rgb.push(opacity);
      }

      return rgb;
    };

    ColorPicker.prototype.rgbToHex = function (rgb) {
      return rgb.length ? '#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!(0, _ej2Base.isNullOrUndefined)(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00' : '') : '';
    };

    ColorPicker.prototype.hex = function (x) {
      return ('0' + x.toString(16)).slice(-2);
    };

    ColorPicker.prototype.changeModeSwitcherProp = function (prop) {
      var ctrlSwitchWrapper = (0, _ej2Base.select)('.' + CTRLSWITCH, this.container);

      if (prop) {
        if (ctrlSwitchWrapper) {
          this.appendModeSwitchBtn();
        } else {
          this.createCtrlBtn();

          if (this.isPicker() && !this.disabled) {
            this.addCtrlSwitchEvent();
          }
        }
      } else {
        if (ctrlSwitchWrapper) {
          if (this.showButtons) {
            (0, _ej2Base.detach)((0, _ej2Base.select)('.' + MODESWITCH, ctrlSwitchWrapper));
          } else {
            (0, _ej2Base.remove)(ctrlSwitchWrapper);
          }
        }
      }
    };

    ColorPicker.prototype.changeShowBtnProps = function (prop) {
      var ctrlBtnWrapper = (0, _ej2Base.select)('.' + CTRLSWITCH, this.container);

      if (prop) {
        if (ctrlBtnWrapper) {
          (0, _ej2Base.remove)(ctrlBtnWrapper);
        }

        this.createCtrlBtn();

        if (this.isPicker() && !this.disabled) {
          this.addCtrlSwitchEvent();
        }
      } else {
        if (this.modeSwitcher) {
          (0, _ej2Base.detach)((0, _ej2Base.select)('.' + CTRLBTN, ctrlBtnWrapper));
        } else {
          (0, _ej2Base.remove)(ctrlBtnWrapper);
        }
      }
    };

    ColorPicker.prototype.changeValueProp = function (newProp) {
      if (this.isPicker()) {
        this.rgb = this.hexToRgb(newProp);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);
        this.setHandlerPosition();
        (0, _ej2Base.detach)((0, _ej2Base.closest)(this.hueSlider.element, '.e-slider-preview'));
        this.createSlider();
        this.setHsvContainerBg();
        this.updateInput(newProp);

        if (this.rgb.length === 4) {
          this.updateOpacityInput(this.rgb[3] * 100);
        }
      } else {
        this.removeTileSelection();
        var ele = (0, _ej2Base.select)('span[aria-label="' + this.roundValue(newProp) + '"]', this.container);

        if (ele) {
          this.addTileSelection(ele);
        }
      }
    };

    ColorPicker.prototype.setInputEleProps = function (prop) {
      (0, _ej2Base.remove)((0, _ej2Base.select)('.' + INPUTWRAPPER, this.container));
      this.createInput();
    };

    ColorPicker.prototype.changeDisabledProp = function (newProp) {
      if (this.isPicker()) {
        this.hueSlider.enabled = !newProp;
        this.opacitySlider.enabled = !newProp;
        this.setInputEleProps(newProp);
      }

      if (newProp) {
        this.toggleDisabled(true);
        this.unWireEvents();
      } else {
        this.toggleDisabled(false);
        this.wireEvents();
      }
    };

    ColorPicker.prototype.changeCssClassProps = function (newProp, oldProp) {
      var wrapper = this.getWrapper();
      var popupWrapper = this.getPopupEle();

      if (oldProp) {
        (0, _ej2Base.removeClass)([wrapper, popupWrapper], oldProp.split(' '));
      }

      if (newProp) {
        (0, _ej2Base.addClass)([wrapper, popupWrapper], newProp.split(' '));
      }
    };

    ColorPicker.prototype.changeRtlProps = function (newProp) {
      if (newProp) {
        (0, _ej2Base.addClass)([this.getWrapper()], 'e-rtl');
      } else {
        (0, _ej2Base.removeClass)([this.getWrapper()], 'e-rtl');
      }
    };

    ColorPicker.prototype.changePaletteProps = function () {
      (0, _ej2Base.detach)(this.container.children[0]);
      this.container.style.width = '';
      this.createPalette();
    };

    ColorPicker.prototype.changeOpacityProps = function (newProp) {
      var wrapper = this.getWrapper();

      if (newProp) {
        (0, _ej2Base.removeClass)([this.container.parentElement], HIDEOPACITY);
        this.createOpacitySlider((0, _ej2Base.select)('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {
          className: 'e-opacity-slider'
        })));

        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          this.appendOpacityValue((0, _ej2Base.select)('.e-input-container', this.container));
        }
      } else {
        (0, _ej2Base.addClass)([this.container.parentElement], HIDEOPACITY);
        this.opacitySlider.destroy();
        (0, _ej2Base.remove)(this.opacitySlider.element);
        this.opacitySlider = null;

        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          (0, _ej2Base.remove)((0, _ej2Base.select)('.' + OPACITY, this.container).parentElement);
        }
      }
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {ColorPickerModel} newProp
     * @param  {ColorPickerModel} oldProp
     * @returns void
     * @private
     */


    ColorPicker.prototype.onPropertyChanged = function (newProp, oldProp) {
      var _this = this;

      if (!(0, _ej2Base.isNullOrUndefined)(newProp.value)) {
        var value = this.roundValue(newProp.value);

        if (value.length === 9) {
          this.element.value = this.roundValue(value).slice(0, 7);
          var preview = this.splitBtn && (0, _ej2Base.select)('.' + SPLITPREVIEW, this.splitBtn.element);

          if (preview) {
            preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));
          }
        } else {
          this.value = oldProp.value;
        }
      }

      if (!this.inline && (0, _ej2Base.isNullOrUndefined)(newProp.inline)) {
        var otherCompModel = ['disabled', 'enableRtl'];
        this.splitBtn.setProperties((0, _ej2Splitbuttons.getModel)(newProp, otherCompModel));

        if (!this.isPopupOpen()) {
          this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
          this.changeRtlProps(newProp.enableRtl);
          return;
        }
      }

      var _loop_1 = function (prop) {
        switch (prop) {
          case 'inline':
            if (newProp.inline) {
              this_1.getWrapper().appendChild(this_1.container);
              this_1.splitBtn.destroy();
              (0, _ej2Base.detach)(this_1.element.nextElementSibling);

              if (!this_1.container.children.length) {
                this_1.createWidget();
              }
            } else {
              this_1.destroyOtherComp();
              this_1.unWireEvents();
              this_1.container.innerHTML = '';
              this_1.createSplitBtn();
            }

            break;

          case 'cssClass':
            this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
            var props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));
            props = props.reduce(function (a, b) {
              if (a.indexOf(b) < 0) {
                a.push(b);
              }

              return a;
            }, []);
            var count_1 = 0;
            props.forEach(function (cls) {
              if (count_1 === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                var inputWrap = (0, _ej2Base.select)('.' + INPUTWRAPPER, _this.container);

                if (inputWrap) {
                  (0, _ej2Base.remove)((0, _ej2Base.select)('.' + INPUTWRAPPER, _this.container));
                }

                _this.createInput();

                count_1++;
              }
            });
            break;

          case 'enableRtl':
            if (this_1.isPicker()) {
              this_1.hueSlider.enableRtl = newProp.enableRtl;

              if (this_1.enableOpacity) {
                this_1.opacitySlider.enableRtl = newProp.enableRtl;
              }

              this_1.setInputEleProps(newProp.enableRtl);
            }

            this_1.changeRtlProps(newProp.enableRtl);
            break;

          case 'disabled':
            this_1.changeDisabledProp(newProp.disabled);
            break;

          case 'value':
            if (this_1.value !== oldProp.value) {
              this_1.changeValueProp(newProp.value);
            }

            break;

          case 'showButtons':
            this_1.changeShowBtnProps(newProp.showButtons);
            break;

          case 'mode':
            if (newProp.mode === 'Picker') {
              this_1.switchToPicker();
            } else {
              this_1.switchToPalette();
            }

            break;

          case 'modeSwitcher':
            this_1.changeModeSwitcherProp(newProp.modeSwitcher);
            break;

          case 'columns':
          case 'presetColors':
            if (!this_1.isPicker()) {
              this_1.changePaletteProps();
            }

            break;

          case 'noColor':
            if (newProp.noColor) {
              if (this_1.mode === 'Palette' && !this_1.modeSwitcher) {
                this_1.setNoColor();
              }
            } else {
              this_1.changePaletteProps();
            }

            break;

          case 'enableOpacity':
            this_1.changeOpacityProps(newProp.enableOpacity);
            break;
        }
      };

      var this_1 = this;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        _loop_1(prop);
      }
    };
    /**
     * Sets the focus to Colorpicker
     * its native method
     * @public
     */


    ColorPicker.prototype.focusIn = function () {
      this.element.parentElement.focus();
    };

    __decorate([(0, _ej2Base.Property)('#008000ff')], ColorPicker.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)('')], ColorPicker.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ColorPicker.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('Picker')], ColorPicker.prototype, "mode", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ColorPicker.prototype, "modeSwitcher", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ColorPicker.prototype, "presetColors", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ColorPicker.prototype, "showButtons", void 0);

    __decorate([(0, _ej2Base.Property)(10)], ColorPicker.prototype, "columns", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ColorPicker.prototype, "inline", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ColorPicker.prototype, "noColor", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ColorPicker.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ColorPicker.prototype, "enableOpacity", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "beforeTileRender", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "beforeModeSwitch", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "onModeSwitch", void 0);

    __decorate([(0, _ej2Base.Event)()], ColorPicker.prototype, "created", void 0);

    ColorPicker = __decorate([_ej2Base.NotifyPropertyChanges], ColorPicker);
    return ColorPicker;
  }(_ej2Base.Component);

  _exports.ColorPicker = ColorPicker;
});;
define('@syncfusion/ej2-inputs/src/color-picker/index',["exports", "./color-picker"], function (_exports, _colorPicker) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_colorPicker).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _colorPicker[key];
  });
});;
define('@syncfusion/ej2-inputs/src/form-validator/form-validator',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.FormValidator = _exports.ErrorOption = _exports.regex = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * global declarations
   */
  // tslint:disable-next-line:no-any
  var regex = {
    EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' + '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),
    URL: /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/m,
    DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),
    DIGITS: new RegExp('^[0-9]*$'),
    PHONE: new RegExp('^[+]?[0-9]{9,13}$'),
    CREDITCARD: new RegExp('^\\d{13,16}$')
  };
  /**
   * ErrorOption values
   * @private
   */

  _exports.regex = regex;
  var ErrorOption;
  _exports.ErrorOption = ErrorOption;

  (function (ErrorOption) {
    /**
     * Defines the error message.
     */
    ErrorOption[ErrorOption["Message"] = 0] = "Message";
    /**
     * Defines the error element type.
     */

    ErrorOption[ErrorOption["Label"] = 1] = "Label";
  })(ErrorOption || (_exports.ErrorOption = ErrorOption = {}));
  /**
   * FormValidator class enables you to validate the form fields based on your defined rules
   * ```html
   * <form id='formId'>
   *  <input type='text' name='Name' />
   *  <input type='text' name='Age' />
   * </form>
   * <script>
   *   let formObject = new FormValidator('#formId', {
   *      rules: { Name: { required: true }, Age: { range: [18, 30] } };
   *   });
   *   formObject.validate();
   * </script>
   * ```
   */


  var FormValidator =
  /** @class */
  function (_super) {
    __extends(FormValidator, _super); // Initializes the FormValidator 


    function FormValidator(element, options) {
      var _this = _super.call(this, options, element) || this;

      _this.validated = [];
      _this.errorRules = [];
      _this.allowSubmit = false;
      _this.required = 'required';
      _this.infoElement = null;
      _this.inputElement = null;
      _this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea'; // tslint:disable-next-line:no-any

      _this.localyMessage = {};
      /**
       * Specifies the default messages for validation rules.
       * @default { List of validation message }
       */

      _this.defaultMessages = {
        required: 'This field is required.',
        email: 'Please enter a valid email address.',
        url: 'Please enter a valid URL.',
        date: 'Please enter a valid date.',
        dateIso: 'Please enter a valid date ( ISO ).',
        creditcard: 'Please enter valid card number',
        number: 'Please enter a valid number.',
        digits: 'Please enter only digits.',
        maxLength: 'Please enter no more than {0} characters.',
        minLength: 'Please enter at least {0} characters.',
        rangeLength: 'Please enter a value between {0} and {1} characters long.',
        range: 'Please enter a value between {0} and {1}.',
        max: 'Please enter a value less than or equal to {0}.',
        min: 'Please enter a value greater than or equal to {0}.',
        regex: 'Please enter a correct value.',
        tel: 'Please enter a valid phone number.',
        pattern: 'Please enter a correct pattern value.',
        equalTo: 'Please enter the valid match text'
      };

      if (typeof _this.rules === 'undefined') {
        _this.rules = {};
      }

      _this.l10n = new _ej2Base.L10n('formValidator', _this.defaultMessages, _this.locale);

      if (_this.locale) {
        _this.localeFunc();
      }

      _ej2Base.onIntlChange.on('notifyExternalChange', _this.afterLocalization, _this);

      element = typeof element === 'string' ? (0, _ej2Base.select)(element, document) : element; // Set novalidate to prevent default HTML5 form validation

      if (_this.element != null) {
        _this.element.setAttribute('novalidate', '');

        _this.inputElements = (0, _ej2Base.selectAll)(_this.selectQuery, _this.element);

        _this.createHTML5Rules();

        _this.wireEvents();
      } else {
        return undefined;
      }

      return _this;
    }

    FormValidator_1 = FormValidator; // tslint:enable

    /**
     * Add validation rules to the corresponding input element based on `name` attribute.
     * @param {string} name `name` of form field.
     * @param {Object} rules Validation rules for the corresponding element.
     * @return {void}
     */

    FormValidator.prototype.addRules = function (name, rules) {
      if (name) {
        if (this.rules.hasOwnProperty(name)) {
          (0, _ej2Base.extend)(this.rules[name], rules, {});
        } else {
          this.rules[name] = rules;
        }
      }
    };
    /**
     * Remove validation to the corresponding field based on name attribute.
     * When no parameter is passed, remove all the validations in the form.
     * @param {string} name Input name attribute value.
     * @param {string[]} rules List of validation rules need to be remove from the corresponding element.
     * @return {void}
     */


    FormValidator.prototype.removeRules = function (name, rules) {
      if (!name && !rules) {
        this.rules = {};
      } else if (this.rules[name] && !rules) {
        delete this.rules[name];
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.rules[name] && rules)) {
        for (var i = 0; i < rules.length; i++) {
          delete this.rules[name][rules[i]];
        }
      } else {
        return;
      }
    };
    /**
     * Validate the current form values using defined rules.
     * Returns `true` when the form is valid otherwise `false`
     * @param {string} selected - Optional parameter to validate specified element.
     * @return {boolean}
     */


    FormValidator.prototype.validate = function (selected) {
      var rules = Object.keys(this.rules);

      if (selected && rules.length) {
        this.validateRules(selected); //filter the selected element it don't have any valid input element

        return rules.indexOf(selected) !== -1 && this.errorRules.filter(function (data) {
          return data.name === selected;
        }).length === 0;
      } else {
        this.errorRules = [];

        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
          var name_1 = rules_1[_i];
          this.validateRules(name_1);
        }

        return this.errorRules.length === 0;
      }
    };
    /**
     * Reset the value of all the fields in form.
     * @return {void}
     */


    FormValidator.prototype.reset = function () {
      this.element.reset();
      this.clearForm();
    };
    /**
     * Get input element by name.
     * @param {string} name - Input element name attribute value.
     * @return {HTMLInputElement}
     */


    FormValidator.prototype.getInputElement = function (name) {
      this.inputElement = (0, _ej2Base.select)('[name="' + name + '"]', this.element);
      return this.inputElement;
    };
    /**
     * Destroy the form validator object and error elements.
     * @return {void}
     */


    FormValidator.prototype.destroy = function () {
      this.reset();
      this.unwireEvents();
      this.rules = {};
      var elements = (0, _ej2Base.selectAll)('.' + this.errorClass + ', .' + this.validClass, this.element);

      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element = elements_1[_i];
        (0, _ej2Base.detach)(element);
      }

      _super.prototype.destroy.call(this);

      _ej2Base.onIntlChange.off('notifyExternalChange', this.afterLocalization);
    };
    /**
     * @private
     */


    FormValidator.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'locale':
            this.localeFunc();
            break;
        }
      }
    };

    ;
    /**
     * @private
     */

    FormValidator.prototype.localeFunc = function () {
      for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {
        var key = _a[_i];
        this.l10n.setLocale(this.locale);
        var value = this.l10n.getConstant(key);
        this.localyMessage[key] = value;
      }
    };
    /**
     * @private
     */


    FormValidator.prototype.getModuleName = function () {
      return 'formValidator';
    };
    /**
     * @private
     */
    // tslint:disable-next-line:no-any


    FormValidator.prototype.afterLocalization = function (args) {
      this.locale = args.locale;
      this.localeFunc();
    };
    /**
     * Allows you to refresh the form validator base events to the elements inside the form.
     * @return {void}
     */


    FormValidator.prototype.refresh = function () {
      this.unwireEvents();
      this.inputElements = (0, _ej2Base.selectAll)(this.selectQuery, this.element);
      this.wireEvents();
    };

    FormValidator.prototype.clearForm = function () {
      this.errorRules = [];
      this.validated = [];
      var elements = (0, _ej2Base.selectAll)(this.selectQuery, this.element);

      for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
        var element = elements_2[_i];
        var input = element;
        input.removeAttribute('aria-invalid');
        input.classList.remove(this.errorClass);

        if (input.name.length > 0) {
          this.getInputElement(input.name);
          this.getErrorElement(input.name);
          this.hideMessage(input.name);
        }

        input.classList.remove(this.validClass);
      }
    };

    FormValidator.prototype.createHTML5Rules = function () {
      var defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits', 'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min', 'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max', 'data-val-creditcard', 'data-val-phone'];
      var acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];

      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i]; // Default attribute rules 

        var allRule = {};

        for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {
          var rule = defRules_1[_b];

          if (input.getAttribute(rule) !== null) {
            switch (rule) {
              case 'required':
                this.defRule(input, allRule, rule, input.required);
                break;

              case 'data-validation':
                rule = input.getAttribute(rule);
                this.defRule(input, allRule, rule, true);
                break;

              case 'type':
                if (acceptedTypes.indexOf(input.type) !== -1) {
                  this.defRule(input, allRule, input.type, true);
                }

                break;

              case 'rangeLength':
              case 'range':
                this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
                break;

              case 'equalTo':
                var id = input.getAttribute(rule);
                this.defRule(input, allRule, rule, id);
                break;

              default:
                if (input.getAttribute('data-val') === 'true') {
                  this.annotationRule(input, allRule, rule, input.getAttribute(rule));
                } else {
                  this.defRule(input, allRule, rule, input.getAttribute(rule));
                }

            }
          }
        } //adding pattern type validation


        if (Object.keys(allRule).length !== 0) {
          this.addRules(input.name, allRule);
        }
      }
    };

    FormValidator.prototype.annotationRule = function (input, ruleCon, ruleName, value) {
      var annotationRule = ruleName.split('-');
      var rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];
      var ruleFirstName = annotationRule[annotationRule.length - 1];
      var ruleSecondName = annotationRule[annotationRule.length - 2];

      if (rulesList.indexOf(ruleFirstName) !== -1) {
        switch (ruleFirstName) {
          case 'required':
            this.defRule(input, ruleCon, 'required', value);
            break;

          case 'creditcard':
            this.defRule(input, ruleCon, 'creditcard', value);
            break;

          case 'phone':
            this.defRule(input, ruleCon, 'tel', value);
            break;
        }
      } else if (rulesList.indexOf(ruleSecondName) !== -1) {
        switch (ruleSecondName) {
          case 'maxlength':
            this.defRule(input, ruleCon, 'maxLength', value);
            break;

          case 'minlength':
            this.defRule(input, ruleCon, 'minLength', value);
            break;

          case 'range':
            var minvalue = input.getAttribute('data-val-range-min');
            var maxvalue = input.getAttribute('data-val-range-max');
            this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);
            break;

          case 'equalto':
            var id = input.getAttribute(ruleName).split('.');
            this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);
            break;

          case 'regex':
            this.defRule(input, ruleCon, 'regex', value);
            break;
        }
      }
    };

    FormValidator.prototype.defRule = function (input, ruleCon, ruleName, value) {
      var message = input.getAttribute('data-' + ruleName + '-message');
      var annotationMessage = input.getAttribute('data-val-' + ruleName);
      var customMessage;

      if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {
        this.getInputElement(input.name);
        customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);
      }

      if (message) {
        value = [value, message];
      } else if (annotationMessage) {
        value = [value, annotationMessage];
      } else if (customMessage) {
        value = [value, customMessage];
      }

      ruleCon[ruleName] = value;
    }; // Wire events to the form elements


    FormValidator.prototype.wireEvents = function () {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];

        if (FormValidator_1.isCheckable(input)) {
          _ej2Base.EventHandler.add(input, 'click', this.clickHandler, this);
        } else if (input.tagName === 'SELECT') {
          _ej2Base.EventHandler.add(input, 'change', this.changeHandler, this);
        } else {
          _ej2Base.EventHandler.add(input, 'focusout', this.focusOutHandler, this);

          _ej2Base.EventHandler.add(input, 'keyup', this.keyUpHandler, this);
        }
      }

      _ej2Base.EventHandler.add(this.element, 'submit', this.submitHandler, this);

      _ej2Base.EventHandler.add(this.element, 'reset', this.resetHandler, this);
    }; // UnWire events to the form elements


    FormValidator.prototype.unwireEvents = function () {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];

        _ej2Base.EventHandler.clearEvents(input);
      }

      _ej2Base.EventHandler.remove(this.element, 'submit', this.submitHandler);

      _ej2Base.EventHandler.remove(this.element, 'reset', this.resetHandler);
    }; // Handle input element focusout event


    FormValidator.prototype.focusOutHandler = function (e) {
      this.trigger('focusout', e); //FormValidator.triggerCallback(this.focusout, e);

      var element = e.target;

      if (this.rules[element.name]) {
        if (this.rules[element.name][this.required] || element.value.length > 0) {
          this.validate(element.name);
        } else if (this.validated.indexOf(element.name) === -1) {
          this.validated.push(element.name);
        }
      }
    }; // Handle input element keyup event


    FormValidator.prototype.keyUpHandler = function (e) {
      this.trigger('keyup', e);
      var element = e.target; // List of keys need to prevent while validation

      var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

      if (e.which === 9 && (!this.rules[element.name] || this.rules[element.name] && !this.rules[element.name][this.required])) {
        return;
      }

      if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {
        this.validate(element.name);
      }
    }; // Handle input click event


    FormValidator.prototype.clickHandler = function (e) {
      this.trigger('click', e);
      var element = e.target; // If element type is not submit allow validation

      if (element.type !== 'submit') {
        this.validate(element.name);
      } else if (element.getAttribute('formnovalidate') !== null) {
        // Prevent form validation, if submit button has formnovalidate attribute
        this.allowSubmit = true;
      }
    }; // Handle input change event


    FormValidator.prototype.changeHandler = function (e) {
      this.trigger('change', e);
      var element = e.target;
      this.validate(element.name);
    }; // Handle form submit event


    FormValidator.prototype.submitHandler = function (e) {
      this.trigger('submit', e); //FormValidator.triggerCallback(this.submit, e);
      // Prevent form submit if validation failed

      if (!this.allowSubmit && !this.validate()) {
        e.preventDefault();
      } else {
        this.allowSubmit = false;
      }
    }; // Handle form reset


    FormValidator.prototype.resetHandler = function () {
      this.clearForm();
    }; // Validate each rule based on input element name


    FormValidator.prototype.validateRules = function (name) {
      if (!this.rules[name]) {
        return;
      }

      var rules = Object.keys(this.rules[name]);
      var hiddenType = false;
      var validateHiddenType = false;
      var vhPos = rules.indexOf('validateHidden');
      var hPos = rules.indexOf('hidden');
      this.getInputElement(name);

      if (hPos !== -1) {
        hiddenType = true;
      }

      if (vhPos !== -1) {
        validateHiddenType = true;
      }

      if (!hiddenType || hiddenType && validateHiddenType) {
        if (vhPos !== -1) {
          rules.splice(vhPos, 1);
        }

        if (hPos !== -1) {
          rules.splice(hPos - 1, 1);
        }

        this.getErrorElement(name);

        for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
          var rule = rules_2[_i];
          var errorMessage = this.getErrorMessage(this.rules[name][rule], rule);
          var errorRule = {
            name: name,
            message: errorMessage
          };
          var eventArgs = {
            inputName: name,
            element: this.inputElement,
            message: errorMessage
          };

          if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
            this.removeErrorRules(name);
            this.errorRules.push(errorRule); // Set aria attributes to invalid elements

            this.inputElement.setAttribute('aria-invalid', 'true');
            this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);

            if (!this.infoElement) {
              this.createErrorElement(name, errorRule.message, this.inputElement);
            } else {
              this.showMessage(errorRule);
            }

            eventArgs.errorElement = this.infoElement;
            eventArgs.status = 'failure';
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);
            this.optionalValidationStatus(name, eventArgs);
            this.trigger('validationComplete', eventArgs); // Set aria-required to required rule elements

            if (rule === 'required') {
              this.inputElement.setAttribute('aria-required', 'true');
            }

            break;
          } else {
            this.hideMessage(name);
            eventArgs.status = 'success';
            this.trigger('validationComplete', eventArgs);
          }
        }
      } else {
        return;
      }
    }; // Update the optional validation status


    FormValidator.prototype.optionalValidationStatus = function (name, refer) {
      if (!this.rules[name][this.required] && !this.inputElement.value.length && !(0, _ej2Base.isNullOrUndefined)(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute('aria-invalid', 'false');
        refer.status = '';
        this.hideMessage(name);
      }
    }; // Check the input element whether it's value satisfy the validation rule or not


    FormValidator.prototype.isValid = function (name, rule) {
      var params = this.rules[name][rule];
      var param = params instanceof Array && typeof params[1] === 'string' ? params[0] : params;
      var currentRule = this.rules[name][rule];
      var args = {
        value: this.inputElement.value,
        param: param,
        element: this.inputElement,
        formElement: this.element
      };
      this.trigger('validationBegin', args);

      if (currentRule && typeof currentRule[0] === 'function') {
        var fn = currentRule[0];
        return fn.call(this, {
          element: this.inputElement,
          value: this.inputElement.value
        });
      } else if (FormValidator_1.isCheckable(this.inputElement)) {
        if (rule !== 'required') {
          return true;
        }

        return (0, _ej2Base.selectAll)('input[name=' + name + ']:checked', this.element).length > 0;
      } else {
        return FormValidator_1.checkValidator[rule](args);
      }
    }; // Return default error message or custom error message 


    FormValidator.prototype.getErrorMessage = function (ruleValue, rule) {
      var message = this.inputElement.getAttribute('data-' + rule + '-message') ? this.inputElement.getAttribute('data-' + rule + '-message') : ruleValue instanceof Array && typeof ruleValue[1] === 'string' ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage[rule] : this.defaultMessages[rule];
      var formats = message.match(/{(\d)}/g);

      if (!(0, _ej2Base.isNullOrUndefined)(formats)) {
        for (var i = 0; i < formats.length; i++) {
          var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;
          message = message.replace(formats[i], value);
        }
      }

      return message;
    }; // Create error element based on name and error message


    FormValidator.prototype.createErrorElement = function (name, message, input) {
      var errorElement = (0, _ej2Base.createElement)(this.errorElement, {
        className: this.errorClass,
        innerHTML: message,
        attrs: {
          for: name
        }
      }); // Create message design if errorOption is message

      if (this.errorOption === ErrorOption.Message) {
        errorElement.classList.remove(this.errorClass);
        errorElement.classList.add('e-message');
        errorElement = (0, _ej2Base.createElement)(this.errorContainer, {
          className: this.errorClass,
          innerHTML: errorElement.outerHTML
        });
      }

      errorElement.id = this.inputElement.name + '-info'; // Append error message into MVC error message element

      if (this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) {
        this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement);
      } else if (input.hasAttribute('data-msg-containerid') === true) {
        // Append error message into custom div element
        var containerId = input.getAttribute('data-msg-containerid');
        var divElement = this.element.querySelector('#' + containerId);
        divElement.appendChild(errorElement);
      } else if (this.customPlacement != null) {
        // Call custom placement function if customPlacement is not null
        this.customPlacement.call(this, this.inputElement, errorElement);
      } else {
        this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);
      }

      errorElement.style.display = 'block';
      this.getErrorElement(name);
      this.validated.push(name);
      this.checkRequired(name);
    }; // Get error element by name


    FormValidator.prototype.getErrorElement = function (name) {
      this.infoElement = (0, _ej2Base.select)(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);

      if (!this.infoElement) {
        this.infoElement = (0, _ej2Base.select)(this.errorElement + '.' + this.errorClass + '[for="' + name + '"]', this.element);
      }

      return this.infoElement;
    }; // Remove existing rule from errorRules object


    FormValidator.prototype.removeErrorRules = function (name) {
      for (var i = 0; i < this.errorRules.length; i++) {
        var rule = this.errorRules[i];

        if (rule.name === name) {
          this.errorRules.splice(i, 1);
        }
      }
    }; // Show error message to the input element


    FormValidator.prototype.showMessage = function (errorRule) {
      this.infoElement.style.display = 'block';
      this.infoElement.innerHTML = errorRule.message;
      this.checkRequired(errorRule.name);
    }; // Hide error message based on input name


    FormValidator.prototype.hideMessage = function (name) {
      if (this.infoElement) {
        this.infoElement.style.display = 'none';
        this.removeErrorRules(name);
        this.inputElement.classList.add(this.validClass);
        this.inputElement.classList.remove(this.errorClass);
        this.inputElement.setAttribute('aria-invalid', 'false');
      }
    }; // Check whether the input element have required rule and its value is not empty


    FormValidator.prototype.checkRequired = function (name) {
      if (!this.rules[name][this.required] && !this.inputElement.value.length && !(0, _ej2Base.isNullOrUndefined)(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute('aria-invalid', 'false');
        this.hideMessage(name);
      }
    }; // Return boolean result if the input have chekcable or submit types


    FormValidator.isCheckable = function (input) {
      var inputType = input.getAttribute('type');
      return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');
    };

    var FormValidator_1; // List of function to validate the rules

    FormValidator.checkValidator = {
      required: function (option) {
        return option.value.length > 0;
      },
      email: function (option) {
        return regex.EMAIL.test(option.value);
      },
      url: function (option) {
        return regex.URL.test(option.value);
      },
      dateIso: function (option) {
        return regex.DATE_ISO.test(option.value);
      },
      tel: function (option) {
        return regex.PHONE.test(option.value);
      },
      creditcard: function (option) {
        return regex.CREDITCARD.test(option.value);
      },
      number: function (option) {
        return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;
      },
      digits: function (option) {
        return regex.DIGITS.test(option.value);
      },
      maxLength: function (option) {
        return option.value.length <= option.param;
      },
      minLength: function (option) {
        return option.value.length >= option.param;
      },
      rangeLength: function (option) {
        var param = option.param;
        return option.value.length >= param[0] && option.value.length <= param[1];
      },
      range: function (option) {
        var param = option.param;
        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
      },
      date: function (option) {
        return !isNaN(new Date(option.value).getTime());
      },
      max: function (option) {
        if (!isNaN(Number(option.value))) {
          // Maximum rule validation for number
          return +option.value <= option.param;
        } // Maximum rule validation for date


        return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
      },
      min: function (option) {
        if (!isNaN(Number(option.value))) {
          // Minimum rule validation for number
          return +option.value >= option.param;
        } else if (option.value.indexOf(',') !== -1) {
          var uNum = option.value.replace(/,/g, '');
          return parseFloat(uNum) >= option.param;
        } else {
          // Minimum rule validation for date
          return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
        }
      },
      regex: function (option) {
        return new RegExp(option.param).test(option.value);
      },
      equalTo: function (option) {
        var compareTo = option.formElement.querySelector('#' + option.param);
        option.param = compareTo.value;
        return option.param === option.value;
      }
    };

    __decorate([(0, _ej2Base.Property)('')], FormValidator.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Property)('e-hidden')], FormValidator.prototype, "ignore", void 0);

    __decorate([(0, _ej2Base.Property)()], FormValidator.prototype, "rules", void 0);

    __decorate([(0, _ej2Base.Property)('e-error')], FormValidator.prototype, "errorClass", void 0);

    __decorate([(0, _ej2Base.Property)('e-valid')], FormValidator.prototype, "validClass", void 0);

    __decorate([(0, _ej2Base.Property)('label')], FormValidator.prototype, "errorElement", void 0);

    __decorate([(0, _ej2Base.Property)('div')], FormValidator.prototype, "errorContainer", void 0);

    __decorate([(0, _ej2Base.Property)(ErrorOption.Label)], FormValidator.prototype, "errorOption", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "focusout", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "keyup", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "click", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "submit", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "validationBegin", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "validationComplete", void 0);

    __decorate([(0, _ej2Base.Event)()], FormValidator.prototype, "customPlacement", void 0);

    FormValidator = FormValidator_1 = __decorate([_ej2Base.NotifyPropertyChanges], FormValidator);
    return FormValidator;
  }(_ej2Base.Base);

  _exports.FormValidator = FormValidator;
});;
define('@syncfusion/ej2-inputs/src/form-validator/index',["exports", "./form-validator"], function (_exports, _formValidator) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_formValidator).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _formValidator[key];
  });
});;
define('@syncfusion/ej2-inputs/src/index',["exports", "./numerictextbox/index", "./maskedtextbox/index", "./input/index", "./slider/index", "./form-validator/index", "./uploader/index", "./color-picker/index", "./textbox/index"], function (_exports, _index, _index2, _index3, _index4, _index5, _index6, _index7, _index8) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
  Object.keys(_index6).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index6[key];
  });
  Object.keys(_index7).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index7[key];
  });
  Object.keys(_index8).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index8[key];
  });
});;
define('@syncfusion/ej2-inputs/src/input/index',["exports", "./input"], function (_exports, _input) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_input).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _input[key];
  });
});;
define('@syncfusion/ej2-inputs/src/input/input',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.Input = void 0;
  var CLASSNAMES = {
    RTL: 'e-rtl',
    DISABLE: 'e-disabled',
    INPUT: 'e-input',
    TEXTAREA: 'e-multi-line-input',
    INPUTGROUP: 'e-input-group',
    FLOATINPUT: 'e-float-input',
    FLOATLINE: 'e-float-line',
    FLOATTEXT: 'e-float-text',
    CLEARICON: 'e-clear-icon',
    CLEARICONHIDE: 'e-clear-icon-hide',
    LABELTOP: 'e-label-top',
    LABELBOTTOM: 'e-label-bottom',
    NOFLOATLABEL: 'e-no-float-label',
    INPUTCUSTOMTAG: 'e-input-custom-tag',
    FLOATCUSTOMTAG: 'e-float-custom-tag'
  };
  /**
   * Base for Input creation through util methods.
   */

  var Input;
  _exports.Input = Input;

  (function (Input) {
    var privateInputObj = {
      container: null,
      buttons: [],
      clearButton: null
    };
    var floatType;
    /**
     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.
     * ```
     * E.g : Input.createInput({ element: element, floatLabelType : "Auto", properties: { placeholder: 'Search' } });
     * ```
     * @param args
     */

    function createInput(args, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var inputObject = {
        container: null,
        buttons: [],
        clearButton: null
      };
      floatType = args.floatLabelType;

      if ((0, _ej2Base.isNullOrUndefined)(args.floatLabelType) || args.floatLabelType === 'Never') {
        inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);
        args.element.parentNode.insertBefore(inputObject.container, args.element);
        (0, _ej2Base.addClass)([args.element], CLASSNAMES.INPUT);
        inputObject.container.appendChild(args.element);
      } else {
        createFloatingInput(args, inputObject, makeElement);
      }

      bindInitialEvent(args);

      if (!(0, _ej2Base.isNullOrUndefined)(args.properties) && !(0, _ej2Base.isNullOrUndefined)(args.properties.showClearButton) && args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {
        setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);
        inputObject.clearButton.setAttribute('role', 'button');

        if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {
          (0, _ej2Base.addClass)([inputObject.container], CLASSNAMES.INPUTGROUP);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(args.buttons) && args.element.tagName !== 'TEXTAREA') {
        for (var i = 0; i < args.buttons.length; i++) {
          inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(args.element) && args.element.tagName === 'TEXTAREA') {
        (0, _ej2Base.addClass)([inputObject.container], CLASSNAMES.TEXTAREA);
      }

      inputObject = setPropertyValue(args, inputObject);
      privateInputObj = inputObject;
      return inputObject;
    }

    Input.createInput = createInput;

    function bindInitialEvent(args) {
      checkInputValue(args.floatLabelType, args.element);
      args.element.addEventListener('focus', function () {
        var parent = getParentNode(this);

        if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
          parent.classList.add('e-input-focus');
        }
      });
      args.element.addEventListener('blur', function () {
        var parent = getParentNode(this);

        if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {
          parent.classList.remove('e-input-focus');
        }
      });
      args.element.addEventListener('input', function () {
        checkInputValue(floatType, args.element);
      });
    }

    Input.bindInitialEvent = bindInitialEvent;

    function checkInputValue(floatLabelType, inputElement) {
      var inputValue = inputElement.value;

      if (inputValue !== '' && !(0, _ej2Base.isNullOrUndefined)(inputValue)) {
        inputElement.parentElement.classList.add('e-valid-input');
      } else if (floatLabelType !== 'Always') {
        inputElement.parentElement.classList.remove('e-valid-input');
      }
    }

    function _focusFn() {
      var label = getParentNode(this).getElementsByClassName('e-float-text')[0];

      if (!(0, _ej2Base.isNullOrUndefined)(label)) {
        (0, _ej2Base.addClass)([label], CLASSNAMES.LABELTOP);

        if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
          (0, _ej2Base.removeClass)([label], CLASSNAMES.LABELBOTTOM);
        }
      }
    }

    function _blurFn() {
      var parent = getParentNode(this);

      if (parent.getElementsByTagName('textarea')[0] ? parent.getElementsByTagName('textarea')[0].value === '' : parent.getElementsByTagName('input')[0].value === '') {
        var label = parent.getElementsByClassName('e-float-text')[0];

        if (!(0, _ej2Base.isNullOrUndefined)(label)) {
          if (label.classList.contains(CLASSNAMES.LABELTOP)) {
            (0, _ej2Base.removeClass)([label], CLASSNAMES.LABELTOP);
          }

          (0, _ej2Base.addClass)([label], CLASSNAMES.LABELBOTTOM);
        }
      }
    }

    function wireFloatingEvents(element) {
      element.addEventListener('focus', _focusFn);
      element.addEventListener('blur', _blurFn);
    }

    Input.wireFloatingEvents = wireFloatingEvents;

    function unwireFloatingEvents(element) {
      element.removeEventListener('focus', _focusFn);
      element.removeEventListener('blur', _blurFn);
    }

    function createFloatingInput(args, inputObject, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var inputElement;
      var floatLinelement;
      var floatLabelElement;

      if (args.floatLabelType === 'Auto') {
        wireFloatingEvents(args.element);
      }

      if ((0, _ej2Base.isNullOrUndefined)(inputObject.container)) {
        inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);
        args.element.parentNode.insertBefore(inputObject.container, args.element);
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(args.customTag)) {
          inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);
        }

        inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);
      }

      floatLinelement = makeElement('span', {
        className: CLASSNAMES.FLOATLINE
      });
      floatLabelElement = makeElement('label', {
        className: CLASSNAMES.FLOATTEXT
      });

      if (!(0, _ej2Base.isNullOrUndefined)(args.element.id) && args.element.id !== '') {
        floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');
        (0, _ej2Base.attributes)(args.element, {
          'aria-labelledby': floatLabelElement.id
        });
      }

      if (!(0, _ej2Base.isNullOrUndefined)(args.element.placeholder) && args.element.placeholder !== '') {
        floatLabelElement.innerHTML = args.element.placeholder;
        args.element.removeAttribute('placeholder');
      }

      if (!(0, _ej2Base.isNullOrUndefined)(args.properties) && !(0, _ej2Base.isNullOrUndefined)(args.properties.placeholder) && args.properties.placeholder !== '') {
        floatLabelElement.innerHTML = args.properties.placeholder;
      }

      if (!floatLabelElement.innerHTML) {
        inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);
      }

      if (inputObject.container.classList.contains('e-float-icon-left')) {
        var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');
        inputWrap.appendChild(args.element);
        inputWrap.appendChild(floatLinelement);
        inputWrap.appendChild(floatLabelElement);
      } else {
        inputObject.container.appendChild(args.element);
        inputObject.container.appendChild(floatLinelement);
        inputObject.container.appendChild(floatLabelElement);
      }

      updateLabelState(args.element.value, floatLabelElement);

      if (args.floatLabelType === 'Always') {
        if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {
          (0, _ej2Base.removeClass)([floatLabelElement], CLASSNAMES.LABELBOTTOM);
        }

        (0, _ej2Base.addClass)([floatLabelElement], CLASSNAMES.LABELTOP);
      }

      if (args.floatLabelType === 'Auto') {
        args.element.addEventListener('input', function (event) {
          updateLabelState(args.element.value, floatLabelElement);
        });
        args.element.addEventListener('blur', function (event) {
          updateLabelState(args.element.value, floatLabelElement);
        });
      }

      if (!(0, _ej2Base.isNullOrUndefined)(args.element.getAttribute('id'))) {
        floatLabelElement.setAttribute('for', args.element.getAttribute('id'));
      }
    }

    function checkFloatLabelType(type, container) {
      if (type === 'Always' && container.classList.contains('e-outline')) {
        container.classList.add('e-valid-input');
      }
    }

    function setPropertyValue(args, inputObject) {
      if (!(0, _ej2Base.isNullOrUndefined)(args.properties)) {
        for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {
          var prop = _a[_i];

          switch (prop) {
            case 'cssClass':
              setCssClass(args.properties.cssClass, [inputObject.container]);
              checkFloatLabelType(args.floatLabelType, inputObject.container);
              break;

            case 'enabled':
              setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
              break;

            case 'enableRtl':
              setEnableRtl(args.properties.enableRtl, [inputObject.container]);
              break;

            case 'placeholder':
              setPlaceholder(args.properties.placeholder, args.element);
              break;

            case 'readonly':
              setReadonly(args.properties.readonly, args.element);
              break;
          }
        }
      }

      return inputObject;
    }

    function updateIconState(value, button) {
      if (value) {
        (0, _ej2Base.removeClass)([button], CLASSNAMES.CLEARICONHIDE);
      } else {
        (0, _ej2Base.addClass)([button], CLASSNAMES.CLEARICONHIDE);
      }
    }

    function updateLabelState(value, label) {
      if (value) {
        (0, _ej2Base.addClass)([label], CLASSNAMES.LABELTOP);

        if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {
          (0, _ej2Base.removeClass)([label], CLASSNAMES.LABELBOTTOM);
        }
      } else {
        if (label.classList.contains(CLASSNAMES.LABELTOP)) {
          (0, _ej2Base.removeClass)([label], CLASSNAMES.LABELTOP);
        }

        (0, _ej2Base.addClass)([label], CLASSNAMES.LABELBOTTOM);
      }
    }

    function getParentNode(element) {
      var parentNode = (0, _ej2Base.isNullOrUndefined)(element.parentNode) ? element : element.parentNode;

      if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {
        parentNode = parentNode.parentNode;
      }

      return parentNode;
    }
    /**
     * To create clear button.
     */


    function createClearButton(element, inputObject, initial, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var button = makeElement('span', {
        className: CLASSNAMES.CLEARICON
      });
      var container = inputObject.container;

      if (!(0, _ej2Base.isNullOrUndefined)(initial)) {
        container.appendChild(button);
      } else {
        var baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;
        baseElement.insertAdjacentElement('afterend', button);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
        (0, _ej2Base.addClass)([container], CLASSNAMES.INPUTGROUP);
      }

      (0, _ej2Base.addClass)([button], CLASSNAMES.CLEARICONHIDE);
      wireClearBtnEvents(element, button, container);
      button.setAttribute('aria-label', 'close');
      return button;
    }

    function wireClearBtnEvents(element, button, container) {
      button.addEventListener('click', function (event) {
        if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {
          event.preventDefault();

          if (element !== document.activeElement) {
            element.focus();
          }

          element.value = '';
          (0, _ej2Base.addClass)([button], CLASSNAMES.CLEARICONHIDE);
        }
      });
      element.addEventListener('input', function (event) {
        updateIconState(element.value, button);
      });
      element.addEventListener('focus', function (event) {
        updateIconState(element.value, button);
      });
      element.addEventListener('blur', function (event) {
        setTimeout(function () {
          (0, _ej2Base.addClass)([button], CLASSNAMES.CLEARICONHIDE);
        }, 200);
      });
    }

    Input.wireClearBtnEvents = wireClearBtnEvents;

    function validateLabel(element, floatLabelType) {
      var parent = getParentNode(element);

      if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {
        var label = getParentNode(element).getElementsByClassName('e-float-text')[0];
        updateLabelState(element.value, label);
      }
    }
    /**
     * To create input box contianer.
     */


    function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var container;

      if (!(0, _ej2Base.isNullOrUndefined)(args.customTag)) {
        container = makeElement(args.customTag, {
          className: className
        });
        container.classList.add(tagClass);
      } else {
        container = makeElement(tag, {
          className: className
        });
      }

      container.classList.add('e-control-wrapper');
      return container;
    }

    function encodePlaceHolder(placeholder) {
      var result = '';

      if (!(0, _ej2Base.isNullOrUndefined)(placeholder) && placeholder !== '') {
        var spanEle = document.createElement('span');
        spanEle.innerHTML = placeholder;
        result = spanEle.innerHTML;
      }

      return result;
    }
    /**
     * Sets the value to the input element.
     * ```
     * E.g : Input.setValue('content', element, "Auto", true );
     * ```
     * @param value - Specify the value of the input element.
     * @param element - The element on which the specified value is updated.
     * @param floatLabelType - Specify the float label type of the input element.
     * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.
     */


    function setValue(value, element, floatLabelType, clearButton) {
      element.value = value;

      if (!(0, _ej2Base.isNullOrUndefined)(floatLabelType) && floatLabelType === 'Auto') {
        validateLabel(element, floatLabelType);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(clearButton) && clearButton) {
        var parentElement = getParentNode(element);

        if (!(0, _ej2Base.isNullOrUndefined)(parentElement)) {
          var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];

          if (element.value && parentElement.classList.contains('e-input-focus')) {
            (0, _ej2Base.removeClass)([button], CLASSNAMES.CLEARICONHIDE);
          } else {
            (0, _ej2Base.addClass)([button], CLASSNAMES.CLEARICONHIDE);
          }
        }
      }

      checkInputValue(floatLabelType, element);
    }

    Input.setValue = setValue;
    /**
     * Sets the single or multiple cssClass to wrapper of input element.
     * ```
     * E.g : Input.setCssClass('e-custom-class', [element]);
     * ```
     * @param cssClass - Css class names which are needed to add.
     * @param elements - The elements which are needed to add / remove classes.
     * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.
     */

    function setCssClass(cssClass, elements, oldClass) {
      if (!(0, _ej2Base.isNullOrUndefined)(oldClass) && oldClass !== '') {
        (0, _ej2Base.removeClass)(elements, oldClass.split(' '));
      }

      if (!(0, _ej2Base.isNullOrUndefined)(cssClass) && cssClass !== '') {
        (0, _ej2Base.addClass)(elements, cssClass.split(' '));
      }
    }

    Input.setCssClass = setCssClass;
    /**
     * Set the width to the wrapper of input element.
     * ```
     * E.g : Input.setWidth('200px', container);
     * ```
     * @param width - Width value which is need to add.
     * @param container - The element on which the width is need to add.
     */

    function setWidth(width, container) {
      if (typeof width === 'number') {
        container.style.width = (0, _ej2Base.formatUnit)(width);
      } else if (typeof width === 'string') {
        container.style.width = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
      }
    }

    Input.setWidth = setWidth;
    /**
     * Set the placeholder attribute to the input element.
     * ```
     * E.g : Input.setPlaceholder('Search here', element);
     * ```
     * @param placeholder - Placeholder value which is need to add.
     * @param element - The element on which the placeholder is need to add.
     */

    function setPlaceholder(placeholder, element) {
      var parentElement;
      placeholder = encodePlaceHolder(placeholder);
      parentElement = getParentNode(element);

      if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
        if (!(0, _ej2Base.isNullOrUndefined)(placeholder) && placeholder !== '') {
          parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;
          parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);
          element.removeAttribute('placeholder');
        } else {
          parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);
          parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
        }
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(placeholder) && placeholder !== '') {
          (0, _ej2Base.attributes)(element, {
            'placeholder': placeholder,
            'aria-placeholder': placeholder
          });
        } else {
          element.removeAttribute('placeholder');
          element.removeAttribute('aria-placeholder');
        }
      }
    }

    Input.setPlaceholder = setPlaceholder;
    /**
     * Set the read only attribute to the input element
     * ```
     * E.g : Input.setReadonly(true, element);
     * ```
     * @param isReadonly
     * - Boolean value to specify whether to set read only. Setting "True" value enables read only.
     * @param element
     * - The element which is need to enable read only.
     */

    function setReadonly(isReadonly, element, floatLabelType) {
      if (isReadonly) {
        (0, _ej2Base.attributes)(element, {
          readonly: ''
        });
      } else {
        element.removeAttribute('readonly');
      }

      if (!(0, _ej2Base.isNullOrUndefined)(floatLabelType)) {
        validateLabel(element, floatLabelType);
      }
    }

    Input.setReadonly = setReadonly;
    /**
     * Displays the element direction from right to left when its enabled.
     * ```
     * E.g : Input.setEnableRtl(true, [inputObj.container]);
     * ```
     * @param isRtl
     * - Boolean value to specify whether to set RTL. Setting "True" value enables the RTL mode.
     * @param elements
     * - The elements that are needed to enable/disable RTL.
     */

    function setEnableRtl(isRtl, elements) {
      if (isRtl) {
        (0, _ej2Base.addClass)(elements, CLASSNAMES.RTL);
      } else {
        (0, _ej2Base.removeClass)(elements, CLASSNAMES.RTL);
      }
    }

    Input.setEnableRtl = setEnableRtl;
    /**
     * Enables or disables the given input element.
     * ```
     * E.g : Input.setEnabled(false, element);
     * ```
     * @param isEnable
     * - Boolean value to specify whether to enable or disable.
     * @param element
     * - Element to be enabled or disabled.
     */

    function setEnabled(isEnable, element, floatLabelType, inputContainer) {
      var disabledAttrs = {
        'disabled': 'disabled',
        'aria-disabled': 'true'
      };
      var considerWrapper = (0, _ej2Base.isNullOrUndefined)(inputContainer) ? false : true;

      if (isEnable) {
        element.classList.remove(CLASSNAMES.DISABLE);
        removeAttributes(disabledAttrs, element);

        if (considerWrapper) {
          (0, _ej2Base.removeClass)([inputContainer], CLASSNAMES.DISABLE);
        }
      } else {
        element.classList.add(CLASSNAMES.DISABLE);
        addAttributes(disabledAttrs, element);

        if (considerWrapper) {
          (0, _ej2Base.addClass)([inputContainer], CLASSNAMES.DISABLE);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(floatLabelType)) {
        validateLabel(element, floatLabelType);
      }
    }

    Input.setEnabled = setEnabled;

    function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;

      if (isClear) {
        inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);
      } else {
        inputObject.clearButton.remove();
        inputObject.clearButton = null;
      }
    }

    Input.setClearButton = setClearButton;
    /**
     * Removing the multiple attributes from the given element such as "disabled","id" , etc.
     * ```
     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);
     * ```
     * @param attrs
     *  - Array of attributes which are need to removed from the element.
     * @param element
     *  - Element on which the attributes are needed to be removed.
     */

    function removeAttributes(attrs, element) {
      for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
        var key = _a[_i];
        var parentElement = void 0;
        parentElement = getParentNode(element);

        if (key === 'disabled') {
          element.classList.remove(CLASSNAMES.DISABLE);
        }

        if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
          parentElement.classList.remove(CLASSNAMES.DISABLE);
        }

        if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
          parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';
        } else {
          element.removeAttribute(key);
        }
      }
    }

    Input.removeAttributes = removeAttributes;
    /**
     * Adding the multiple attributes to the given element such as "disabled","id" , etc.
     * ```
     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);
     * ```
     * @param attrs
     * - Array of attributes which is added to element.
     * @param element
     * - Element on which the attributes are needed to be added.
     */

    function addAttributes(attrs, element) {
      for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
        var key = _a[_i];
        var parentElement = void 0;
        parentElement = getParentNode(element);

        if (key === 'disabled') {
          element.classList.add(CLASSNAMES.DISABLE);
        }

        if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {
          parentElement.classList.add(CLASSNAMES.DISABLE);
        }

        if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {
          parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];
        } else {
          element.setAttribute(key, attrs[key]);
        }
      }
    }

    Input.addAttributes = addAttributes;

    function removeFloating(input) {
      var container = input.container;

      if (!(0, _ej2Base.isNullOrUndefined)(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
        var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input');
        var placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;
        var clearButton = container.querySelector('.e-clear-icon') !== null;
        (0, _ej2Base.detach)(container.querySelector('.' + CLASSNAMES.FLOATLINE));
        (0, _ej2Base.detach)(container.querySelector('.' + CLASSNAMES.FLOATTEXT));
        (0, _ej2Base.classList)(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);
        unwireFloatingEvents(inputEle);
        (0, _ej2Base.attributes)(inputEle, {
          'placeholder': placeholder
        });
        inputEle.classList.add(CLASSNAMES.INPUT);

        if (!clearButton && inputEle.tagName === 'INPUT') {
          inputEle.removeAttribute('required');
        }
      }
    }

    Input.removeFloating = removeFloating;

    function addFloating(input, type, placeholder, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var container = (0, _ej2Base.closest)(input, '.' + CLASSNAMES.INPUTGROUP);
      floatType = type;

      if (type !== 'Never') {
        var customTag = container.tagName;
        customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;
        var args = {
          element: input,
          floatLabelType: type,
          customTag: customTag,
          properties: {
            placeholder: placeholder
          }
        };
        var iconEle = container.querySelector('.e-clear-icon');
        var inputObj = {
          container: container
        };
        input.classList.remove(CLASSNAMES.INPUT);
        createFloatingInput(args, inputObj, makeElement);
        var isPrependIcon = container.classList.contains('e-float-icon-left');

        if ((0, _ej2Base.isNullOrUndefined)(iconEle)) {
          if (isPrependIcon) {
            var inputWrap = container.querySelector('.e-input-in-wrap');
            iconEle = inputWrap.querySelector('.e-input-group-icon');
          } else {
            iconEle = container.querySelector('.e-input-group-icon');
          }
        }

        if ((0, _ej2Base.isNullOrUndefined)(iconEle)) {
          if (isPrependIcon) {
            iconEle = container.querySelector('.e-input-group-icon');
          }

          if ((0, _ej2Base.isNullOrUndefined)(iconEle)) {
            container.classList.remove(CLASSNAMES.INPUTGROUP);
          }
        } else {
          var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);
          var floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);
          var wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;
          wrapper.insertBefore(input, iconEle);
          wrapper.insertBefore(floatLine, iconEle);
          wrapper.insertBefore(floatText, iconEle);
        }
      }

      checkFloatLabelType(type, input.parentElement);
    }

    Input.addFloating = addFloating;
    /**
     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.
     * ```
     * E.g : Input.setRipple(true, [inputObjects]);
     * ```
     * @param isRipple
     * - Boolean value to specify whether to enable the ripple effect.
     * @param inputObject
     * - Specify the collection of input objects.
     */

    function setRipple(isRipple, inputObj) {
      for (var i = 0; i < inputObj.length; i++) {
        _internalRipple(isRipple, inputObj[i].container);
      }
    }

    Input.setRipple = setRipple;

    function _internalRipple(isRipple, container, button) {
      var argsButton = [];
      argsButton.push(button);
      var buttons = (0, _ej2Base.isNullOrUndefined)(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;

      if (isRipple && buttons.length > 0) {
        for (var index = 0; index < buttons.length; index++) {
          buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);
          buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);
        }
      } else if (buttons.length > 0) {
        for (var index = 0; index < buttons.length; index++) {
          buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);
          buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);
        }
      }
    }

    function _onMouseRipple(container, button) {
      if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {
        button.classList.add('e-input-btn-ripple');
      }
    }

    function _onMouseDownRipple() {
      var ele = this;
      var parentEle = this.parentElement;

      while (!parentEle.classList.contains('e-input-group')) {
        parentEle = parentEle.parentElement;
      }

      _onMouseRipple(parentEle, ele);
    }

    function _onMouseUpRipple() {
      var ele = this;
      setTimeout(function () {
        ele.classList.remove('e-input-btn-ripple');
      }, 500);
    }

    function createIconEle(iconClass, makeElement) {
      var button = makeElement('span', {
        className: iconClass
      });
      button.classList.add('e-input-group-icon');
      return button;
    }
    /**
     * Creates a new span element with the given icons added and append it in container element.
     * ```
     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);
     * ```
     * @param position - Specify the icon placement on the input.Possible values are append and prepend.
     * @param iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param container - The container on which created span element is going to append.
     * @param inputElement - The inputElement on which created span element is going to prepend.
     */
    // tslint:disable


    function addIcon(position, icons, container, input, internalCreate) {
      // tslint:enable
      var result = typeof icons === 'string' ? icons.split(',') : icons;

      if (position.toLowerCase() === 'append') {
        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
          var icon = result_1[_i];
          appendSpan(icon, container, internalCreate);
        }
      } else {
        for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {
          var icon = result_2[_a];
          prependSpan(icon, container, input, internalCreate);
        }
      }
    }

    Input.addIcon = addIcon;
    /**
     * Creates a new span element with the given icons added and prepend it in input element.
     * ```
     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);
     * ```
     * @param iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param container - The container on which created span element is going to append.
     * @param inputElement - The inputElement on which created span element is going to prepend.
     */
    // tslint:disable

    function prependSpan(iconClass, container, inputElement, internalCreateElement) {
      // tslint:enable
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var button = createIconEle(iconClass, makeElement);
      container.classList.add('e-float-icon-left');
      var innerWrapper = container.querySelector('.e-input-in-wrap');

      if ((0, _ej2Base.isNullOrUndefined)(innerWrapper)) {
        innerWrapper = makeElement('span', {
          className: 'e-input-in-wrap'
        });
        inputElement.parentNode.insertBefore(innerWrapper, inputElement);
        var result = container.querySelectorAll(inputElement.tagName + ' ~ *');
        innerWrapper.appendChild(inputElement);

        for (var i = 0; i < result.length; i++) {
          innerWrapper.appendChild(result[i]);
        }
      }

      innerWrapper.parentNode.insertBefore(button, innerWrapper);

      if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {
        container.classList.add(CLASSNAMES.INPUTGROUP);
      }

      _internalRipple(true, container, button);

      return button;
    }

    Input.prependSpan = prependSpan;
    /**
     * Creates a new span element with the given icons added and append it in container element.
     * ```
     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);
     * ```
     * @param iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param container - The container on which created span element is going to append.
     */

    function appendSpan(iconClass, container, internalCreateElement) {
      var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
      var button = createIconEle(iconClass, makeElement);

      if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {
        container.classList.add(CLASSNAMES.INPUTGROUP);
      }

      var wrap = container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container;
      wrap.appendChild(button);

      _internalRipple(true, container, button);

      return button;
    }

    Input.appendSpan = appendSpan;
  })(Input || (_exports.Input = Input = {}));
});;
define('@syncfusion/ej2-inputs/src/maskedtextbox/base/index',["exports", "./mask-base"], function (_exports, _maskBase) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_maskBase).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _maskBase[key];
  });
});;
define('@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base',["exports", "@syncfusion/ej2-base", "../../input/input"], function (_exports, _ej2Base, _input) {
  "use strict";

  _exports.__esModule = true;
  _exports.createMask = createMask;
  _exports.applyMask = applyMask;
  _exports.wireEvents = wireEvents;
  _exports.unwireEvents = unwireEvents;
  _exports.bindClearEvent = bindClearEvent;
  _exports.unstrippedValue = unstrippedValue;
  _exports.strippedValue = strippedValue;
  _exports.maskInputFocusHandler = maskInputFocusHandler;
  _exports.maskInputBlurHandler = maskInputBlurHandler;
  _exports.maskInputDropHandler = maskInputDropHandler;
  _exports.mobileRemoveFunction = mobileRemoveFunction;
  _exports.setMaskValue = setMaskValue;
  _exports.setElementValue = setElementValue;
  _exports.maskInput = maskInput;
  _exports.getVal = getVal;
  _exports.getMaskedVal = getMaskedVal;
  _exports.MaskUndo = _exports.regularExpressions = void 0;

  /**
   * MaskedTextBox base module
   */
  var ERROR = 'e-error';
  var INPUTGROUP = 'e-input-group';
  var FLOATINPUT = 'e-float-input';
  var UTILMASK = 'e-utility-mask';
  var TOPLABEL = 'e-label-top';
  var BOTTOMLABEL = 'e-label-bottom';
  /**
   * @hidden
   * Built-in masking elements collection.
   */

  var regularExpressions = {
    '0': '[0-9]',
    '9': '[0-9 ]',
    '#': '[0-9 +-]',
    'L': '[A-Za-z]',
    '?': '[A-Za-z ]',
    '&': '[^\x7f ]+',
    'C': '[^\x7f]+',
    'A': '[A-Za-z0-9]',
    'a': '[A-Za-z0-9 ]'
  };
  /**
   * @hidden
   * Generate required masking elements to the MaskedTextBox from user mask input.
   */

  _exports.regularExpressions = regularExpressions;

  function createMask() {
    (0, _ej2Base.attributes)(this.element, {
      'role': 'textbox',
      'autocomplete': 'off',
      'autocorrect': 'off',
      'autocapitalize': 'off',
      'spellcheck': 'false',
      'aria-live': 'assertive',
      'aria-valuenow': ''
    });

    if (this.mask) {
      var splitMask = this.mask.split(']');

      for (var i = 0; i < splitMask.length; i++) {
        if (splitMask[i][splitMask[i].length - 1] === '\\') {
          splitMask[i] = splitMask[i] + ']';
          var splitInnerMask = splitMask[i].split('[');

          for (var j = 0; j < splitInnerMask.length; j++) {
            if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\') {
              splitInnerMask[j] = splitInnerMask[j] + '[';
            }

            pushIntoRegExpCollec.call(this, splitInnerMask[j]);
          }
        } else {
          var splitInnerMask = splitMask[i].split('[');

          if (splitInnerMask.length > 1) {
            var chkSpace = false;

            for (var j = 0; j < splitInnerMask.length; j++) {
              if (splitInnerMask[j] === '\\') {
                this.customRegExpCollec.push('[');
                this.hiddenMask += splitInnerMask[j] + '[';
              } else if (splitInnerMask[j] === '') {
                chkSpace = true;
              } else if (splitInnerMask[j] !== '' && chkSpace || j === splitInnerMask.length - 1) {
                this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');
                this.hiddenMask += this.promptChar;
                chkSpace = false;
              } else {
                pushIntoRegExpCollec.call(this, splitInnerMask[j]);
              }
            }
          } else {
            pushIntoRegExpCollec.call(this, splitInnerMask[0]);
          }
        }
      }

      this.escapeMaskValue = this.hiddenMask;
      this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);

      if (!(0, _ej2Base.isNullOrUndefined)(this.customCharacters)) {
        for (var i = 0; i < this.promptMask.length; i++) {
          if (!(0, _ej2Base.isNullOrUndefined)(this.customCharacters[this.promptMask[i]])) {
            this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);
          }
        }
      }

      var escapeNumber = 0;

      if (this.hiddenMask.match(new RegExp(/\\/))) {
        for (var i = 0; i < this.hiddenMask.length; i++) {
          var j = 0;

          if (i >= 1) {
            j = i;
          }

          escapeNumber = this.hiddenMask.length - this.promptMask.length;
          j = j - escapeNumber;

          if (i > 0 && this.hiddenMask[i - 1] !== '\\' && (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {
            this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length);
            this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length);
          }

          if (this.hiddenMask[i] === '\\') {
            this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length);
            this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length);
          }
        }
      } else {
        this.promptMask = this.promptMask.replace(/[>|<]/g, '');
        this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');
      }

      (0, _ej2Base.attributes)(this.element, {
        'aria-invalid': 'false'
      });
    }
  }
  /**
   * @hidden
   * Apply mask ability with masking elements to the MaskedTextBox.
   */


  function applyMask() {
    setElementValue.call(this, this.promptMask);
    setMaskValue.call(this, this.value);
  }
  /**
   * @hidden
   * To wire required events to the MaskedTextBox.
   */


  function wireEvents() {
    _ej2Base.EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);

    _ej2Base.EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);

    _ej2Base.EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);

    _ej2Base.EventHandler.add(this.element, 'input', maskInputHandler, this);

    _ej2Base.EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);

    _ej2Base.EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);

    _ej2Base.EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);

    _ej2Base.EventHandler.add(this.element, 'cut', maskInputCutHandler, this);

    _ej2Base.EventHandler.add(this.element, 'drop', maskInputDropHandler, this);

    if (this.enabled) {
      bindClearEvent.call(this);

      if (this.formElement) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', resetFormHandler, this);
      }
    }
  }
  /**
   * @hidden
   * To unwire events attached to the MaskedTextBox.
   */


  function unwireEvents() {
    _ej2Base.EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);

    _ej2Base.EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);

    _ej2Base.EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);

    _ej2Base.EventHandler.remove(this.element, 'input', maskInputHandler);

    _ej2Base.EventHandler.remove(this.element, 'focus', maskInputFocusHandler);

    _ej2Base.EventHandler.remove(this.element, 'blur', maskInputBlurHandler);

    _ej2Base.EventHandler.remove(this.element, 'paste', maskInputPasteHandler);

    _ej2Base.EventHandler.remove(this.element, 'cut', maskInputCutHandler);

    if (this.formElement) {
      _ej2Base.EventHandler.remove(this.formElement, 'reset', resetFormHandler);
    }
  }
  /**
   * @hidden
   * To bind required events to the MaskedTextBox clearButton.
   */


  function bindClearEvent() {
    if (this.showClearButton) {
      _ej2Base.EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);
    }
  }

  function resetHandler(e) {
    e.preventDefault();

    if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {
      clear.call(this, e);
      this.value = '';
    }
  }

  function clear(event) {
    var value = this.element.value;
    setElementValue.call(this, this.promptMask);
    this.redoCollec.unshift({
      value: this.promptMask,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });
    triggerMaskChangeEvent.call(this, event, value);
    this.element.setSelectionRange(0, 0);
  }

  function resetFormHandler() {
    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
      setElementValue.call(this, this.promptMask);
    } else {
      this.value = this.initInputValue;
    }
  }
  /**
   * @hidden
   * To get masked value from the MaskedTextBox.
   */


  function unstrippedValue(element) {
    return element.value;
  }
  /**
   * @hidden
   * To extract raw value from the MaskedTextBox.
   */


  function strippedValue(element, maskValues) {
    var value = '';
    var k = 0;
    var checkMask = false;
    var maskValue = !(0, _ej2Base.isNullOrUndefined)(maskValues) ? maskValues : !(0, _ej2Base.isNullOrUndefined)(element) && !(0, _ej2Base.isNullOrUndefined)(this) ? element.value : maskValues;

    if (maskValue !== this.promptMask) {
      for (var i = 0; i < this.customRegExpCollec.length; i++) {
        if (checkMask) {
          checkMask = false;
        }

        if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' || this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\') {
          --i;
          checkMask = true;
        }

        if (!checkMask) {
          if (maskValue[i] !== this.promptChar && !(0, _ej2Base.isNullOrUndefined)(this.customRegExpCollec[k]) && (!(0, _ej2Base.isNullOrUndefined)(this.regExpCollec[this.customRegExpCollec[k]]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']' || !(0, _ej2Base.isNullOrUndefined)(this.customCharacters) && !(0, _ej2Base.isNullOrUndefined)(this.customCharacters[this.customRegExpCollec[k]])) && maskValue !== '') {
            value += maskValue[i];
          }
        }

        ++k;
      }
    }

    if (this.mask === null || this.mask === '' && this.value !== undefined) {
      value = maskValue;
    }

    return value;
  }

  function pushIntoRegExpCollec(value) {
    for (var k = 0; k < value.length; k++) {
      this.hiddenMask += value[k];

      if (value[k] !== '\\') {
        this.customRegExpCollec.push(value[k]);
      }
    }
  }

  function maskInputFocusHandler(event) {
    var _this = this;

    var eventArgs = {
      selectionStart: 0,
      event: event,
      value: this.value,
      maskedValue: this.element.value,
      container: this.inputObj.container,
      selectionEnd: this.promptMask.length > 0 ? this.promptMask.length : this.element.value.length
    };
    this.trigger('focus', eventArgs, function (eventArgs) {
      if (_this.mask) {
        _this.isFocus = true;

        if (_this.element.value === '') {
          setElementValue.call(_this, _this.promptMask);
        } else {
          setElementValue.call(_this, _this.element.value);
        }

        if (!_ej2Base.Browser.isDevice && _ej2Base.Browser.info.version === '11.0') {
          _this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);
        } else {
          var delay = _ej2Base.Browser.isDevice && _ej2Base.Browser.isIos ? 450 : 0;
          setTimeout(function () {
            _this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);
          }, delay);
        }
      }
    });
  }

  function maskInputBlurHandler(event) {
    this.blurEventArgs = {
      event: event,
      value: this.value,
      maskedValue: this.element.value,
      container: this.inputObj.container
    };
    this.trigger('blur', this.blurEventArgs);

    if (this.mask) {
      this.isFocus = false;

      if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {
        setElementValue.call(this, '');
        var labelElement = this.element.parentNode.querySelector('.e-float-text');

        if (this.floatLabelType === 'Auto' && !(0, _ej2Base.isNullOrUndefined)(labelElement) && labelElement.classList.contains(TOPLABEL)) {
          (0, _ej2Base.removeClass)([labelElement], TOPLABEL);
        }
      }
    }
  }

  function maskInputPasteHandler(event) {
    var _this = this;

    if (this.mask && !this.readonly) {
      var sIndex_1 = this.element.selectionStart;
      var eIndex_1 = this.element.selectionEnd;
      var oldValue_1 = this.element.value;
      setElementValue.call(this, '');
      this._callPasteHandler = true;
      setTimeout(function () {
        var value = _this.element.value.replace(/ /g, '');

        if (_this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value) {
          value = strippedValue.call(_this, _this.element);
        }

        setElementValue.call(_this, oldValue_1);
        _this.element.selectionStart = sIndex_1;
        _this.element.selectionEnd = eIndex_1;
        var i = 0;
        _this.maskKeyPress = true;

        do {
          validateValue.call(_this, value[i], false, null);
          ++i;
        } while (i < value.length);

        _this.maskKeyPress = false;
        _this._callPasteHandler = false;

        if (_this.element.value === oldValue_1) {
          var i_1 = 0;
          _this.maskKeyPress = true;

          do {
            validateValue.call(_this, value[i_1], false, null);
            ++i_1;
          } while (i_1 < value.length);

          _this.maskKeyPress = false;
        } else {
          triggerMaskChangeEvent.call(_this, event, oldValue_1);
        }
      }, 1);
    }
  }

  function maskInputCutHandler(event) {
    var _this = this;

    if (this.mask && !this.readonly) {
      var preValue_1 = this.element.value;
      var sIndex_2 = this.element.selectionStart;
      var eIndex = this.element.selectionEnd;
      this.undoCollec.push({
        value: this.element.value,
        startIndex: this.element.selectionStart,
        endIndex: this.element.selectionEnd
      });
      var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) + this.element.value.substring(eIndex);
      setTimeout(function () {
        setElementValue.call(_this, value_1);
        _this.element.selectionStart = _this.element.selectionEnd = sIndex_2;

        if (_this.element.value !== preValue_1) {
          triggerMaskChangeEvent.call(_this, event, null);
        }
      }, 0);
    }
  }

  function maskInputDropHandler(event) {
    event.preventDefault();
  }

  function maskInputHandler(event) {
    if (_ej2Base.Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {
      return;
    }

    var eventArgs = {
      ctrlKey: false,
      keyCode: 229
    }; // tslint:disable-next-line

    (0, _ej2Base.extend)(event, eventArgs);

    if (this.mask) {
      if (this.element.value === '') {
        this.redoCollec.unshift({
          value: this.promptMask,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
      }

      if (this.element.value.length === 1) {
        this.element.value = this.element.value + this.promptMask;
        this.element.setSelectionRange(1, 1);
      }

      if (!this._callPasteHandler) {
        removeMaskInputValues.call(this, event);
      }

      if (this.element.value.length > this.promptMask.length) {
        var startIndex = this.element.selectionStart;
        var addedValues = this.element.value.length - this.promptMask.length;
        var value = this.element.value.substring(startIndex - addedValues, startIndex);
        this.maskKeyPress = false;
        var i = 0;

        do {
          validateValue.call(this, value[i], event.ctrlKey, event);
          ++i;
        } while (i < value.length);

        if (this.element.value !== this.preEleVal) {
          triggerMaskChangeEvent.call(this, event, null);
        }
      }

      var val = strippedValue.call(this, this.element);
      this.prevValue = val;
      this.value = val;

      if (val === '') {
        setElementValue.call(this, this.promptMask);
        this.element.setSelectionRange(0, 0);
      }
    }
  }

  function maskInputKeyDownHandler(event) {
    if (this.mask && !this.readonly) {
      var value = this;

      if (event.keyCode !== 229) {
        if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
          event.preventDefault();
        }

        removeMaskInputValues.call(this, event);
      }

      var startValue = this.element.value;

      if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
        var collec = void 0;

        if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {
          collec = this.undoCollec[this.undoCollec.length - 1];
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
          setElementValue.call(this, collec.value);
          this.element.selectionStart = collec.startIndex;
          this.element.selectionEnd = collec.endIndex;
          this.undoCollec.splice(this.undoCollec.length - 1, 1);
        } else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {
          collec = this.redoCollec[0];
          this.undoCollec.push({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
          setElementValue.call(this, collec.value);
          this.element.selectionStart = collec.startIndex;
          this.element.selectionEnd = collec.endIndex;
          this.redoCollec.splice(0, 1);
        }
      }
    }
  }

  function mobileRemoveFunction() {
    var collec;
    var sIndex = this.element.selectionStart;
    var eIndex = this.element.selectionEnd;

    if (this.redoCollec.length > 0) {
      collec = this.redoCollec[0];
      setElementValue.call(this, collec.value);

      if (collec.startIndex - sIndex === 1) {
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
      } else {
        this.element.selectionStart = sIndex + 1;
        this.element.selectionEnd = eIndex + 1;
      }
    } else {
      setElementValue.call(this, this.promptMask);
      this.element.selectionStart = this.element.selectionEnd = sIndex;
    }
  }

  function autoFillMaskInputValues(isRemove, oldEventVal, event) {
    if (event.type === 'input') {
      isRemove = false;
      oldEventVal = this.element.value;
      setElementValue.call(this, this.promptMask);
      setMaskValue.call(this, oldEventVal);
    }

    return isRemove;
  }

  function removeMaskInputValues(event) {
    var isRemove = false;
    var oldEventVal;
    var isDeleted = false;

    if (this.element.value.length < this.promptMask.length) {
      isRemove = true;
      oldEventVal = this.element.value;
      isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
      mobileRemoveFunction.call(this);
    }

    if (this.element.value.length >= this.promptMask.length && event.type === 'input') {
      isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
    }

    var initStartIndex = this.element.selectionStart;
    var initEndIndex = this.element.selectionEnd;
    var startIndex = this.element.selectionStart;
    var endIndex = this.element.selectionEnd;
    var maskValue = this.hiddenMask.replace(/[>|\\<]/g, '');
    var curMask = maskValue[startIndex - 1];
    var parentElement = this.element.parentNode;

    if (isRemove || event.keyCode === 8 || event.keyCode === 46) {
      this.undoCollec.push({
        value: this.element.value,
        startIndex: this.element.selectionStart,
        endIndex: endIndex
      });
      var multipleDel = false;
      var preValue = this.element.value;

      if (startIndex > 0 || (event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
        var index = startIndex;

        if (startIndex !== endIndex) {
          startIndex = endIndex;

          if (event.keyCode === 46) {
            multipleDel = true;
          }
        } else if (event.keyCode === 46) {
          ++index;
        } else {
          --index;
        }

        for (var k = startIndex; event.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {
          for (var i = startIndex; event.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {
            var sIndex = void 0;

            if ((event.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {
              curMask = maskValue[i - 1];
              sIndex = startIndex - 1;
            } else {
              curMask = maskValue[i];
              sIndex = startIndex;
              ++startIndex;
            }

            var oldValue = this.element.value[sIndex];

            if ((0, _ej2Base.isNullOrUndefined)(this.regExpCollec[curMask]) && !(0, _ej2Base.isNullOrUndefined)(this.customCharacters) && (0, _ej2Base.isNullOrUndefined)(this.customCharacters[curMask]) && this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '[' && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']' || this.promptMask[sIndex] !== this.promptChar && (0, _ej2Base.isNullOrUndefined)(this.customCharacters)) {
              this.element.selectionStart = this.element.selectionEnd = sIndex;
              event.preventDefault();

              if (event.keyCode === 46 && !multipleDel) {
                ++this.element.selectionStart;
              }
            } else {
              var value = this.element.value;
              var prompt_1 = this.promptChar;
              var elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);
              setElementValue.call(this, elementValue);
              event.preventDefault();
              this.element.selectionStart = this.element.selectionEnd = sIndex;
              isDeleted = true;
            }

            startIndex = this.element.selectionStart;

            if (!isDeleted && event.keyCode === 8 || multipleDel || !isDeleted && !(event.keyCode === 46)) {
              sIndex = startIndex - 1;
            } else {
              sIndex = startIndex;
              isDeleted = false;
            }

            oldValue = this.element.value[sIndex];

            if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !(0, _ej2Base.isNullOrUndefined)(this.customCharacters)) {
              break;
            }
          }
        }
      }

      if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {
        setElementValue.call(this, this.promptMask);
        event.preventDefault();
        this.element.selectionStart = this.element.selectionEnd = startIndex;
      }

      this.redoCollec.unshift({
        value: this.element.value,
        startIndex: this.element.selectionStart,
        endIndex: this.element.selectionEnd
      });

      if (this.element.value !== preValue) {
        triggerMaskChangeEvent.call(this, event, oldEventVal);
      }
    }
  }

  function maskInputKeyPressHandler(event) {
    if (this.mask && !this.readonly) {
      var oldValue = this.element.value;

      if (!event.ctrlKey || event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY' && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV') {
        this.maskKeyPress = true;
        var key = event.key;

        if (key === 'Spacebar') {
          key = String.fromCharCode(event.keyCode);
        }

        if (!key) {
          this.isIosInvalid = true;
          validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);
          event.preventDefault();
          this.isIosInvalid = false;
        } else if (key && key.length === 1) {
          validateValue.call(this, key, event.ctrlKey, event);
          event.preventDefault();
        }

        if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {
          this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;
        }
      }

      if (this.element.value !== oldValue) {
        triggerMaskChangeEvent.call(this, event, oldValue);
      }
    }
  }

  function triggerMaskChangeEvent(event, oldValue) {
    var prevOnChange = this.isProtectedOnChange;

    if (!(0, _ej2Base.isNullOrUndefined)(this.changeEventArgs) && !this.isInitial) {
      var eventArgs = {};
      this.changeEventArgs = {
        value: this.element.value,
        maskedValue: this.element.value,
        isInteraction: false,
        isInteracted: false
      };

      if (this.mask) {
        this.changeEventArgs.value = strippedValue.call(this, this.element);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(event)) {
        this.changeEventArgs.isInteracted = true;
        this.changeEventArgs.isInteraction = true;
        this.changeEventArgs.event = event;
      }

      this.isProtectedOnChange = true;
      this.value = this.changeEventArgs.value;
      this.isProtectedOnChange = prevOnChange;
      (0, _ej2Base.merge)(eventArgs, this.changeEventArgs);
      this.trigger('change', eventArgs);
    }

    this.preEleVal = this.element.value;
    this.prevValue = strippedValue.call(this, this.element);
    (0, _ej2Base.attributes)(this.element, {
      'aria-valuenow': this.element.value
    });
  }

  function maskInputKeyUpHandler(event) {
    if (this.mask && !this.readonly) {
      var collec = void 0;

      if (!this.maskKeyPress && event.keyCode === 229) {
        var oldEventVal = void 0;

        if (this.element.value.length === 1) {
          this.element.value = this.element.value + this.promptMask;
          this.element.setSelectionRange(1, 1);
        }

        if (this.element.value.length > this.promptMask.length) {
          var startIndex = this.element.selectionStart;
          var addedValues = this.element.value.length - this.promptMask.length;
          var val_1 = this.element.value.substring(startIndex - addedValues, startIndex);

          if (this.undoCollec.length > 0) {
            collec = this.undoCollec[this.undoCollec.length - 1];
            var startIndex_1 = this.element.selectionStart;
            oldEventVal = collec.value;
            var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);
            collec = this.redoCollec[0];
            val_1 = val_1.trim();
            var isSpace = _ej2Base.Browser.isAndroid && val_1 === '';

            if (!isSpace && oldVal !== val_1 && collec.value.substring(startIndex_1 - addedValues, startIndex_1) !== val_1) {
              validateValue.call(this, val_1, event.ctrlKey, event);
            } else if (isSpace) {
              preventUnsupportedValues.call(this, event, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event.ctrlKey, false);
            }
          } else {
            oldEventVal = this.promptMask;
            validateValue.call(this, val_1, event.ctrlKey, event);
          }

          this.maskKeyPress = false;
          triggerMaskChangeEvent.call(this, event, oldEventVal);
        }
      } else {
        removeMaskError.call(this);
      }

      var val = strippedValue.call(this, this.element);

      if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === '') || val === '' && this.value !== val) {
        this.prevValue = val;
        this.value = val;
      }
    } else {
      triggerMaskChangeEvent.call(this, event);
    }

    if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {
      // tslint:disable-next-line
      var temp_1 = this.element;
      setTimeout(function () {
        temp_1.setSelectionRange(0, 0);
      }, 0);
    }
  }

  function mobileSwipeCheck(key) {
    if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
      var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
      setElementValue.call(this, elementValue);
      this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
    }

    this.element.selectionStart = this.element.selectionStart - key.length;
    this.element.selectionEnd = this.element.selectionEnd - key.length;
  }

  function mobileValidation(key) {
    if (!this.maskKeyPress) {
      mobileSwipeCheck.call(this, key);
    }
  }

  function validateValue(key, isCtrlKey, event) {
    mobileValidation.call(this, key);

    if ((0, _ej2Base.isNullOrUndefined)(this) || (0, _ej2Base.isNullOrUndefined)(key)) {
      return;
    }

    var startIndex = this.element.selectionStart;
    var initStartIndex = startIndex;
    var endIndex = this.element.selectionEnd;
    var curMask;
    var allowText = false;
    var value = this.element.value;
    var eventOldVal;
    var prevSupport = false;
    var isEqualVal = false;

    for (var k = 0; k < key.length; k++) {
      var keyValue = key[k];
      startIndex = this.element.selectionStart;
      endIndex = this.element.selectionEnd;

      if (!this.maskKeyPress && initStartIndex === startIndex) {
        startIndex = startIndex + k;
      }

      if (!this.maskKeyPress || startIndex < this.promptMask.length) {
        for (var i = startIndex; i < this.promptMask.length; i++) {
          var maskValue = this.escapeMaskValue;
          curMask = maskValue[startIndex];

          if (this.hiddenMask[startIndex] === '\\' && this.hiddenMask[startIndex + 1] === key) {
            isEqualVal = true;
          }

          if ((0, _ej2Base.isNullOrUndefined)(this.regExpCollec[curMask]) && ((0, _ej2Base.isNullOrUndefined)(this.customCharacters) || !(0, _ej2Base.isNullOrUndefined)(this.customCharacters) && (0, _ej2Base.isNullOrUndefined)(this.customCharacters[curMask])) && this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']' || this.promptMask[startIndex] !== this.promptChar && (0, _ej2Base.isNullOrUndefined)(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {
            this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
            startIndex = this.element.selectionStart;
            curMask = this.hiddenMask[startIndex];
          }
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.customCharacters) && !(0, _ej2Base.isNullOrUndefined)(this.customCharacters[curMask])) {
          var customValStr = this.customCharacters[curMask];
          var customValArr = customValStr.split(',');

          for (var i = 0; i < customValArr.length; i++) {
            if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {
              allowText = true;
              break;
            }
          }
        } else if (!(0, _ej2Base.isNullOrUndefined)(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask])) && this.promptMask[startIndex] === this.promptChar) {
          allowText = true;
        } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']' && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {
          allowText = true;
        }

        if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
          if (k === 0) {
            if (this.maskKeyPress) {
              this.undoCollec.push({
                value: value,
                startIndex: startIndex,
                endIndex: startIndex
              });
            } else {
              var sIndex = this.element.selectionStart;
              var eIndex = this.element.selectionEnd;

              if (this.redoCollec.length > 0) {
                eventOldVal = this.redoCollec[0].value;
                setElementValue.call(this, eventOldVal);
                this.undoCollec.push(this.redoCollec[0]);
              } else {
                this.undoCollec.push({
                  value: this.promptMask,
                  startIndex: startIndex,
                  endIndex: startIndex
                });
                eventOldVal = this.promptMask;
                setElementValue.call(this, eventOldVal);
              }

              this.element.selectionStart = sIndex;
              this.element.selectionEnd = eIndex;
            }
          }

          startIndex = this.element.selectionStart;
          applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);
          prevSupport = true;

          if (k === key.length - 1) {
            this.redoCollec.unshift({
              value: this.element.value,
              startIndex: this.element.selectionStart,
              endIndex: this.element.selectionEnd
            });
          }

          allowText = false;
        } else {
          startIndex = this.element.selectionStart;
          preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
        }

        if (k === key.length - 1 && !allowText) {
          if (!_ej2Base.Browser.isAndroid || _ej2Base.Browser.isAndroid && startIndex < this.promptMask.length) {
            this.redoCollec.unshift({
              value: this.element.value,
              startIndex: this.element.selectionStart,
              endIndex: this.element.selectionEnd
            });
          }
        }
      } else {
        if (key.length === 1 && !isCtrlKey && !(0, _ej2Base.isNullOrUndefined)(event)) {
          addMaskErrorClass.call(this);
        }
      }
    }
  }

  function applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {
    if (this.hiddenMask.length > this.promptMask.length) {
      keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);
    }

    if (!isEqualVal) {
      var value = this.element.value;
      var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
      setElementValue.call(this, elementValue);
      this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
    }
  }

  function preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {
    if (!this.maskKeyPress) {
      var eventOldVal = void 0;
      var value = this.element.value;

      if (sIdx >= this.promptMask.length) {
        setElementValue.call(this, value.substring(0, sIdx));
      } else {
        if (idx === sIdx) {
          setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));
        } else {
          if (this.promptMask.length === this.element.value.length) {
            setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));
          } else {
            setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));
          }
        }

        this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;
      }

      eventOldVal = this.element.value;
      addMaskErrorClass.call(this);
    }

    if (key.length === 1 && !ctrl && !(0, _ej2Base.isNullOrUndefined)(event)) {
      addMaskErrorClass.call(this);
    }
  }

  function addMaskErrorClass() {
    var _this = this;

    var parentElement = this.element.parentNode;
    var timer = 200;

    if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {
      (0, _ej2Base.addClass)([parentElement], ERROR);
    } else {
      (0, _ej2Base.addClass)([this.element], ERROR);
    }

    if (this.isIosInvalid === true) {
      timer = 400;
    }

    (0, _ej2Base.attributes)(this.element, {
      'aria-invalid': 'true'
    });
    setTimeout(function () {
      if (!_this.maskKeyPress) {
        removeMaskError.call(_this);
      }
    }, timer);
  }

  function removeMaskError() {
    var parentElement = this.element.parentNode;

    if (!(0, _ej2Base.isNullOrUndefined)(parentElement)) {
      (0, _ej2Base.removeClass)([parentElement], ERROR);
    }

    (0, _ej2Base.removeClass)([this.element], ERROR);
    (0, _ej2Base.attributes)(this.element, {
      'aria-invalid': 'false'
    });
  }
  /**
   * @hidden
   * Validates user input using masking elements '<' , '>' and '|'.
   */


  function changeToLowerUpperCase(key, value) {
    var promptMask;
    var i;
    var j = 0;
    var curVal = value;
    var caseCount = 0;

    for (i = 0; i < this.hiddenMask.length; i++) {
      if (this.hiddenMask[i] === '\\') {
        promptMask = curVal.substring(0, i) + '\\' + curVal.substring(i, curVal.length);
      }

      if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {
        if (this.hiddenMask[i] !== curVal[i]) {
          promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);
        }

        ++caseCount;
      }

      if (promptMask) {
        if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
          caseCount = 0;
          break;
        }

        curVal = promptMask;
      }
    }

    while (i >= 0 && promptMask) {
      if (i === 0 || promptMask[i - 1] !== '\\') {
        var val = this.element.value;

        if (promptMask[i] === '>') {
          key = key.toUpperCase();
          break;
        } else if (promptMask[i] === '<') {
          key = key.toLowerCase();
          break;
        } else if (promptMask[i] === '|') {
          break;
        }
      }

      --i;
    }

    return key;
  }
  /**
   * @hidden
   * To set updated values in the MaskedTextBox.
   */


  function setMaskValue(val) {
    if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {
      this.maskKeyPress = true;
      setElementValue.call(this, this.promptMask);

      if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {
        this.element.selectionStart = 0;
        this.element.selectionEnd = 0;
      }

      if (val !== null) {
        for (var i = 0; i < val.length; i++) {
          validateValue.call(this, val[i], false, null);
        }
      }

      var newVal = strippedValue.call(this, this.element);
      this.prevValue = newVal;
      this.value = newVal;
      triggerMaskChangeEvent.call(this, null, null);
      this.maskKeyPress = false;
      var labelElement = this.element.parentNode.querySelector('.e-float-text');

      if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder && !(0, _ej2Base.isNullOrUndefined)(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {
        (0, _ej2Base.removeClass)([labelElement], TOPLABEL);
        (0, _ej2Base.addClass)([labelElement], BOTTOMLABEL);
        setElementValue.call(this, '');
      }
    }

    if (this.mask === null || this.mask === '' && this.value !== undefined) {
      setElementValue.call(this, this.value);
    }
  }
  /**
   * @hidden
   * To set updated values in the input element.
   */


  function setElementValue(val, element) {
    if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && (0, _ej2Base.isNullOrUndefined)(this.value)) {
      val = '';
    }

    var value = strippedValue.call(this, element ? element : this.element, val);

    if (value === null || value === '') {
      _input.Input.setValue(val, element ? element : this.element, this.floatLabelType, false);

      if (this.showClearButton) {
        this.inputObj.clearButton.classList.add('e-clear-icon-hide');
      }
    } else {
      _input.Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
    }
  }
  /**
   * @hidden
   * Provide mask support to input textbox through utility method.
   */


  function maskInput(args) {
    var inputEle = getMaskInput(args);
    applyMask.call(inputEle);
    var val = strippedValue.call(this, this.element);
    this.prevValue = val;
    this.value = val;

    if (args.mask) {
      unwireEvents.call(inputEle);
      wireEvents.call(inputEle);
    }
  }

  function getMaskInput(args) {
    (0, _ej2Base.addClass)([args.element], UTILMASK);
    var inputEle = {
      element: args.element,
      mask: args.mask,
      promptMask: '',
      hiddenMask: '',
      escapeMaskValue: '',
      promptChar: args.promptChar ? args.promptChar.length > 1 ? args.promptChar = args.promptChar[0] : args.promptChar : '_',
      value: args.value ? args.value : null,
      regExpCollec: regularExpressions,
      customRegExpCollec: [],
      customCharacters: args.customCharacters,
      undoCollec: [],
      redoCollec: [],
      maskKeyPress: false,
      prevValue: ''
    };
    createMask.call(inputEle);
    return inputEle;
  }
  /**
   * @hidden
   * Gets raw value of the textbox which has been masked through utility method.
   */


  function getVal(args) {
    return strippedValue.call(getUtilMaskEle(args), args.element);
  }
  /**
   * @hidden
   * Gets masked value of the textbox which has been masked through utility method.
   */


  function getMaskedVal(args) {
    return unstrippedValue.call(getUtilMaskEle(args), args.element);
  }

  function getUtilMaskEle(args) {
    var value = '';
    var inputEle;

    if (!(0, _ej2Base.isNullOrUndefined)(args) && args.element.classList.contains(UTILMASK)) {
      inputEle = getMaskInput(args);
    }

    return inputEle;
  }
  /**
   * @hidden
   * Arguments to perform undo and redo functionalities.
   */


  var MaskUndo =
  /** @class */
  function () {
    function MaskUndo() {}

    return MaskUndo;
  }();

  _exports.MaskUndo = MaskUndo;
  var maskUndo = new MaskUndo();
});;
define('@syncfusion/ej2-inputs/src/maskedtextbox/index',["exports", "./base/index", "./maskedtextbox/index"], function (_exports, _index, _index2) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
});;
define('@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/index',["exports", "./maskedtextbox"], function (_exports, _maskedtextbox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_maskedtextbox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _maskedtextbox[key];
  });
});;
define('@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox',["exports", "@syncfusion/ej2-base", "../../input/input", "../base/index", "../base/mask-base"], function (_exports, _ej2Base, _input, _index, _maskBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.MaskedTextBox = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ROOT = 'e-control-wrapper e-mask';
  var INPUT = 'e-input';
  var COMPONENT = 'e-maskedtextbox';
  var CONTROL = 'e-control';
  var MASKINPUT_FOCUS = 'e-input-focus';
  var wrapperAttr = ['title', 'style', 'class'];
  /**
   * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.
   * ```html
   * <input id="mask" type="text" />
   * ```
   * ```typescript
   * <script>
   * var maskObj = new MaskedTextBox({ mask: "(999) 9999-999" });
   * maskObj.appendTo('#mask');
   * </script>
   * ```
   */

  var MaskedTextBox =
  /** @class */
  function (_super) {
    __extends(MaskedTextBox, _super);

    function MaskedTextBox(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.initInputValue = '';
      _this.maskOptions = options;
      return _this;
    }
    /**
     * Gets the component name
     * @private
     */


    MaskedTextBox.prototype.getModuleName = function () {
      return 'maskedtextbox';
    };
    /**
     * Initializes the event handler
     * @private
     */


    MaskedTextBox.prototype.preRender = function () {
      this.promptMask = '';
      this.hiddenMask = '';
      this.escapeMaskValue = '';
      this.regExpCollec = _index.regularExpressions;
      this.customRegExpCollec = [];
      this.undoCollec = [];
      this.redoCollec = [];
      this.changeEventArgs = {};
      this.focusEventArgs = {};
      this.blurEventArgs = {};
      this.maskKeyPress = false;
      this.isFocus = false;
      this.isInitial = false;
      this.isIosInvalid = false;
      var ejInstance = (0, _ej2Base.getValue)('ej2_instances', this.element);
      this.cloneElement = this.element.cloneNode(true);
      (0, _ej2Base.removeClass)([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);
      this.angularTagName = null;
      this.formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {
        this.angularTagName = this.element.tagName;
        var input = this.createElement('input');

        for (var i = 0; i < this.element.attributes.length; i++) {
          input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
          input.innerHTML = this.element.innerHTML;
        }

        if (this.element.hasAttribute('id')) {
          this.element.removeAttribute('id');
        }

        this.element.classList.remove('e-control', 'e-maskedtextbox');
        this.element.classList.add('e-mask-container');
        this.element.appendChild(input);
        this.element = input;
        (0, _ej2Base.setValue)('ej2_instances', ejInstance, this.element);
      }

      this.updateHTMLAttrToElement();
      this.checkHtmlAttributes(false);

      if (this.formElement) {
        this.initInputValue = this.value;
      }
    };
    /**
     * Gets the properties to be maintained in the persisted state.
     * @return {string}
     */


    MaskedTextBox.prototype.getPersistData = function () {
      var keyEntity = ['value'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Initializes the component rendering.
     * @private
     */


    MaskedTextBox.prototype.render = function () {
      if (this.element.tagName.toLowerCase() === 'input') {
        if (this.floatLabelType === 'Never') {
          (0, _ej2Base.addClass)([this.element], INPUT);
        }

        this.createWrapper();
        this.updateHTMLAttrToWrapper();

        if (this.element.name === '') {
          this.element.setAttribute('name', this.element.id);
        }

        this.isInitial = true;
        this.resetMaskedTextBox();
        this.isInitial = false;
        this.setMaskPlaceholder(true, false);
        this.setWidth(this.width);
        this.preEleVal = this.element.value;

        if (!_ej2Base.Browser.isDevice && (_ej2Base.Browser.info.version === '11.0' || _ej2Base.Browser.info.name === 'edge')) {
          this.element.blur();
        }

        if (this.element.getAttribute('value') || this.value) {
          this.element.setAttribute('value', this.element.value);
        }

        this.renderComplete();
      }
    };

    MaskedTextBox.prototype.updateHTMLAttrToElement = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];

          if (wrapperAttr.indexOf(key) < 0) {
            this.element.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };

    MaskedTextBox.prototype.updateHTMLAttrToWrapper = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];

          if (wrapperAttr.indexOf(key) > -1) {
            if (key === 'class') {
              (0, _ej2Base.addClass)([this.inputObj.container], this.htmlAttributes[key].split(' '));
            } else if (key === 'style') {
              var maskStyle = this.inputObj.container.getAttribute(key);
              maskStyle = !(0, _ej2Base.isNullOrUndefined)(maskStyle) ? maskStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.inputObj.container.setAttribute(key, maskStyle);
            } else {
              this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };

    MaskedTextBox.prototype.resetMaskedTextBox = function () {
      this.promptMask = '';
      this.hiddenMask = '';
      this.escapeMaskValue = '';
      this.customRegExpCollec = [];
      this.undoCollec = [];
      this.redoCollec = [];

      if (this.promptChar.length > 1) {
        this.promptChar = this.promptChar[0];
      }

      _index.createMask.call(this);

      _index.applyMask.call(this);

      if (this.mask === null || this.mask === '' && this.value !== undefined) {
        _index.setElementValue.call(this, this.value);
      }

      var val = _index.strippedValue.call(this, this.element);

      this.prevValue = val;
      this.value = val;

      if (!this.isInitial) {
        _index.unwireEvents.call(this);
      }

      _index.wireEvents.call(this);
    };

    MaskedTextBox.prototype.setMaskPlaceholder = function (setVal, dynamicPlaceholder) {
      if (dynamicPlaceholder || this.placeholder) {
        _input.Input.setPlaceholder(this.placeholder, this.element);

        if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always') {
          _index.setElementValue.call(this, '');
        }

        if (this.floatLabelType === 'Never') {
          _maskBase.maskInputBlurHandler.call(this);
        }
      }
    };

    MaskedTextBox.prototype.setWidth = function (width) {
      if (!(0, _ej2Base.isNullOrUndefined)(width)) {
        if (typeof width === 'number') {
          this.inputObj.container.style.width = (0, _ej2Base.formatUnit)(width);
          this.element.style.width = (0, _ej2Base.formatUnit)(width);
        } else if (typeof width === 'string') {
          var elementWidth = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
          this.inputObj.container.style.width = elementWidth;
          this.element.style.width = elementWidth;
        }
      }
    };

    MaskedTextBox.prototype.checkHtmlAttributes = function (isDynamic) {
      var attributes = isDynamic ? (0, _ej2Base.isNullOrUndefined)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly'];

      for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];

        if (!(0, _ej2Base.isNullOrUndefined)(this.element.getAttribute(key))) {
          switch (key) {
            case 'placeholder':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.maskOptions) || this.maskOptions['placeholder'] === undefined || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }

              break;

            case 'disabled':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.maskOptions) || this.maskOptions['enabled'] === undefined || isDynamic) {
                var enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
                this.setProperties({
                  enabled: enabled
                }, !isDynamic);
              }

              break;

            case 'value':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.maskOptions) || this.maskOptions['value'] === undefined || isDynamic) {
                this.setProperties({
                  value: this.element.value
                }, !isDynamic);
              }

              break;

            case 'readonly':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.maskOptions) || this.maskOptions['readonly'] === undefined || isDynamic) {
                var readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
                this.setProperties({
                  readonly: readonly
                }, !isDynamic);
              }

              break;
          }
        }
      }
    };

    MaskedTextBox.prototype.createWrapper = function () {
      this.inputObj = _input.Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          enableRtl: this.enableRtl,
          cssClass: this.cssClass,
          enabled: this.enabled,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      this.inputObj.container.setAttribute('class', ROOT + ' ' + this.inputObj.container.getAttribute('class'));
    };
    /**
     * Calls internally if any of the property value is changed.
     * @hidden
     */


    MaskedTextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'value':
            _index.setMaskValue.call(this, this.value);

            if (this.placeholder) {
              this.setMaskPlaceholder(false, false);
            }

            break;

          case 'placeholder':
            this.setMaskPlaceholder(true, true);
            break;

          case 'width':
            this.setWidth(newProp.width);
            break;

          case 'cssClass':
            _input.Input.setCssClass(newProp.cssClass, [this.inputObj.container], oldProp.cssClass);

            break;

          case 'enabled':
            _input.Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);

            break;

          case 'readonly':
            _input.Input.setReadonly(newProp.readonly, this.element);

            break;

          case 'enableRtl':
            _input.Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);

            break;

          case 'customCharacters':
            this.customCharacters = newProp.customCharacters;
            this.resetMaskedTextBox();
            break;

          case 'showClearButton':
            _input.Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);

            _index.bindClearEvent.call(this);

            break;

          case 'floatLabelType':
            this.floatLabelType = newProp.floatLabelType;

            _input.Input.removeFloating(this.inputObj);

            _input.Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);

            break;

          case 'htmlAttributes':
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHtmlAttributes(true);
            break;

          case 'mask':
            var strippedValue_1 = this.value;
            this.mask = newProp.mask;
            this.updateValue(strippedValue_1);
            break;

          case 'promptChar':
            if (newProp.promptChar.length > 1) {
              newProp.promptChar = newProp.promptChar[0];
            }

            if (newProp.promptChar) {
              this.promptChar = newProp.promptChar;
            } else {
              this.promptChar = '_';
            }

            var value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);

            if (this.promptMask === this.element.value) {
              value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
            }

            this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);
            this.undoCollec = this.redoCollec = [];

            _index.setElementValue.call(this, value);

            break;
        }
      }
    };

    MaskedTextBox.prototype.updateValue = function (strippedVal) {
      this.resetMaskedTextBox();

      _index.setMaskValue.call(this, strippedVal);
    };
    /**
     * Gets the value of the MaskedTextBox with the masked format.
     * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.
     * @return {string}
     */


    MaskedTextBox.prototype.getMaskedValue = function () {
      return _index.unstrippedValue.call(this, this.element);
    };
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */


    MaskedTextBox.prototype.focusIn = function () {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        (0, _ej2Base.addClass)([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */


    MaskedTextBox.prototype.focusOut = function () {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        (0, _ej2Base.removeClass)([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     * @method destroy
     * @return {void}
     */


    MaskedTextBox.prototype.destroy = function () {
      _index.unwireEvents.call(this);

      var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-valuenow', 'aria-invalid'];

      for (var i = 0; i < attrArray.length; i++) {
        this.element.removeAttribute(attrArray[i]);
      }

      this.element.classList.remove('e-input');
      this.inputObj.container.insertAdjacentElement('afterend', this.element);
      (0, _ej2Base.detach)(this.inputObj.container);

      _super.prototype.destroy.call(this);
    };

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "placeholder", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], MaskedTextBox.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)({})], MaskedTextBox.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(true)], MaskedTextBox.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MaskedTextBox.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MaskedTextBox.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MaskedTextBox.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "mask", void 0);

    __decorate([(0, _ej2Base.Property)('_')], MaskedTextBox.prototype, "promptChar", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MaskedTextBox.prototype, "customCharacters", void 0);

    __decorate([(0, _ej2Base.Event)()], MaskedTextBox.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], MaskedTextBox.prototype, "destroyed", void 0);

    __decorate([(0, _ej2Base.Event)()], MaskedTextBox.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], MaskedTextBox.prototype, "focus", void 0);

    __decorate([(0, _ej2Base.Event)()], MaskedTextBox.prototype, "blur", void 0);

    MaskedTextBox = __decorate([_ej2Base.NotifyPropertyChanges], MaskedTextBox);
    return MaskedTextBox;
  }(_ej2Base.Component);

  _exports.MaskedTextBox = MaskedTextBox;
});;
define('@syncfusion/ej2-inputs/src/numerictextbox/index',["exports", "./numerictextbox"], function (_exports, _numerictextbox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_numerictextbox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _numerictextbox[key];
  });
});;
define('@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox',["exports", "@syncfusion/ej2-base", "../input/input"], function (_exports, _ej2Base, _input) {
  "use strict";

  _exports.__esModule = true;
  _exports.NumericTextBox = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ROOT = 'e-control-wrapper e-numeric';
  var SPINICON = 'e-input-group-icon';
  var SPINUP = 'e-spin-up';
  var SPINDOWN = 'e-spin-down';
  var ERROR = 'e-error';
  var INCREMENT = 'increment';
  var DECREMENT = 'decrement';
  var INTREGEXP = new RegExp('^(-)?(\\d*)$');
  var DECIMALSEPARATOR = '.';
  var COMPONENT = 'e-numerictextbox';
  var CONTROL = 'e-control';
  var NUMERIC_FOCUS = 'e-input-focus';
  var HIDDENELEMENT = 'e-numeric-hidden';
  var wrapperAttributes = ['title', 'style', 'class'];
  /**
   * Represents the NumericTextBox component that allows the user to enter only numeric values.
   * ```html
   * <input type='text' id="numeric"/>
   * ```
   * ```typescript
   * <script>
   *   var numericObj = new NumericTextBox({ value: 10 });
   *   numericObj.appendTo("#numeric");
   * </script>
   * ```
   */

  var NumericTextBox =
  /** @class */
  function (_super) {
    __extends(NumericTextBox, _super);

    function NumericTextBox(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.numericOptions = options;
      return _this;
    }

    NumericTextBox.prototype.preRender = function () {
      this.isPrevFocused = false;
      this.decimalSeparator = '.';
      this.intRegExp = new RegExp('/^(-)?(\d*)$/');
      this.isCalled = false;
      var ejInstance = (0, _ej2Base.getValue)('ej2_instances', this.element);
      this.cloneElement = this.element.cloneNode(true);
      (0, _ej2Base.removeClass)([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);
      this.angularTagName = null;
      this.formEle = (0, _ej2Base.closest)(this.element, 'form');

      if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
        this.angularTagName = this.element.tagName;
        var input = this.createElement('input');
        var index = 0;

        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;

          if (attributeName !== 'id') {
            input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
            input.innerHTML = this.element.innerHTML;
          }
        }

        if (this.element.hasAttribute('name')) {
          this.element.removeAttribute('name');
        }

        this.element.classList.remove('e-control', 'e-numerictextbox');
        this.element.appendChild(input);
        this.element = input;
        (0, _ej2Base.setValue)('ej2_instances', ejInstance, this.element);
      }

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        (0, _ej2Base.attributes)(this.element, {
          'role': 'spinbutton',
          'tabindex': '0',
          'autocomplete': 'off',
          'aria-live': 'assertive'
        });
        var localeText = {
          incrementTitle: 'Increment value',
          decrementTitle: 'Decrement value',
          placeholder: this.placeholder
        };
        this.l10n = new _ej2Base.L10n('numerictextbox', localeText, this.locale);

        if (this.l10n.getConstant('placeholder') !== '') {
          this.setProperties({
            placeholder: this.placeholder || this.l10n.getConstant('placeholder')
          }, true);
        }
      }

      this.isValidState = true;
      this.inputStyle = null;
      this.inputName = null;
      this.cultureInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.prevValue = this.value;

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        this.updateHTMLAttrToElement();
        this.checkAttributes(false);

        if (this.formEle) {
          this.inputEleValue = this.value;
        }
      }

      this.validateMinMax();
      this.validateStep();

      if (this.placeholder === null && !((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        this.updatePlaceholder();
      }
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    NumericTextBox.prototype.render = function () {
      if (this.element.tagName.toLowerCase() === 'input') {
        if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
          this.createWrapper();

          if (this.showSpinButton) {
            this.spinBtnCreation();
          }

          this.setElementWidth(this.width);

          if (!this.container.classList.contains('e-input-group')) {
            this.container.classList.add('e-input-group');
          }

          this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
        } else {
          this.container = this.element.parentElement;
          this.inputWrapper = {
            container: this.container
          };
          this.hiddenInput = this.container.querySelector('input[type="hidden"]');

          if (this.showClearButton) {
            this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');

            _input.Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);
          }

          if (this.showSpinButton) {
            this.spinDown = this.container.querySelector('.' + SPINDOWN);
            this.spinUp = this.container.querySelector('.' + SPINUP);
            this.wireSpinBtnEvents();
          }

          _input.Input.bindInitialEvent({
            element: this.element,
            buttons: null,
            customTag: null,
            floatLabelType: this.floatLabelType,
            properties: this.properties
          });
        }

        this.wireEvents();

        if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
          if (this.value !== null && !isNaN(this.value)) {
            if (this.decimals) {
              this.setProperties({
                value: this.roundNumber(this.value, this.decimals)
              }, true);
            }
          }

          if (this.element.getAttribute('value') || this.value) {
            this.element.setAttribute('value', this.element.value);
          }
        }

        this.renderComplete();
      }
    };

    NumericTextBox.prototype.checkAttributes = function (isDynamic) {
      var attributes = isDynamic ? (0, _ej2Base.isNullOrUndefined)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];

      for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];

        if (!(0, _ej2Base.isNullOrUndefined)(this.element.getAttribute(prop))) {
          switch (prop) {
            case 'disabled':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['enabled'] === undefined || isDynamic) {
                var enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
                this.setProperties({
                  enabled: enabled
                }, !isDynamic);
              }

              break;

            case 'readonly':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['readonly'] === undefined || isDynamic) {
                var readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
                this.setProperties({
                  readonly: readonly
                }, !isDynamic);
              }

              break;

            case 'placeholder':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['placeholder'] === undefined || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }

              break;

            case 'value':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['value'] === undefined || isDynamic) {
                var setNumber = this.instance.getNumberParser({
                  format: 'n'
                })(this.element.getAttribute(prop));
                this.setProperties((0, _ej2Base.setValue)(prop, setNumber, {}), !isDynamic);
              }

              break;

            case 'min':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['min'] === undefined || isDynamic) {
                var minValue = this.instance.getNumberParser({
                  format: 'n'
                })(this.element.getAttribute(prop));

                if (minValue !== null && !isNaN(minValue)) {
                  this.setProperties((0, _ej2Base.setValue)(prop, minValue, {}), !isDynamic);
                }
              }

              break;

            case 'max':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['max'] === undefined || isDynamic) {
                var maxValue = this.instance.getNumberParser({
                  format: 'n'
                })(this.element.getAttribute(prop));

                if (maxValue !== null && !isNaN(maxValue)) {
                  this.setProperties((0, _ej2Base.setValue)(prop, maxValue, {}), !isDynamic);
                }
              }

              break;

            case 'step':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.numericOptions) || this.numericOptions['step'] === undefined || isDynamic) {
                var stepValue = this.instance.getNumberParser({
                  format: 'n'
                })(this.element.getAttribute(prop));

                if (stepValue !== null && !isNaN(stepValue)) {
                  this.setProperties((0, _ej2Base.setValue)(prop, stepValue, {}), !isDynamic);
                }
              }

              break;

            case 'style':
              this.inputStyle = this.element.getAttribute(prop);
              break;

            case 'name':
              this.inputName = this.element.getAttribute(prop);
              break;

            default:
              var value = this.instance.getNumberParser({
                format: 'n'
              })(this.element.getAttribute(prop));

              if (value !== null && !isNaN(value) || prop === 'value') {
                this.setProperties((0, _ej2Base.setValue)(prop, value, {}), true);
              }

              break;
          }
        }
      }
    };

    NumericTextBox.prototype.updatePlaceholder = function () {
      this.setProperties({
        placeholder: this.l10n.getConstant('placeholder')
      }, true);
    };

    NumericTextBox.prototype.initCultureFunc = function () {
      this.instance = new _ej2Base.Internationalization(this.locale);
    };

    NumericTextBox.prototype.initCultureInfo = function () {
      this.cultureInfo.format = this.format;

      if ((0, _ej2Base.getValue)('currency', this) !== null) {
        (0, _ej2Base.setValue)('currency', this.currency, this.cultureInfo);
        this.setProperties({
          currencyCode: this.currency
        }, true);
      }
    };
    /* Wrapper creation */


    NumericTextBox.prototype.createWrapper = function () {
      var inputObj = _input.Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: this.cssClass,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton,
          enabled: this.enabled
        }
      }, this.createElement);

      this.inputWrapper = inputObj;
      this.container = inputObj.container;
      this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));
      this.updateHTMLAttrToWrapper();

      if (this.readonly) {
        (0, _ej2Base.attributes)(this.element, {
          'aria-readonly': 'true'
        });
      }

      this.hiddenInput = this.createElement('input', {
        attrs: {
          type: 'text',
          'validateHidden': 'true',
          'class': HIDDENELEMENT
        }
      });
      this.inputName = this.inputName !== null ? this.inputName : this.element.id;
      this.element.removeAttribute('name');
      (0, _ej2Base.attributes)(this.hiddenInput, {
        'name': this.inputName
      });
      this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
      this.updateDataAttribute(false);

      if (this.inputStyle !== null) {
        (0, _ej2Base.attributes)(this.container, {
          'style': this.inputStyle
        });
      }
    };

    NumericTextBox.prototype.updateDataAttribute = function (isDynamic) {
      var attr = {};

      if (!isDynamic) {
        for (var a = 0; a < this.element.attributes.length; a++) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      } else {
        attr = this.htmlAttributes;
      }

      for (var _i = 0, _a = Object.keys(attr); _i < _a.length; _i++) {
        var key = _a[_i];

        if (key.indexOf('data') === 0) {
          this.hiddenInput.setAttribute(key, attr[key]);
        }
      }
    };

    NumericTextBox.prototype.updateHTMLAttrToElement = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];

          if (wrapperAttributes.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes[pro]);
          }
        }
      }
    };

    NumericTextBox.prototype.updateHTMLAttrToWrapper = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];

          if (wrapperAttributes.indexOf(pro) > -1) {
            if (pro === 'class') {
              (0, _ej2Base.addClass)([this.container], this.htmlAttributes[pro].split(' '));
            } else if (pro === 'style') {
              var numericStyle = this.container.getAttribute(pro);
              numericStyle = !(0, _ej2Base.isNullOrUndefined)(numericStyle) ? numericStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
              this.container.setAttribute(pro, numericStyle);
            } else {
              this.container.setAttribute(pro, this.htmlAttributes[pro]);
            }
          }
        }
      }
    };

    NumericTextBox.prototype.setElementWidth = function (width) {
      if (!(0, _ej2Base.isNullOrUndefined)(width)) {
        if (typeof width === 'number') {
          this.container.style.width = (0, _ej2Base.formatUnit)(width);
        } else if (typeof width === 'string') {
          this.container.style.width = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
        }
      }
    };
    /* Spinner creation */


    NumericTextBox.prototype.spinBtnCreation = function () {
      this.spinDown = _input.Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);
      (0, _ej2Base.attributes)(this.spinDown, {
        'title': this.l10n.getConstant('decrementTitle'),
        'aria-label': this.l10n.getConstant('decrementTitle')
      });
      this.spinUp = _input.Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);
      (0, _ej2Base.attributes)(this.spinUp, {
        'title': this.l10n.getConstant('incrementTitle'),
        'aria-label': this.l10n.getConstant('incrementTitle')
      });
      this.wireSpinBtnEvents();
    };

    NumericTextBox.prototype.validateMinMax = function () {
      if (!(typeof this.min === 'number' && !isNaN(this.min))) {
        this.setProperties({
          min: -Number.MAX_VALUE
        }, true);
      }

      if (!(typeof this.max === 'number' && !isNaN(this.max))) {
        this.setProperties({
          max: Number.MAX_VALUE
        }, true);
      }

      if (this.decimals !== null) {
        if (this.min !== -Number.MAX_VALUE) {
          this.setProperties({
            min: this.instance.getNumberParser({
              format: 'n'
            })(this.formattedValue(this.decimals, this.min))
          }, true);
        }

        if (this.max !== Number.MAX_VALUE) {
          this.setProperties({
            max: this.instance.getNumberParser({
              format: 'n'
            })(this.formattedValue(this.decimals, this.max))
          }, true);
        }
      }

      this.setProperties({
        min: this.min > this.max ? this.max : this.min
      }, true);
      (0, _ej2Base.attributes)(this.element, {
        'aria-valuemin': this.min.toString(),
        'aria-valuemax': this.max.toString()
      });
    };

    NumericTextBox.prototype.formattedValue = function (decimals, value) {
      return this.instance.getNumberFormat({
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals,
        useGrouping: false
      })(value);
    };

    NumericTextBox.prototype.validateStep = function () {
      if (this.decimals !== null) {
        this.setProperties({
          step: this.instance.getNumberParser({
            format: 'n'
          })(this.formattedValue(this.decimals, this.step))
        }, true);
      }
    };

    NumericTextBox.prototype.action = function (operation, event) {
      this.isInteract = true;
      var value = this.isFocused ? this.instance.getNumberParser({
        format: 'n'
      })(this.element.value) : this.value;
      this.changeValue(this.performAction(value, this.step, operation));
      this.raiseChangeEvent(event);
    };

    NumericTextBox.prototype.checkErrorClass = function () {
      if (this.isValidState) {
        (0, _ej2Base.removeClass)([this.container], ERROR);
      } else {
        (0, _ej2Base.addClass)([this.container], ERROR);
      }

      (0, _ej2Base.attributes)(this.element, {
        'aria-invalid': this.isValidState ? 'false' : 'true'
      });
    };

    NumericTextBox.prototype.bindClearEvent = function () {
      if (this.showClearButton) {
        _ej2Base.EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
      }
    };

    NumericTextBox.prototype.resetHandler = function (e) {
      e.preventDefault();

      if (!this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide')) {
        this.clear(e);
      }

      this.isInteract = true;
      this.raiseChangeEvent(e);
    };

    NumericTextBox.prototype.clear = function (event) {
      this.setProperties({
        value: null
      }, true);
      this.setElementValue('');
      this.hiddenInput.value = '';
      var formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (formElement) {
        var element = this.element.nextElementSibling;
        var keyupEvent = document.createEvent('KeyboardEvent');
        keyupEvent.initEvent('keyup', false, true);
        element.dispatchEvent(keyupEvent);
      }
    };

    NumericTextBox.prototype.resetFormHandler = function () {
      if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
        this.updateValue(null);
      } else {
        this.updateValue(this.inputEleValue);
      }
    };

    NumericTextBox.prototype.setSpinButton = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.spinDown)) {
        (0, _ej2Base.attributes)(this.spinDown, {
          'title': this.l10n.getConstant('decrementTitle'),
          'aria-label': this.l10n.getConstant('decrementTitle')
        });
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.spinUp)) {
        (0, _ej2Base.attributes)(this.spinUp, {
          'title': this.l10n.getConstant('incrementTitle'),
          'aria-label': this.l10n.getConstant('incrementTitle')
        });
      }
    };

    NumericTextBox.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'focus', this.focusHandler, this);

      _ej2Base.EventHandler.add(this.element, 'blur', this.focusOutHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);

      _ej2Base.EventHandler.add(this.element, 'input', this.inputHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keypress', this.keyPressHandler, this);

      _ej2Base.EventHandler.add(this.element, 'change', this.changeHandler, this);

      _ej2Base.EventHandler.add(this.element, 'paste', this.pasteHandler, this);

      if (this.enabled) {
        this.bindClearEvent();

        if (this.formEle) {
          _ej2Base.EventHandler.add(this.formEle, 'reset', this.resetFormHandler, this);
        }
      }
    };

    NumericTextBox.prototype.wireSpinBtnEvents = function () {
      /* bind spin button events */
      _ej2Base.EventHandler.add(this.spinUp, _ej2Base.Browser.touchStartEvent, this.mouseDownOnSpinner, this);

      _ej2Base.EventHandler.add(this.spinDown, _ej2Base.Browser.touchStartEvent, this.mouseDownOnSpinner, this);

      _ej2Base.EventHandler.add(this.spinUp, _ej2Base.Browser.touchEndEvent, this.mouseUpOnSpinner, this);

      _ej2Base.EventHandler.add(this.spinDown, _ej2Base.Browser.touchEndEvent, this.mouseUpOnSpinner, this);

      _ej2Base.EventHandler.add(this.spinUp, _ej2Base.Browser.touchMoveEvent, this.touchMoveOnSpinner, this);

      _ej2Base.EventHandler.add(this.spinDown, _ej2Base.Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
    };

    NumericTextBox.prototype.unwireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'focus', this.focusHandler);

      _ej2Base.EventHandler.remove(this.element, 'blur', this.focusOutHandler);

      _ej2Base.EventHandler.remove(this.element, 'keyup', this.keyUpHandler);

      _ej2Base.EventHandler.remove(this.element, 'input', this.inputHandler);

      _ej2Base.EventHandler.remove(this.element, 'keydown', this.keyDownHandler);

      _ej2Base.EventHandler.remove(this.element, 'keypress', this.keyPressHandler);

      _ej2Base.EventHandler.remove(this.element, 'change', this.changeHandler);

      _ej2Base.EventHandler.remove(this.element, 'paste', this.pasteHandler);

      if (this.formEle) {
        _ej2Base.EventHandler.remove(this.formEle, 'reset', this.resetFormHandler);
      }
    };

    NumericTextBox.prototype.unwireSpinBtnEvents = function () {
      /* unbind spin button events */
      _ej2Base.EventHandler.remove(this.spinUp, _ej2Base.Browser.touchStartEvent, this.mouseDownOnSpinner);

      _ej2Base.EventHandler.remove(this.spinDown, _ej2Base.Browser.touchStartEvent, this.mouseDownOnSpinner);

      _ej2Base.EventHandler.remove(this.spinUp, _ej2Base.Browser.touchEndEvent, this.mouseUpOnSpinner);

      _ej2Base.EventHandler.remove(this.spinDown, _ej2Base.Browser.touchEndEvent, this.mouseUpOnSpinner);

      _ej2Base.EventHandler.remove(this.spinUp, _ej2Base.Browser.touchMoveEvent, this.touchMoveOnSpinner);

      _ej2Base.EventHandler.remove(this.spinDown, _ej2Base.Browser.touchMoveEvent, this.touchMoveOnSpinner);
    };

    NumericTextBox.prototype.changeHandler = function (event) {
      event.stopPropagation();

      if (!this.element.value.length) {
        this.setProperties({
          value: null
        }, true);
      }

      var parsedInput = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      this.updateValue(parsedInput, event);
    };

    NumericTextBox.prototype.raiseChangeEvent = function (event) {
      if (this.prevValue !== this.value) {
        var eventArgs = {};
        this.changeEventArgs = {
          value: this.value,
          previousValue: this.prevValue,
          isInteracted: this.isInteract,
          isInteraction: this.isInteract,
          event: event
        };

        if (event) {
          this.changeEventArgs.event = event;
        }

        if (this.changeEventArgs.event === undefined) {
          this.changeEventArgs.isInteracted = false;
          this.changeEventArgs.isInteraction = false;
        }

        (0, _ej2Base.merge)(eventArgs, this.changeEventArgs);
        this.prevValue = this.value;
        this.isInteract = false;
        this.trigger('change', eventArgs);
      }
    };

    NumericTextBox.prototype.pasteHandler = function () {
      var _this = this;

      if (!this.enabled || this.readonly) {
        return;
      }

      var beforeUpdate = this.element.value;
      setTimeout(function () {
        if (!_this.numericRegex().test(_this.element.value)) {
          _this.setElementValue(beforeUpdate);
        }
      });
    };

    NumericTextBox.prototype.preventHandler = function () {
      var _this = this;

      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      setTimeout(function () {
        if (_this.element.selectionStart > 0) {
          var currentPos = _this.element.selectionStart;
          var prevPos = _this.element.selectionStart - 1;
          var start = 0;
          var ignoreKeyCode = void 0;

          var valArray = _this.element.value.split('');

          var numericObject = (0, _ej2Base.getNumericObject)(_this.locale);
          var decimalSeparator = (0, _ej2Base.getValue)('decimal', numericObject);
          ignoreKeyCode = decimalSeparator.charCodeAt(0);

          if (_this.element.value[prevPos] === ' ' && _this.element.selectionStart > 0 && !iOS) {
            if ((0, _ej2Base.isNullOrUndefined)(_this.prevVal)) {
              _this.element.value = _this.element.value.trim();
            } else if (prevPos !== 0) {
              _this.element.value = _this.prevVal;
            } else if (prevPos === 0) {
              _this.element.value = _this.element.value.trim();
            }

            _this.element.setSelectionRange(prevPos, prevPos);
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);

              _this.element.setSelectionRange(prevPos, prevPos);

              if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length) {
                _this.preventHandler();
              }
            }
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.setSelectionRange(prevPos, prevPos);

              _this.nextEle = _this.element.value[_this.element.selectionStart];
              _this.cursorPosChanged = true;

              _this.preventHandler();
            }
          }

          if (_this.cursorPosChanged === true && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1]))) {
            _this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1);

            _this.cursorPosChanged = false;
            _this.nextEle = null;
          }

          if (_this.element.value.trim() === '') {
            _this.element.setSelectionRange(start, start);
          }

          if (_this.element.selectionStart > 0) {
            if (_this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === 45 && _this.element.selectionStart > 1) {
              if ((0, _ej2Base.isNullOrUndefined)(_this.prevVal)) {
                _this.element.value = _this.element.value;
              } else {
                _this.element.value = _this.prevVal;
              }

              _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart);
            }
          }

          _this.prevVal = _this.element.value;
        }
      });
    };

    NumericTextBox.prototype.keyUpHandler = function (event) {
      if (!this.enabled || this.readonly) {
        return;
      }

      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

      if (!iOS && _ej2Base.Browser.isDevice) {
        this.preventHandler();
      }

      var parseValue = this.instance.getNumberParser({
        format: 'n'
      })(this.element.value);
      parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;
      this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;
      var formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (formElement) {
        var element = this.element.nextElementSibling;
        var keyupEvent = document.createEvent('KeyboardEvent');
        keyupEvent.initEvent('keyup', false, true);
        element.dispatchEvent(keyupEvent);
      }
    };

    ;

    NumericTextBox.prototype.inputHandler = function (event) {
      if (!this.enabled || this.readonly) {
        return;
      }

      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      var fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

      if ((fireFox || iOS) && _ej2Base.Browser.isDevice) {
        this.preventHandler();
      }
    };

    ;

    NumericTextBox.prototype.keyDownHandler = function (event) {
      if (!this.readonly) {
        switch (event.keyCode) {
          case 38:
            event.preventDefault();
            this.action(INCREMENT, event);
            break;

          case 40:
            event.preventDefault();
            this.action(DECREMENT, event);
            break;

          default:
            break;
        }
      }
    };

    ;

    NumericTextBox.prototype.performAction = function (value, step, operation) {
      if (value === null || isNaN(value)) {
        value = 0;
      }

      var updatedValue = operation === INCREMENT ? value + step : value - step;
      updatedValue = this.correctRounding(value, step, updatedValue);
      return this.strictMode ? this.trimValue(updatedValue) : updatedValue;
    };

    ;

    NumericTextBox.prototype.correctRounding = function (value, step, result) {
      var floatExp = new RegExp('[,.](.*)');
      var valueText = value.toString();
      var stepText = step.toString();
      var floatValue = floatExp.test(value.toString());
      var floatStep = floatExp.test(step.toString());

      if (floatValue || floatStep) {
        var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;
        var stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;
        var max = Math.max(valueCount, stepCount);
        return value = this.roundValue(result, max);
      }

      return result;
    };

    ;

    NumericTextBox.prototype.roundValue = function (result, precision) {
      precision = precision || 0;
      var divide = Math.pow(10, precision);
      return result *= divide, result = Math.round(result) / divide;
    };

    ;

    NumericTextBox.prototype.updateValue = function (value, event) {
      if (event) {
        this.isInteract = true;
      }

      if (value !== null && !isNaN(value)) {
        if (this.decimals) {
          value = this.roundNumber(value, this.decimals);
        }
      }

      this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);
      this.raiseChangeEvent(event);
    };

    NumericTextBox.prototype.updateCurrency = function (prop, propVal) {
      (0, _ej2Base.setValue)(prop, propVal, this.cultureInfo);
      this.updateValue(this.value);
    };

    NumericTextBox.prototype.changeValue = function (value) {
      if (!(value || value === 0)) {
        value = null;
        this.setProperties({
          value: value
        }, true);
      } else {
        var numberOfDecimals = void 0;
        numberOfDecimals = this.getNumberOfDecimals(value);
        this.setProperties({
          value: this.roundNumber(value, numberOfDecimals)
        }, true);
      }

      this.modifyText();

      if (!this.strictMode) {
        this.validateState();
      }
    };

    ;

    NumericTextBox.prototype.modifyText = function () {
      if (this.value || this.value === 0) {
        var value = this.formatNumber();
        var elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
        this.setElementValue(elementValue);
        (0, _ej2Base.attributes)(this.element, {
          'aria-valuenow': value
        });
        this.hiddenInput.value = this.value.toString();
      } else {
        this.setElementValue('');
        this.element.removeAttribute('aria-valuenow');
        this.hiddenInput.value = null;
      }
    };

    ;

    NumericTextBox.prototype.setElementValue = function (val, element) {
      _input.Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);
    };

    NumericTextBox.prototype.validateState = function () {
      this.isValidState = true;

      if (this.value || this.value === 0) {
        this.isValidState = !(this.value > this.max || this.value < this.min);
      }

      this.checkErrorClass();
    };

    NumericTextBox.prototype.getNumberOfDecimals = function (value) {
      var numberOfDecimals;
      var EXPREGEXP = new RegExp('[eE][\-+]?([0-9]+)');
      var valueString = value.toString();

      if (EXPREGEXP.test(valueString)) {
        var result = EXPREGEXP.exec(valueString);

        if (!(0, _ej2Base.isNullOrUndefined)(result)) {
          valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));
        }
      }

      var decimalPart = valueString.split('.')[1];
      numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;

      if (this.decimals !== null) {
        numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;
      }

      return numberOfDecimals;
    };

    NumericTextBox.prototype.formatNumber = function () {
      var numberOfDecimals;
      numberOfDecimals = this.getNumberOfDecimals(this.value);
      return this.instance.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(this.value);
    };

    ;

    NumericTextBox.prototype.trimValue = function (value) {
      if (value > this.max) {
        return this.max;
      }

      if (value < this.min) {
        return this.min;
      }

      return value;
    };

    ;

    NumericTextBox.prototype.roundNumber = function (value, precision) {
      var result = value;
      var decimals = precision || 0;
      var result1 = result.toString().split('e');
      result = Math.round(Number(result1[0] + 'e' + (result1[1] ? Number(result1[1]) + decimals : decimals)));
      var result2 = result.toString().split('e');
      result = Number(result2[0] + 'e' + (result2[1] ? Number(result2[1]) - decimals : -decimals));
      return Number(result.toFixed(decimals));
    };

    ;

    NumericTextBox.prototype.cancelEvent = function (event) {
      event.preventDefault();
      return false;
    };

    NumericTextBox.prototype.keyPressHandler = function (event) {
      if (!this.enabled || this.readonly) {
        return true;
      }

      if (!_ej2Base.Browser.isDevice && _ej2Base.Browser.info.version === '11.0' && event.keyCode === 13) {
        var parsedInput = this.instance.getNumberParser({
          format: 'n'
        })(this.element.value);
        this.updateValue(parsedInput, event);
        return true;
      }

      if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {
        return true;
      }

      var currentChar = String.fromCharCode(event.which);
      var text = this.element.value;
      text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);

      if (!this.numericRegex().test(text)) {
        event.preventDefault();
        event.stopPropagation();
        return false;
      } else {
        return true;
      }
    };

    ;

    NumericTextBox.prototype.numericRegex = function () {
      var numericObject = (0, _ej2Base.getNumericObject)(this.locale);
      var decimalSeparator = (0, _ej2Base.getValue)('decimal', numericObject);
      var fractionRule = '*';

      if (decimalSeparator === DECIMALSEPARATOR) {
        decimalSeparator = '\\' + decimalSeparator;
      }

      if (this.decimals === 0 && this.validateDecimalOnType) {
        return INTREGEXP;
      }

      if (this.decimals && this.validateDecimalOnType) {
        fractionRule = '{0,' + this.decimals + '}';
      }

      return new RegExp('^(-)?(((\\d+(' + decimalSeparator + '\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\d' + fractionRule + ')))?$');
    };

    ;

    NumericTextBox.prototype.mouseWheel = function (event) {
      event.preventDefault();
      var delta;
      var rawEvent = event;

      if (rawEvent.wheelDelta) {
        delta = rawEvent.wheelDelta / 120;
      } else if (rawEvent.detail) {
        delta = -rawEvent.detail / 3;
      }

      if (delta > 0) {
        this.action(INCREMENT, event);
      } else if (delta < 0) {
        this.action(DECREMENT, event);
      }

      this.cancelEvent(event);
    };

    NumericTextBox.prototype.focusHandler = function (event) {
      var _this = this;

      this.focusEventArgs = {
        event: event,
        value: this.value,
        container: this.container
      };
      this.trigger('focus', this.focusEventArgs);

      if (!this.enabled || this.readonly) {
        return;
      }

      this.isFocused = true;
      (0, _ej2Base.removeClass)([this.container], ERROR);
      this.prevValue = this.value;

      if (this.value || this.value === 0) {
        var formatValue_1 = this.formatNumber();
        this.setElementValue(formatValue_1);

        if (!this.isPrevFocused) {
          if (!_ej2Base.Browser.isDevice && _ej2Base.Browser.info.version === '11.0') {
            this.element.setSelectionRange(0, formatValue_1.length);
          } else {
            var delay = _ej2Base.Browser.isDevice && _ej2Base.Browser.isIos ? 600 : 0;
            setTimeout(function () {
              _this.element.setSelectionRange(0, formatValue_1.length);
            }, delay);
          }
        }
      }

      if (!_ej2Base.Browser.isDevice) {
        _ej2Base.EventHandler.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);
      }
    };

    ;

    NumericTextBox.prototype.focusOutHandler = function (event) {
      var _this = this;

      this.blurEventArgs = {
        event: event,
        value: this.value,
        container: this.container
      };
      this.trigger('blur', this.blurEventArgs);

      if (!this.enabled || this.readonly) {
        return;
      }

      if (this.isPrevFocused) {
        event.preventDefault();

        if (_ej2Base.Browser.isDevice) {
          var value_1 = this.element.value;
          this.element.focus();
          this.isPrevFocused = false;
          var ele_1 = this.element;
          setTimeout(function () {
            _this.setElementValue(value_1, ele_1);
          }, 200);
        }
      } else {
        this.isFocused = false;

        if (!this.element.value.length) {
          this.setProperties({
            value: null
          }, true);
        }

        var parsedInput = this.instance.getNumberParser({
          format: 'n'
        })(this.element.value);
        this.updateValue(parsedInput);

        if (!_ej2Base.Browser.isDevice) {
          _ej2Base.EventHandler.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);
        }
      }

      var formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (formElement) {
        var element = this.element.nextElementSibling;
        var focusEvent = document.createEvent('FocusEvent');
        focusEvent.initEvent('focusout', false, true);
        element.dispatchEvent(focusEvent);
      }
    };

    ;

    NumericTextBox.prototype.mouseDownOnSpinner = function (event) {
      var _this = this;

      if (this.isFocused) {
        this.isPrevFocused = true;
        event.preventDefault();
      }

      if (!this.getElementData(event)) {
        return;
      }

      var result = this.getElementData(event);
      var target = event.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;

      _ej2Base.EventHandler.add(target, 'mouseleave', this.mouseUpClick, this);

      this.timeOut = setInterval(function () {
        _this.isCalled = true;

        _this.action(action, event);
      }, 150);

      _ej2Base.EventHandler.add(document, 'mouseup', this.mouseUpClick, this);
    };

    NumericTextBox.prototype.touchMoveOnSpinner = function (event) {
      var target = document.elementFromPoint(event.clientX, event.clientY);

      if (!target.classList.contains(SPINICON)) {
        clearInterval(this.timeOut);
      }
    };

    NumericTextBox.prototype.mouseUpOnSpinner = function (event) {
      if (this.isPrevFocused) {
        this.element.focus();

        if (!_ej2Base.Browser.isDevice) {
          this.isPrevFocused = false;
        }
      }

      if (!_ej2Base.Browser.isDevice) {
        event.preventDefault();
      }

      if (!this.getElementData(event)) {
        return;
      }

      var target = event.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;

      _ej2Base.EventHandler.remove(target, 'mouseleave', this.mouseUpClick);

      if (!this.isCalled) {
        this.action(action, event);
      }

      this.isCalled = false;

      _ej2Base.EventHandler.remove(document, 'mouseup', this.mouseUpClick);

      var formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (formElement) {
        var element = this.element.nextElementSibling;
        var keyupEvent = document.createEvent('KeyboardEvent');
        keyupEvent.initEvent('keyup', false, true);
        element.dispatchEvent(keyupEvent);
      }
    };

    NumericTextBox.prototype.getElementData = function (event) {
      if (event.which && event.which === 3 || event.button && event.button === 2 || !this.enabled || this.readonly) {
        return false;
      }

      clearInterval(this.timeOut);
      return true;
    };

    NumericTextBox.prototype.floatLabelTypeUpdate = function () {
      _input.Input.removeFloating(this.inputWrapper);

      var hiddenInput = this.hiddenInput;
      this.hiddenInput.remove();

      _input.Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);

      this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
    };

    NumericTextBox.prototype.mouseUpClick = function (event) {
      event.stopPropagation();
      clearInterval(this.timeOut);
      this.isCalled = false;

      _ej2Base.EventHandler.remove(this.spinUp, 'mouseleave', this.mouseUpClick);

      _ej2Base.EventHandler.remove(this.spinDown, 'mouseleave', this.mouseUpClick);
    };
    /**
     * Increments the NumericTextBox value with the specified step value.
     * @param  {number} step - Specifies the value used to increment the NumericTextBox value.
     * if its not given then numeric value will be incremented based on the step property value.
     */


    NumericTextBox.prototype.increment = function (step) {
      if (step === void 0) {
        step = this.step;
      }

      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, INCREMENT));
      this.raiseChangeEvent();
    };
    /**
     * Decrements the NumericTextBox value with specified step value.
     * @param  {number} step - Specifies the value used to decrement the NumericTextBox value.
     * if its not given then numeric value will be decremented based on the step property value.
     */


    NumericTextBox.prototype.decrement = function (step) {
      if (step === void 0) {
        step = this.step;
      }

      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, DECREMENT));
      this.raiseChangeEvent();
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     * @method destroy
     * @return {void}
     */


    NumericTextBox.prototype.destroy = function () {
      this.unwireEvents();

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        (0, _ej2Base.detach)(this.hiddenInput);

        if (this.showSpinButton) {
          this.unwireSpinBtnEvents();
          (0, _ej2Base.detach)(this.spinUp);
          (0, _ej2Base.detach)(this.spinDown);
        }

        var attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin', 'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];

        for (var i = 0; i < attrArray.length; i++) {
          this.element.removeAttribute(attrArray[i]);
        }

        this.element.classList.remove('e-input');
        this.container.insertAdjacentElement('afterend', this.element);
        (0, _ej2Base.detach)(this.container);

        _super.prototype.destroy.call(this);
      }
    };
    /**
     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.
     */


    NumericTextBox.prototype.getText = function () {
      return this.element.value;
    };
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */


    NumericTextBox.prototype.focusIn = function () {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        (0, _ej2Base.addClass)([this.container], [NUMERIC_FOCUS]);
      }
    };
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */


    NumericTextBox.prototype.focusOut = function () {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        (0, _ej2Base.removeClass)([this.container], [NUMERIC_FOCUS]);
      }
    };
    /**
     * Gets the properties to be maintained in the persisted state.
     * @return {string}
     */


    NumericTextBox.prototype.getPersistData = function () {
      var keyEntity = ['value'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */


    NumericTextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      var elementVal;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'width':
            this.setElementWidth(newProp.width);
            break;

          case 'cssClass':
            _input.Input.setCssClass(newProp.cssClass, [this.container], oldProp.cssClass);

            break;

          case 'enabled':
            _input.Input.setEnabled(newProp.enabled, this.element);

            break;

          case 'enableRtl':
            _input.Input.setEnableRtl(newProp.enableRtl, [this.container]);

            break;

          case 'readonly':
            _input.Input.setReadonly(newProp.readonly, this.element);

            if (this.readonly) {
              (0, _ej2Base.attributes)(this.element, {
                'aria-readonly': 'true'
              });
            } else {
              this.element.removeAttribute('aria-readonly');
            }

            break;

          case 'htmlAttributes':
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.updateDataAttribute(true);
            this.checkAttributes(true);
            break;

          case 'placeholder':
            _input.Input.setPlaceholder(newProp.placeholder, this.element);

            break;

          case 'step':
            this.step = newProp.step;
            this.validateStep();
            break;

          case 'showSpinButton':
            if (newProp.showSpinButton) {
              this.spinBtnCreation();
            } else {
              (0, _ej2Base.detach)(this.spinUp);
              (0, _ej2Base.detach)(this.spinDown);
            }

            break;

          case 'showClearButton':
            _input.Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);

            this.bindClearEvent();
            break;

          case 'floatLabelType':
            this.floatLabelType = newProp.floatLabelType;
            this.floatLabelTypeUpdate();
            break;

          case 'value':
            this.updateValue(newProp.value);
            break;

          case 'min':
          case 'max':
            (0, _ej2Base.setValue)(prop, (0, _ej2Base.getValue)(prop, newProp), this);
            this.validateMinMax();
            this.updateValue(this.value);
            break;

          case 'strictMode':
            this.strictMode = newProp.strictMode;
            this.updateValue(this.value);
            this.validateState();
            break;

          case 'locale':
            this.initCultureFunc();
            this.l10n.setLocale(this.locale);
            this.setSpinButton();
            this.updatePlaceholder();

            _input.Input.setPlaceholder(this.placeholder, this.element);

            this.updateValue(this.value);
            break;

          case 'currency':
            var propVal = (0, _ej2Base.getValue)(prop, newProp);
            this.setProperties({
              currencyCode: propVal
            }, true);
            this.updateCurrency(prop, propVal);
            break;

          case 'currencyCode':
            var propValue = (0, _ej2Base.getValue)(prop, newProp);
            this.setProperties({
              currency: propValue
            }, true);
            this.updateCurrency('currency', propValue);
            break;

          case 'format':
            (0, _ej2Base.setValue)(prop, (0, _ej2Base.getValue)(prop, newProp), this);
            this.initCultureInfo();
            this.updateValue(this.value);
            break;

          case 'decimals':
            this.decimals = newProp.decimals;
            this.updateValue(this.value);
        }
      }
    };
    /**
     * Gets the component name
     * @private
     */


    NumericTextBox.prototype.getModuleName = function () {
      return 'numerictextbox';
    };

    __decorate([(0, _ej2Base.Property)('')], NumericTextBox.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(-Number.MAX_VALUE)], NumericTextBox.prototype, "min", void 0);

    __decorate([(0, _ej2Base.Property)(Number.MAX_VALUE)], NumericTextBox.prototype, "max", void 0);

    __decorate([(0, _ej2Base.Property)(1)], NumericTextBox.prototype, "step", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "placeholder", void 0);

    __decorate([(0, _ej2Base.Property)({})], NumericTextBox.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(true)], NumericTextBox.prototype, "showSpinButton", void 0);

    __decorate([(0, _ej2Base.Property)(false)], NumericTextBox.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)(true)], NumericTextBox.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], NumericTextBox.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Property)(false)], NumericTextBox.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)('n2')], NumericTextBox.prototype, "format", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "decimals", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "currency", void 0);

    __decorate([(0, _ej2Base.Property)(null)], NumericTextBox.prototype, "currencyCode", void 0);

    __decorate([(0, _ej2Base.Property)(true)], NumericTextBox.prototype, "strictMode", void 0);

    __decorate([(0, _ej2Base.Property)(false)], NumericTextBox.prototype, "validateDecimalOnType", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], NumericTextBox.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Event)()], NumericTextBox.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], NumericTextBox.prototype, "destroyed", void 0);

    __decorate([(0, _ej2Base.Event)()], NumericTextBox.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], NumericTextBox.prototype, "focus", void 0);

    __decorate([(0, _ej2Base.Event)()], NumericTextBox.prototype, "blur", void 0);

    NumericTextBox = __decorate([_ej2Base.NotifyPropertyChanges], NumericTextBox);
    return NumericTextBox;
  }(_ej2Base.Component);

  _exports.NumericTextBox = NumericTextBox;
});;
define('@syncfusion/ej2-inputs/src/slider/index',["exports", "./slider"], function (_exports, _slider) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_slider).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _slider[key];
  });
});;
define('@syncfusion/ej2-inputs/src/slider/slider',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-popups"], function (_exports, _ej2Base, _ej2Popups) {
  "use strict";

  _exports.__esModule = true;
  _exports.Slider = _exports.TooltipData = _exports.LimitData = _exports.ColorRangeData = _exports.TicksData = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * Configures the ticks data of the Slider.
   */
  var TicksData =
  /** @class */
  function (_super) {
    __extends(TicksData, _super);

    function TicksData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('None')], TicksData.prototype, "placement", void 0);

    __decorate([(0, _ej2Base.Property)(10)], TicksData.prototype, "largeStep", void 0);

    __decorate([(0, _ej2Base.Property)(1)], TicksData.prototype, "smallStep", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TicksData.prototype, "showSmallTicks", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TicksData.prototype, "format", void 0);

    return TicksData;
  }(_ej2Base.ChildProperty);

  _exports.TicksData = TicksData;

  /**
   * It illustrates the color track data in slider.
   */
  var ColorRangeData =
  /** @class */
  function (_super) {
    __extends(ColorRangeData, _super);

    function ColorRangeData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(null)], ColorRangeData.prototype, "color", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ColorRangeData.prototype, "start", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ColorRangeData.prototype, "end", void 0);

    return ColorRangeData;
  }(_ej2Base.ChildProperty);

  _exports.ColorRangeData = ColorRangeData;

  /**
   * It illustrates the limit data in slider.
   */
  var LimitData =
  /** @class */
  function (_super) {
    __extends(LimitData, _super);

    function LimitData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(false)], LimitData.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)(null)], LimitData.prototype, "minStart", void 0);

    __decorate([(0, _ej2Base.Property)(null)], LimitData.prototype, "minEnd", void 0);

    __decorate([(0, _ej2Base.Property)(null)], LimitData.prototype, "maxStart", void 0);

    __decorate([(0, _ej2Base.Property)(null)], LimitData.prototype, "maxEnd", void 0);

    __decorate([(0, _ej2Base.Property)(false)], LimitData.prototype, "startHandleFixed", void 0);

    __decorate([(0, _ej2Base.Property)(false)], LimitData.prototype, "endHandleFixed", void 0);

    return LimitData;
  }(_ej2Base.ChildProperty);

  _exports.LimitData = LimitData;

  /**
   * It illustrates the tooltip data in slider.
   */
  var TooltipData =
  /** @class */
  function (_super) {
    __extends(TooltipData, _super);

    function TooltipData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], TooltipData.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('Before')], TooltipData.prototype, "placement", void 0);

    __decorate([(0, _ej2Base.Property)('Focus')], TooltipData.prototype, "showOn", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TooltipData.prototype, "isVisible", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TooltipData.prototype, "format", void 0);

    return TooltipData;
  }(_ej2Base.ChildProperty);

  _exports.TooltipData = TooltipData;
  var bootstrapTooltipOffset = 6;
  var bootstrap4TooltipOffset = 3;
  var classNames = {
    root: 'e-slider',
    rtl: 'e-rtl',
    sliderHiddenInput: 'e-slider-input',
    controlWrapper: 'e-control-wrapper',
    sliderHandle: 'e-handle',
    rangeBar: 'e-range',
    sliderButton: 'e-slider-button',
    firstButton: 'e-first-button',
    secondButton: 'e-second-button',
    scale: 'e-scale',
    tick: 'e-tick',
    large: 'e-large',
    tickValue: 'e-tick-value',
    sliderTooltip: 'e-slider-tooltip',
    sliderHover: 'e-slider-hover',
    sliderFirstHandle: 'e-handle-first',
    sliderSecondHandle: 'e-handle-second',
    sliderDisabled: 'e-disabled',
    sliderContainer: 'e-slider-container',
    horizontalTooltipBefore: 'e-slider-horizontal-before',
    horizontalTooltipAfter: 'e-slider-horizontal-after',
    verticalTooltipBefore: 'e-slider-vertical-before',
    verticalTooltipAfter: 'e-slider-vertical-after',
    materialTooltip: 'e-material-tooltip',
    materialTooltipOpen: 'e-material-tooltip-open',
    materialTooltipActive: 'e-tooltip-active',
    materialSlider: 'e-material-slider',
    sliderTrack: 'e-slider-track',
    sliderHorizantalColor: 'e-slider-horizantal-color',
    sliderVerticalColor: 'e-slider-vertical-color',
    sliderHandleFocused: 'e-handle-focused',
    verticalSlider: 'e-vertical',
    horizontalSlider: 'e-horizontal',
    sliderHandleStart: 'e-handle-start',
    sliderTooltipStart: 'e-material-tooltip-start',
    sliderTabHandle: 'e-tab-handle',
    sliderButtonIcon: 'e-button-icon',
    sliderSmallSize: 'e-small-size',
    sliderTickPosition: 'e-tick-pos',
    sliderFirstTick: 'e-first-tick',
    sliderLastTick: 'e-last-tick',
    sliderButtonClass: 'e-slider-btn',
    sliderTooltipWrapper: 'e-tooltip-wrap',
    sliderTabTrack: 'e-tab-track',
    sliderTabRange: 'e-tab-range',
    sliderActiveHandle: 'e-handle-active',
    sliderMaterialHandle: 'e-material-handle',
    sliderMaterialRange: 'e-material-range',
    sliderMaterialDefault: 'e-material-default',
    materialTooltipShow: 'e-material-tooltip-show',
    materialTooltipHide: 'e-material-tooltip-hide',
    readonly: 'e-read-only',
    limits: 'e-limits',
    limitBarDefault: 'e-limit-bar',
    limitBarFirst: 'e-limit-first',
    limitBarSecond: 'e-limit-second',
    dragHorizontal: 'e-drag-horizontal',
    dragVertical: 'e-drag-vertical'
  };
  /**
   * The Slider component allows the user to select a value or range
   * of values in-between a min and max range, by dragging the handle over the slider bar.
   * ```html
   * <div id='slider'></div>
   * ```
   * ```typescript
   * <script>
   *   var sliderObj = new Slider({ value: 10 });
   *   sliderObj.appendTo('#slider');
   * </script>
   * ```
   */

  var Slider =
  /** @class */
  function (_super) {
    __extends(Slider, _super);

    function Slider(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.horDir = 'left';
      _this.verDir = 'bottom';
      _this.transition = {
        handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',
        rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'
      };
      _this.transitionOnMaterialTooltip = {
        handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',
        rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'
      };
      _this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';
      _this.customAriaText = null;
      _this.drag = true;
      return _this;
    }

    Slider.prototype.preRender = function () {
      var localeText = {
        incrementTitle: 'Increase',
        decrementTitle: 'Decrease'
      };
      this.l10n = new _ej2Base.L10n('slider', localeText, this.locale);
      this.isElementFocused = false;
      this.tickElementCollection = [];
      this.tooltipFormatInfo = {};
      this.ticksFormatInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.formChecker();
    };

    Slider.prototype.formChecker = function () {
      var formElement = (0, _ej2Base.closest)(this.element, 'form');

      if (formElement) {
        this.isForm = true; // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`
        // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value

        if (!(0, _ej2Base.isNullOrUndefined)(this.formResetValue)) {
          this.setProperties({
            'value': this.formResetValue
          }, true);
        }

        this.formResetValue = this.value;

        if (this.type === 'Range' && ((0, _ej2Base.isNullOrUndefined)(this.formResetValue) || typeof this.formResetValue !== 'object')) {
          this.formResetValue = [parseFloat((0, _ej2Base.formatUnit)(this.min)), parseFloat((0, _ej2Base.formatUnit)(this.max))];
        } else if ((0, _ej2Base.isNullOrUndefined)(this.formResetValue)) {
          this.formResetValue = parseFloat((0, _ej2Base.formatUnit)(this.min));
        }

        this.formElement = formElement;
      } else {
        this.isForm = false;
      }
    };

    Slider.prototype.initCultureFunc = function () {
      this.internationalization = new _ej2Base.Internationalization(this.locale);
    };

    Slider.prototype.initCultureInfo = function () {
      this.tooltipFormatInfo.format = !(0, _ej2Base.isNullOrUndefined)(this.tooltip.format) ? this.tooltip.format : null;
      this.ticksFormatInfo.format = !(0, _ej2Base.isNullOrUndefined)(this.ticks.format) ? this.ticks.format : null;
    };

    Slider.prototype.formatString = function (value, formatInfo) {
      var formatValue = null;
      var formatString = null;

      if (value || value === 0) {
        formatValue = this.formatNumber(value);
        var numberOfDecimals = this.numberOfDecimals(value);
        formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
      }

      return {
        elementVal: formatValue,
        formatString: formatString
      };
    };

    ;

    Slider.prototype.formatNumber = function (value) {
      var numberOfDecimals = this.numberOfDecimals(value);
      return this.internationalization.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(value);
    };

    ;

    Slider.prototype.numberOfDecimals = function (value) {
      var decimalPart = value.toString().split('.')[1];
      var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
      return numberOfDecimals;
    };

    Slider.prototype.makeRoundNumber = function (value, precision) {
      var decimals = precision || 0;
      return Number(value.toFixed(decimals));
    };

    ;

    Slider.prototype.fractionalToInteger = function (value) {
      value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;
      var tens = 1;

      for (var i = 0; i < this.noOfDecimals; i++) {
        tens *= 10;
      }

      value = Number((value * tens).toFixed(0));
      return value;
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    Slider.prototype.render = function () {
      this.initialize();
      this.initRender();
      this.wireEvents();
      this.setZindex();
      this.renderComplete();
    };

    Slider.prototype.initialize = function () {
      (0, _ej2Base.addClass)([this.element], classNames.root);
      this.setCSSClass();
    };

    Slider.prototype.setCSSClass = function (oldCSSClass) {
      if (oldCSSClass) {
        (0, _ej2Base.removeClass)([this.element], oldCSSClass.split(' '));
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.element], this.cssClass.split(' '));
      }
    };

    Slider.prototype.setEnabled = function () {
      if (!this.enabled) {
        (0, _ej2Base.addClass)([this.sliderContainer], [classNames.sliderDisabled]);

        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
          this.tooltipElement.classList.add(classNames.sliderDisabled);
        }

        this.unwireEvents();
      } else {
        (0, _ej2Base.removeClass)([this.sliderContainer], [classNames.sliderDisabled]);

        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
          this.tooltipElement.classList.remove(classNames.sliderDisabled);
        }

        this.wireEvents();
      }
    };

    Slider.prototype.getTheme = function (container) {
      var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
      return theme.replace(/['"]+/g, '');
    };
    /**
     * Initialize the rendering
     * @private
     */


    Slider.prototype.initRender = function () {
      this.sliderContainer = this.createElement('div', {
        className: classNames.sliderContainer + ' ' + classNames.controlWrapper
      });
      this.element.parentNode.insertBefore(this.sliderContainer, this.element);
      this.sliderContainer.appendChild(this.element);
      this.sliderTrack = this.createElement('div', {
        className: classNames.sliderTrack
      });
      this.element.appendChild(this.sliderTrack);
      this.element.tabIndex = -1;
      this.getThemeInitialization();
      this.setHandler();
      this.createRangeBar();

      if (this.limits.enabled) {
        this.createLimitBar();
      }

      this.setOrientClass();
      this.hiddenInput = this.createElement('input', {
        attrs: {
          type: 'hidden',
          value: (0, _ej2Base.isNullOrUndefined)(this.value) ? this.min.toString() : this.value.toString(),
          name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',
          class: classNames.sliderHiddenInput
        }
      });
      this.hiddenInput.tabIndex = -1;
      this.sliderContainer.appendChild(this.hiddenInput);

      if (this.showButtons) {
        this.setButtons();
      }

      this.setEnableRTL();

      if (this.type === 'Range') {
        this.rangeValueUpdate();
      } else {
        this.value = (0, _ej2Base.isNullOrUndefined)(this.value) ? parseFloat((0, _ej2Base.formatUnit)(this.min.toString())) : this.value;
      }

      this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat((0, _ej2Base.formatUnit)(this.value.toString()))) : [this.checkHandleValue(parseFloat((0, _ej2Base.formatUnit)(this.value[0].toString()))), this.checkHandleValue(parseFloat((0, _ej2Base.formatUnit)(this.value[1].toString())))];
      this.previousChanged = this.previousVal;

      if (!(0, _ej2Base.isNullOrUndefined)(this.element.hasAttribute('name'))) {
        this.element.removeAttribute('name');
      }

      this.setValue();

      if (this.limits.enabled) {
        this.setLimitBar();
      }

      if (this.ticks.placement !== 'None') {
        this.renderScale();
      }

      if (this.tooltip.isVisible) {
        this.renderTooltip();
      }

      if (!this.enabled) {
        (0, _ej2Base.addClass)([this.sliderContainer], [classNames.sliderDisabled]);
      } else {
        (0, _ej2Base.removeClass)([this.sliderContainer], [classNames.sliderDisabled]);
      }

      if (this.readonly) {
        (0, _ej2Base.addClass)([this.sliderContainer], [classNames.readonly]);
      } else {
        (0, _ej2Base.removeClass)([this.sliderContainer], [classNames.readonly]);
      }
    };

    Slider.prototype.getThemeInitialization = function () {
      this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';
      this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';
      this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';
      this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;
    };

    Slider.prototype.createRangeBar = function () {
      if (this.type !== 'Default') {
        this.rangeBar = this.createElement('div', {
          attrs: {
            class: classNames.rangeBar
          }
        });
        this.element.appendChild(this.rangeBar);

        if (this.drag && this.type === 'Range') {
          if (this.orientation === 'Horizontal') {
            this.rangeBar.classList.add(classNames.dragHorizontal);
          } else {
            this.rangeBar.classList.add(classNames.dragVertical);
          }
        }
      }
    };

    Slider.prototype.createLimitBar = function () {
      var firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault : classNames.limitBarFirst;
      firstElementClassName += ' ' + classNames.limits;
      this.limitBarFirst = this.createElement('div', {
        attrs: {
          class: firstElementClassName
        }
      });
      this.element.appendChild(this.limitBarFirst);

      if (this.type === 'Range') {
        this.limitBarSecond = this.createElement('div', {
          attrs: {
            class: classNames.limitBarSecond + ' ' + classNames.limits
          }
        });
        this.element.appendChild(this.limitBarSecond);
      }
    };

    Slider.prototype.setOrientClass = function () {
      if (this.orientation !== 'Vertical') {
        this.sliderContainer.classList.remove(classNames.verticalSlider);
        this.sliderContainer.classList.add(classNames.horizontalSlider);
        this.firstHandle.setAttribute('aria-orientation', 'horizontal');

        if (this.type === 'Range') {
          this.secondHandle.setAttribute('aria-orientation', 'horizontal');
        }
      } else {
        this.sliderContainer.classList.remove(classNames.horizontalSlider);
        this.sliderContainer.classList.add(classNames.verticalSlider);
        this.firstHandle.setAttribute('aria-orientation', 'vertical');

        if (this.type === 'Range') {
          this.secondHandle.setAttribute('aria-orientation', 'vertical');
        }
      }
    };

    Slider.prototype.setAriaAttributes = function (element) {
      var _this = this;

      var min = this.min;
      var max = this.max;

      if (!(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0) {
        min = this.customValues[0];
        max = this.customValues[this.customValues.length - 1];
      }

      if (this.type !== 'Range') {
        (0, _ej2Base.attributes)(element, {
          'aria-valuemin': min.toString(),
          'aria-valuemax': max.toString()
        });
      } else {
        var range = !(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];
        range.forEach(function (range, index) {
          var element = index === 0 ? _this.firstHandle : _this.secondHandle;

          if (element) {
            (0, _ej2Base.attributes)(element, {
              'aria-valuemin': range[0],
              'aria-valuemax': range[1]
            });
          }
        });
      }
    };

    Slider.prototype.createSecondHandle = function () {
      this.secondHandle = this.createElement('div', {
        attrs: {
          class: classNames.sliderHandle,
          'role': 'slider',
          tabIndex: '0'
        }
      });
      this.secondHandle.classList.add(classNames.sliderSecondHandle);
      this.element.appendChild(this.secondHandle);
    };

    Slider.prototype.createFirstHandle = function () {
      this.firstHandle = this.createElement('div', {
        attrs: {
          class: classNames.sliderHandle,
          'role': 'slider',
          tabIndex: '0'
        }
      });
      this.firstHandle.classList.add(classNames.sliderFirstHandle);
      this.element.appendChild(this.firstHandle);

      if (this.isMaterialTooltip) {
        this.materialHandle = this.createElement('div', {
          attrs: {
            class: classNames.sliderHandle + ' ' + classNames.sliderMaterialHandle
          }
        });
        this.element.appendChild(this.materialHandle);
      }
    };

    Slider.prototype.wireFirstHandleEvt = function (destroy) {
      if (!destroy) {
        _ej2Base.EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);

        _ej2Base.EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);

        _ej2Base.EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);

        _ej2Base.EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);
      } else {
        _ej2Base.EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);

        _ej2Base.EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);

        _ej2Base.EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);

        _ej2Base.EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);
      }
    };

    Slider.prototype.wireSecondHandleEvt = function (destroy) {
      if (!destroy) {
        _ej2Base.EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);

        _ej2Base.EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);

        _ej2Base.EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);

        _ej2Base.EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);
      } else {
        _ej2Base.EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);

        _ej2Base.EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);

        _ej2Base.EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);

        _ej2Base.EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);
      }
    };

    Slider.prototype.handleStart = function () {
      if (this.type !== 'Range') {
        this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

        if (this.isMaterialTooltip) {
          this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);

          if (this.tooltipElement) {
            this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);
          }
        }
      }
    };

    Slider.prototype.transitionEnd = function (e) {
      if (e.propertyName !== 'transform') {
        this.handleStart();
        this.getHandle().style.transition = 'none';

        if (this.type !== 'Default') {
          this.rangeBar.style.transition = 'none';
        }

        if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {
          this.tooltipElement.style.transition = this.transition.handle;
        }

        this.tooltipToggle(this.getHandle());
        this.closeTooltip();
      }
    };

    Slider.prototype.handleFocusOut = function () {
      if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {
        this.firstHandle.classList.remove(classNames.sliderHandleFocused);
      }

      if (this.type === 'Range') {
        if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {
          this.secondHandle.classList.remove(classNames.sliderHandleFocused);
        }
      }
    };

    Slider.prototype.handleFocus = function (e) {
      if (e.currentTarget === this.firstHandle) {
        this.firstHandle.classList.add(classNames.sliderHandleFocused);
      } else {
        this.secondHandle.classList.add(classNames.sliderHandleFocused);
      }
    };

    Slider.prototype.handleOver = function (e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {
        this.tooltipToggle(e.currentTarget);
      }
    };

    Slider.prototype.handleLeave = function (e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(classNames.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {
        this.closeTooltip();
      }
    };

    Slider.prototype.setHandler = function () {
      if (this.min > this.max) {
        this.min = this.max;
      }

      this.createFirstHandle();

      if (this.type === 'Range') {
        this.createSecondHandle();
      }
    };

    Slider.prototype.setEnableRTL = function () {
      this.enableRtl && this.orientation !== 'Vertical' ? (0, _ej2Base.addClass)([this.sliderContainer], classNames.rtl) : (0, _ej2Base.removeClass)([this.sliderContainer], classNames.rtl);
      var preDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

      if (this.enableRtl) {
        this.horDir = 'right';
        this.verDir = 'bottom';
      } else {
        this.horDir = 'left';
        this.verDir = 'bottom';
      }

      var currDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;

      if (preDir !== currDir) {
        if (this.orientation === 'Horizontal') {
          (0, _ej2Base.setStyleAttribute)(this.firstHandle, {
            'right': '',
            'left': 'auto'
          });

          if (this.type === 'Range') {
            (0, _ej2Base.setStyleAttribute)(this.secondHandle, {
              'top': '',
              'left': 'auto'
            });
          }
        }
      }

      this.setBarColor();
    };

    Slider.prototype.tooltipValue = function () {
      var _this = this;

      var text;
      var args = {
        value: this.value,
        text: ''
      };
      this.setTooltipContent();
      args.text = text = this.tooltipObj.content;
      this.trigger('tooltipChange', args, function (observedArgs) {
        _this.addTooltipClass(observedArgs.text);

        if (text !== observedArgs.text) {
          _this.customAriaText = observedArgs.text;
          _this.tooltipObj.content = observedArgs.text;

          _this.setAriaAttrValue(_this.firstHandle);

          if (_this.type === 'Range') {
            _this.setAriaAttrValue(_this.secondHandle);
          }
        }
      });
    };

    Slider.prototype.setTooltipContent = function () {
      var content;
      content = this.formatContent(this.tooltipFormatInfo, false);
      this.tooltipObj.content = content;
    };

    Slider.prototype.formatContent = function (formatInfo, ariaContent) {
      var content = '';
      var handle1 = this.handleVal1;
      var handle2 = this.handleVal2;

      if (!(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0) {
        handle1 = this.customValues[this.handleVal1];
        handle2 = this.customValues[this.handleVal2];
      }

      if (!ariaContent) {
        if (this.type === 'Range') {
          if (this.enableRtl && this.orientation !== 'Vertical') {
            content = !(0, _ej2Base.isNullOrUndefined)(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : handle2.toString() + ' - ' + handle1.toString();
          } else {
            content = !(0, _ej2Base.isNullOrUndefined)(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : handle1.toString() + ' - ' + handle2.toString();
          }
        } else {
          if (!(0, _ej2Base.isNullOrUndefined)(handle1)) {
            content = !(0, _ej2Base.isNullOrUndefined)(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();
          }
        }

        return content;
      } else {
        if (this.type === 'Range') {
          if (this.enableRtl && this.orientation !== 'Vertical') {
            content = !(0, _ej2Base.isNullOrUndefined)(this.tooltip) && !(0, _ej2Base.isNullOrUndefined)(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + ' - ' + handle1.toString();
          } else {
            content = !(0, _ej2Base.isNullOrUndefined)(this.tooltip) && !(0, _ej2Base.isNullOrUndefined)(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + ' - ' + handle2.toString();
          }
        } else {
          if (!(0, _ej2Base.isNullOrUndefined)(handle1)) {
            content = !(0, _ej2Base.isNullOrUndefined)(this.tooltip) && !(0, _ej2Base.isNullOrUndefined)(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();
          }
        }

        return content;
      }
    };

    Slider.prototype.addTooltipClass = function (content) {
      if (this.isMaterialTooltip) {
        var count = content.toString().length;

        if (!this.tooltipElement) {
          var cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;
          this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;
        } else {
          var cssClass = count > 4 ? {
            oldCss: classNames.sliderMaterialDefault,
            newCss: classNames.sliderMaterialRange
          } : {
            oldCss: classNames.sliderMaterialRange,
            newCss: classNames.sliderMaterialDefault
          };
          this.tooltipElement.classList.remove(cssClass.oldCss);

          if (!this.tooltipElement.classList.contains(cssClass.newCss)) {
            this.tooltipElement.classList.add(cssClass.newCss);
            this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }
      }
    };

    Slider.prototype.tooltipPlacement = function () {
      return this.orientation === 'Horizontal' ? this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter' : this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter';
    };

    Slider.prototype.tooltipBeforeOpen = function (args) {
      this.tooltipElement = args.element;

      if (this.tooltip.cssClass) {
        (0, _ej2Base.addClass)([this.tooltipElement], this.tooltip.cssClass.split(' ').filter(function (css) {
          return css;
        }));
      }

      args.target.removeAttribute('aria-describedby');

      if (this.isMaterialTooltip) {
        this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);
        this.handleStart();
        this.setTooltipTransform();
      }
    };

    Slider.prototype.tooltipCollision = function (position) {
      if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {
        var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;

        switch (position) {
          case 'TopCenter':
            this.tooltipObj.setProperties({
              'offsetY': -tooltipOffsetValue
            }, false);
            break;

          case 'BottomCenter':
            this.tooltipObj.setProperties({
              'offsetY': tooltipOffsetValue
            }, false);
            break;

          case 'LeftCenter':
            this.tooltipObj.setProperties({
              'offsetX': -tooltipOffsetValue
            }, false);
            break;

          case 'RightCenter':
            this.tooltipObj.setProperties({
              'offsetX': tooltipOffsetValue
            }, false);
            break;
        }
      }
    };

    Slider.prototype.wireMaterialTooltipEvent = function (destroy) {
      if (this.isMaterialTooltip) {
        if (!destroy) {
          _ej2Base.EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.sliderDown, this);
        } else {
          _ej2Base.EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.sliderDown);
        }
      }
    };

    Slider.prototype.tooltipPositionCalculation = function (position) {
      var cssClass;

      switch (position) {
        case 'TopCenter':
          cssClass = classNames.horizontalTooltipBefore;
          break;

        case 'BottomCenter':
          cssClass = classNames.horizontalTooltipAfter;
          break;

        case 'LeftCenter':
          cssClass = classNames.verticalTooltipBefore;
          break;

        case 'RightCenter':
          cssClass = classNames.verticalTooltipAfter;
          break;
      }

      return cssClass;
    };

    Slider.prototype.getTooltipTransformProperties = function (className) {
      var transformProperties;

      if (this.tooltipElement) {
        var position = this.orientation === 'Horizontal' ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
        transformProperties = this.orientation === 'Horizontal' ? className === classNames.horizontalTooltipBefore ? {
          rotate: 'rotate(45deg)',
          translate: "translateY(" + position + "px)"
        } : {
          rotate: 'rotate(225deg)',
          translate: "translateY(" + -position + "px)"
        } : className === classNames.verticalTooltipBefore ? {
          rotate: 'rotate(-45deg)',
          translate: "translateX(" + position + "px)"
        } : {
          rotate: 'rotate(-225deg)',
          translate: "translateX(" + -position + "px)"
        };
      }

      return transformProperties;
    };

    Slider.prototype.openMaterialTooltip = function () {
      var _this = this;

      if (this.isMaterialTooltip) {
        this.refreshTooltip(this.firstHandle);
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        tooltipContentElement.classList.remove(classNames.materialTooltipHide);
        tooltipContentElement.classList.add(classNames.materialTooltipShow);
        this.firstHandle.style.cursor = 'default';
        this.tooltipElement.style.transition = this.scaleTransform;
        this.tooltipElement.classList.add(classNames.materialTooltipOpen);
        this.materialHandle.style.transform = 'scale(0)';

        if (tooltipContentElement.innerText.length > 4) {
          this.tooltipElement.style.transform = 'scale(1)';
        } else {
          this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
        }

        if (this.type === 'Default') {
          setTimeout(function () {
            _this.tooltipElement.style.transition = _this.transition.handle;
          }, 2500);
        } else {
          setTimeout(function () {
            _this.tooltipElement.style.transition = 'none';
          }, 2500);
        }
      }
    };

    Slider.prototype.closeMaterialTooltip = function () {
      var _this = this;

      if (this.isMaterialTooltip) {
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        this.tooltipElement.style.transition = this.scaleTransform;
        tooltipContentElement.classList.remove(classNames.materialTooltipShow);
        tooltipContentElement.classList.add(classNames.materialTooltipHide);
        this.firstHandle.style.cursor = '-webkit-grab';
        this.firstHandle.style.cursor = 'grab';
        this.materialHandle.style.transform = 'scale(1)';
        this.tooltipElement.classList.remove(classNames.materialTooltipOpen);
        this.setTooltipTransform();
        this.tooltipTarget = undefined;
        setTimeout(function () {
          _this.tooltipElement.style.transition = 'none';
        }, 2500);
      }
    };

    Slider.prototype.checkTooltipPosition = function (args) {
      if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== args.collidedPosition) {
        if (this.isMaterialTooltip) {
          var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);
          args.element.classList.remove(this.previousTooltipClass);
          args.element.classList.add(tooltipClass);
          this.previousTooltipClass = tooltipClass;

          if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {
            args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }

        this.tooltipCollidedPosition = args.collidedPosition;
      }

      if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {
        this.setTooltipTransform();
      }
    };

    Slider.prototype.setTooltipTransform = function () {
      var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);

      if (this.tooltipElement.firstElementChild.innerText.length > 4) {
        this.tooltipElement.style.transform = transformProperties.translate + " scale(0.01)";
      } else {
        this.tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
      }
    };

    Slider.prototype.renderTooltip = function () {
      this.tooltipObj = new _ej2Popups.Tooltip({
        showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,
        cssClass: classNames.sliderTooltip,
        height: this.isMaterial ? 30 : 'auto',
        animation: {
          open: {
            effect: 'None'
          },
          close: {
            effect: 'FadeOut',
            duration: 500
          }
        },
        opensOn: 'Custom',
        beforeOpen: this.tooltipBeforeOpen.bind(this),
        beforeCollision: this.checkTooltipPosition.bind(this),
        beforeClose: this.tooltipBeforeClose.bind(this),
        enableHtmlSanitizer: this.enableHtmlSanitizer
      });
      this.tooltipObj.appendTo(this.firstHandle);
      this.initializeTooltipProps();
    };

    Slider.prototype.initializeTooltipProps = function () {
      var tooltipShowOn = this.isMaterialTooltip ? 'Always' : this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn;
      this.setProperties({
        tooltip: {
          showOn: tooltipShowOn
        }
      }, true);
      this.tooltipObj.position = this.tooltipPlacement();
      this.tooltipCollision(this.tooltipObj.position);
      [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function (handle) {
        if (!(0, _ej2Base.isNullOrUndefined)(handle)) {
          handle.style.transition = 'none';
        }
      });

      if (this.isMaterialTooltip) {
        this.sliderContainer.classList.add(classNames.materialSlider);
        this.tooltipValue();
        this.tooltipObj.animation.close.effect = 'None';
        this.tooltipObj.open(this.firstHandle);
      }
    };

    Slider.prototype.tooltipBeforeClose = function () {
      this.tooltipElement = undefined;
      this.tooltipCollidedPosition = undefined;
    };

    Slider.prototype.setButtons = function () {
      this.firstBtn = this.createElement('div', {
        className: classNames.sliderButton + ' ' + classNames.firstButton
      });
      this.firstBtn.appendChild(this.createElement('span', {
        className: classNames.sliderButtonIcon
      }));
      this.firstBtn.tabIndex = -1;
      this.secondBtn = this.createElement('div', {
        className: classNames.sliderButton + ' ' + classNames.secondButton
      });
      this.secondBtn.appendChild(this.createElement('span', {
        className: classNames.sliderButtonIcon
      }));
      this.secondBtn.tabIndex = -1;
      this.sliderContainer.classList.add(classNames.sliderButtonClass);
      this.sliderContainer.appendChild(this.firstBtn);
      this.sliderContainer.appendChild(this.secondBtn);
      this.sliderContainer.appendChild(this.element);
      this.buttonTitle();
    };

    Slider.prototype.buttonTitle = function () {
      var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
      this.l10n.setLocale(this.locale);
      var decrementTitle = this.l10n.getConstant('decrementTitle');
      var incrementTitle = this.l10n.getConstant('incrementTitle');
      (0, _ej2Base.attributes)(enabledRTL ? this.secondBtn : this.firstBtn, {
        'aria-label': decrementTitle,
        title: decrementTitle
      });
      (0, _ej2Base.attributes)(enabledRTL ? this.firstBtn : this.secondBtn, {
        'aria-label': incrementTitle,
        title: incrementTitle
      });
    };

    Slider.prototype.buttonFocusOut = function () {
      if (this.isMaterial) {
        this.getHandle().classList.remove('e-large-thumb-size');
      }
    };

    Slider.prototype.repeatButton = function (args) {
      var hVal = this.handleValueUpdate();
      var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
      var value;

      if (args.target.parentElement.classList.contains(classNames.firstButton) || args.target.classList.contains(classNames.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
      } else if (args.target.parentElement.classList.contains(classNames.secondButton) || args.target.classList.contains(classNames.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
      }

      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }

      if (value >= this.min && value <= this.max) {
        this.changeHandleValue(value);
        this.tooltipToggle(this.getHandle());
      }
    };

    Slider.prototype.repeatHandlerMouse = function (args) {
      args.preventDefault();

      if (args.type === 'mousedown' || args.type === 'touchstart') {
        this.buttonClick(args);
        this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);
      }
    };

    Slider.prototype.materialChange = function () {
      if (!this.getHandle().classList.contains('e-large-thumb-size')) {
        this.getHandle().classList.add('e-large-thumb-size');
      }
    };

    Slider.prototype.repeatHandlerUp = function (e) {
      this.changeEvent('changed');
      this.closeTooltip();
      clearInterval(this.repeatInterval);
      this.getHandle().focus();
    };

    Slider.prototype.customTickCounter = function (bigNum) {
      var tickCount = 4;

      if (!(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0) {
        if (bigNum > 4) {
          tickCount = 3;
        }

        if (bigNum > 7) {
          tickCount = 2;
        }

        if (bigNum > 14) {
          tickCount = 1;
        }

        if (bigNum > 28) {
          tickCount = 0;
        }
      }

      return tickCount;
    }; // tslint:disable-next-line:max-func-body-length


    Slider.prototype.renderScale = function () {
      var orien = this.orientation === 'Vertical' ? 'v' : 'h';
      var spanText;
      this.noOfDecimals = this.numberOfDecimals(this.step);
      this.ul = this.createElement('ul', {
        className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
        attrs: {
          role: 'presentation',
          tabIndex: '-1',
          'aria-hidden': 'true'
        }
      });
      this.ul.style.zIndex = '-1';

      if (_ej2Base.Browser.isAndroid && orien === 'h') {
        this.ul.classList.add(classNames.sliderTickPosition);
      }

      var smallStep = this.ticks.smallStep;

      if (!this.ticks.showSmallTicks) {
        this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat((0, _ej2Base.formatUnit)(this.max)) - parseFloat((0, _ej2Base.formatUnit)(this.min));
      } else if (smallStep <= 0) {
        smallStep = parseFloat((0, _ej2Base.formatUnit)(this.step));
      }

      var min = this.fractionalToInteger(this.min);
      var max = this.fractionalToInteger(this.max);
      var steps = this.fractionalToInteger(smallStep);
      var bigNum = !(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
      var customStep = this.customTickCounter(bigNum);
      var count = !(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
      this.element.appendChild(this.ul);
      var li;
      var start = parseFloat(this.min.toString());

      if (orien === 'v') {
        start = parseFloat(this.max.toString());
      }

      var left = 0;
      var islargeTick;
      var tickWidth = 100 / count;

      if (tickWidth === Infinity) {
        tickWidth = 5;
      }

      for (var i = 0, y = !(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
        li = this.createElement('li', {
          attrs: {
            class: classNames.tick,
            role: 'presentation',
            tabIndex: '-1',
            'aria-hidden': 'true'
          }
        });

        if (!(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0) {
          islargeTick = i % (customStep + 1) === 0;

          if (islargeTick) {
            if (orien === 'h') {
              start = this.customValues[k];
              k++;
            } else {
              start = this.customValues[y];
              y--;
            }

            li.setAttribute('title', start.toString());
          }
        } else {
          li.setAttribute('title', start.toString());

          if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
            if (orien === 'h') {
              islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;
            } else {
              islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;
            }
          } else {
            var largestep = this.fractionalToInteger(this.ticks.largeStep);
            var startValue = this.fractionalToInteger(start);

            if (orien === 'h') {
              islargeTick = (startValue - min) % largestep === 0 ? true : false;
            } else {
              islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;
            }
          }
        }

        if (islargeTick) {
          li.classList.add(classNames.large);
        }

        orien === 'h' ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';
        var repeat = islargeTick ? this.ticks.placement === 'Both' ? 2 : 1 : 0;

        if (islargeTick) {
          for (var j = 0; j < repeat; j++) {
            this.createTick(li, start, tickWidth);
          }
        } else if ((0, _ej2Base.isNullOrUndefined)(this.customValues)) {
          this.formatTicksValue(li, start);
        }

        this.ul.appendChild(li);
        this.tickElementCollection.push(li);
        var decimalPoints = void 0;

        if ((0, _ej2Base.isNullOrUndefined)(this.customValues)) {
          if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {
            decimalPoints = this.numberOfDecimals(smallStep);
          } else {
            decimalPoints = this.numberOfDecimals(start);
          }

          if (orien === 'h') {
            start = this.makeRoundNumber(start + smallStep, decimalPoints);
          } else {
            start = this.makeRoundNumber(start - smallStep, decimalPoints);
          }

          left = this.makeRoundNumber(left + smallStep, decimalPoints);
        }
      }

      this.ticksAlignment(orien, tickWidth);
    };

    Slider.prototype.ticksAlignment = function (orien, tickWidth, triggerEvent) {
      if (triggerEvent === void 0) {
        triggerEvent = true;
      }

      this.firstChild = this.ul.firstElementChild;
      this.lastChild = this.ul.lastElementChild;
      this.firstChild.classList.add(classNames.sliderFirstTick);
      this.lastChild.classList.add(classNames.sliderLastTick);
      this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());

      if (orien === 'h') {
        this.firstChild.style.width = tickWidth / 2 + '%';
        this.lastChild.style.width = tickWidth / 2 + '%';
      } else {
        this.firstChild.style.height = tickWidth / 2 + '%';
        this.lastChild.style.height = tickWidth / 2 + '%';
      }

      var eventArgs = {
        ticksWrapper: this.ul,
        tickElements: this.tickElementCollection
      };

      if (triggerEvent) {
        this.trigger('renderedTicks', eventArgs);
      }

      this.scaleAlignment();
    };

    Slider.prototype.createTick = function (li, start, tickWidth) {
      var span = this.createElement('span', {
        className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),
        attrs: {
          role: 'presentation',
          tabIndex: '-1',
          'aria-hidden': 'true'
        }
      });
      li.appendChild(span);

      if ((0, _ej2Base.isNullOrUndefined)(this.customValues)) {
        this.formatTicksValue(li, start, span, tickWidth);
      } else {
        if (this.enableHtmlSanitizer) {
          span.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(start.toString());
        } else {
          span.innerHTML = start.toString();
        }
      }
    };

    Slider.prototype.formatTicksValue = function (li, start, spanElement, tickWidth) {
      var _this = this;

      var tickText = this.formatNumber(start);
      var text = !(0, _ej2Base.isNullOrUndefined)(this.ticks) && !(0, _ej2Base.isNullOrUndefined)(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
      var eventArgs = {
        value: start,
        text: text,
        tickElement: li
      };
      this.trigger('renderingTicks', eventArgs, function (observedArgs) {
        li.setAttribute('title', observedArgs.text.toString());

        if (spanElement) {
          if (_this.enableHtmlSanitizer) {
            spanElement.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(observedArgs.text.toString());
          } else {
            spanElement.innerHTML = observedArgs.text.toString();
          }
        }

        if (!(0, _ej2Base.isNullOrUndefined)(_this.renderingTicks) && (0, _ej2Base.isBlazor)()) {
          var orien = _this.orientation === 'Horizontal' ? 'h' : 'v';

          _this.ticksAlignment(orien, tickWidth, false);
        }
      });
    };

    Slider.prototype.scaleAlignment = function () {
      this.tickValuePosition();
      var smallTick = 12;
      var largeTick = 20;
      var half = largeTick / 2;
      var orien = this.orientation === 'Vertical' ? 'v' : 'h';

      if (this.orientation === 'Vertical') {
        this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
      } else {
        this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);
      }
    };

    Slider.prototype.tickValuePosition = function () {
      var first = this.firstChild.getBoundingClientRect();
      var firstChild;
      var smallStep = this.ticks.smallStep;
      var count = Math.abs(parseFloat((0, _ej2Base.formatUnit)(this.max)) - parseFloat((0, _ej2Base.formatUnit)(this.min))) / smallStep;

      if (this.firstChild.children.length > 0) {
        firstChild = this.firstChild.children[0].getBoundingClientRect();
      }

      var tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' + classNames.large + ' .' + classNames.tickValue)];
      var other;

      if (this.ticks.placement === 'Both') {
        other = [].slice.call(tickElements[0], 2);
      } else {
        other = [].slice.call(tickElements[0], 1);
      }

      var tickWidth = this.orientation === 'Vertical' ? first.height * 2 : first.width * 2;

      for (var i = 0; i < this.firstChild.children.length; i++) {
        if (this.orientation === 'Vertical') {
          this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';
        } else {
          if (!this.enableRtl) {
            this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';
          } else {
            this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';
          }
        }
      }

      for (var i = 0; i < other.length; i++) {
        var otherChild = other[i].getBoundingClientRect();

        if (this.orientation === 'Vertical') {
          (0, _ej2Base.setStyleAttribute)(other[i], {
            top: (tickWidth - otherChild.height) / 2 + 'px'
          });
        } else {
          (0, _ej2Base.setStyleAttribute)(other[i], {
            left: (tickWidth - otherChild.width) / 2 + 'px'
          });
        }
      }

      if (this.enableRtl && this.lastChild.children.length && count !== 0) {
        this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';

        if (this.ticks.placement === 'Both') {
          this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';
        }
      }

      if (count === 0) {
        if (this.orientation === 'Horizontal') {
          if (!this.enableRtl) {
            this.firstChild.classList.remove(classNames.sliderLastTick);
            this.firstChild.style.left = this.firstHandle.style.left;
          } else {
            this.firstChild.classList.remove(classNames.sliderLastTick);
            this.firstChild.style.right = this.firstHandle.style.right;
            this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';

            if (this.ticks.placement === 'Both') {
              this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';
            }
          }
        }

        if (this.orientation === 'Vertical') {
          this.firstChild.classList.remove(classNames.sliderLastTick);
        }
      }
    };

    Slider.prototype.setAriaAttrValue = function (element) {
      var ariaValueText;
      var isTickFormatted = !(0, _ej2Base.isNullOrUndefined)(this.ticks) && !(0, _ej2Base.isNullOrUndefined)(this.ticks.format) ? true : false;
      var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
      var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
      text = !this.customAriaText ? text : this.customAriaText;

      if (text.split(' - ').length === 2) {
        ariaValueText = text.split(' - ');
      } else {
        ariaValueText = [text, text];
      }

      this.setAriaAttributes(element);

      if (this.type !== 'Range') {
        (0, _ej2Base.attributes)(element, {
          'aria-valuenow': valuenow,
          'aria-valuetext': text
        });
      } else {
        !this.enableRtl ? element === this.firstHandle ? (0, _ej2Base.attributes)(element, {
          'aria-valuenow': valuenow.split(' - ')[0],
          'aria-valuetext': ariaValueText[0]
        }) : (0, _ej2Base.attributes)(element, {
          'aria-valuenow': valuenow.split(' - ')[1],
          'aria-valuetext': ariaValueText[1]
        }) : element === this.firstHandle ? (0, _ej2Base.attributes)(element, {
          'aria-valuenow': valuenow.split(' - ')[1],
          'aria-valuetext': ariaValueText[1]
        }) : (0, _ej2Base.attributes)(element, {
          'aria-valuenow': valuenow.split(' - ')[0],
          'aria-valuetext': ariaValueText[0]
        });
      }
    };

    Slider.prototype.handleValueUpdate = function () {
      var hVal;

      if (this.type === 'Range') {
        if (this.activeHandle === 1) {
          hVal = this.handleVal1;
        } else {
          hVal = this.handleVal2;
        }
      } else {
        hVal = this.handleVal1;
      }

      return hVal;
    };

    Slider.prototype.getLimitCorrectedValues = function (value) {
      if (this.type === 'MinRange' || this.type === 'Default') {
        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
      } else {
        if (this.activeHandle === 1) {
          value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
        } else {
          value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
        }
      }

      return value;
    };

    Slider.prototype.focusSliderElement = function () {
      if (!this.isElementFocused) {
        this.element.focus();
        this.isElementFocused = true;
      }
    };

    Slider.prototype.buttonClick = function (args) {
      this.focusSliderElement();
      var value;
      var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
      var hVal = this.handleValueUpdate();

      if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
      } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
      } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
      } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
      } else if (args.keyCode === 36) {
        value = parseFloat(this.min.toString());
      } else if (args.keyCode === 35) {
        value = parseFloat(this.max.toString());
      }

      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }

      this.changeHandleValue(value);

      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
        this.materialChange();
      }

      this.tooltipToggle(this.getHandle());
      this.getHandle().focus();

      if (args.currentTarget.classList.contains(classNames.firstButton)) {
        _ej2Base.EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);
      }

      if (args.currentTarget.classList.contains(classNames.secondButton)) {
        _ej2Base.EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);
      }
    };

    Slider.prototype.tooltipToggle = function (target) {
      if (this.isMaterialTooltip) {
        !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);
      } else {
        !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);
      }
    };

    Slider.prototype.buttonUp = function (args) {
      if (args.currentTarget.classList.contains(classNames.firstButton)) {
        _ej2Base.EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);
      }

      if (args.currentTarget.classList.contains(classNames.secondButton)) {
        _ej2Base.EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);
      }
    };

    Slider.prototype.setRangeBar = function () {
      if (this.orientation === 'Horizontal') {
        if (this.type === 'MinRange') {
          this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'width': (0, _ej2Base.isNullOrUndefined)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
          });
        } else {
          this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'width': this.handlePos2 - this.handlePos1 + 'px'
          });
        }
      } else {
        if (this.type === 'MinRange') {
          this.rangeBar.style.bottom = '0px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'height': (0, _ej2Base.isNullOrUndefined)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
          });
        } else {
          this.rangeBar.style.bottom = this.handlePos1 + 'px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'height': this.handlePos2 - this.handlePos1 + 'px'
          });
        }
      }
    };

    Slider.prototype.checkValidValueAndPos = function (value) {
      value = this.checkHandleValue(value);
      value = this.checkHandlePosition(value);
      return value;
    };

    Slider.prototype.setLimitBarPositions = function (fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
      if (this.orientation === 'Horizontal') {
        if (!this.enableRtl) {
          this.limitBarFirst.style.left = fromMinPostion + 'px';
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
        } else {
          this.limitBarFirst.style.right = fromMinPostion + 'px';
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';
        }
      } else {
        this.limitBarFirst.style.bottom = fromMinPostion + 'px';
        this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + 'px';
      }

      if (this.type === 'Range') {
        if (this.orientation === 'Horizontal') {
          if (!this.enableRtl) {
            this.limitBarSecond.style.left = toMinPostion + 'px';
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
          } else {
            this.limitBarSecond.style.right = toMinPostion + 'px';
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';
          }
        } else {
          this.limitBarSecond.style.bottom = toMinPostion + 'px';
          this.limitBarSecond.style.height = toMaxpostion - toMinPostion + 'px';
        }
      }
    };

    Slider.prototype.setLimitBar = function () {
      if (this.type === 'Default' || this.type === 'MinRange') {
        var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromPosition = this.checkValidValueAndPos(fromPosition);
        var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        toPosition = this.checkValidValueAndPos(toPosition);
        this.setLimitBarPositions(fromPosition, toPosition);
      } else if (this.type === 'Range') {
        var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
        var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
        var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMinPostion = this.checkValidValueAndPos(toMinPostion);
        var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMaxpostion = this.checkValidValueAndPos(toMaxpostion);
        this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
      }
    };

    Slider.prototype.getLimitValueAndPosition = function (currentValue, minValue, maxValue, limitBar) {
      if ((0, _ej2Base.isNullOrUndefined)(minValue)) {
        minValue = this.min;

        if ((0, _ej2Base.isNullOrUndefined)(currentValue) && limitBar) {
          currentValue = minValue;
        }
      }

      if ((0, _ej2Base.isNullOrUndefined)(maxValue)) {
        maxValue = this.max;

        if ((0, _ej2Base.isNullOrUndefined)(currentValue) && limitBar) {
          currentValue = maxValue;
        }
      }

      if (currentValue < minValue) {
        currentValue = minValue;
      }

      if (currentValue > maxValue) {
        currentValue = maxValue;
      }

      return [currentValue, this.checkHandlePosition(currentValue)];
    };

    Slider.prototype.setValue = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.customValues) && this.customValues.length > 0) {
        this.min = 0;
        this.max = this.customValues.length - 1;
        this.setBarColor();
      }

      this.setAriaAttributes(this.firstHandle);
      this.handleVal1 = (0, _ej2Base.isNullOrUndefined)(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.preHandlePos1 = this.handlePos1;
      (0, _ej2Base.isNullOrUndefined)(this.activeHandle) ? this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1 : this.activeHandle = this.activeHandle;

      if (this.type === 'Default' || this.type === 'MinRange') {
        if (this.limits.enabled) {
          var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = values[0];
          this.handlePos1 = values[1];
          this.preHandlePos1 = this.handlePos1;
        }

        this.setHandlePosition();
        this.handleStart();
        this.value = this.handleVal1;
        this.setAriaAttrValue(this.firstHandle);
        this.changeEvent('changed');
      } else {
        this.validateRangeValue();
      }

      if (this.type !== 'Default') {
        this.setRangeBar();
      }

      if (this.limits.enabled) {
        this.setLimitBar();
      }
    };

    Slider.prototype.rangeValueUpdate = function () {
      if (this.value === null || typeof this.value !== 'object') {
        this.value = [parseFloat((0, _ej2Base.formatUnit)(this.min)), parseFloat((0, _ej2Base.formatUnit)(this.max))];
      }
    };

    Slider.prototype.validateRangeValue = function () {
      this.rangeValueUpdate();
      this.setRangeValue();
    };

    Slider.prototype.modifyZindex = function () {
      if (this.type === 'Range') {
        if (this.activeHandle === 1) {
          this.firstHandle.style.zIndex = this.zIndex + 4 + '';
          this.secondHandle.style.zIndex = this.zIndex + 3 + '';
        } else {
          this.firstHandle.style.zIndex = this.zIndex + 3 + '';
          this.secondHandle.style.zIndex = this.zIndex + 4 + '';
        }
      } else if (this.isMaterialTooltip && this.tooltipElement) {
        this.tooltipElement.style.zIndex = (0, _ej2Popups.getZindexPartial)(this.element) + '';
      }
    };

    Slider.prototype.setHandlePosition = function () {
      var _this = this;

      var handle;
      var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;

      if (this.isMaterialTooltip) {
        handle = [this.firstHandle, this.materialHandle];
      } else {
        handle = [this.getHandle()];
      }

      this.handleStart();
      handle.forEach(function (handle) {
        if (_this.orientation === 'Horizontal') {
          _this.enableRtl ? handle.style.right = pos + "px" : handle.style.left = pos + "px";
        } else {
          handle.style.bottom = pos + "px";
        }
      });
      this.changeEvent('change');
    };

    Slider.prototype.getHandle = function () {
      return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
    };

    Slider.prototype.setRangeValue = function () {
      this.updateRangeValue();
      this.activeHandle = 1;
      this.setHandlePosition();
      this.activeHandle = 2;
      this.setHandlePosition();
      this.activeHandle = 1;
    };

    Slider.prototype.changeEvent = function (eventName) {
      var previous = eventName === 'change' ? this.previousVal : this.previousChanged;

      if (this.type !== 'Range') {
        this.setProperties({
          'value': this.handleVal1
        }, true);

        if (previous !== this.value) {
          this.trigger(eventName, this.changeEventArgs(eventName));
          this.setPreviousVal(eventName, this.value);
        }

        this.setAriaAttrValue(this.firstHandle);
      } else {
        var value = this.value = [this.handleVal1, this.handleVal2];
        this.setProperties({
          'value': value
        }, true);

        if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {
          this.trigger(eventName, this.changeEventArgs(eventName));
          this.setPreviousVal(eventName, this.value);
        }

        this.setAriaAttrValue(this.getHandle());
      }

      this.hiddenInput.value = this.value.toString();
    };

    Slider.prototype.changeEventArgs = function (eventName) {
      var eventArgs;

      if (this.tooltip.isVisible && this.tooltipObj) {
        this.tooltipValue();
        eventArgs = {
          value: this.value,
          previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
          action: eventName,
          text: this.tooltipObj.content
        };
      } else {
        eventArgs = {
          value: this.value,
          previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,
          action: eventName,
          text: (0, _ej2Base.isNullOrUndefined)(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString
        };
      }

      return eventArgs;
    };

    Slider.prototype.setPreviousVal = function (eventName, value) {
      if (eventName === 'change') {
        this.previousVal = value;
      } else {
        this.previousChanged = value;
      }
    };

    Slider.prototype.updateRangeValue = function () {
      var values = this.value.toString().split(',').map(Number);

      if (this.enableRtl && this.orientation !== 'Vertical' || this.rtl) {
        this.value = [values[1], values[0]];
      } else {
        this.value = [values[0], values[1]];
      }

      if (this.enableRtl && this.orientation !== 'Vertical') {
        this.handleVal1 = this.checkHandleValue(this.value[1]);
        this.handleVal2 = this.checkHandleValue(this.value[0]);
      } else {
        this.handleVal1 = this.checkHandleValue(this.value[0]);
        this.handleVal2 = this.checkHandleValue(this.value[1]);
      }

      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);

      if (this.handlePos1 > this.handlePos2) {
        this.handlePos1 = this.handlePos2;
        this.handleVal1 = this.handleVal2;
      }

      this.preHandlePos1 = this.handlePos1;
      this.preHandlePos2 = this.handlePos2;

      if (this.limits.enabled) {
        this.activeHandle = 1;
        var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
        this.handleVal1 = values_1[0];
        this.handlePos1 = values_1[1];
        this.preHandlePos1 = this.handlePos1;
        this.activeHandle = 2;
        values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
        this.handleVal2 = values_1[0];
        this.handlePos2 = values_1[1];
        this.preHandlePos2 = this.handlePos2;
      }
    };

    Slider.prototype.checkHandlePosition = function (value) {
      var pos;
      value = 100 * (value - parseFloat((0, _ej2Base.formatUnit)(this.min))) / (parseFloat((0, _ej2Base.formatUnit)(this.max)) - parseFloat((0, _ej2Base.formatUnit)(this.min)));

      if (this.orientation === 'Horizontal') {
        pos = this.element.getBoundingClientRect().width * (value / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (value / 100);
      }

      if (parseFloat((0, _ej2Base.formatUnit)(this.max)) === parseFloat((0, _ej2Base.formatUnit)(this.min))) {
        if (this.orientation === 'Horizontal') {
          pos = this.element.getBoundingClientRect().width;
        } else {
          pos = this.element.getBoundingClientRect().height;
        }
      }

      return pos;
    };

    Slider.prototype.checkHandleValue = function (value) {
      if (this.min > this.max) {
        this.min = this.max;
      }

      if (this.min === this.max) {
        return parseFloat((0, _ej2Base.formatUnit)(this.max));
      }

      var handle = this.tempStartEnd();

      if (value < handle.start) {
        value = handle.start;
      } else if (value > handle.end) {
        value = handle.end;
      }

      return value;
    };
    /**
     * It is used to reposition slider.
     * @returns void
     */


    Slider.prototype.reposition = function () {
      var _this = this;

      this.firstHandle.style.transition = 'none';

      if (this.type !== 'Default') {
        this.rangeBar.style.transition = 'none';
      }

      if (this.type === 'Range') {
        this.secondHandle.style.transition = 'none';
      }

      this.handlePos1 = this.checkHandlePosition(this.handleVal1);

      if (this.handleVal2) {
        this.handlePos2 = this.checkHandlePosition(this.handleVal2);
      }

      if (this.orientation === 'Horizontal') {
        this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px";

        if (this.isMaterialTooltip) {
          this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + "px" : this.materialHandle.style.left = this.handlePos1 + "px";
        }

        if (this.type === 'MinRange') {
          this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'width': (0, _ej2Base.isNullOrUndefined)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
          });
        } else if (this.type === 'Range') {
          this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px";
          this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'width': this.handlePos2 - this.handlePos1 + 'px'
          });
        }
      } else {
        this.firstHandle.style.bottom = this.handlePos1 + "px";

        if (this.isMaterialTooltip) {
          this.materialHandle.style.bottom = this.handlePos1 + "px";
        }

        if (this.type === 'MinRange') {
          this.rangeBar.style.bottom = '0px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'height': (0, _ej2Base.isNullOrUndefined)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
          });
        } else if (this.type === 'Range') {
          this.secondHandle.style.bottom = this.handlePos2 + "px";
          this.rangeBar.style.bottom = this.handlePos1 + 'px';
          (0, _ej2Base.setStyleAttribute)(this.rangeBar, {
            'height': this.handlePos2 - this.handlePos1 + 'px'
          });
        }
      }

      if (this.limits.enabled) {
        this.setLimitBar();
      }

      if (this.ticks.placement !== 'None' && this.ul) {
        this.removeElement(this.ul);
        this.ul = undefined;
        this.renderScale();
      }

      this.handleStart();

      if (!this.tooltip.isVisible) {
        setTimeout(function () {
          _this.firstHandle.style.transition = _this.scaleTransform;

          if (_this.type === 'Range') {
            _this.secondHandle.style.transition = _this.scaleTransform;
          }
        });
      }

      this.refreshTooltip(this.tooltipTarget);
      this.setBarColor();
    };

    Slider.prototype.changeHandleValue = function (value) {
      var position = null;

      if (this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          this.handleVal1 = this.checkHandleValue(value);
          this.handlePos1 = this.checkHandlePosition(this.handleVal1);

          if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {
            this.handlePos1 = this.handlePos2;
            this.handleVal1 = this.handleVal2;
          }

          if (this.handlePos1 !== this.preHandlePos1) {
            position = this.preHandlePos1 = this.handlePos1;
          }
        }

        this.modifyZindex();
      } else {
        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          this.handleVal2 = this.checkHandleValue(value);
          this.handlePos2 = this.checkHandlePosition(this.handleVal2);

          if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {
            this.handlePos2 = this.handlePos1;
            this.handleVal2 = this.handleVal1;
          }

          if (this.handlePos2 !== this.preHandlePos2) {
            position = this.preHandlePos2 = this.handlePos2;
          }
        }

        this.modifyZindex();
      }

      if (position !== null) {
        if (this.type !== 'Default') {
          this.setRangeBar();
        }

        this.setHandlePosition();
      }
    };

    Slider.prototype.tempStartEnd = function () {
      if (this.min > this.max) {
        return {
          start: this.max,
          end: this.min
        };
      } else {
        return {
          start: this.min,
          end: this.max
        };
      }
    };

    Slider.prototype.xyToPosition = function (position) {
      var pos;

      if (this.min === this.max) {
        return 100;
      }

      if (this.orientation === 'Horizontal') {
        var left = position.x - this.element.getBoundingClientRect().left;
        var num = this.element.offsetWidth / 100;
        this.val = left / num;
      } else {
        var top_1 = position.y - this.element.getBoundingClientRect().top;
        var num = this.element.offsetHeight / 100;
        this.val = 100 - top_1 / num;
      }

      var val = this.stepValueCalculation(this.val);

      if (val < 0) {
        val = 0;
      } else if (val > 100) {
        val = 100;
      }

      if (this.enableRtl && this.orientation !== 'Vertical') {
        val = 100 - val;
      }

      if (this.orientation === 'Horizontal') {
        pos = this.element.getBoundingClientRect().width * (val / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (val / 100);
      }

      return pos;
    };

    Slider.prototype.stepValueCalculation = function (value) {
      if (this.step === 0) {
        this.step = 1;
      }

      var percentStep = parseFloat((0, _ej2Base.formatUnit)(this.step)) / ((parseFloat((0, _ej2Base.formatUnit)(this.max)) - parseFloat((0, _ej2Base.formatUnit)(this.min))) / 100);
      var remain = value % Math.abs(percentStep);

      if (remain !== 0) {
        if (percentStep / 2 > remain) {
          value -= remain;
        } else {
          value += Math.abs(percentStep) - remain;
        }
      }

      return value;
    };

    Slider.prototype.add = function (a, b, addition) {
      var precision;
      var x = Math.pow(10, precision || 3);
      var val;

      if (addition) {
        val = (Math.round(a * x) + Math.round(b * x)) / x;
      } else {
        val = (Math.round(a * x) - Math.round(b * x)) / x;
      }

      return val;
    };

    Slider.prototype.positionToValue = function (pos) {
      var val;
      var diff = parseFloat((0, _ej2Base.formatUnit)(this.max)) - parseFloat((0, _ej2Base.formatUnit)(this.min));

      if (this.orientation === 'Horizontal') {
        val = pos / this.element.getBoundingClientRect().width * diff;
      } else {
        val = pos / this.element.getBoundingClientRect().height * diff;
      }

      var total = this.add(val, parseFloat(this.min.toString()), true);
      return total;
    };

    Slider.prototype.sliderBarClick = function (evt) {
      evt.preventDefault();
      var pos;

      if (evt.type === 'mousedown' || evt.type === 'click') {
        pos = {
          x: evt.clientX,
          y: evt.clientY
        };
      } else if (evt.type === 'touchstart') {
        pos = {
          x: evt.changedTouches[0].clientX,
          y: evt.changedTouches[0].clientY
        };
      }

      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);

      if (this.type === 'Range' && this.handlePos2 - handlepos < handlepos - this.handlePos1) {
        this.activeHandle = 2;

        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
            handleVal = value[0];
            handlepos = value[1];
          }

          this.secondHandle.classList.add(classNames.sliderActiveHandle);
          this.handlePos2 = this.preHandlePos2 = handlepos;
          this.handleVal2 = handleVal;
        }

        this.modifyZindex();
        this.secondHandle.focus();
      } else {
        this.activeHandle = 1;

        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handleVal = value[0];
            handlepos = value[1];
          }

          this.firstHandle.classList.add(classNames.sliderActiveHandle);
          this.handlePos1 = this.preHandlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }

        this.modifyZindex();
        this.firstHandle.focus();
      }

      if (this.isMaterialTooltip) {
        this.tooltipElement.classList.add(classNames.materialTooltipActive);
      }

      var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

      if (focusedElement && this.getHandle() !== focusedElement) {
        focusedElement.classList.remove(classNames.sliderTabHandle);
      }

      var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;

      if (evt.target === handle) {
        if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
          this.materialChange();
        }

        this.tooltipToggle(this.getHandle());
        return;
      }

      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }

      var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
      this.getHandle().style.transition = transition.handle;

      if (this.type !== 'Default') {
        this.rangeBar.style.transition = transition.rangeBar;
      }

      this.setHandlePosition();

      if (this.type !== 'Default') {
        this.setRangeBar();
      }
    };

    Slider.prototype.sliderDown = function (event) {
      var _a, _b;

      event.preventDefault();
      this.focusSliderElement();

      if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {
        var xPostion = void 0;
        var yPostion = void 0;

        if (event.type === 'mousedown') {
          _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
        } else if (event.type === 'touchstart') {
          _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
        }

        if (this.orientation === 'Horizontal') {
          this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;
        } else {
          this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;
        }

        this.minDiff = this.handleVal2 - this.handleVal1;
        this.tooltipToggle(this.rangeBar);
        var focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);

        if (focusedElement) {
          focusedElement.classList.remove(classNames.sliderTabHandle);
        }

        _ej2Base.EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);

        _ej2Base.EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);
      } else {
        this.sliderBarClick(event);

        _ej2Base.EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);

        _ej2Base.EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);
      }
    };

    Slider.prototype.handleValueAdjust = function (handleValue, assignValue, handleNumber) {
      if (handleNumber === 1) {
        this.handleVal1 = assignValue;
        this.handleVal2 = this.handleVal1 + this.minDiff;
      } else if (handleNumber === 2) {
        this.handleVal2 = assignValue;
        this.handleVal1 = this.handleVal2 - this.minDiff;
      }

      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
    };

    Slider.prototype.dragRangeBarMove = function (event) {
      var _a, _b;

      if (event.type !== 'touchmove') {
        event.preventDefault();
      }

      var pos;
      this.rangeBar.style.transition = 'none';
      this.firstHandle.style.transition = 'none';
      this.secondHandle.style.transition = 'none';
      var xPostion;
      var yPostion;

      if (event.type === 'mousemove') {
        _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
      } else {
        _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
      }

      if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
        if (!this.enableRtl) {
          pos = {
            x: xPostion - this.firstPartRemain,
            y: yPostion + this.secondPartRemain
          };
        } else {
          pos = {
            x: xPostion + this.secondPartRemain,
            y: yPostion + this.secondPartRemain
          };
        }

        this.handlePos1 = this.xyToPosition(pos);
        this.handleVal1 = this.positionToValue(this.handlePos1);

        if (!this.enableRtl) {
          pos = {
            x: xPostion + this.secondPartRemain,
            y: yPostion - this.firstPartRemain
          };
        } else {
          pos = {
            x: xPostion - this.firstPartRemain,
            y: yPostion - this.firstPartRemain
          };
        }

        this.handlePos2 = this.xyToPosition(pos);
        this.handleVal2 = this.positionToValue(this.handlePos2);

        if (this.limits.enabled) {
          var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = value[0];
          this.handlePos1 = value[1];

          if (this.handleVal1 === this.limits.minEnd) {
            this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
          }

          if (this.handleVal1 === this.limits.minStart) {
            this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
          }

          value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
          this.handleVal2 = value[0];
          this.handlePos2 = value[1];

          if (this.handleVal2 === this.limits.maxStart) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
          }

          if (this.handleVal2 === this.limits.maxEnd) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
          }
        }

        if (this.handleVal2 === this.max) {
          this.handleValueAdjust(this.handleVal2, this.max, 2);
        }

        if (this.handleVal1 === this.min) {
          this.handleValueAdjust(this.handleVal1, this.min, 1);
        }
      }

      this.activeHandle = 1;
      this.setHandlePosition();
      this.activeHandle = 2;
      this.setHandlePosition();
      this.tooltipToggle(this.rangeBar);
      this.setRangeBar();
    };

    Slider.prototype.sliderBarUp = function () {
      this.changeEvent('changed');
      this.handleFocusOut();
      this.firstHandle.classList.remove(classNames.sliderActiveHandle);

      if (this.type === 'Range') {
        this.secondHandle.classList.remove(classNames.sliderActiveHandle);
      }

      this.closeTooltip();

      if (this.isMaterial) {
        this.getHandle().classList.remove('e-large-thumb-size');

        if (this.isMaterialTooltip) {
          this.tooltipElement.classList.remove(classNames.materialTooltipActive);
        }
      }

      _ej2Base.EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);

      _ej2Base.EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);
    };

    Slider.prototype.sliderBarMove = function (evt) {
      if (evt.type !== 'touchmove') {
        evt.preventDefault();
      }

      var pos;

      if (evt.type === 'mousemove') {
        pos = {
          x: evt.clientX,
          y: evt.clientY
        };
      } else {
        pos = {
          x: evt.changedTouches[0].clientX,
          y: evt.changedTouches[0].clientY
        };
      }

      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);
      handlepos = Math.round(handlepos);

      if (this.type !== 'Range' && this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handlepos = valueAndPostion[1];
            handleVal = valueAndPostion[0];
          }

          this.handlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }

        this.firstHandle.classList.add(classNames.sliderActiveHandle);
      }

      if (this.type === 'Range') {
        if (this.activeHandle === 1) {
          this.firstHandle.classList.add(classNames.sliderActiveHandle);

          if (!(this.limits.enabled && this.limits.startHandleFixed)) {
            if (handlepos > this.handlePos2) {
              handlepos = this.handlePos2;
              handleVal = this.handleVal2;
            }

            if (handlepos !== this.preHandlePos1) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                handleVal = value[0];
                handlepos = value[1];
              }

              this.handlePos1 = this.preHandlePos1 = handlepos;
              this.handleVal1 = handleVal;
              this.activeHandle = 1;
            }
          }
        } else if (this.activeHandle === 2) {
          this.secondHandle.classList.add(classNames.sliderActiveHandle);

          if (!(this.limits.enabled && this.limits.endHandleFixed)) {
            if (handlepos < this.handlePos1) {
              handlepos = this.handlePos1;
              handleVal = this.handleVal1;
            }

            if (handlepos !== this.preHandlePos2) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                handleVal = value[0];
                handlepos = value[1];
              }

              this.handlePos2 = this.preHandlePos2 = handlepos;
              this.handleVal2 = handleVal;
              this.activeHandle = 2;
            }
          }
        }
      }

      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }

      this.getHandle().style.transition = this.scaleTransform;

      if (this.type !== 'Default') {
        this.rangeBar.style.transition = 'none';
      }

      this.setHandlePosition();

      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {
        this.materialChange();
      }

      this.tooltipToggle(this.getHandle());

      if (this.type !== 'Default') {
        this.setRangeBar();
      }
    };

    Slider.prototype.dragRangeBarUp = function (event) {
      this.changeEvent('changed');
      this.closeTooltip();

      _ej2Base.EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);

      _ej2Base.EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);
    };

    Slider.prototype.checkRepeatedValue = function (currentValue) {
      if (this.type === 'Range') {
        var previousVal = this.enableRtl && this.orientation !== 'Vertical' ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];

        if (currentValue === previousVal) {
          return 0;
        }
      } else {
        if (currentValue === this.previousVal) {
          return 0;
        }
      }

      return 1;
    };

    Slider.prototype.refreshTooltip = function (target) {
      if (this.tooltip.isVisible && this.tooltipObj) {
        this.tooltipValue();

        if (target) {
          this.tooltipObj.refresh(target);
          this.tooltipTarget = target;
        }
      }
    };

    Slider.prototype.openTooltip = function (target) {
      if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.open(target);
        this.tooltipTarget = target;
      }
    };

    Slider.prototype.closeTooltip = function () {
      if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.close();
        this.tooltipTarget = undefined;
      }
    };

    Slider.prototype.keyDown = function (event) {
      switch (event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
        case 33:
        case 34:
        case 36:
        case 35:
          event.preventDefault();
          this.buttonClick(event);
          break;
      }
    };

    Slider.prototype.wireButtonEvt = function (destroy) {
      if (!destroy) {
        _ej2Base.EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);

        _ej2Base.EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);

        _ej2Base.EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);

        _ej2Base.EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);

        _ej2Base.EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);

        _ej2Base.EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);

        _ej2Base.EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);

        _ej2Base.EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);
      } else {
        _ej2Base.EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);

        _ej2Base.EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);

        _ej2Base.EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);

        _ej2Base.EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);

        _ej2Base.EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);

        _ej2Base.EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);

        _ej2Base.EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);

        _ej2Base.EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);
      }
    };

    Slider.prototype.wireEvents = function () {
      this.onresize = this.reposition.bind(this);
      window.addEventListener('resize', this.onresize);

      if (this.enabled && !this.readonly) {
        _ej2Base.EventHandler.add(this.element, 'mousedown touchstart', this.sliderDown, this);

        _ej2Base.EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);

        _ej2Base.EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);

        _ej2Base.EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);

        _ej2Base.EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);

        this.wireFirstHandleEvt(false);

        if (this.type === 'Range') {
          this.wireSecondHandleEvt(false);
        }

        if (this.showButtons) {
          this.wireButtonEvt(false);
        }

        this.wireMaterialTooltipEvent(false);

        if (this.isForm) {
          _ej2Base.EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);
        }
      }
    };

    Slider.prototype.unwireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'mousedown touchstart', this.sliderDown);

      _ej2Base.EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);

      _ej2Base.EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);

      _ej2Base.EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);

      _ej2Base.EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);

      this.wireFirstHandleEvt(true);

      if (this.type === 'Range') {
        this.wireSecondHandleEvt(true);
      }

      if (this.showButtons) {
        this.wireButtonEvt(true);
      }

      this.wireMaterialTooltipEvent(true);

      _ej2Base.EventHandler.remove(this.element, 'reset', this.formResetHandler);
    };

    Slider.prototype.formResetHandler = function () {
      this.setProperties({
        'value': this.formResetValue
      }, true);
      this.setValue();
    };

    Slider.prototype.keyUp = function (event) {
      if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {
        this.focusSliderElement();

        if (!event.target.classList.contains(classNames.sliderTabHandle)) {
          if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
            this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
          }

          event.target.classList.add(classNames.sliderTabHandle);
          var parentElement = event.target.parentElement;

          if (parentElement === this.element) {
            parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);

            if (this.type === 'Range' || this.type === 'MinRange') {
              parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);
            }
          }

          if (this.type === 'Range') {
            event.target.previousSibling.classList.contains(classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;
          }

          this.getHandle().focus();
          this.tooltipToggle(this.getHandle());
        }
      }

      this.closeTooltip();
      this.changeEvent('changed');
    };

    Slider.prototype.hover = function (event) {
      if (!(0, _ej2Base.isNullOrUndefined)(event)) {
        if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' || event.type === 'pointermove' || event.type === 'touchstart') {
          this.sliderContainer.classList.add(classNames.sliderHover);
        } else {
          this.sliderContainer.classList.remove(classNames.sliderHover);
        }
      }
    };

    Slider.prototype.sliderFocusOut = function (event) {
      if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {
        this.closeMaterialTooltip();

        if (this.element.querySelector('.' + classNames.sliderTabHandle)) {
          this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);
        }

        if (this.element.querySelector('.' + classNames.sliderTabTrack)) {
          this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);

          if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + classNames.sliderTabRange)) {
            this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);
          }
        }

        this.hiddenInput.focus();
        this.hiddenInput.blur();
        this.isElementFocused = false;
      }
    };

    Slider.prototype.removeElement = function (element) {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    };

    Slider.prototype.changeSliderType = function (type) {
      if (this.isMaterialTooltip && this.materialHandle) {
        this.sliderContainer.classList.remove(classNames.materialSlider);
        this.removeElement(this.materialHandle);
        this.materialHandle = undefined;
      }

      this.removeElement(this.firstHandle);
      this.firstHandle = undefined;

      if (type !== 'Default') {
        if (type === 'Range') {
          this.removeElement(this.secondHandle);
          this.secondHandle = undefined;
        }

        this.removeElement(this.rangeBar);
        this.rangeBar = undefined;
      }

      if (this.tooltip.isVisible && !(0, _ej2Base.isNullOrUndefined)(this.tooltipObj)) {
        this.tooltipObj.destroy();
        this.tooltipElement = undefined;
        this.tooltipCollidedPosition = undefined;
      }

      if (this.limits.enabled) {
        if (type === 'MinRange' || type === 'Default') {
          if (!(0, _ej2Base.isNullOrUndefined)(this.limitBarFirst)) {
            this.removeElement(this.limitBarFirst);
            this.limitBarFirst = undefined;
          }
        } else {
          if (!(0, _ej2Base.isNullOrUndefined)(this.limitBarSecond)) {
            this.removeElement(this.limitBarSecond);
            this.limitBarSecond = undefined;
          }
        }
      }

      this.activeHandle = 1;
      this.getThemeInitialization();

      if (this.type === 'Range') {
        this.rangeValueUpdate();
      }

      this.createRangeBar();

      if (this.limits.enabled) {
        this.createLimitBar();
      }

      this.setHandler();
      this.setOrientClass();
      this.wireFirstHandleEvt(false);

      if (this.type === 'Range') {
        this.wireSecondHandleEvt(false);
      }

      this.setValue();

      if (this.tooltip.isVisible) {
        this.renderTooltip();
        this.wireMaterialTooltipEvent(false);
      }

      this.updateConfig();
    };

    Slider.prototype.changeRtl = function () {
      if (!this.enableRtl && this.type === 'Range') {
        this.value = [this.handleVal2, this.handleVal1];
      }

      this.updateConfig();

      if (this.tooltip.isVisible) {
        this.tooltipObj.refresh(this.firstHandle);
      }

      if (this.showButtons) {
        var enabledRTL = this.enableRtl && this.orientation !== 'Vertical';
        (0, _ej2Base.attributes)(enabledRTL ? this.secondBtn : this.firstBtn, {
          'aria-label': 'Decrease',
          title: 'Decrease'
        });
        (0, _ej2Base.attributes)(enabledRTL ? this.firstBtn : this.secondBtn, {
          'aria-label': 'Increase',
          title: 'Increase'
        });
      }
    };

    Slider.prototype.changeOrientation = function () {
      this.changeSliderType(this.type);
    };

    Slider.prototype.updateConfig = function () {
      this.setEnableRTL();
      this.setValue();

      if (this.tooltip.isVisible) {
        this.refreshTooltip(this.tooltipTarget);
      }

      if (this.ticks.placement !== 'None') {
        if (this.ul) {
          this.removeElement(this.ul);
          this.ul = undefined;
          this.renderScale();
        }
      }

      this.limitsPropertyChange();
    };

    Slider.prototype.limitsPropertyChange = function () {
      if (this.limits.enabled) {
        if ((0, _ej2Base.isNullOrUndefined)(this.limitBarFirst) && this.type !== 'Range') {
          this.createLimitBar();
        }

        if ((0, _ej2Base.isNullOrUndefined)(this.limitBarFirst) && (0, _ej2Base.isNullOrUndefined)(this.limitBarSecond) && this.type === 'Range') {
          this.createLimitBar();
        }

        this.setLimitBar();
        this.setValue();
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(this.limitBarFirst)) {
          (0, _ej2Base.detach)(this.limitBarFirst);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.limitBarSecond)) {
          (0, _ej2Base.detach)(this.limitBarSecond);
        }
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */


    Slider.prototype.getPersistData = function () {
      var keyEntity = ['value'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Prepares the slider for safe removal from the DOM.
     * Detaches all event handlers, attributes, and classes to avoid memory leaks.
     * @method destroy
     * @return {void}
     */


    Slider.prototype.destroy = function () {
      _super.prototype.destroy.call(this);

      this.unwireEvents();
      window.removeEventListener('resize', this.onresize);
      (0, _ej2Base.removeClass)([this.sliderContainer], [classNames.sliderDisabled]);
      this.firstHandle.removeAttribute('aria-orientation');

      if (this.type === 'Range') {
        this.secondHandle.removeAttribute('aria-orientation');
      }

      this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
      (0, _ej2Base.detach)(this.sliderContainer);

      if (this.tooltip.isVisible) {
        this.tooltipObj.destroy();
      }

      this.element.innerHTML = '';
    };
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */
    // tslint:disable-next-line


    Slider.prototype.onPropertyChanged = function (newProp, oldProp) {
      var _this = this;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'cssClass':
            this.setCSSClass(oldProp.cssClass);
            break;

          case 'value':
            if (newProp && oldProp) {
              var value = (0, _ej2Base.isNullOrUndefined)(newProp.value) ? this.type === 'Range' ? [this.min, this.max] : this.min : newProp.value;
              this.setProperties({
                'value': value
              }, true);

              if (!(0, _ej2Base.isNullOrUndefined)(oldProp.value) && oldProp.value.toString() !== value.toString()) {
                this.setValue();
                this.refreshTooltip(this.tooltipTarget);

                if (this.type === 'Range') {
                  if ((0, _ej2Base.isNullOrUndefined)(newProp.value) || oldProp.value[1] === value[1]) {
                    this.activeHandle = 1;
                  } else {
                    this.activeHandle = 2;
                  }
                }
              }
            }

            break;

          case 'min':
          case 'step':
          case 'max':
            this.setMinMaxValue();
            break;

          case 'tooltip':
            if (!(0, _ej2Base.isNullOrUndefined)(newProp.tooltip) && !(0, _ej2Base.isNullOrUndefined)(oldProp.tooltip)) {
              this.setTooltip();
            }

            break;

          case 'type':
            if (!(0, _ej2Base.isNullOrUndefined)(oldProp) && Object.keys(oldProp).length && !(0, _ej2Base.isNullOrUndefined)(oldProp.type)) {
              this.changeSliderType(oldProp.type);
              this.setZindex();
            }

            break;

          case 'enableRtl':
            if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {
              this.rtl = oldProp.enableRtl;
              this.changeRtl();
            }

            break;

          case 'limits':
            this.limitsPropertyChange();
            break;

          case 'orientation':
            this.changeOrientation();
            break;

          case 'ticks':
            if (!(0, _ej2Base.isNullOrUndefined)(this.sliderContainer.querySelector('.' + classNames.scale))) {
              (0, _ej2Base.detach)(this.ul);
              Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
                if (className.match(/e-scale-/)) {
                  _this.sliderContainer.classList.remove(className);
                }
              });
            }

            if (this.ticks.placement !== 'None') {
              this.renderScale();
              this.setZindex();
            }

            break;

          case 'locale':
            if (this.showButtons) {
              this.buttonTitle();
            }

            break;

          case 'showButtons':
            if (newProp.showButtons) {
              this.setButtons();
              this.reposition();

              if (this.enabled && !this.readonly) {
                this.wireButtonEvt(false);
              }
            } else {
              if (this.firstBtn && this.secondBtn) {
                this.sliderContainer.removeChild(this.firstBtn);
                this.sliderContainer.removeChild(this.secondBtn);
                this.sliderContainer.classList.remove(classNames.sliderButtonClass);
                this.firstBtn = undefined;
                this.secondBtn = undefined;
                this.reposition();
              }
            }

            break;

          case 'enabled':
            this.setEnabled();
            break;

          case 'readonly':
            this.setReadOnly();
            break;

          case 'customValues':
            this.setValue();
            this.reposition();
            break;

          case 'colorRange':
            this.reposition();
            break;
        }
      }
    };

    Slider.prototype.setReadOnly = function () {
      if (this.readonly) {
        this.unwireEvents();
        this.sliderContainer.classList.add(classNames.readonly);
      } else {
        this.wireEvents();
        this.sliderContainer.classList.remove(classNames.readonly);
      }
    };

    Slider.prototype.setMinMaxValue = function () {
      var _this = this;

      this.setValue();
      this.refreshTooltip(this.tooltipTarget);

      if (!(0, _ej2Base.isNullOrUndefined)(this.sliderContainer.querySelector('.' + classNames.scale))) {
        if (this.ul) {
          (0, _ej2Base.detach)(this.ul);
          Array.prototype.forEach.call(this.sliderContainer.classList, function (className) {
            if (className.match(/e-scale-/)) {
              _this.sliderContainer.classList.remove(className);
            }
          });
        }
      }

      if (this.ticks.placement !== 'None') {
        this.renderScale();
        this.setZindex();
      }
    };

    Slider.prototype.setZindex = function () {
      this.zIndex = 6;

      if (!(0, _ej2Base.isNullOrUndefined)(this.ticks) && this.ticks.placement !== 'None') {
        this.ul.style.zIndex = this.zIndex + -7 + '';
        this.element.style.zIndex = this.zIndex + 2 + '';
      }

      if (!this.isMaterial && !(0, _ej2Base.isNullOrUndefined)(this.ticks) && this.ticks.placement === 'Both') {
        this.element.style.zIndex = this.zIndex + 2 + '';
      }

      this.firstHandle.style.zIndex = this.zIndex + 3 + '';

      if (this.type === 'Range') {
        this.secondHandle.style.zIndex = this.zIndex + 4 + '';
      }
    };

    Slider.prototype.setTooltip = function () {
      this.changeSliderType(this.type);
    };

    Slider.prototype.setBarColor = function () {
      var trackPosition;
      var trackClassName;
      var child = this.sliderTrack.lastElementChild;

      while (child) {
        this.sliderTrack.removeChild(child);
        child = this.sliderTrack.lastElementChild;
      }

      for (var i = 0; i < this.colorRange.length; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.colorRange[i].start) && !(0, _ej2Base.isNullOrUndefined)(this.colorRange[i].end)) {
          if (this.colorRange[i].end > this.colorRange[i].start) {
            if (this.colorRange[i].start < this.min) {
              this.colorRange[i].start = this.min;
            }

            if (this.colorRange[i].end > this.max) {
              this.colorRange[i].end = this.max;
            }

            var startingPosition = this.checkHandlePosition(this.colorRange[i].start);
            var endPosition = this.checkHandlePosition(this.colorRange[i].end);
            var trackContainer = this.createElement('div');
            trackContainer.style.backgroundColor = this.colorRange[i].color;
            trackContainer.style.border = '1px solid ' + this.colorRange[i].color;

            if (this.orientation === 'Horizontal') {
              trackClassName = classNames.sliderHorizantalColor;

              if (this.enableRtl) {
                if ((0, _ej2Base.isNullOrUndefined)(this.customValues)) {
                  trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);
                } else {
                  trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);
                }
              } else {
                trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              }

              trackContainer.style.width = endPosition - startingPosition + 'px';
              trackContainer.style.left = trackPosition + 'px';
            } else {
              trackClassName = classNames.sliderVerticalColor;
              trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              trackContainer.style.height = endPosition - startingPosition + 'px';
              trackContainer.style.bottom = trackPosition + 'px';
            }

            trackContainer.classList.add(trackClassName);
            this.sliderTrack.appendChild(trackContainer);
          }
        }
      }
    };
    /**
     * Gets the component name
     * @private
     */


    Slider.prototype.getModuleName = function () {
      return 'slider';
    };

    __decorate([(0, _ej2Base.Property)(null)], Slider.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Slider.prototype, "customValues", void 0);

    __decorate([(0, _ej2Base.Property)(1)], Slider.prototype, "step", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Slider.prototype, "min", void 0);

    __decorate([(0, _ej2Base.Property)(100)], Slider.prototype, "max", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Slider.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)('Default')], Slider.prototype, "type", void 0);

    __decorate([(0, _ej2Base.Collection)([{}], ColorRangeData)], Slider.prototype, "colorRange", void 0);

    __decorate([(0, _ej2Base.Complex)({}, TicksData)], Slider.prototype, "ticks", void 0);

    __decorate([(0, _ej2Base.Complex)({}, LimitData)], Slider.prototype, "limits", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Slider.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Complex)({}, TooltipData)], Slider.prototype, "tooltip", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Slider.prototype, "showButtons", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Slider.prototype, "enableAnimation", void 0);

    __decorate([(0, _ej2Base.Property)('Horizontal')], Slider.prototype, "orientation", void 0);

    __decorate([(0, _ej2Base.Property)('')], Slider.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Slider.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "changed", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "renderingTicks", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "renderedTicks", void 0);

    __decorate([(0, _ej2Base.Event)()], Slider.prototype, "tooltipChange", void 0);

    Slider = __decorate([_ej2Base.NotifyPropertyChanges], Slider);
    return Slider;
  }(_ej2Base.Component);

  _exports.Slider = Slider;
});;
define('@syncfusion/ej2-inputs/src/textbox/index',["exports", "./textbox"], function (_exports, _textbox) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_textbox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _textbox[key];
  });
});;
define('@syncfusion/ej2-inputs/src/textbox/textbox',["exports", "@syncfusion/ej2-base", "../input/input"], function (_exports, _ej2Base, _input) {
  "use strict";

  _exports.__esModule = true;
  _exports.TextBox = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ROOT = 'e-textbox';
  var CONTROL = 'e-control';
  var HIDE_CLEAR = 'e-clear-icon-hide';
  var TEXTBOX_FOCUS = 'e-input-focus';
  var containerAttr = ['title', 'style', 'class'];
  /**
   * Represents the TextBox component that allows the user to enter the values based on it's type.
   * ```html
   * <input name='images' id='textbox'/>
   * ```
   * ```typescript
   * <script>
   *   var textboxObj = new TextBox();
   *   textboxObj.appendTo('#textbox');
   * </script>
   * ```
   */

  var TextBox =
  /** @class */
  function (_super) {
    __extends(TextBox, _super);

    function TextBox(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.previousValue = null;
      _this.isAngular = false;
      _this.isHiddenInput = false;
      _this.isForm = false;
      _this.inputPreviousValue = null;
      _this.isVue = false;
      _this.textboxOptions = options;
      return _this;
    }
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */


    TextBox.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'floatLabelType':
            _input.Input.removeFloating(this.textboxWrapper);

            _input.Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);

            break;

          case 'enabled':
            _input.Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);

            this.bindClearEvent();
            break;

          case 'width':
            _input.Input.setWidth(newProp.width, this.textboxWrapper.container);

            break;

          case 'value':
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;

            if (!this.isBlank(this.value)) {
              this.value = this.value.toString();
            }

            this.isProtectedOnChange = prevOnChange;

            _input.Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

            if (this.isHiddenInput) {
              this.element.value = this.respectiveElement.value;
            }

            this.inputPreviousValue = this.respectiveElement.value;
            /* istanbul ignore next */

            if ((this.isAngular || this.isVue) && this.preventChange === true) {
              this.previousValue = this.isAngular ? this.value : this.previousValue;
              this.preventChange = false;
            } else if ((0, _ej2Base.isNullOrUndefined)(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && (0, _ej2Base.isNullOrUndefined)(this.preventChange)) {
              this.raiseChangeEvent();
            }

            break;

          case 'htmlAttributes':
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            var attributes = this.element.attributes;
            this.checkAttributes(true);
            break;

          case 'readonly':
            _input.Input.setReadonly(this.readonly, this.respectiveElement);

            break;

          case 'type':
            if (this.respectiveElement.tagName !== 'TEXTAREA') {
              this.respectiveElement.setAttribute('type', this.type);
              this.raiseChangeEvent();
            }

            break;

          case 'showClearButton':
            if (this.respectiveElement.tagName !== 'TEXTAREA') {
              _input.Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);

              this.bindClearEvent();
            }

            break;

          case 'enableRtl':
            _input.Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);

            break;

          case 'placeholder':
            _input.Input.setPlaceholder(this.placeholder, this.respectiveElement);

            break;

          case 'autocomplete':
            if (this.autocomplete !== 'on' && this.autocomplete !== '') {
              this.respectiveElement.autocomplete = this.autocomplete;
            } else {
              this.removeAttributes(['autocomplete']);
            }

            break;

          case 'cssClass':
            _input.Input.setCssClass(newProp.cssClass, [this.textboxWrapper.container], oldProp.cssClass);

            break;

          case 'locale':
            this.globalize = new _ej2Base.Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({
              placeholder: this.l10n.getConstant('placeholder')
            }, true);

            _input.Input.setPlaceholder(this.placeholder, this.respectiveElement);

            break;
        }
      }
    };
    /**
     * Gets the component name
     * @private
     */


    TextBox.prototype.getModuleName = function () {
      return 'textbox';
    };

    TextBox.prototype.isBlank = function (str) {
      return !str || /^\s*$/.test(str);
    };

    TextBox.prototype.preRender = function () {
      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        this.cloneElement = this.element.cloneNode(true);
        this.formElement = (0, _ej2Base.closest)(this.element, 'form');

        if (!(0, _ej2Base.isNullOrUndefined)(this.formElement)) {
          this.isForm = true;
        }
        /* istanbul ignore next */


        if (this.element.tagName === 'EJS-TEXTBOX') {
          var ejInstance = (0, _ej2Base.getValue)('ej2_instances', this.element);
          var inputElement = this.multiline ? this.createElement('textarea') : this.createElement('input');
          var index = 0;

          for (index; index < this.element.attributes.length; index++) {
            var attributeName = this.element.attributes[index].nodeName;

            if (attributeName !== 'id') {
              inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
              inputElement.innerHTML = this.element.innerHTML;

              if (attributeName === 'name') {
                this.element.removeAttribute('name');
              }
            }
          }

          this.element.appendChild(inputElement);
          this.element = inputElement;
          (0, _ej2Base.setValue)('ej2_instances', ejInstance, this.element);
        }

        this.updateHTMLAttrToElement();
        this.checkAttributes(false);

        if (this.element.tagName !== 'TEXTAREA') {
          this.element.setAttribute('type', this.type);
        }

        this.element.setAttribute('role', 'textbox');
        this.globalize = new _ej2Base.Internationalization(this.locale);
        var localeText = {
          placeholder: this.placeholder
        };
        this.l10n = new _ej2Base.L10n('textbox', localeText, this.locale);

        if (this.l10n.getConstant('placeholder') !== '') {
          this.setProperties({
            placeholder: this.placeholder || this.l10n.getConstant('placeholder')
          }, true);
        }

        if (!this.element.hasAttribute('id')) {
          this.element.setAttribute('id', (0, _ej2Base.getUniqueID)('textbox'));
        }

        if (!this.element.hasAttribute('name')) {
          this.element.setAttribute('name', this.element.getAttribute('id'));
        }

        if (this.element.tagName === 'INPUT' && this.multiline) {
          this.isHiddenInput = true;
          this.textarea = this.createElement('textarea');
          this.element.parentNode.insertBefore(this.textarea, this.element);
          this.element.setAttribute('type', 'hidden');
          this.textarea.setAttribute('name', this.element.getAttribute('name'));
          this.element.removeAttribute('name');
          this.textarea.setAttribute('role', this.element.getAttribute('role'));
          this.element.removeAttribute('role');
          var attribute = ['required', 'minlength', 'maxlength'];

          for (var i = 0; i < attribute.length; i++) {
            if (this.element.hasAttribute(attribute[i])) {
              var attr = this.element.getAttribute(attribute[i]);
              this.textarea.setAttribute(attribute[i], attr);
              this.element.removeAttribute(attribute[i]);
            }
          }
        }
      }
    };

    TextBox.prototype.checkAttributes = function (isDynamic) {
      var attrs = isDynamic ? (0, _ej2Base.isNullOrUndefined)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];

      for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
        var key = attrs_1[_i];

        if (!(0, _ej2Base.isNullOrUndefined)(this.element.getAttribute(key))) {
          switch (key) {
            case 'disabled':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['enabled'] === undefined || isDynamic) {
                var enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;
                this.setProperties({
                  enabled: enabled
                }, !isDynamic);
              }

              break;

            case 'readonly':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['readonly'] === undefined || isDynamic) {
                var readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;
                this.setProperties({
                  readonly: readonly
                }, !isDynamic);
              }

              break;

            case 'placeholder':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['placeholder'] === undefined || isDynamic) {
                this.setProperties({
                  placeholder: this.element.placeholder
                }, !isDynamic);
              }

              break;

            case 'autocomplete':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['autocomplete'] === undefined || isDynamic) {
                var autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';
                this.setProperties({
                  autocomplete: autoCompleteTxt
                }, !isDynamic);
              }

              break;

            case 'value':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['value'] === undefined || isDynamic) {
                this.setProperties({
                  value: this.element.value
                }, !isDynamic);
              }

              break;

            case 'type':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.textboxOptions) || this.textboxOptions['type'] === undefined || isDynamic) {
                this.setProperties({
                  type: this.element.type
                }, !isDynamic);
              }

              break;
          }
        }
      }
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    TextBox.prototype.render = function () {
      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;
        this.textboxWrapper = _input.Input.createInput({
          element: this.respectiveElement,
          floatLabelType: this.floatLabelType,
          properties: {
            enabled: this.enabled,
            enableRtl: this.enableRtl,
            cssClass: this.cssClass,
            readonly: this.readonly,
            placeholder: this.placeholder,
            showClearButton: this.showClearButton
          }
        });
        this.updateHTMLAttrToWrapper();

        if (this.isHiddenInput) {
          this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);
        }
      } else {
        this.respectiveElement = this.element;
        this.textboxWrapper = {
          container: this.element.parentElement
        };

        if (this.showClearButton && !this.multiline) {
          this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');

          _input.Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);
        }

        if (this.floatLabelType === 'Auto') {
          _input.Input.wireFloatingEvents(this.respectiveElement);
        } // tslint:disable-next-line


        _input.Input.bindInitialEvent({
          element: this.respectiveElement,
          buttons: null,
          customTag: null,
          floatLabelType: this.floatLabelType,
          properties: this.properties
        });
      }

      this.wireEvents();

      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        _input.Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);

        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.value)) {
        this.initialValue = this.value;
        this.setInitialValue();
      }

      if (this.autocomplete !== 'on' && this.autocomplete !== '') {
        this.respectiveElement.autocomplete = this.autocomplete; // tslint:disable-next-line
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.textboxOptions) && this.textboxOptions['autocomplete'] !== undefined) {
        this.removeAttributes(['autocomplete']);
      }

      this.previousValue = this.value;
      this.inputPreviousValue = this.value;

      _input.Input.setWidth(this.width, this.textboxWrapper.container);

      this.renderComplete();
    };

    TextBox.prototype.updateHTMLAttrToWrapper = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];

          if (containerAttr.indexOf(key) > -1) {
            if (key === 'class') {
              (0, _ej2Base.addClass)([this.textboxWrapper.container], this.htmlAttributes[key].split(' '));
            } else if (key === 'style') {
              var setStyle = this.textboxWrapper.container.getAttribute(key);
              setStyle = !(0, _ej2Base.isNullOrUndefined)(setStyle) ? setStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.textboxWrapper.container.setAttribute(key, setStyle);
            } else {
              this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };

    TextBox.prototype.updateHTMLAttrToElement = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];

          if (containerAttr.indexOf(key) < 0) {
            this.element.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };

    TextBox.prototype.setInitialValue = function () {
      if (!this.isAngular) {
        this.respectiveElement.setAttribute('value', this.initialValue);
      }
    };

    TextBox.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.respectiveElement, 'focus', this.focusHandler, this);

      _ej2Base.EventHandler.add(this.respectiveElement, 'blur', this.focusOutHandler, this);

      _ej2Base.EventHandler.add(this.respectiveElement, 'input', this.inputHandler, this);

      _ej2Base.EventHandler.add(this.respectiveElement, 'change', this.changeHandler, this);

      if (this.isForm) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.resetForm, this);
      }

      this.bindClearEvent();
    };

    TextBox.prototype.resetValue = function (value) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.value = value;
      this.isProtectedOnChange = prevOnChange;
    };

    TextBox.prototype.resetForm = function () {
      if (this.isAngular) {
        this.resetValue('');
      } else {
        this.resetValue(this.initialValue);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.textboxWrapper)) {
        var label = this.textboxWrapper.container.querySelector('.e-float-text');

        if (!(0, _ej2Base.isNullOrUndefined)(label)) {
          if ((0, _ej2Base.isNullOrUndefined)(this.initialValue) || this.initialValue === '') {
            label.classList.add('e-label-bottom');
            label.classList.remove('e-label-top');
          } else if (this.initialValue !== '') {
            label.classList.add('e-label-top');
            label.classList.remove('e-label-bottom');
          }
        }
      }
    };

    TextBox.prototype.focusHandler = function (args) {
      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger('focus', eventArgs);
    };

    TextBox.prototype.focusOutHandler = function (args) {
      if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') && this.previousValue !== this.respectiveElement.value) {
        this.raiseChangeEvent(args, true);
      }

      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger('blur', eventArgs);
    };

    TextBox.prototype.inputHandler = function (args) {
      // tslint:disable-next-line
      var textboxObj = this;
      var eventArgs = {
        event: args,
        value: this.respectiveElement.value,
        previousValue: this.inputPreviousValue,
        container: this.textboxWrapper.container
      };
      this.inputPreviousValue = this.respectiveElement.value;
      /* istanbul ignore next */

      if (this.isAngular) {
        textboxObj.localChange({
          value: this.respectiveElement.value
        });
        this.preventChange = true;
      }

      if (this.isVue) {
        this.preventChange = true;
      }

      this.trigger('input', eventArgs);
      args.stopPropagation();
    };

    TextBox.prototype.changeHandler = function (args) {
      this.setProperties({
        value: this.respectiveElement.value
      }, true);
      this.raiseChangeEvent(args, true);
      args.stopPropagation();
    };

    TextBox.prototype.raiseChangeEvent = function (event, interaction) {
      var eventArgs = {
        event: event,
        value: this.value,
        previousValue: this.previousValue,
        container: this.textboxWrapper.container,
        isInteraction: interaction ? interaction : false,
        isInteracted: interaction ? interaction : false
      };
      this.preventChange = false;
      this.trigger('change', eventArgs);
      this.previousValue = this.value;
    };

    TextBox.prototype.bindClearEvent = function () {
      if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {
        if (this.enabled) {
          _ej2Base.EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);
        } else {
          _ej2Base.EventHandler.remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);
        }
      }
    };

    TextBox.prototype.resetInputHandler = function (event) {
      event.preventDefault();

      if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR)) {
        var previousValue = this.value;

        _input.Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);

        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }

        this.setProperties({
          value: this.respectiveElement.value
        }, true);
        var eventArgs = {
          event: event,
          value: this.respectiveElement.value,
          previousValue: this.inputPreviousValue,
          container: this.textboxWrapper.container
        };
        this.trigger('input', eventArgs);
        this.inputPreviousValue = this.respectiveElement.value;
        this.raiseChangeEvent(event, true);
      }
    };

    TextBox.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.respectiveElement, 'focus', this.focusHandler);

      _ej2Base.EventHandler.remove(this.respectiveElement, 'blur', this.focusOutHandler);

      _ej2Base.EventHandler.remove(this.respectiveElement, 'input', this.inputHandler);

      _ej2Base.EventHandler.remove(this.respectiveElement, 'change', this.changeHandler);

      if (this.isForm) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.resetForm);
      }
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also, it maintains the initial TextBox element from the DOM.
     * @method destroy
     * @return {void}
     */


    TextBox.prototype.destroy = function () {
      this.unWireEvents();

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        if (this.element.tagName === 'INPUT' && this.multiline) {
          (0, _ej2Base.detach)(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);
          this.respectiveElement = this.element;
          this.element.removeAttribute('type');
        }

        this.respectiveElement.classList.remove('e-input');
        this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);
        this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);
        (0, _ej2Base.detach)(this.textboxWrapper.container);
        this.textboxWrapper = null;

        _super.prototype.destroy.call(this);
      } else {
        this.textboxWrapper = null;
      }
    };
    /**
     * Adding the icons to the TextBox component.
     * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.
     * @param { string | string[] } iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for TextBox.
     * @return {void}
     */


    TextBox.prototype.addIcon = function (position, icons) {
      _input.Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);
    };
    /**
     * Gets the properties to be maintained in the persisted state.
     * @return {string}
     */


    TextBox.prototype.getPersistData = function () {
      var keyEntity = ['value'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Adding the multiple attributes as key-value pair to the TextBox element.
     * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.
     * @return {void}
     */


    TextBox.prototype.addAttributes = function (attributes) {
      for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
        var key = _a[_i];

        if (key === 'disabled') {
          this.setProperties({
            enabled: false
          }, true);

          _input.Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === 'readonly') {
          this.setProperties({
            readonly: true
          }, true);

          _input.Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === 'class') {
          this.respectiveElement.classList.add(attributes[key]);
        } else if (key === 'placeholder') {
          this.setProperties({
            placeholder: attributes[key]
          }, true);

          _input.Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {
          this.respectiveElement.setAttribute(key, attributes[key]);
        } else {
          this.respectiveElement.setAttribute(key, attributes[key]);
        }
      }
    };
    /**
     * Removing the multiple attributes as key-value pair to the TextBox element.
     * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.
     * @return {void}
     */


    TextBox.prototype.removeAttributes = function (attributes) {
      for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];

        if (key === 'disabled') {
          this.setProperties({
            enabled: true
          }, true);

          _input.Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === 'readonly') {
          this.setProperties({
            readonly: false
          }, true);

          _input.Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === 'placeholder') {
          this.setProperties({
            placeholder: null
          }, true);

          _input.Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else {
          this.respectiveElement.removeAttribute(key);
        }
      }
    };
    /**
     * Sets the focus to widget for interaction.
     * @returns void
     */


    TextBox.prototype.focusIn = function () {
      if (document.activeElement !== this.respectiveElement && this.enabled) {
        this.respectiveElement.focus();

        if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
          (0, _ej2Base.addClass)([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    /**
     * Remove the focus from widget, if the widget is in focus state.
     * @returns void
     */


    TextBox.prototype.focusOut = function () {
      if (document.activeElement === this.respectiveElement && this.enabled) {
        this.respectiveElement.blur();

        if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {
          (0, _ej2Base.removeClass)([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };

    __decorate([(0, _ej2Base.Property)('text')], TextBox.prototype, "type", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TextBox.prototype, "readonly", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TextBox.prototype, "value", void 0);

    __decorate([(0, _ej2Base.Property)('Never')], TextBox.prototype, "floatLabelType", void 0);

    __decorate([(0, _ej2Base.Property)('')], TextBox.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TextBox.prototype, "placeholder", void 0);

    __decorate([(0, _ej2Base.Property)('on')], TextBox.prototype, "autocomplete", void 0);

    __decorate([(0, _ej2Base.Property)({})], TextBox.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TextBox.prototype, "multiline", void 0);

    __decorate([(0, _ej2Base.Property)(true)], TextBox.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TextBox.prototype, "showClearButton", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TextBox.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TextBox.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "destroyed", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "blur", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "focus", void 0);

    __decorate([(0, _ej2Base.Event)()], TextBox.prototype, "input", void 0);

    TextBox = __decorate([_ej2Base.NotifyPropertyChanges], TextBox);
    return TextBox;
  }(_ej2Base.Component);

  _exports.TextBox = TextBox;
});;
define('@syncfusion/ej2-inputs/src/uploader/index',["exports", "./uploader"], function (_exports, _uploader) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_uploader).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _uploader[key];
  });
});;
define('@syncfusion/ej2-inputs/src/uploader/uploader',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-popups"], function (_exports, _ej2Base, _ej2Popups) {
  "use strict";

  _exports.__esModule = true;
  _exports.Uploader = _exports.AsyncSettings = _exports.ButtonsProps = _exports.FilesProp = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ROOT = 'e-uploader';
  var CONTROL_WRAPPER = 'e-upload e-control-wrapper';
  var INPUT_WRAPPER = 'e-file-select';
  var DROP_AREA = 'e-file-drop';
  var DROP_WRAPPER = 'e-file-select-wrap';
  var LIST_PARENT = 'e-upload-files';
  var FILE = 'e-upload-file-list';
  var STATUS = 'e-file-status';
  var ACTION_BUTTONS = 'e-upload-actions';
  var UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';
  var CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';
  var FILE_NAME = 'e-file-name';
  var FILE_TYPE = 'e-file-type';
  var FILE_SIZE = 'e-file-size';
  var REMOVE_ICON = 'e-file-remove-btn';
  var DELETE_ICON = 'e-file-delete-btn';
  var SPINNER_PANE = 'e-spinner-pane';
  var ABORT_ICON = 'e-file-abort-btn';
  var RETRY_ICON = 'e-file-reload-btn';
  var DRAG_HOVER = 'e-upload-drag-hover';
  var PROGRESS_WRAPPER = 'e-upload-progress-wrap';
  var PROGRESSBAR = 'e-upload-progress-bar';
  var PROGRESSBAR_TEXT = 'e-progress-bar-text';
  var UPLOAD_INPROGRESS = 'e-upload-progress';
  var UPLOAD_SUCCESS = 'e-upload-success';
  var UPLOAD_FAILED = 'e-upload-fails';
  var TEXT_CONTAINER = 'e-file-container';
  var VALIDATION_FAILS = 'e-validation-fails';
  var RTL = 'e-rtl';
  var DISABLED = 'e-disabled';
  var RTL_CONTAINER = 'e-rtl-container';
  var ICON_FOCUSED = 'e-clear-icon-focus';
  var PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';
  var PAUSE_UPLOAD = 'e-file-pause-btn';
  var RESUME_UPLOAD = 'e-file-play-btn';
  var RESTRICT_RETRY = 'e-restrict-retry';
  var wrapperAttr = ['title', 'style', 'class'];
  var FORM_UPLOAD = 'e-form-upload';
  var HIDDEN_INPUT = 'e-hidden-file-input';
  var INVALID_FILE = 'e-file-invalid';
  var INFORMATION = 'e-file-information';

  var FilesProp =
  /** @class */
  function (_super) {
    __extends(FilesProp, _super);

    function FilesProp() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], FilesProp.prototype, "name", void 0);

    __decorate([(0, _ej2Base.Property)(null)], FilesProp.prototype, "size", void 0);

    __decorate([(0, _ej2Base.Property)('')], FilesProp.prototype, "type", void 0);

    return FilesProp;
  }(_ej2Base.ChildProperty);

  _exports.FilesProp = FilesProp;

  var ButtonsProps =
  /** @class */
  function (_super) {
    __extends(ButtonsProps, _super);

    function ButtonsProps() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('Browse...')], ButtonsProps.prototype, "browse", void 0);

    __decorate([(0, _ej2Base.Property)('Upload')], ButtonsProps.prototype, "upload", void 0);

    __decorate([(0, _ej2Base.Property)('Clear')], ButtonsProps.prototype, "clear", void 0);

    return ButtonsProps;
  }(_ej2Base.ChildProperty);

  _exports.ButtonsProps = ButtonsProps;

  var AsyncSettings =
  /** @class */
  function (_super) {
    __extends(AsyncSettings, _super);

    function AsyncSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], AsyncSettings.prototype, "saveUrl", void 0);

    __decorate([(0, _ej2Base.Property)('')], AsyncSettings.prototype, "removeUrl", void 0);

    __decorate([(0, _ej2Base.Property)(0)], AsyncSettings.prototype, "chunkSize", void 0);

    __decorate([(0, _ej2Base.Property)(3)], AsyncSettings.prototype, "retryCount", void 0);

    __decorate([(0, _ej2Base.Property)(500)], AsyncSettings.prototype, "retryAfterDelay", void 0);

    return AsyncSettings;
  }(_ej2Base.ChildProperty);

  _exports.AsyncSettings = AsyncSettings;

  /**
   * The uploader component allows to upload images, documents, and other files from local to server.
   * ```html
   * <input type='file' name='images[]' id='upload'/>
   * ```
   * ```typescript
   * <script>
   *   var uploadObj = new Uploader();
   *   uploadObj.appendTo('#upload');
   * </script>
   * ```
   */
  var Uploader =
  /** @class */
  function (_super) {
    __extends(Uploader, _super);
    /**
     * Triggers when change the Uploader value.
     */


    function Uploader(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.initialAttr = {
        accept: null,
        multiple: false,
        disabled: false
      };
      _this.uploadedFilesData = [];
      _this.base64String = [];
      _this.isForm = false;
      _this.allTypes = false;
      _this.pausedData = [];
      _this.uploadMetaData = [];
      _this.tabIndex = '0';
      _this.btnTabIndex = '0';
      _this.disableKeyboardNavigation = false;
      _this.count = -1;
      _this.actionCompleteCount = 0;
      _this.flag = true;
      _this.selectedFiles = [];
      _this.uploaderName = 'UploadFiles';
      /**
       * Get the file item(li) which are shown in file list.
       * @private
       */

      _this.fileList = [];
      /**
       * Get the data of files which are shown in file list.
       * @private
       */

      _this.filesData = [];
      _this.uploaderOptions = options;
      return _this;
    }
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */


    Uploader.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'allowedExtensions':
            this.setExtensions(this.allowedExtensions);
            this.clearAll();
            break;

          case 'enabled':
            this.setControlStatus();
            break;

          case 'multiple':
            this.setMultipleSelection();
            break;

          case 'enableRtl':
            this.setRTL();
            this.reRenderFileList();
            break;

          case 'buttons':
            this.buttons.browse = (0, _ej2Base.isNullOrUndefined)(this.buttons.browse) ? '' : this.buttons.browse;
            this.buttons.clear = (0, _ej2Base.isNullOrUndefined)(this.buttons.clear) ? '' : this.buttons.clear;
            this.buttons.upload = (0, _ej2Base.isNullOrUndefined)(this.buttons.upload) ? '' : this.buttons.upload;
            this.renderButtonTemplates();
            break;

          case 'dropArea':
            this.unBindDropEvents();
            this.setDropArea();
            break;

          case 'htmlAttributes':
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHTMLAttributes(true);
            break;

          case 'files':
            this.renderPreLoadFiles();
            break;

          case 'directoryUpload':
            this.updateDirectoryAttributes();
            break;

          case 'minFileSize':
          case 'maxFileSize':
          case 'template':
          case 'autoUpload':
            this.clearAll();
            break;

          case 'sequentialUpload':
            this.clearAll();
            break;

          case 'locale':
            this.l10n.setLocale(this.locale);
            this.setLocalizedTexts();
            this.preLocaleObj = (0, _ej2Base.getValue)('currentLocale', this.l10n);
            break;

          case 'cssClass':
            this.setCSSClass(oldProp.cssClass);
            break;
        }
      }
    };

    Uploader.prototype.setLocalizedTexts = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.template)) {
        if (typeof this.buttons.browse === 'string') {
          this.browseButton.innerText = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
          this.browseButton.setAttribute('title', this.browseButton.innerText);
          this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');
        }

        this.updateFileList();
      }
    };

    Uploader.prototype.getKeyValue = function (val) {
      var keyValue;

      for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
        var key = _a[_i];

        if (this.preLocaleObj[key] === val) {
          keyValue = key;
        }
      }

      return keyValue;
    };

    Uploader.prototype.updateFileList = function () {
      var element;
      /* istanbul ignore next */

      if (this.fileList.length > 0 && !(0, _ej2Base.isNullOrUndefined)(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {
        for (var i = 0; i < this.fileList.length; i++) {
          element = this.fileList[i].querySelector('.e-file-status');
          element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
          this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));

          if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
            this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
          }

          if (this.fileList[i].querySelector('.e-file-play-btn')) {
            this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));
          }

          if (this.fileList[i].querySelector('.e-file-remove-btn')) {
            this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));
          }

          if (this.fileList[i].querySelector('.e-file-reload-btn')) {
            this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));
          }

          if (!this.autoUpload) {
            this.uploadButton.innerText = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
            this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));
            this.clearButton.innerText = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
            this.clearButton.setAttribute('title', this.localizedTexts('Clear'));
          }
        }
      }
    };

    Uploader.prototype.reRenderFileList = function () {
      if (this.listParent) {
        (0, _ej2Base.detach)(this.listParent);
        this.listParent = null;
        this.fileList = [];
        this.createFileList(this.filesData);

        if (this.actionButtons) {
          this.removeActionButtons();
          this.renderActionButtons();
          this.checkActionButtonStatus();
        }
      }
    };

    Uploader.prototype.preRender = function () {
      this.localeText = {
        Browse: 'Browse...',
        Clear: 'Clear',
        Upload: 'Upload',
        dropFilesHint: 'Or drop files here',
        invalidMaxFileSize: 'File size is too large',
        invalidMinFileSize: 'File size is too small',
        invalidFileType: 'File type is not allowed',
        uploadFailedMessage: 'File failed to upload',
        uploadSuccessMessage: 'File uploaded successfully',
        removedSuccessMessage: 'File removed successfully',
        removedFailedMessage: 'Unable to remove file',
        inProgress: 'Uploading',
        readyToUploadMessage: 'Ready to upload',
        abort: 'Abort',
        remove: 'Remove',
        cancel: 'Cancel',
        delete: 'Delete file',
        pauseUpload: 'File upload paused',
        pause: 'Pause',
        resume: 'Resume',
        retry: 'Retry',
        fileUploadCancel: 'File upload canceled',
        invalidFileSelection: 'Invalid files selected',
        totalFiles: 'Total files',
        size: 'Size'
      };
      this.l10n = new _ej2Base.L10n('uploader', this.localeText, this.locale);
      this.preLocaleObj = (0, _ej2Base.getValue)('currentLocale', this.l10n);
      this.updateHTMLAttrToElement();
      this.checkHTMLAttributes(false);
      var parentEle = (0, _ej2Base.closest)(this.element, 'form');

      if (!(0, _ej2Base.isNullOrUndefined)(parentEle)) {
        for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {
          if (parentEle.tagName === 'FORM') {
            this.isForm = true;
            this.formElement = parentEle;
            parentEle.setAttribute('enctype', 'multipart/form-data');
            parentEle.setAttribute('encoding', 'multipart/form-data');
          }
        }
      } // tslint:disable-next-line


      var ejInstance = (0, _ej2Base.getValue)('ej2_instances', this.element);
      /* istanbul ignore next */

      if (this.element.tagName === 'EJS-UPLOADER') {
        var inputElement = this.createElement('input', {
          attrs: {
            type: 'file'
          }
        });
        var index = 0;

        for (index; index < this.element.attributes.length; index++) {
          inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
          inputElement.innerHTML = this.element.innerHTML;
        }

        if (!inputElement.hasAttribute('name')) {
          inputElement.setAttribute('name', 'UploadFiles');
        }

        this.element.appendChild(inputElement);
        this.element = inputElement;
        (0, _ej2Base.setValue)('ej2_instances', ejInstance, this.element);
      }
      /* istanbul ignore next */


      if (ejInstance[0].isPureReactComponent) {
        if (!(0, _ej2Base.isNullOrUndefined)(ejInstance[0].props.name)) {
          this.element.setAttribute('name', ejInstance[0].props.name);
        } else if (!(0, _ej2Base.isNullOrUndefined)(ejInstance[0].props.id) && (0, _ej2Base.isNullOrUndefined)(ejInstance[0].props.name)) {
          this.element.setAttribute('name', ejInstance[0].props.id);
        } else {
          this.element.setAttribute('name', 'UploadFiles');
        }
      }

      if ((0, _ej2Base.isNullOrUndefined)(this.element.getAttribute('name'))) {
        this.element.setAttribute('name', this.element.getAttribute('id'));
      }

      if (!this.element.hasAttribute('type')) {
        this.element.setAttribute('type', 'file');
      }

      this.updateDirectoryAttributes();
      this.keyConfigs = {
        enter: 'enter'
      };

      if (this.element.hasAttribute('tabindex')) {
        this.tabIndex = this.element.getAttribute('tabindex');
      }

      this.browserName = _ej2Base.Browser.info.name;
      this.uploaderName = this.element.getAttribute('name');
    };

    Uploader.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * Return the module name of the component.
     */


    Uploader.prototype.getModuleName = function () {
      return 'uploader';
    };

    Uploader.prototype.updateDirectoryAttributes = function () {
      if (this.directoryUpload) {
        this.element.setAttribute('directory', 'true');
        this.element.setAttribute('webkitdirectory', 'true');
      } else {
        this.element.removeAttribute('directory');
        this.element.removeAttribute('webkitdirectory');
      }
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    Uploader.prototype.render = function () {
      this.renderBrowseButton();
      this.initializeUpload();
      this.updateHTMLAttrToWrapper();
      this.wireEvents();
      this.setMultipleSelection();
      this.setExtensions(this.allowedExtensions);
      this.setRTL();
      this.renderPreLoadFiles();
      this.setControlStatus();
      this.setCSSClass();
      this.renderComplete();
    };

    Uploader.prototype.renderBrowseButton = function () {
      this.browseButton = this.createElement('button', {
        className: 'e-css e-btn',
        attrs: {
          'type': 'button'
        }
      });
      this.browseButton.setAttribute('tabindex', this.tabIndex);

      if (typeof this.buttons.browse === 'string') {
        this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
        this.browseButton.setAttribute('title', this.browseButton.innerText);
      } else {
        this.browseButton.appendChild(this.buttons.browse);
      }

      this.element.setAttribute('aria-label', 'Uploader');
    };

    Uploader.prototype.renderActionButtons = function () {
      this.element.setAttribute('tabindex', '-1');
      this.actionButtons = this.createElement('div', {
        className: ACTION_BUTTONS
      });
      this.uploadButton = this.createElement('button', {
        className: UPLOAD_BUTTONS,
        attrs: {
          'type': 'button',
          'tabindex': this.btnTabIndex
        }
      });
      this.clearButton = this.createElement('button', {
        className: CLEAR_BUTTONS,
        attrs: {
          'type': 'button',
          'tabindex': this.btnTabIndex
        }
      });
      this.actionButtons.appendChild(this.clearButton);
      this.actionButtons.appendChild(this.uploadButton);
      this.renderButtonTemplates();
      this.uploadWrapper.appendChild(this.actionButtons);
      this.browseButton.blur();
      this.uploadButton.focus();
      this.wireActionButtonEvents();
    };

    Uploader.prototype.wireActionButtonEvents = function () {
      _ej2Base.EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);

      _ej2Base.EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);
    };

    Uploader.prototype.unwireActionButtonEvents = function () {
      _ej2Base.EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);

      _ej2Base.EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);
    };

    Uploader.prototype.removeActionButtons = function () {
      if (this.actionButtons) {
        this.unwireActionButtonEvents();
        (0, _ej2Base.detach)(this.actionButtons);
        this.actionButtons = null;
      }
    };

    Uploader.prototype.renderButtonTemplates = function () {
      if (typeof this.buttons.browse === 'string') {
        this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;
        this.browseButton.setAttribute('title', this.browseButton.textContent);
      } else {
        this.browseButton.innerHTML = '';
        this.browseButton.appendChild(this.buttons.browse);
      }

      if (this.uploadButton) {
        var uploadText = void 0;
        uploadText = (0, _ej2Base.isNullOrUndefined)(this.buttons.upload) ? 'Upload' : this.buttons.upload;
        this.buttons.upload = uploadText;

        if (typeof this.buttons.upload === 'string') {
          this.uploadButton.textContent = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;
          this.uploadButton.setAttribute('title', this.uploadButton.textContent);
        } else {
          this.uploadButton.innerHTML = '';
          this.uploadButton.appendChild(this.buttons.upload);
        }
      }

      if (this.clearButton) {
        var clearText = void 0;
        clearText = (0, _ej2Base.isNullOrUndefined)(this.buttons.clear) ? 'Clear' : this.buttons.clear;
        this.buttons.clear = clearText;

        if (typeof this.buttons.clear === 'string') {
          this.clearButton.textContent = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;
          this.clearButton.setAttribute('title', this.clearButton.textContent);
        } else {
          this.clearButton.innerHTML = '';
          this.clearButton.appendChild(this.buttons.clear);
        }
      }
    };

    Uploader.prototype.initializeUpload = function () {
      this.element.setAttribute('tabindex', '-1');
      var inputWrapper = this.createElement('span', {
        className: INPUT_WRAPPER
      });
      this.element.parentElement.insertBefore(inputWrapper, this.element);
      this.dropAreaWrapper = this.createElement('div', {
        className: DROP_WRAPPER
      });
      this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
      inputWrapper.appendChild(this.element);
      this.dropAreaWrapper.appendChild(this.browseButton);
      this.dropAreaWrapper.appendChild(inputWrapper);
      var fileDropArea = this.createElement('span', {
        className: DROP_AREA
      });
      fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');
      this.dropAreaWrapper.appendChild(fileDropArea);
      this.uploadWrapper = this.createElement('div', {
        className: CONTROL_WRAPPER
      });
      this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
      this.uploadWrapper.appendChild(this.dropAreaWrapper);
      this.setDropArea();
    };

    Uploader.prototype.renderPreLoadFiles = function () {
      if (this.files.length) {
        if ((0, _ej2Base.isNullOrUndefined)(this.files[0].size)) {
          return;
        }

        var files = [].slice.call(this.files);
        var filesData = [];

        if (!this.multiple) {
          this.clearData();
          files = [files[0]];
        }

        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
          var data = files_1[_i];
          var fileData = {
            name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],
            rawFile: '',
            size: data.size,
            status: this.localizedTexts('uploadSuccessMessage'),
            type: data.type,
            validationMessages: {
              minSize: '',
              maxSize: ''
            },
            statusCode: '2'
          };
          filesData.push(fileData);
          this.filesData.push(fileData);
        }

        this.createFileList(filesData);

        if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
          this.renderActionButtons();
        }

        this.checkActionButtonStatus();
      }
    };

    Uploader.prototype.checkActionButtonStatus = function () {
      if (this.actionButtons) {
        var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;

        if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length) {
          this.uploadButton.setAttribute('disabled', 'disabled');
        } else {
          this.uploadButton.removeAttribute('disabled');
        }
      }
    };

    Uploader.prototype.setDropArea = function () {
      var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');

      if (this.dropArea) {
        this.dropZoneElement = typeof this.dropArea !== 'string' ? this.dropArea : document.querySelector(this.dropArea);
        var element = this.element;
        var enableDropText = false;

        while (element.parentNode) {
          element = element.parentNode;

          if (element === this.dropZoneElement) {
            enableDropText = true;
            dropTextArea.textContent = this.localizedTexts('dropFilesHint');
          }
        }

        if (!enableDropText) {
          dropTextArea.textContent = '';
        }
      } else {
        this.dropZoneElement = this.uploadWrapper;
        dropTextArea.textContent = this.localizedTexts('dropFilesHint');
      }

      this.bindDropEvents();
    };

    Uploader.prototype.updateHTMLAttrToElement = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];

          if (wrapperAttr.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes[pro]);
          }
        }
      }
    };

    Uploader.prototype.updateHTMLAttrToWrapper = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];

          if (wrapperAttr.indexOf(pro) > -1) {
            if (pro === 'class') {
              (0, _ej2Base.addClass)([this.uploadWrapper], this.htmlAttributes[pro].split(' '));
            } else if (pro === 'style') {
              var uploadStyle = this.uploadWrapper.getAttribute(pro);
              uploadStyle = !(0, _ej2Base.isNullOrUndefined)(uploadStyle) ? uploadStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
              this.uploadWrapper.setAttribute(pro, uploadStyle);
            } else {
              this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);
            }
          }
        }
      }
    };

    Uploader.prototype.setMultipleSelection = function () {
      if (this.multiple && !this.element.hasAttribute('multiple')) {
        var newAttr = document.createAttribute('multiple');
        newAttr.value = 'multiple';
        this.element.setAttributeNode(newAttr);
      } else if (!this.multiple) {
        this.element.removeAttribute('multiple');
      }
    };

    Uploader.prototype.checkAutoUpload = function (fileData) {
      if (this.autoUpload) {
        if (this.sequentialUpload) {
          /* istanbul ignore next */
          this.sequenceUpload(fileData);
        } else {
          this.upload(fileData);
        }

        this.removeActionButtons();
      } else if (!this.actionButtons) {
        this.renderActionButtons();
      }

      this.checkActionButtonStatus();
    };

    Uploader.prototype.sequenceUpload = function (fileData) {
      if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== '1') {
        ++this.count;
        var isFileListCreated = this.showFileList ? false : true;

        if (typeof this.filesData[this.count] === 'object') {
          this.upload(this.filesData[this.count], isFileListCreated);

          if (this.filesData[this.count].statusCode === '0') {
            this.sequenceUpload(fileData);
          }
        } else {
          --this.count;
        }
      }
    };

    Uploader.prototype.setCSSClass = function (oldCSSClass) {
      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.uploadWrapper], this.cssClass.split(this.cssClass.indexOf(',') > -1 ? ',' : ' '));
      }

      if (oldCSSClass) {
        (0, _ej2Base.removeClass)([this.uploadWrapper], oldCSSClass.split(' '));
      }
    };

    Uploader.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);

      _ej2Base.EventHandler.add(this.element, 'change', this.onSelectFiles, this);

      _ej2Base.EventHandler.add(document, 'click', this.removeFocus, this);

      this.keyboardModule = new _ej2Base.KeyboardEvents(this.uploadWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: 'keydown'
      });

      if (this.isForm) {
        _ej2Base.EventHandler.add(this.formElement, 'reset', this.resetForm, this);
      }
    };

    Uploader.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);

      _ej2Base.EventHandler.remove(this.element, 'change', this.onSelectFiles);

      _ej2Base.EventHandler.remove(document, 'click', this.removeFocus);

      if (this.isForm) {
        _ej2Base.EventHandler.remove(this.formElement, 'reset', this.resetForm);
      }

      this.keyboardModule.destroy();
    };

    Uploader.prototype.resetForm = function () {
      this.clearAll();
    };

    Uploader.prototype.keyActionHandler = function (e) {
      var targetElement = e.target;

      switch (e.action) {
        case 'enter':
          if (e.target === this.clearButton) {
            this.clearButtonClick();
          } else if (e.target === this.uploadButton) {
            this.uploadButtonClick();
          } else if (e.target === this.browseButton) {
            this.browseButtonClick();
          } else if (targetElement.classList.contains(PAUSE_UPLOAD)) {
            var metaData = this.getCurrentMetaData(null, e);
            metaData.file.statusCode = '4';
            metaData.file.status = this.localizedTexts('pauseUpload');
            this.abortUpload(metaData, false);
          } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
            this.resumeUpload(this.getCurrentMetaData(null, e), e);
          } else if (targetElement.classList.contains(RETRY_ICON)) {
            var metaData = this.getCurrentMetaData(null, e);

            if (!(0, _ej2Base.isNullOrUndefined)(metaData)) {
              metaData.file.statusCode = '1';
              metaData.file.status = this.localizedTexts('readyToUploadMessage');
              this.chunkUpload(metaData.file);
            } else {
              var target = e.target.parentElement;
              var fileData = this.filesData[this.fileList.indexOf(target)];
              this.retry(fileData);
            }
          } else {
            this.removeFiles(e);

            if (!targetElement.classList.contains(ABORT_ICON)) {
              this.browseButton.focus();
            }
          }

          e.preventDefault();
          e.stopPropagation();
          break;
      }
    };

    Uploader.prototype.getCurrentMetaData = function (fileInfo, e) {
      var fileData;
      var targetMetaData;

      if ((0, _ej2Base.isNullOrUndefined)(fileInfo)) {
        var target = e.target.parentElement;
        fileData = this.filesData[this.fileList.indexOf(target)];
      } else {
        fileData = fileInfo;
      }

      for (var i = 0; i < this.uploadMetaData.length; i++) {
        if (this.uploadMetaData[i].file.name === fileData.name) {
          targetMetaData = this.uploadMetaData[i];
        }
      }

      return targetMetaData;
    };

    Uploader.prototype.removeFocus = function () {
      if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {
        document.activeElement.blur();
        this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
      }
    };

    Uploader.prototype.browseButtonClick = function () {
      this.element.click();
    };

    Uploader.prototype.uploadButtonClick = function () {
      if (this.sequentialUpload) {
        this.sequenceUpload(this.filesData);
      } else {
        this.upload(this.filesData);
      }
    };

    Uploader.prototype.clearButtonClick = function () {
      this.clearAll();
      /* istanbul ignore next */

      if (this.sequentialUpload) {
        this.count = -1;
      }

      this.actionCompleteCount = 0;
    };

    Uploader.prototype.bindDropEvents = function () {
      if (this.dropZoneElement) {
        _ej2Base.EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);

        _ej2Base.EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);

        _ej2Base.EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);

        _ej2Base.EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);
      }
    };

    Uploader.prototype.unBindDropEvents = function () {
      if (this.dropZoneElement) {
        _ej2Base.EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);

        _ej2Base.EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);

        _ej2Base.EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);
      }
    };

    Uploader.prototype.onDragLeave = function (e) {
      this.dropZoneElement.classList.remove(DRAG_HOVER);
    };

    Uploader.prototype.dragHover = function (e) {
      if (!this.enabled) {
        return;
      }

      this.dropZoneElement.classList.add(DRAG_HOVER);
      e.preventDefault();
      e.stopPropagation();
    };
    /* istanbul ignore next */


    Uploader.prototype.dropElement = function (e) {
      this.dropZoneElement.classList.remove(DRAG_HOVER);
      this.onSelectFiles(e);
      e.preventDefault();
      e.stopPropagation();
    };
    /* istanbul ignore next */


    Uploader.prototype.onPasteFile = function (event) {
      var item = event.clipboardData.items;

      if (item.length !== 1) {
        return;
      }

      var pasteFile = [].slice.call(item)[0];

      if (pasteFile.kind === 'file' && pasteFile.type.match('^image/')) {
        this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);
      }
    };

    Uploader.prototype.getSelectedFiles = function (index) {
      var data = [];
      var liElement = this.fileList[index];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute('data-files-count');
      var startIndex = 0;

      for (var i = 0; i < index; i++) {
        startIndex += +this.fileList[i].getAttribute('data-files-count');
      }

      for (var j = startIndex; j < startIndex + nameElements; j++) {
        data.push(allFiles[j]);
      }

      return data;
    };

    Uploader.prototype.removeFiles = function (args) {
      if (!this.enabled) {
        return;
      }

      var selectedElement = args.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var liElement = this.fileList[index];
      var formUpload = this.isFormUpload();
      var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);

      if ((0, _ej2Base.isNullOrUndefined)(fileData)) {
        return;
      }

      if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
        fileData[0].statusCode = '5';

        if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
          var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
          (0, _ej2Popups.createSpinner)({
            target: spinnerTarget,
            width: '20px'
          });
          (0, _ej2Popups.showSpinner)(spinnerTarget);
        }

        if (this.sequentialUpload) {
          /* istanbul ignore next */
          this.uploadSequential();
        }

        if (!liElement.classList.contains(RESTRICT_RETRY)) {
          this.checkActionComplete(true);
        }
      } else {
        this.remove(fileData, false, false, true, args);
      }

      this.element.value = '';
      this.checkActionButtonStatus();
    };

    Uploader.prototype.removeFilesData = function (file, customTemplate) {
      var index;

      if (customTemplate) {
        if (!this.showFileList) {
          index = this.filesData.indexOf(file);
          this.filesData.splice(index, 1);
        }

        return;
      }

      var selectedElement = this.getLiElement(file);

      if ((0, _ej2Base.isNullOrUndefined)(selectedElement)) {
        return;
      }

      (0, _ej2Base.detach)(selectedElement);
      index = this.fileList.indexOf(selectedElement);
      this.fileList.splice(index, 1);
      this.filesData.splice(index, 1);

      if (this.fileList.length === 0 && !(0, _ej2Base.isNullOrUndefined)(this.listParent)) {
        (0, _ej2Base.detach)(this.listParent);
        this.listParent = null;
        this.removeActionButtons();
      }

      if (this.sequentialUpload) {
        /* istanbul ignore next */
        if (index <= this.count) {
          --this.count;
        }
      }
    };

    Uploader.prototype.removeUploadedFile = function (file, eventArgs, removeDirectly, custom) {
      var _this = this;

      var selectedFiles = file;
      var ajax = new _ej2Base.Ajax(this.asyncSettings.removeUrl, 'POST', true, null);
      ajax.emitError = false;
      var formData = new FormData();

      ajax.beforeSend = function (e) {
        eventArgs.currentRequest = ajax.httpRequest;

        if ((0, _ej2Base.isBlazor)()) {
          if (_this.currentRequestHeader) {
            _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);
          }

          if (_this.customFormDatas) {
            _this.updateFormData(formData, _this.customFormDatas);
          }
        }

        if (!removeDirectly) {
          _this.trigger('removing', eventArgs, function (eventArgs) {
            if (eventArgs.cancel) {
              e.cancel = true;
            } else {
              _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
            }
          });
        } else {
          _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
        }
      };

      ajax.onLoad = function (e) {
        _this.removeCompleted(e, selectedFiles, custom);

        return {};
      };
      /* istanbul ignore next */


      ajax.onError = function (e) {
        _this.removeFailed(e, selectedFiles, custom);

        return {};
      };

      ajax.send(formData);
    };

    Uploader.prototype.removingEventCallback = function (eventArgs, formData, selectedFiles, file) {
      /* istanbul ignore next */
      var name = this.element.getAttribute('name');
      var liElement = this.getLiElement(file);

      if (!(0, _ej2Base.isNullOrUndefined)(liElement) && (!(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + DELETE_ICON)) || !(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + REMOVE_ICON)))) {
        var spinnerTarget = void 0;
        spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);
        (0, _ej2Popups.createSpinner)({
          target: spinnerTarget,
          width: '20px'
        });
        (0, _ej2Popups.showSpinner)(spinnerTarget);
      }

      if (eventArgs.postRawFile && !(0, _ej2Base.isNullOrUndefined)(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {
        formData.append(name, selectedFiles.rawFile, selectedFiles.name);
      } else {
        formData.append(name, selectedFiles.name);
      }

      this.updateFormData(formData, eventArgs.customFormData);
    };
    /* istanbul ignore next */


    Uploader.prototype.updateFormData = function (formData, customData) {
      if (customData.length > 0 && customData[0]) {
        var _loop_1 = function (i) {
          var data = customData[i]; // tslint:disable-next-line

          var value = Object.keys(data).map(function (e) {
            return data[e];
          });
          formData.append(Object.keys(data)[0], value);
        };

        for (var i = 0; i < customData.length; i++) {
          _loop_1(i);
        }
      }
    };
    /* istanbul ignore next */


    Uploader.prototype.updateCustomheader = function (request, currentRequest) {
      if (currentRequest.length > 0 && currentRequest[0]) {
        var _loop_2 = function (i) {
          var data = currentRequest[i]; // tslint:disable-next-line

          var value = Object.keys(data).map(function (e) {
            return data[e];
          });
          request.setRequestHeader(Object.keys(data)[0], value);
        };

        for (var i = 0; i < currentRequest.length; i++) {
          _loop_2(i);
        }
      }
    };

    Uploader.prototype.removeCompleted = function (e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        e: e,
        response: response,
        operation: 'remove',
        file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')
      };
      this.trigger('success', args);
      this.removeFilesData(files, customTemplate);
      var index = this.uploadedFilesData.indexOf(files);
      this.uploadedFilesData.splice(index, 1);
      this.trigger('change', {
        files: this.uploadedFilesData
      });
    };

    Uploader.prototype.removeFailed = function (e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        e: e,
        response: response,
        operation: 'remove',
        file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')
      };

      if (!customTemplate) {
        var index = this.filesData.indexOf(files);
        var rootElement = this.fileList[index];

        if (rootElement) {
          var statusElement = rootElement.querySelector('.' + STATUS);
          rootElement.classList.remove(UPLOAD_SUCCESS);
          statusElement.classList.remove(UPLOAD_SUCCESS);
          rootElement.classList.add(UPLOAD_FAILED);
          statusElement.classList.add(UPLOAD_FAILED);
        }

        this.checkActionButtonStatus();
      }

      this.trigger('failure', args);
      var liElement = this.getLiElement(files);
      /* istanbul ignore next */

      if (!(0, _ej2Base.isNullOrUndefined)(liElement) && !(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + DELETE_ICON))) {
        var spinnerTarget = liElement.querySelector('.' + DELETE_ICON);
        (0, _ej2Popups.hideSpinner)(spinnerTarget);
        (0, _ej2Base.detach)(liElement.querySelector('.e-spinner-pane'));
      }
    };
    /* istanbul ignore next */


    Uploader.prototype.getFilesFromFolder = function (event) {
      this.filesEntries = [];
      var items;
      items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];
      var validDirectoryUpload = this.checkDirectoryUpload(items);

      if (!validDirectoryUpload) {
        return;
      }

      var _loop_3 = function (i) {
        // tslint:disable-next-line
        var item = items[i].webkitGetAsEntry();

        if (item.isFile) {
          var files_2 = []; // tslint:disable-next-line

          item.file(function (fileObj) {
            var path = item.fullPath;
            files_2.push({
              'path': path,
              'file': fileObj
            });
          });
          this_1.renderSelectedFiles(event, files_2, true);
        } else if (item.isDirectory) {
          this_1.traverseFileTree(item, event);
        }
      };

      var this_1 = this;

      for (var i = 0; i < items.length; i++) {
        _loop_3(i);
      }
    };
    /* istanbul ignore next */


    Uploader.prototype.checkDirectoryUpload = function (items) {
      for (var i = 0; i < items.length; i++) {
        // tslint:disable-next-line
        var item = items[i].webkitGetAsEntry();

        if (item.isDirectory) {
          return true;
        }
      }

      return false;
    }; // tslint:disable

    /* istanbul ignore next */


    Uploader.prototype.traverseFileTree = function (item, event) {
      var _this = this;

      if (item.isFile) {
        this.filesEntries.push(item);
      } else if (item.isDirectory) {
        // tslint:disable-next-line
        var directoryReader = item.createReader(); // tslint:disable-next-line

        directoryReader.readEntries(function (entries) {
          for (var i = 0; i < entries.length; i++) {
            _this.traverseFileTree(entries[i]); // tslint:disable-next-line

          }

          ;

          _this.pushFilesEntries(event);
        });
      }
    };

    Uploader.prototype.pushFilesEntries = function (event) {
      var _this = this;

      var files = [];

      var _loop_4 = function (i) {
        // tslint:disable-next-line
        this_2.filesEntries[i].file(function (fileObj) {
          var path = _this.filesEntries[i].fullPath;
          files.push({
            'path': path,
            'file': fileObj
          });

          if (i === _this.filesEntries.length - 1) {
            _this.filesEntries = [];

            _this.renderSelectedFiles(event, files, true);
          }
        });
      };

      var this_2 = this;

      for (var i = 0; i < this.filesEntries.length; i++) {
        _loop_4(i);
      }
    }; // tslint:enable


    Uploader.prototype.onSelectFiles = function (args) {
      if (!this.enabled) {
        return;
      }

      var targetFiles;
      /* istanbul ignore next */

      if (args.type === 'drop') {
        if (this.directoryUpload) {
          this.getFilesFromFolder(args);
        } else {
          var files = this.sortFilesList = args.dataTransfer.files;

          if (this.browserName !== 'msie' && this.browserName !== 'edge') {
            this.element.files = files;
          }

          targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
          this.renderSelectedFiles(args, targetFiles);
        }
      } else {
        targetFiles = [].slice.call(args.target.files);
        this.renderSelectedFiles(args, targetFiles);
      }
    };
    /* istanbul ignore next */


    Uploader.prototype.getBase64 = function (file) {
      return new Promise(function (resolve, reject) {
        var fileReader = new FileReader();
        fileReader.readAsDataURL(file);

        fileReader.onload = function () {
          return resolve(fileReader.result);
        };

        fileReader.onerror = function (error) {
          return reject(error);
        };
      });
    };
    /* istanbul ignore next */

    /* tslint:ignore */


    Uploader.prototype.renderSelectedFiles = function (args, // tslint:disable-next-line
    targetFiles, directory, paste) {
      var _this = this;

      this.base64String = []; // tslint:disable-next-line

      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        isModified: false,
        modifiedFilesData: [],
        progressInterval: '',
        isCanceled: false,
        currentRequest: null,
        customFormData: null
      };
      /* istanbul ignore next */

      if (targetFiles.length < 1) {
        eventArgs.isCanceled = true;
        this.trigger('selected', eventArgs);
        return;
      }

      this.flag = true;
      var fileData = [];

      if (!this.multiple) {
        this.clearData(true);
        targetFiles = [targetFiles[0]];
      }

      for (var i = 0; i < targetFiles.length; i++) {
        var file = directory ? targetFiles[i].file : targetFiles[i];
        this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
      }

      eventArgs.filesData = fileData;

      if (this.allowedExtensions.indexOf('*') > -1) {
        this.allTypes = true;
      }

      if (!this.allTypes) {
        fileData = this.checkExtension(fileData);
      }

      this.trigger('selected', eventArgs, function (eventArgs) {
        _this._internalRenderSelect(eventArgs, fileData);
      });
    };

    Uploader.prototype.updateInitialFileDetails = function (args, // tslint:disable-next-line
    targetFiles, file, i, fileData, directory, paste) {
      var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? (0, _ej2Base.getUniqueID)(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;
      var fileDetails = {
        name: fileName,
        rawFile: file,
        size: file.size,
        status: this.localizedTexts('readyToUploadMessage'),
        type: this.getFileType(file.name),
        validationMessages: this.validatedFileSize(file.size),
        statusCode: '1'
      };
      /* istanbul ignore next */

      if (paste) {
        fileDetails.fileSource = 'paste';
      }

      fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;

      if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {
        fileDetails.statusCode = '0';
        this.checkActionComplete(true);
      }

      fileData.push(fileDetails);
    };

    Uploader.prototype._internalRenderSelect = function (eventArgs, fileData) {
      if (!eventArgs.cancel) {
        /* istanbul ignore next */
        if ((0, _ej2Base.isBlazor)()) {
          this.currentRequestHeader = eventArgs.currentRequest;
          this.customFormDatas = eventArgs.customFormData;
        }

        this.selectedFiles = fileData;
        this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';

        if (this.showFileList) {
          if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
            var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
            this.updateSortedFileList(dataFiles);
            this.filesData = dataFiles;

            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(dataFiles);
            }
          } else {
            this.createFileList(fileData);
            this.filesData = this.filesData.concat(fileData);

            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(fileData);
            }
          }

          if (!(0, _ej2Base.isNullOrUndefined)(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {
            this.progressInterval = eventArgs.progressInterval;
          }
        } else {
          this.filesData = this.filesData.concat(fileData);

          if (this.autoUpload) {
            this.upload(this.filesData, true);
          }
        }

        this.raiseActionComplete();
      }
    };

    Uploader.prototype.allowUpload = function () {
      var allowFormUpload = false;

      if (this.isForm && !(0, _ej2Base.isNullOrUndefined)(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '') {
        allowFormUpload = true;
      }

      return allowFormUpload;
    };

    Uploader.prototype.isFormUpload = function () {
      var isFormUpload = false;

      if (this.isForm && ((0, _ej2Base.isNullOrUndefined)(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && ((0, _ej2Base.isNullOrUndefined)(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {
        isFormUpload = true;
      }

      return isFormUpload;
    };

    Uploader.prototype.clearData = function (singleUpload) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.listParent)) {
        (0, _ej2Base.detach)(this.listParent);
        this.listParent = null;
      }

      if (this.browserName !== 'msie' && !singleUpload) {
        this.element.value = '';
      }

      this.fileList = [];
      this.filesData = [];
      this.removeActionButtons();
    };

    Uploader.prototype.updateSortedFileList = function (filesData) {
      var previousListClone = this.createElement('div', {
        id: 'clonewrapper'
      });
      var added = -1;
      var removedList;

      if (this.listParent) {
        for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {
          var liElement = this.listParent.querySelectorAll('li')[i];
          previousListClone.appendChild(liElement.cloneNode(true));
        }

        removedList = this.listParent.querySelectorAll('li');

        for (var _i = 0, removedList_1 = removedList; _i < removedList_1.length; _i++) {
          var item = removedList_1[_i];
          (0, _ej2Base.detach)(item);
        }

        this.removeActionButtons();
        var oldList = [].slice.call(previousListClone.childNodes);
        (0, _ej2Base.detach)(this.listParent);
        this.listParent = null;
        this.fileList = [];
        this.createParentUL();

        for (var index = 0; index < filesData.length; index++) {
          for (var j = 0; j < this.filesData.length; j++) {
            if (this.filesData[j].name === filesData[index].name) {
              this.listParent.appendChild(oldList[j]);

              _ej2Base.EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);

              this.fileList.push(oldList[j]);
              added = index;
            }
          }

          if (added !== index) {
            this.createFileList([filesData[index]]);
          }
        }
      } else {
        this.createFileList(filesData);
      }
    };

    Uploader.prototype.isBlank = function (str) {
      return !str || /^\s*$/.test(str);
    };

    Uploader.prototype.checkExtension = function (files) {
      var dropFiles = files;

      if (!this.isBlank(this.allowedExtensions)) {
        var allowedExtensions = [];
        var extensions = this.allowedExtensions.split(',');

        for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
          var extension = extensions_1[_i];
          allowedExtensions.push(extension.trim().toLocaleLowerCase());
        }

        for (var i = 0; i < files.length; i++) {
          if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {
            files[i].status = this.localizedTexts('invalidFileType');
            files[i].statusCode = '0';
          }
        }
      }

      return dropFiles;
    };

    Uploader.prototype.validatedFileSize = function (fileSize) {
      var minSizeError = '';
      var maxSizeError = '';

      if (fileSize < this.minFileSize) {
        minSizeError = this.localizedTexts('invalidMinFileSize');
      } else if (fileSize > this.maxFileSize) {
        maxSizeError = this.localizedTexts('invalidMaxFileSize');
      } else {
        minSizeError = '';
        maxSizeError = '';
      }

      var errorMessage = {
        minSize: minSizeError,
        maxSize: maxSizeError
      };
      return errorMessage;
    };

    Uploader.prototype.isPreLoadFile = function (fileData) {
      var isPreload = false;

      for (var i = 0; i < this.files.length; i++) {
        if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {
          isPreload = true;
        }
      }

      return isPreload;
    };

    Uploader.prototype.createCustomfileList = function (fileData) {
      this.createParentUL();
      (0, _ej2Base.resetBlazorTemplate)(this.element.id + 'Template', 'Template');

      for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
        var listItem = fileData_1[_i];
        var liElement = this.createElement('li', {
          className: FILE,
          attrs: {
            'data-file-name': listItem.name
          }
        });
        this.uploadTemplateFn = this.templateComplier(this.template);
        var fromElements = [].slice.call(this.uploadTemplateFn(listItem, null, null, this.element.id + 'Template', this.isStringTemplate));
        var index = fileData.indexOf(listItem);
        (0, _ej2Base.append)(fromElements, liElement);
        var eventArgs = {
          element: liElement,
          fileInfo: listItem,
          index: index,
          isPreload: this.isPreLoadFile(listItem)
        };
        var eventsArgs = {
          element: liElement,
          fileInfo: listItem,
          index: index,
          isPreload: this.isPreLoadFile(listItem)
        };
        this.trigger('rendering', eventArgs);
        this.trigger('fileListRendering', eventsArgs);
        this.listParent.appendChild(liElement);
        this.fileList.push(liElement);
      }

      (0, _ej2Base.updateBlazorTemplate)(this.element.id + 'Template', 'Template', this, false);
    };

    Uploader.prototype.createParentUL = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.listParent)) {
        this.listParent = this.createElement('ul', {
          className: LIST_PARENT
        });
        this.uploadWrapper.appendChild(this.listParent);
      }
    };

    Uploader.prototype.formFileList = function (fileData, files) {
      var fileList = this.createElement('li', {
        className: FILE
      });
      fileList.setAttribute('data-files-count', fileData.length + '');
      var fileContainer = this.createElement('span', {
        className: TEXT_CONTAINER
      });
      var statusMessage;

      for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
        var listItem = fileData_2[_i];
        var fileNameEle = this.createElement('span', {
          className: FILE_NAME
        });
        fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
        var fileTypeEle = this.createElement('span', {
          className: FILE_TYPE
        });
        fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);

        if (!this.enableRtl) {
          fileContainer.appendChild(fileNameEle);
          fileContainer.appendChild(fileTypeEle);
        } else {
          var rtlContainer = this.createElement('span', {
            className: RTL_CONTAINER
          });
          rtlContainer.appendChild(fileTypeEle);
          rtlContainer.appendChild(fileNameEle);
          fileContainer.appendChild(rtlContainer);
        }

        this.truncateName(fileNameEle);
        statusMessage = this.formValidateFileInfo(listItem, fileList);
      }

      fileList.appendChild(fileContainer);
      this.setListToFileInfo(fileData, fileList);
      var index = this.listParent.querySelectorAll('li').length;
      var infoEle = this.createElement('span');

      if (fileList.classList.contains(INVALID_FILE)) {
        infoEle.classList.add(STATUS);
        infoEle.classList.add(INVALID_FILE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
      } else {
        infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
        this.createFormInput(fileData);
      }

      fileContainer.appendChild(infoEle);

      if ((0, _ej2Base.isNullOrUndefined)(fileList.querySelector('.e-icons'))) {
        var iconElement = this.createElement('span', {
          className: 'e-icons',
          attrs: {
            'tabindex': this.btnTabIndex
          }
        });
        /* istanbul ignore next */

        if (this.browserName === 'msie') {
          iconElement.classList.add('e-msie');
        }

        iconElement.setAttribute('title', this.localizedTexts('remove'));
        fileList.appendChild(fileContainer);
        fileList.appendChild(iconElement);

        _ej2Base.EventHandler.add(iconElement, 'click', this.removeFiles, this);

        iconElement.classList.add(REMOVE_ICON);
      }

      var eventArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index: index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index: index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      this.trigger('rendering', eventArgs);
      this.trigger('fileListRendering', eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
    };

    Uploader.prototype.formValidateFileInfo = function (listItem, fileList) {
      var statusMessage = listItem.status;
      var validationMessages = this.validatedFileSize(listItem.size);

      if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
        this.addInvalidClass(fileList);
        statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
      }

      var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

      if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
        this.addInvalidClass(fileList);
        statusMessage = typeValidationMessage;
      }

      return statusMessage;
    };

    Uploader.prototype.addInvalidClass = function (fileList) {
      fileList.classList.add(INVALID_FILE);
    };

    Uploader.prototype.createFormInput = function (fileData) {
      var inputElement = this.element.cloneNode(true);
      inputElement.classList.add(HIDDEN_INPUT);

      for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {
        var listItem = fileData_3[_i];
        listItem.input = inputElement;
      }

      inputElement.setAttribute('name', this.uploaderName);
      this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);

      if (this.browserName !== 'msie' && this.browserName !== 'edge') {
        this.element.value = '';
      }
    };

    Uploader.prototype.getFileSize = function (fileData) {
      var fileSize = 0;

      for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {
        var file = fileData_4[_i];
        fileSize += file.size;
      }

      return fileSize;
    };

    Uploader.prototype.mergeFileInfo = function (fileData, fileList) {
      var result = {
        name: '',
        rawFile: '',
        size: 0,
        status: '',
        type: '',
        validationMessages: {
          minSize: '',
          maxSize: ''
        },
        statusCode: '1',
        list: fileList
      };
      var fileNames = [];
      var type = '';

      for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {
        var listItem = fileData_5[_i];
        fileNames.push(listItem.name);
        type = listItem.type;
      }

      result.name = fileNames.join(', ');
      result.size = this.getFileSize(fileData);
      result.type = type;
      result.status = this.statusForFormUpload(fileData, fileList);
      return result;
    };

    Uploader.prototype.statusForFormUpload = function (fileData, fileList) {
      var isValid = true;
      var statusMessage;

      for (var _i = 0, fileData_6 = fileData; _i < fileData_6.length; _i++) {
        var listItem = fileData_6[_i];
        statusMessage = listItem.status;
        var validationMessages = this.validatedFileSize(listItem.size);

        if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
          isValid = false;
          statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;
        }

        var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;

        if (typeValidationMessage === this.localizedTexts('invalidFileType')) {
          isValid = false;
          statusMessage = typeValidationMessage;
        }
      }

      if (!isValid) {
        fileList.classList.add(INVALID_FILE);
        statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;
      } else {
        statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData));
      }

      return statusMessage;
    };

    Uploader.prototype.formCustomFileList = function (fileData, files) {
      this.createParentUL();
      (0, _ej2Base.resetBlazorTemplate)(this.element.id + 'Template', 'Template');
      var fileList = this.createElement('li', {
        className: FILE
      });
      fileList.setAttribute('data-files-count', fileData.length + '');
      this.setListToFileInfo(fileData, fileList);
      var result = this.mergeFileInfo(fileData, fileList);
      fileList.setAttribute('data-file-name', result.name);
      this.uploadTemplateFn = this.templateComplier(this.template);
      var fromElements = [].slice.call(this.uploadTemplateFn(result, null, null, this.element.id + 'Template', this.isStringTemplate));
      var index = this.listParent.querySelectorAll('li').length;
      (0, _ej2Base.append)(fromElements, fileList);

      if (!fileList.classList.contains(INVALID_FILE)) {
        this.createFormInput(fileData);
      }

      var eventArgs = {
        element: fileList,
        fileInfo: result,
        index: index,
        isPreload: this.isPreLoadFile(result)
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: result,
        index: index,
        isPreload: this.isPreLoadFile(result)
      };
      this.trigger('rendering', eventArgs);
      this.trigger('fileListRendering', eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
      (0, _ej2Base.updateBlazorTemplate)(this.element.id + 'Template', 'Template', this, false);
    };
    /**
     * Create the file list for specified files data.
     * @param { FileInfo[] } fileData - specifies the files data for file list creation.
     * @returns void
     */


    Uploader.prototype.createFileList = function (fileData) {
      this.createParentUL();

      if (this.template !== '' && !(0, _ej2Base.isNullOrUndefined)(this.template)) {
        if (this.isFormUpload()) {
          this.uploadWrapper.classList.add(FORM_UPLOAD);
          this.formCustomFileList(fileData, this.element.files);
        } else {
          this.createCustomfileList(fileData);
        }
      } else if (this.isFormUpload()) {
        this.uploadWrapper.classList.add(FORM_UPLOAD);
        this.formFileList(fileData, this.element.files);
      } else {
        for (var _i = 0, fileData_7 = fileData; _i < fileData_7.length; _i++) {
          var listItem = fileData_7[_i];
          var liElement = this.createElement('li', {
            className: FILE,
            attrs: {
              'data-file-name': listItem.name,
              'data-files-count': '1'
            }
          });
          var textContainer = this.createElement('span', {
            className: TEXT_CONTAINER
          });
          var textElement = this.createElement('span', {
            className: FILE_NAME,
            attrs: {
              'title': listItem.name
            }
          });
          textElement.innerHTML = this.getFileNameOnly(listItem.name);
          var fileExtension = this.createElement('span', {
            className: FILE_TYPE
          });
          fileExtension.innerHTML = '.' + this.getFileType(listItem.name);

          if (!this.enableRtl) {
            textContainer.appendChild(textElement);
            textContainer.appendChild(fileExtension);
          } else {
            var rtlContainer = this.createElement('span', {
              className: RTL_CONTAINER
            });
            rtlContainer.appendChild(fileExtension);
            rtlContainer.appendChild(textElement);
            textContainer.appendChild(rtlContainer);
          }

          var fileSize = this.createElement('span', {
            className: FILE_SIZE
          });
          fileSize.innerHTML = this.bytesToSize(listItem.size);
          textContainer.appendChild(fileSize);
          var statusElement = this.createElement('span', {
            className: STATUS
          });
          textContainer.appendChild(statusElement);
          statusElement.innerHTML = listItem.status;
          liElement.appendChild(textContainer);
          var iconElement = this.createElement('span', {
            className: ' e-icons',
            attrs: {
              'tabindex': this.btnTabIndex
            }
          });
          /* istanbul ignore next */

          if (this.browserName === 'msie') {
            iconElement.classList.add('e-msie');
          }

          iconElement.setAttribute('title', this.localizedTexts('remove'));
          liElement.appendChild(iconElement);

          _ej2Base.EventHandler.add(iconElement, 'click', this.removeFiles, this);

          if (listItem.statusCode === '2') {
            statusElement.classList.add(UPLOAD_SUCCESS);
            iconElement.classList.add(DELETE_ICON);
            iconElement.setAttribute('title', this.localizedTexts('delete'));
          } else if (listItem.statusCode !== '1') {
            statusElement.classList.remove(UPLOAD_SUCCESS);
            statusElement.classList.add(VALIDATION_FAILS);
          }

          if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
            statusElement.innerHTML = '';
          }

          if (!iconElement.classList.contains(DELETE_ICON)) {
            iconElement.classList.add(REMOVE_ICON);
          }

          var index = fileData.indexOf(listItem);
          var eventArgs = {
            element: liElement,
            fileInfo: listItem,
            index: index,
            isPreload: this.isPreLoadFile(listItem)
          };
          var eventsArgs = {
            element: liElement,
            fileInfo: listItem,
            index: index,
            isPreload: this.isPreLoadFile(listItem)
          };
          this.trigger('rendering', eventArgs);
          this.trigger('fileListRendering', eventsArgs);
          this.listParent.appendChild(liElement);
          this.fileList.push(liElement);
          this.truncateName(textElement);
        }
      }
    };

    Uploader.prototype.getSlicedName = function (nameElement) {
      var text;
      text = nameElement.textContent;
      nameElement.dataset.tail = text.slice(text.length - 10);
    };

    Uploader.prototype.setListToFileInfo = function (fileData, fileList) {
      for (var _i = 0, fileData_8 = fileData; _i < fileData_8.length; _i++) {
        var listItem = fileData_8[_i];
        listItem.list = fileList;
      }
    };

    Uploader.prototype.truncateName = function (name) {
      var nameElement = name;

      if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
        /* istanbul ignore next */
      } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
      }
    };

    Uploader.prototype.getFileType = function (name) {
      var extension;
      var index = name.lastIndexOf('.');

      if (index >= 0) {
        extension = name.substring(index + 1);
      }

      return extension ? extension : '';
    };

    Uploader.prototype.getFileNameOnly = function (name) {
      var type = this.getFileType(name);
      var names = name.split('.' + type);
      return type = names[0];
    };

    Uploader.prototype.setInitialAttributes = function () {
      if (this.initialAttr.accept) {
        this.element.setAttribute('accept', this.initialAttr.accept);
      }

      if (this.initialAttr.disabled) {
        this.element.setAttribute('disabled', 'disabled');
      }

      if (this.initialAttr.multiple) {
        var newAttr = document.createAttribute('multiple');
        this.element.setAttributeNode(newAttr);
      }
    };

    Uploader.prototype.filterfileList = function (files) {
      var filterFiles = [];
      var li;

      for (var i = 0; i < files.length; i++) {
        li = this.getLiElement(files[i]);

        if (!li.classList.contains(UPLOAD_SUCCESS)) {
          filterFiles.push(files[i]);
        }
      }

      return filterFiles;
    };

    Uploader.prototype.updateStatus = function (files, status, statusCode, updateLiStatus) {
      if (updateLiStatus === void 0) {
        updateLiStatus = true;
      }

      if (!(status === '' || (0, _ej2Base.isNullOrUndefined)(status)) && !(statusCode === '' || (0, _ej2Base.isNullOrUndefined)(statusCode))) {
        files.status = status;
        files.statusCode = statusCode;
      }

      if (updateLiStatus) {
        var li = this.getLiElement(files);

        if (!(0, _ej2Base.isNullOrUndefined)(li)) {
          if (!(0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + STATUS)) && !(status === '' || (0, _ej2Base.isNullOrUndefined)(status))) {
            li.querySelector('.' + STATUS).textContent = status;
          }
        }
      }

      return files;
    };

    Uploader.prototype.getLiElement = function (files) {
      var index;

      for (var i = 0; i < this.filesData.length; i++) {
        if (this.filesData[i].name === files.name) {
          index = i;
        }
      }

      return this.fileList[index];
    };

    Uploader.prototype.createProgressBar = function (liElement) {
      var progressbarWrapper = this.createElement('span', {
        className: PROGRESS_WRAPPER
      });
      var progressBar = this.createElement('progressbar', {
        className: PROGRESSBAR,
        attrs: {
          value: '0',
          max: '100'
        }
      });
      var progressbarInnerWrapper = this.createElement('span', {
        className: PROGRESS_INNER_WRAPPER
      });
      progressBar.setAttribute('style', 'width: 0%');
      var progressbarText = this.createElement('span', {
        className: PROGRESSBAR_TEXT
      });
      progressbarText.textContent = '0%';
      progressbarInnerWrapper.appendChild(progressBar);
      progressbarWrapper.appendChild(progressbarInnerWrapper);
      progressbarWrapper.appendChild(progressbarText);
      liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
    };
    /* istanbul ignore next */


    Uploader.prototype.updateProgressbar = function (e, li) {
      if (!isNaN(Math.round(e.loaded / e.total * 100)) && !(0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + PROGRESSBAR))) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.progressInterval) && this.progressInterval !== '') {
          var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);

          if (value === 0 || value === 100) {
            this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
          }
        } else {
          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
        }
      }
    };

    Uploader.prototype.changeProgressValue = function (li, progressValue) {
      li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);
      li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
    };

    Uploader.prototype.uploadInProgress = function (e, files, customUI, request) {
      var li = this.getLiElement(files);

      if ((0, _ej2Base.isNullOrUndefined)(li) && !customUI) {
        return;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(li)) {
        /* istanbul ignore next */
        if (files.statusCode === '5') {
          this.cancelUploadingFile(files, e, request, li);
        }

        if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {
          li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);
          this.createProgressBar(li);
          this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
          li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
        }

        this.updateProgressbar(e, li);
        var iconEle = li.querySelector('.' + REMOVE_ICON);

        if (!(0, _ej2Base.isNullOrUndefined)(iconEle)) {
          iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
          iconEle.setAttribute('title', this.localizedTexts('abort'));
          iconEle.classList.remove(REMOVE_ICON);
        }
      } else {
        this.cancelUploadingFile(files, e, request);
      }

      var args = {
        e: e,
        operation: 'upload',
        file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')
      };
      this.trigger('progress', args);
    };
    /* istanbul ignore next */


    Uploader.prototype.cancelUploadingFile = function (files, e, request, li) {
      var _this = this;

      if (files.statusCode === '5') {
        var eventArgs = {
          event: e,
          fileData: files,
          cancel: false
        };
        this.trigger('canceling', eventArgs, function (eventArgs) {
          if (eventArgs.cancel) {
            files.statusCode = '3';

            if (!(0, _ej2Base.isNullOrUndefined)(li)) {
              var spinnerTarget = li.querySelector('.' + ABORT_ICON);

              if (!(0, _ej2Base.isNullOrUndefined)(spinnerTarget)) {
                (0, _ej2Popups.hideSpinner)(spinnerTarget);
                (0, _ej2Base.detach)(li.querySelector('.e-spinner-pane'));
              }
            }
          } else {
            request.emitError = false;
            request.httpRequest.abort();
            var formData = new FormData();

            if (files.statusCode === '5') {
              var name_1 = _this.element.getAttribute('name');

              formData.append(name_1, files.name);
              formData.append('cancel-uploading', files.name);
              var ajax = new _ej2Base.Ajax(_this.asyncSettings.removeUrl, 'POST', true, null);
              ajax.emitError = false;

              ajax.onLoad = function (e) {
                _this.removecanceledFile(e, files);

                return {};
              };

              ajax.send(formData);
            }
          }
        });
      }
    };

    Uploader.prototype.removecanceledFile = function (e, file) {
      var liElement = this.getLiElement(file);

      if (liElement.querySelector('.' + RETRY_ICON) || (0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + ABORT_ICON))) {
        return;
      }

      this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');
      this.renderFailureState(e, file, liElement);
      var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);

      if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
        (0, _ej2Popups.hideSpinner)(spinnerTarget);
        (0, _ej2Base.detach)(liElement.querySelector('.e-spinner-pane'));
      }

      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        event: e,
        response: requestResponse,
        operation: 'cancel',
        file: file
      };
      this.trigger('success', args);
    };

    Uploader.prototype.renderFailureState = function (e, file, liElement) {
      var _this = this;

      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      this.removeProgressbar(liElement, 'failure');

      if (!(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.e-file-status'))) {
        liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);
      }

      var deleteIcon = liElement.querySelector('.' + ABORT_ICON);

      if ((0, _ej2Base.isNullOrUndefined)(deleteIcon)) {
        return;
      }

      deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
      deleteIcon.classList.add(REMOVE_ICON);
      deleteIcon.setAttribute('title', this.localizedTexts('remove'));
      this.pauseButton = this.createElement('span', {
        className: 'e-icons e-file-reload-btn',
        attrs: {
          'tabindex': this.btnTabIndex
        }
      });
      deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
      this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
      var retryElement = liElement.querySelector('.' + RETRY_ICON);
      /* istanbul ignore next */

      retryElement.addEventListener('click', function (e) {
        _this.reloadcanceledFile(e, file, liElement, false);
      }, false);
    };

    Uploader.prototype.reloadcanceledFile = function (e, file, liElement, custom) {
      file.statusCode = '1';
      file.status = this.localizedTexts('readyToUploadMessage');

      if (!custom) {
        liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);

        if (!(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + RETRY_ICON))) {
          (0, _ej2Base.detach)(liElement.querySelector('.' + RETRY_ICON));
        }

        this.pauseButton = null;
      }
      /* istanbul ignore next */


      liElement.classList.add(RESTRICT_RETRY);
      this.upload([file]);
    };
    /* istanbul ignore next */


    Uploader.prototype.uploadComplete = function (e, file, customUI) {
      var status = e.target;

      if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
        var li = this.getLiElement(file);

        if ((0, _ej2Base.isNullOrUndefined)(li) && (!customUI || (0, _ej2Base.isNullOrUndefined)(customUI))) {
          return;
        }

        if (!(0, _ej2Base.isNullOrUndefined)(li)) {
          this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
          this.removeProgressbar(li, 'success');
          var iconEle = li.querySelector('.' + ABORT_ICON);

          if (!(0, _ej2Base.isNullOrUndefined)(iconEle)) {
            iconEle.classList.add(DELETE_ICON);
            iconEle.setAttribute('title', this.localizedTexts('delete'));
            iconEle.classList.remove(ABORT_ICON);
            iconEle.classList.remove(UPLOAD_INPROGRESS);
          }
        }

        this.raiseSuccessEvent(e, file);
      } else {
        this.uploadFailed(e, file);
      }
    };

    Uploader.prototype.getResponse = function (e) {
      // tslint:disable-next-line
      var target = e.currentTarget;
      var response = {
        readyState: target.readyState,
        statusCode: target.status,
        statusText: target.statusText,
        headers: target.getAllResponseHeaders(),
        withCredentials: target.withCredentials
      };
      return response;
    };

    Uploader.prototype.raiseSuccessEvent = function (e, file) {
      var _this = this;

      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts('uploadSuccessMessage');
      var args = {
        e: e,
        response: response,
        operation: 'upload',
        file: this.updateStatus(file, statusMessage, '2', false),
        statusText: statusMessage
      };
      var liElement = this.getLiElement(file);

      if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
        var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);

        if (!(0, _ej2Base.isNullOrUndefined)(spinnerEle)) {
          (0, _ej2Popups.hideSpinner)(liElement);
          (0, _ej2Base.detach)(spinnerEle);
        }
      }

      this.trigger('success', args, function (args) {
        // tslint:disable-next-line
        _this.updateStatus(file, args.statusText, '2');

        _this.uploadedFilesData.push(file);

        _this.trigger('change', {
          file: _this.uploadedFilesData
        });

        _this.checkActionButtonStatus();

        if (_this.fileList.length > 0) {
          if (!_this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {
            _this.uploadSequential();

            _this.checkActionComplete(true);
          } else {
            /* istanbul ignore next */
            _this.getLiElement(file).classList.remove(RESTRICT_RETRY);
          }
        }
      });
    };

    Uploader.prototype.uploadFailed = function (e, file) {
      var _this = this;

      var li = this.getLiElement(file);
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts('uploadFailedMessage');
      var args = {
        e: e,
        response: response,
        operation: 'upload',
        file: this.updateStatus(file, statusMessage, '0', false),
        statusText: statusMessage
      };

      if (!(0, _ej2Base.isNullOrUndefined)(li)) {
        this.renderFailureState(e, file, li);
      }

      this.trigger('failure', args, function (args) {
        // tslint:disable-next-line
        _this.updateStatus(file, args.statusText, '0');

        _this.checkActionButtonStatus();

        _this.uploadSequential();

        _this.checkActionComplete(true);
      });
    };

    Uploader.prototype.uploadSequential = function () {
      if (this.sequentialUpload) {
        if (this.autoUpload) {
          /* istanbul ignore next */
          this.checkAutoUpload(this.filesData);
        } else {
          this.uploadButtonClick();
        }
      }
    };

    Uploader.prototype.checkActionComplete = function (increment) {
      increment ? ++this.actionCompleteCount : --this.actionCompleteCount;
      this.raiseActionComplete();
    };

    Uploader.prototype.raiseActionComplete = function () {
      if (this.filesData.length === this.actionCompleteCount && this.flag) {
        this.flag = false;
        var eventArgs = {
          fileData: []
        };
        eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);
        this.trigger('actionComplete', eventArgs);
      }
    };

    Uploader.prototype.getSelectedFileStatus = function (selectedFiles) {
      var matchFiles = [];
      var matchFilesIndex = 0;

      for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {
        var selectedFileData = selectedFiles[selectFileIndex];

        for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {
          if (this.filesData[fileDataIndex].name === selectedFileData.name) {
            matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];
            ++matchFilesIndex;
          }
        }
      }

      return matchFiles;
    };

    Uploader.prototype.updateProgressBarClasses = function (li, className) {
      var progressBar = li.querySelector('.' + PROGRESSBAR);

      if (!(0, _ej2Base.isNullOrUndefined)(progressBar)) {
        progressBar.classList.add(className);
      }
    };

    Uploader.prototype.removeProgressbar = function (li, callType) {
      var _this = this;

      if (!(0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + PROGRESS_WRAPPER))) {
        this.progressAnimation = new _ej2Base.Animation({
          duration: 1250
        });
        this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {
          name: 'FadeOut'
        });
        this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {
          name: 'FadeOut'
        });
        setTimeout(function () {
          _this.animateProgressBar(li, callType);
        }, 750);
      }
    };
    /* istanbul ignore next */


    Uploader.prototype.animateProgressBar = function (li, callType) {
      if (callType === 'success') {
        li.classList.add(UPLOAD_SUCCESS);

        if (!(0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + STATUS))) {
          li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector('.' + STATUS), {
            name: 'FadeIn'
          });
          li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);
        }
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + STATUS))) {
          li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector('.' + STATUS), {
            name: 'FadeIn'
          });
          li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
        }
      }

      if (li.querySelector('.' + PROGRESS_WRAPPER)) {
        (0, _ej2Base.detach)(li.querySelector('.' + PROGRESS_WRAPPER));
      }
    };

    Uploader.prototype.setExtensions = function (extensions) {
      if (extensions !== '' && !(0, _ej2Base.isNullOrUndefined)(extensions)) {
        this.element.setAttribute('accept', extensions);
      } else {
        this.element.removeAttribute('accept');
      }
    };

    Uploader.prototype.templateComplier = function (uploadTemplate) {
      if (uploadTemplate) {
        var exception = void 0;

        try {
          if (document.querySelectorAll(uploadTemplate).length) {
            return (0, _ej2Base.compile)(document.querySelector(uploadTemplate).innerHTML.trim());
          }
        } catch (exception) {
          return (0, _ej2Base.compile)(uploadTemplate);
        }
      }

      return undefined;
    };

    Uploader.prototype.setRTL = function () {
      this.enableRtl ? (0, _ej2Base.addClass)([this.uploadWrapper], RTL) : (0, _ej2Base.removeClass)([this.uploadWrapper], RTL);
    };

    Uploader.prototype.localizedTexts = function (localeText) {
      this.l10n.setLocale(this.locale);
      return this.l10n.getConstant(localeText);
    };

    Uploader.prototype.setControlStatus = function () {
      if (!this.enabled) {
        this.uploadWrapper.classList.add(DISABLED);
        this.element.setAttribute('disabled', 'disabled');
        this.browseButton.setAttribute('disabled', 'disabled');

        if (!(0, _ej2Base.isNullOrUndefined)(this.clearButton)) {
          this.clearButton.setAttribute('disabled', 'disabled');
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.uploadButton)) {
          this.uploadButton.setAttribute('disabled', 'disabled');
        }
      } else {
        if (this.uploadWrapper.classList.contains(DISABLED)) {
          this.uploadWrapper.classList.remove(DISABLED);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.browseButton) && this.element.hasAttribute('disabled')) {
          this.element.removeAttribute('disabled');
          this.browseButton.removeAttribute('disabled');
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.clearButton) && this.clearButton.hasAttribute('disabled')) {
          this.clearButton.removeAttribute('disabled');
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {
          this.uploadButton.hasAttribute('disabled');
        }
      }
    };

    Uploader.prototype.checkHTMLAttributes = function (isDynamic) {
      var attributes = isDynamic ? (0, _ej2Base.isNullOrUndefined)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['accept', 'multiple', 'disabled'];

      for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];

        if (!(0, _ej2Base.isNullOrUndefined)(this.element.getAttribute(prop))) {
          switch (prop) {
            case 'accept':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.uploaderOptions) || this.uploaderOptions['allowedExtensions'] === undefined || isDynamic) {
                this.setProperties({
                  allowedExtensions: this.element.getAttribute('accept')
                }, !isDynamic);
                this.initialAttr.accept = this.allowedExtensions;
              }

              break;

            case 'multiple':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.uploaderOptions) || this.uploaderOptions['multiple'] === undefined || isDynamic) {
                var isMutiple = this.element.getAttribute(prop) === 'multiple' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;
                this.setProperties({
                  multiple: isMutiple
                }, !isDynamic);
                this.initialAttr.multiple = true;
              }

              break;

            case 'disabled':
              // tslint:disable-next-line
              if ((0, _ej2Base.isNullOrUndefined)(this.uploaderOptions) || this.uploaderOptions['enabled'] === undefined || isDynamic) {
                var isDisabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;
                this.setProperties({
                  enabled: isDisabled
                }, !isDynamic);
                this.initialAttr.disabled = true;
              }

          }
        }
      }
    };

    Uploader.prototype.chunkUpload = function (file, custom, fileIndex) {
      var start = 0;
      var end = Math.min(this.asyncSettings.chunkSize, file.size);
      var index = 0;
      var blob = file.rawFile.slice(start, end);
      var metaData = {
        chunkIndex: index,
        blob: blob,
        file: file,
        start: start,
        end: end,
        retryCount: 0,
        request: null
      };
      this.sendRequest(file, metaData, custom, fileIndex);
    };

    Uploader.prototype.sendRequest = function (file, metaData, custom, fileIndex) {
      var _this = this;

      var formData = new FormData();
      var cloneFile;
      var blob = file.rawFile.slice(metaData.start, metaData.end);
      formData.append('chunkFile', blob, file.name);
      formData.append('chunk-index', metaData.chunkIndex.toString());
      formData.append('chunkIndex', metaData.chunkIndex.toString());
      var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
      formData.append('total-chunk', totalChunk.toString());
      formData.append('totalChunk', totalChunk.toString());
      var ajax = new _ej2Base.Ajax({
        url: this.asyncSettings.saveUrl,
        type: 'POST',
        async: true,
        contentType: null
      });
      ajax.emitError = false;

      ajax.onLoad = function (e) {
        _this.chunkUploadComplete(e, metaData, custom);

        return {};
      };

      ajax.onUploadProgress = function (e) {
        _this.chunkUploadInProgress(e, metaData, custom);

        return {};
      };

      var eventArgs = {
        fileData: file,
        customFormData: [],
        cancel: false,
        chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
      };

      ajax.beforeSend = function (e) {
        eventArgs.currentRequest = ajax.httpRequest;
        eventArgs.currentChunkIndex = metaData.chunkIndex;
        /* istanbul ignore next */

        if ((0, _ej2Base.isBlazor)()) {
          if (_this.currentRequestHeader) {
            _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);
          }

          if (_this.customFormDatas) {
            _this.updateFormData(formData, _this.customFormDatas);
          }
        }

        if (eventArgs.currentChunkIndex === 0) {
          // This event is currently not required but to avoid breaking changes for previous customer, we have included.
          _this.trigger('uploading', eventArgs, function (eventArgs) {
            _this.uploadingEventCallback(formData, eventArgs, e, file);
          });
        } else {
          _this.trigger('chunkUploading', eventArgs, function (eventArgs) {
            _this.uploadingEventCallback(formData, eventArgs, e, file);
          });
        }
      };
      /* istanbul ignore next */


      ajax.onError = function (e) {
        _this.chunkUploadFailed(e, metaData, custom);

        return {};
      };

      ajax.send(formData);
      metaData.request = ajax;
    };

    Uploader.prototype.uploadingEventCallback = function (formData, eventArgs, e, file) {
      if (eventArgs.cancel) {
        this.eventCancelByArgs(e, eventArgs, file);
      } else {
        this.updateFormData(formData, eventArgs.customFormData);
      }
    };

    Uploader.prototype.eventCancelByArgs = function (e, eventArgs, file) {
      var _this = this;

      e.cancel = true;

      if (eventArgs.fileData.statusCode === '5') {
        return;
      }

      var liElement = this.getLiElement(eventArgs.fileData);
      liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');
      liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
      eventArgs.fileData.statusCode = '5';
      eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');
      this.pauseButton = this.createElement('span', {
        className: 'e-icons e-file-reload-btn',
        attrs: {
          'tabindex': this.btnTabIndex
        }
      });
      var removeIcon = liElement.querySelector('.' + REMOVE_ICON);
      removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
      this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
      /* istanbul ignore next */

      this.pauseButton.addEventListener('click', function (e) {
        _this.reloadcanceledFile(e, file, liElement);
      }, false);
      this.checkActionButtonStatus();
    };

    Uploader.prototype.checkChunkUpload = function () {
      return this.asyncSettings.chunkSize <= 0 || (0, _ej2Base.isNullOrUndefined)(this.asyncSettings.chunkSize) ? false : true;
    };

    Uploader.prototype.chunkUploadComplete = function (e, metaData, custom) {
      var _this = this;

      var response = e.target;
      var liElement;

      if (response.readyState === 4 && response.status >= 200 && response.status < 300) {
        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
        var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
        var eventArgs = {
          event: e,
          file: metaData.file,
          chunkIndex: metaData.chunkIndex,
          totalChunk: totalChunk,
          chunkSize: this.asyncSettings.chunkSize,
          response: requestResponse
        };
        this.trigger('chunkSuccess', eventArgs);

        if ((0, _ej2Base.isNullOrUndefined)(custom) || !custom) {
          liElement = this.getLiElement(metaData.file);
        }

        this.updateMetaData(metaData);

        if (metaData.end === metaData.file.size) {
          metaData.file.statusCode = '3';
        }

        if (metaData.file.statusCode === '5') {
          var eventArgs_1 = {
            event: e,
            fileData: metaData.file,
            cancel: false
          };
          this.trigger('canceling', eventArgs_1, function (eventArgs) {
            /* istanbul ignore next */
            if (eventArgs.cancel) {
              metaData.file.statusCode = '3';
              var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);

              if (!(0, _ej2Base.isNullOrUndefined)(liElement) && !(0, _ej2Base.isNullOrUndefined)(spinnerTarget)) {
                (0, _ej2Popups.hideSpinner)(spinnerTarget);
                (0, _ej2Base.detach)(liElement.querySelector('.e-spinner-pane'));
              }

              _this.sendNextRequest(metaData);
            } else {
              metaData.request.emitError = false;
              response.abort();
              var formData = new FormData();

              var name_2 = _this.element.getAttribute('name');

              formData.append(name_2, metaData.file.name);
              formData.append('cancel-uploading', metaData.file.name);
              formData.append('cancelUploading', metaData.file.name);
              var ajax = new _ej2Base.Ajax(_this.asyncSettings.removeUrl, 'POST', true, null);
              ajax.emitError = false;

              ajax.onLoad = function (e) {
                _this.removeChunkFile(e, metaData, custom);

                return {};
              };

              ajax.send(formData);
            }
          });
        } else {
          if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
            var index = this.pausedData.indexOf(metaData);

            if (index >= 0) {
              this.pausedData.splice(index, 1);
            }

            if ((0, _ej2Base.isNullOrUndefined)(this.template) && ((0, _ej2Base.isNullOrUndefined)(custom) || !custom) && liElement) {
              if (liElement) {
                (0, _ej2Base.detach)(liElement.querySelector('.' + PAUSE_UPLOAD));
              }

              this.removeChunkProgressBar(metaData);
            }

            this.raiseSuccessEvent(e, metaData.file);
            return;
          }

          this.sendNextRequest(metaData);
        }
      } else {
        this.chunkUploadFailed(e, metaData);
      }
    };

    Uploader.prototype.sendNextRequest = function (metaData) {
      metaData.start = metaData.end;
      metaData.end += this.asyncSettings.chunkSize;
      metaData.end = Math.min(metaData.end, metaData.file.size);
      metaData.chunkIndex += 1;
      this.sendRequest(metaData.file, metaData);
    };

    Uploader.prototype.removeChunkFile = function (e, metaData, custom) {
      if ((0, _ej2Base.isNullOrUndefined)(this.template) && (0, _ej2Base.isNullOrUndefined)(custom) && !custom) {
        var liElement = this.getLiElement(metaData.file);
        var deleteIcon = liElement.querySelector('.' + ABORT_ICON);
        var spinnerTarget = deleteIcon;
        this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
        this.removeProgressbar(liElement, 'failure');
        deleteIcon.classList.remove(ABORT_ICON);
        deleteIcon.classList.add(REMOVE_ICON);
        deleteIcon.setAttribute('title', this.localizedTexts('remove'));
        var pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);
        pauseIcon.classList.add(RETRY_ICON);
        pauseIcon.classList.remove(PAUSE_UPLOAD);
        pauseIcon.setAttribute('title', this.localizedTexts('retry'));

        if (!(0, _ej2Base.isNullOrUndefined)(liElement) && !(0, _ej2Base.isNullOrUndefined)(deleteIcon)) {
          (0, _ej2Popups.hideSpinner)(spinnerTarget);
          (0, _ej2Base.detach)(liElement.querySelector('.e-spinner-pane'));
        }
      }
    };

    Uploader.prototype.pauseUpload = function (metaData, e, custom) {
      metaData.file.statusCode = '4';
      metaData.file.status = this.localizedTexts('pause');
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.abortUpload(metaData, custom, eventArgs);
    };

    Uploader.prototype.abortUpload = function (metaData, custom, eventArgs) {
      metaData.request.emitError = false;
      metaData.request.httpRequest.abort();
      var liElement = this.getLiElement(metaData.file);

      if ((0, _ej2Base.isNullOrUndefined)(this.template) && ((0, _ej2Base.isNullOrUndefined)(custom) || !custom)) {
        var targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);
        targetElement.classList.remove(PAUSE_UPLOAD);
        targetElement.classList.add(RESUME_UPLOAD);
        targetElement.setAttribute('title', this.localizedTexts('resume'));
        targetElement.nextElementSibling.classList.add(REMOVE_ICON);
        targetElement.nextElementSibling.classList.remove(ABORT_ICON);
        targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));
      }

      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].file.name === metaData.file.name) {
          this.pausedData.splice(i, 1);
        }
      }

      this.pausedData.push(metaData);
      this.trigger('pausing', eventArgs);
    };

    Uploader.prototype.resumeUpload = function (metaData, e, custom) {
      var liElement = this.getLiElement(metaData.file);
      var targetElement;

      if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
        targetElement = liElement.querySelector('.' + RESUME_UPLOAD);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(targetElement) && ((0, _ej2Base.isNullOrUndefined)(custom) || !custom)) {
        targetElement.classList.remove(RESUME_UPLOAD);
        targetElement.classList.add(PAUSE_UPLOAD);
        targetElement.setAttribute('title', this.localizedTexts('pause'));
        targetElement.nextElementSibling.classList.remove(REMOVE_ICON);
        targetElement.nextElementSibling.classList.add(ABORT_ICON);
        targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));
      }

      metaData.file.status = this.localizedTexts('inProgress');
      metaData.file.statusCode = '3';
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.trigger('resuming', eventArgs);

      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].end === this.pausedData[i].file.size) {
          this.chunkUploadComplete(e, metaData, custom);
        } else {
          if (this.pausedData[i].file.name === metaData.file.name) {
            this.pausedData[i].start = this.pausedData[i].end;
            this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;
            this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);
            this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;
            this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);
          }
        }
      }
    };

    Uploader.prototype.updateMetaData = function (metaData) {
      if (this.uploadMetaData.indexOf(metaData) === -1) {
        this.uploadMetaData.push(metaData);
      } else {
        this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);
        this.uploadMetaData.push(metaData);
      }
    };

    Uploader.prototype.removeChunkProgressBar = function (metaData) {
      var liElement = this.getLiElement(metaData.file);

      if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
        this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);
        this.removeProgressbar(liElement, 'success');
        var cancelButton = liElement.querySelector('.' + ABORT_ICON);

        if (!(0, _ej2Base.isNullOrUndefined)(cancelButton)) {
          cancelButton.classList.add(DELETE_ICON);
          cancelButton.setAttribute('title', this.localizedTexts('delete'));
          cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
        }
      }
    };

    Uploader.prototype.chunkUploadFailed = function (e, metaData, custom) {
      var _this = this;

      var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
      var liElement;

      if ((0, _ej2Base.isNullOrUndefined)(this.template) && ((0, _ej2Base.isNullOrUndefined)(custom) || !custom)) {
        liElement = this.getLiElement(metaData.file);
      }

      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var eventArgs = {
        event: e,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        totalChunk: chunkCount,
        chunkSize: this.asyncSettings.chunkSize,
        cancel: false,
        response: requestResponse
      };
      this.trigger('chunkFailure', eventArgs, function (eventArgs) {
        // To prevent triggering of failure event
        // tslint:disable-next-line
        if (!eventArgs.cancel) {
          if (metaData.retryCount < _this.asyncSettings.retryCount) {
            setTimeout(function () {
              _this.retryRequest(liElement, metaData, custom);
            }, _this.asyncSettings.retryAfterDelay);
          } else {
            if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
              var pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);

              if (!(0, _ej2Base.isNullOrUndefined)(pauseButton)) {
                pauseButton.classList.add(RETRY_ICON);
                pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);
              }

              _this.updateProgressBarClasses(liElement, UPLOAD_FAILED);

              _this.removeProgressbar(liElement, 'failure');

              liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
              var iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);
              iconElement.classList.remove(ABORT_ICON);

              if (!(0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + PAUSE_UPLOAD))) {
                (0, _ej2Base.detach)(liElement.querySelector('.' + PAUSE_UPLOAD));
              }

              if (metaData.start > 0) {
                iconElement.classList.add(DELETE_ICON);
                iconElement.setAttribute('title', _this.localizedTexts('delete'));
              } else {
                iconElement.classList.add(REMOVE_ICON);
                iconElement.setAttribute('title', _this.localizedTexts('remove'));
              }
            }

            metaData.retryCount = 0;
            var file_1 = metaData.file;

            var failureMessage = _this.localizedTexts('uploadFailedMessage');

            var args = {
              e: e,
              response: requestResponse,
              operation: 'upload',
              file: _this.updateStatus(file_1, failureMessage, '0', false),
              statusText: failureMessage
            };

            _this.trigger('failure', args, function (args) {
              // tslint:disable-next-line
              _this.updateStatus(file_1, args.statusText, '0');

              _this.uploadSequential();

              _this.checkActionComplete(true);
            });
          }
        }
      });
    };

    Uploader.prototype.retryRequest = function (liElement, metaData, custom) {
      if ((0, _ej2Base.isNullOrUndefined)(this.template) && ((0, _ej2Base.isNullOrUndefined)(custom) || !custom) && liElement) {
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      }

      metaData.retryCount += 1;
      this.sendRequest(metaData.file, metaData);
    };

    Uploader.prototype.checkPausePlayAction = function (e) {
      var targetElement = e.target;
      var selectedElement = e.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var fileData = this.filesData[index];
      var metaData = this.getCurrentMetaData(fileData);

      if (targetElement.classList.contains(PAUSE_UPLOAD)) {
        /* istanbul ignore next */
        this.pauseUpload(metaData, e);
      } else if (targetElement.classList.contains(RESUME_UPLOAD)) {
        /* istanbul ignore next */
        this.resumeUpload(metaData, e);
      } else if (targetElement.classList.contains(RETRY_ICON)) {
        if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {
          this.retryUpload(metaData, false);
        } else {
          this.retryUpload(metaData, true);
        }
      }
    };

    Uploader.prototype.retryUpload = function (metaData, fromcanceledStage) {
      if (fromcanceledStage) {
        metaData.end = metaData.end + this.asyncSettings.chunkSize;
        metaData.start = metaData.start + this.asyncSettings.chunkSize;
        this.sendRequest(metaData.file, metaData);
      } else {
        metaData.file.statusCode = '1';
        metaData.file.status = this.localizedTexts('readyToUploadMessage');
        this.chunkUpload(metaData.file);
      }
      /* istanbul ignore next */


      this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
    };

    Uploader.prototype.chunkUploadInProgress = function (e, metaData, custom) {
      var _this = this;

      if (metaData.file.statusCode === '4') {
        return;
      }

      if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {
        metaData.file.statusCode = '3';
        metaData.file.status = this.localizedTexts('inProgress');
      }

      this.updateMetaData(metaData);
      var liElement = this.getLiElement(metaData.file);

      if ((0, _ej2Base.isNullOrUndefined)(liElement)) {
        return;
      }

      var target;
      var retryElement = liElement.querySelector('.' + RETRY_ICON);

      if (!(0, _ej2Base.isNullOrUndefined)(retryElement)) {
        retryElement.classList.add(PAUSE_UPLOAD);
        retryElement.setAttribute('title', this.localizedTexts('pause'));
        retryElement.classList.remove(RETRY_ICON);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
        if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {
          var statusElement = liElement.querySelector('.' + STATUS);

          if ((0, _ej2Base.isNullOrUndefined)(this.template)) {
            statusElement.classList.add(UPLOAD_INPROGRESS);
            statusElement.classList.remove(UPLOAD_FAILED);
            this.createProgressBar(liElement);
            this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);
          }

          var clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);

          if (!(0, _ej2Base.isNullOrUndefined)(clearIcon)) {
            clearIcon.classList.add(ABORT_ICON);
            clearIcon.setAttribute('title', this.localizedTexts('abort'));
            clearIcon.classList.remove(REMOVE_ICON);
          }
        }

        if (!isNaN(Math.round(e.loaded / e.total * 100)) && (0, _ej2Base.isNullOrUndefined)(this.template) && metaData.file.statusCode !== '4') {
          var loadedSize = metaData.chunkIndex * this.asyncSettings.chunkSize;
          var value = Math.min((loadedSize + e.loaded) / metaData.file.size * 100, 100);
          this.changeProgressValue(liElement, Math.round(value).toString() + '%');
        }

        if (metaData.chunkIndex === 0) {
          this.checkActionButtonStatus();
        }
      }

      if ((0, _ej2Base.isNullOrUndefined)(liElement.querySelector('.' + PAUSE_UPLOAD)) && (0, _ej2Base.isNullOrUndefined)(this.template)) {
        this.pauseButton = this.createElement('span', {
          className: 'e-icons e-file-pause-btn',
          attrs: {
            'tabindex': this.btnTabIndex
          }
        });

        if (this.browserName === 'msie') {
          this.pauseButton.classList.add('e-msie');
        }

        var abortIcon = liElement.querySelector('.' + ABORT_ICON);
        abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);
        this.pauseButton.setAttribute('title', this.localizedTexts('pause'));
        this.pauseButton.addEventListener('click', function (e) {
          _this.checkPausePlayAction(e);
        }, false);
      }
    };
    /**
     * It is used to convert bytes value into kilobytes or megabytes depending on the size based
     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
     * @param { number } bytes - specifies the file size in bytes.
     * @returns string
     */


    Uploader.prototype.bytesToSize = function (bytes) {
      var i = -1;
      var size;

      if (!bytes) {
        return '0.0 KB';
      }

      do {
        bytes = bytes / 1024;
        i++;
      } while (bytes > 99);

      if (i >= 2) {
        bytes = bytes * 1024;
        i = 1;
      }

      return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];
    };
    /**
     * Allows you to sort the file data alphabetically based on its file name clearly.
     * @param { FileList } filesData - specifies the files data for upload.
     * @returns File[]
     */

    /* istanbul ignore next */


    Uploader.prototype.sortFileList = function (filesData) {
      filesData = filesData ? filesData : this.sortFilesList;
      var files = filesData;
      var fileNames = [];

      for (var i = 0; i < files.length; i++) {
        fileNames.push(files[i].name);
      }

      var sortedFileNames = fileNames.sort();
      var sortedFilesData = [];
      var index = 0;

      for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
        var name_3 = sortedFileNames_1[_i];

        for (var i = 0; i < files.length; i++) {
          if (name_3 === files[i].name) {
            sortedFilesData.push(files[i]);
          }
        }
      }

      return sortedFilesData;
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */


    Uploader.prototype.destroy = function () {
      this.element.value = null;
      this.clearAll();
      this.unWireEvents();
      this.unBindDropEvents();

      if (this.multiple) {
        this.element.removeAttribute('multiple');
      }

      if (!this.enabled) {
        this.element.removeAttribute('disabled');
      }

      this.element.removeAttribute('accept');
      this.setInitialAttributes();
      var attributes = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];

      for (var _i = 0, attributes_2 = attributes; _i < attributes_2.length; _i++) {
        var key = attributes_2[_i];
        this.element.removeAttribute(key);
      }

      this.uploadWrapper.parentElement.appendChild(this.element);
      (0, _ej2Base.detach)(this.uploadWrapper);
      this.uploadWrapper = null;

      _super.prototype.destroy.call(this);
    };
    /**
     * Allows you to call the upload process manually by calling save URL action.
     * To process the selected files (added in upload queue), pass an empty argument otherwise
     * upload the specific file based on its argument.
     * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.
     * @returns void
     */


    Uploader.prototype.upload = function (files, custom) {
      var _this = this;

      files = files ? files : this.filesData;
      var uploadFiles = this.getFilesInArray(files);
      var eventArgs = {
        customFormData: [],
        currentRequest: null
      };
      this.trigger('beforeUpload', eventArgs, function (eventArgs) {
        if ((0, _ej2Base.isBlazor)()) {
          _this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : _this.currentRequestHeader;
          _this.customFormDatas = eventArgs.customFormData && eventArgs.customFormData.length > 0 ? eventArgs.customFormData : _this.customFormDatas;
        }

        _this.uploadFiles(uploadFiles, custom);
      });
    };

    Uploader.prototype.getFilesInArray = function (files) {
      var uploadFiles = [];

      if (files instanceof Array) {
        uploadFiles = files;
      } else {
        uploadFiles.push(files);
      }

      return uploadFiles;
    };

    Uploader.prototype.uploadFiles = function (files, custom) {
      var _this = this;

      var selectedFiles = [];

      if (this.asyncSettings.saveUrl === '' || (0, _ej2Base.isNullOrUndefined)(this.asyncSettings.saveUrl)) {
        return;
      }

      if (!custom || (0, _ej2Base.isNullOrUndefined)(custom)) {
        if (!this.multiple) {
          var file = [];
          file.push(files[0]);
          selectedFiles = this.filterfileList(file);
        } else {
          selectedFiles = this.filterfileList(files);
        }
      } else {
        selectedFiles = files;
      }

      var _loop_5 = function (i) {
        if ((0, _ej2Base.isBlazor)() && !this_3.checkChunkUpload()) {
          /* istanbul ignore next */

          /* tslint:disable */
          this_3.getBase64(selectedFiles[i].rawFile).then(function (data) {
            _this.base64String.push(data);

            _this.uploadFilesRequest(selectedFiles, i, custom);
          });
          /* tslint:disable */
        } else {
          this_3.uploadFilesRequest(selectedFiles, i, custom);
        }
      };

      var this_3 = this;

      for (var i = 0; i < selectedFiles.length; i++) {
        _loop_5(i);
      }
    };

    Uploader.prototype.uploadFilesRequest = function (selectedFiles, i, custom) {
      var _this = this;

      var cloneFiles = [];
      var chunkEnabled = this.checkChunkUpload();
      var ajax = new _ej2Base.Ajax(this.asyncSettings.saveUrl, 'POST', true, null);
      ajax.emitError = false;
      var getFileData;
      /* istanbul ignore next */

      if ((0, _ej2Base.isBlazor)()) {
        getFileData = selectedFiles.slice(0);
        cloneFiles.push(getFileData[i].rawFile);
      }

      var eventArgs = {
        fileData: (0, _ej2Base.isBlazor)() ? getFileData[i] : selectedFiles[i],
        customFormData: [],
        cancel: false
      };
      var formData = new FormData();

      ajax.beforeSend = function (e) {
        eventArgs.currentRequest = ajax.httpRequest;
        /* istanbul ignore next */

        if ((0, _ej2Base.isBlazor)()) {
          eventArgs.fileData.rawFile = !chunkEnabled ? _this.base64String[i] : eventArgs.fileData.rawFile;

          if (_this.currentRequestHeader) {
            _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);
          }

          if (_this.customFormDatas) {
            _this.updateFormData(formData, _this.customFormDatas);
          }
        }

        _this.trigger('uploading', eventArgs, function (eventArgs) {
          /* istanbul ignore next */
          if ((0, _ej2Base.isBlazor)() && !chunkEnabled) {
            selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];
          }

          if (eventArgs.cancel) {
            _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);
          }

          _this.updateFormData(formData, eventArgs.customFormData);
        });
      };

      if (selectedFiles[i].statusCode === '1') {
        var name_4 = this.element.getAttribute('name');
        formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name);

        if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {
          this.chunkUpload(selectedFiles[i], custom, i);
        } else {
          ajax.onLoad = function (e) {
            if (eventArgs.cancel && (0, _ej2Base.isBlazor)()) {
              return {};
            } else {
              _this.uploadComplete(e, selectedFiles[i], custom);

              return {};
            }
          };

          ajax.onUploadProgress = function (e) {
            if (eventArgs.cancel && (0, _ej2Base.isBlazor)()) {
              return {};
            } else {
              _this.uploadInProgress(e, selectedFiles[i], custom, ajax);

              return {};
            }
          };
          /* istanbul ignore next */


          ajax.onError = function (e) {
            _this.uploadFailed(e, selectedFiles[i]);

            return {};
          };

          ajax.send(formData);
        }
      }
    };

    Uploader.prototype.spliceFiles = function (liIndex) {
      var liElement = this.fileList[liIndex];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute('data-files-count');
      var startIndex = 0;

      for (var i = 0; i < liIndex; i++) {
        startIndex += +this.fileList[i].getAttribute('data-files-count');
      }

      var endIndex = startIndex + nameElements - 1;

      for (var j = endIndex; j >= startIndex; j--) {
        allFiles.splice(j, 1);
      }
    };
    /**
     * Remove the uploaded file from server manually by calling the remove URL action.
     * If you pass an empty argument to this method, the complete file list can be cleared,
     * otherwise remove the specific file based on its argument (“file_data”).
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
     * @param { boolean } customTemplate - Set true if the component rendering with customize template.
     * @param { boolean } removeDirectly - Set true if files remove without removing event.
     * @param { boolean } postRawFile - Set false, to post file name only to the remove action.
     * @returns void
     */


    Uploader.prototype.remove = function (fileData, customTemplate, removeDirectly, postRawFile, args) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(postRawFile)) {
        postRawFile = true;
      }

      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        customFormData: [],
        postRawFile: postRawFile,
        currentRequest: null
      };
      var beforeEventArgs = {
        cancel: false,
        customFormData: [],
        currentRequest: null
      };
      this.trigger('beforeRemove', beforeEventArgs, function (beforeEventArgs) {
        if (!beforeEventArgs.cancel) {
          if ((0, _ej2Base.isBlazor)()) {
            _this.currentRequestHeader = beforeEventArgs.currentRequest;
            _this.customFormDatas = beforeEventArgs.customFormData;
          }

          var index = void 0;

          if (_this.isFormUpload()) {
            eventArgs.filesData = fileData;

            _this.trigger('removing', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                var removingFiles = _this.getFilesInArray(fileData);

                var isLiRemoved = false;
                var liIndex = void 0;

                for (var _i = 0, removingFiles_1 = removingFiles; _i < removingFiles_1.length; _i++) {
                  var data = removingFiles_1[_i];

                  if (!isLiRemoved) {
                    liIndex = _this.fileList.indexOf(data.list);
                  }

                  if (liIndex > -1) {
                    var inputElement = !(0, _ej2Base.isNullOrUndefined)(data.input) ? data.input : null;

                    if (inputElement) {
                      (0, _ej2Base.detach)(inputElement);
                    }

                    _this.spliceFiles(liIndex);

                    (0, _ej2Base.detach)(_this.fileList[liIndex]);

                    _this.fileList.splice(liIndex, 1);

                    isLiRemoved = true;
                    liIndex = -1;
                  }
                }
              }
            });
          } else if (_this.isForm && ((0, _ej2Base.isNullOrUndefined)(_this.asyncSettings.removeUrl) || _this.asyncSettings.removeUrl === '')) {
            eventArgs.filesData = _this.getFilesData();

            _this.trigger('removing', eventArgs, function (eventArgs) {
              if (!eventArgs.cancel) {
                _this.clearAll();
              }
            });
          } else {
            var removeFiles = [];
            fileData = !(0, _ej2Base.isNullOrUndefined)(fileData) ? fileData : _this.filesData;

            if (fileData instanceof Array) {
              removeFiles = fileData;
            } else {
              removeFiles.push(fileData);
            }

            eventArgs.filesData = removeFiles;
            var removeUrl = _this.asyncSettings.removeUrl;
            var validUrl = removeUrl === '' || (0, _ej2Base.isNullOrUndefined)(removeUrl) ? false : true;

            var _loop_6 = function (files) {
              index = _this.filesData.indexOf(files);

              if ((files.statusCode === '2' || files.statusCode === '4') && validUrl) {
                _this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);
              } else {
                if (!removeDirectly) {
                  _this.trigger('removing', eventArgs, function (eventArgs) {
                    if (!eventArgs.cancel) {
                      _this.removeFilesData(files, customTemplate);
                    }
                  });
                } else {
                  _this.removeFilesData(files, customTemplate);
                }
              }

              if (_this.sequentialUpload) {
                /* istanbul ignore next */
                if (index <= _this.actionCompleteCount) {
                  _this.checkActionComplete(false);
                }
              } else {
                _this.checkActionComplete(false);
              }
            };

            for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
              var files = removeFiles_1[_i];

              _loop_6(files);
            }
          }
        }
      });
    };
    /**
     * Clear all the file entries from list that can be uploaded files or added in upload queue.
     * @returns void
     */


    Uploader.prototype.clearAll = function () {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(this.listParent)) {
        if (this.browserName !== 'msie') {
          this.element.value = '';
        }

        this.filesData = [];
        return;
      }

      var eventArgs = {
        cancel: false,
        filesData: this.filesData
      };
      this.trigger('clearing', eventArgs, function (eventArgs) {
        if (!eventArgs.cancel) {
          _this.clearData();

          _this.actionCompleteCount = 0;
          _this.count = -1;
        }
      });
    };
    /**
     * Get the data of files which are shown in file list.
     * @param { number } index - specifies the file list item(li) index.
     * @returns FileInfo[]
     */


    Uploader.prototype.getFilesData = function (index) {
      if (!(0, _ej2Base.isBlazor)()) {
        if ((0, _ej2Base.isNullOrUndefined)(index)) {
          return this.filesData;
        } else {
          return this.getSelectedFiles(index);
        }
      } else {
        for (var i = 0; i < this.filesData.length; i++) {
          this.filesData[i].rawFile = this.base64String[i];
        }

        return this.filesData;
      }
    };
    /**
     * Pauses the in-progress chunked upload based on the file data.
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.
     * @param { boolean } custom - Set true if used custom UI.
     * @returns void
     */


    Uploader.prototype.pause = function (fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.pauseUploading(fileDataFiles, custom);
    };

    Uploader.prototype.pauseUploading = function (fileData, custom) {
      var files = this.getFiles(fileData);

      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === '3') {
          this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };

    Uploader.prototype.getFiles = function (fileData) {
      var files = [];

      if (!(0, _ej2Base.isNullOrUndefined)(fileData) && !(fileData instanceof Array)) {
        files.push(fileData);
      } else {
        files = fileData;
      }

      return files;
    };
    /**
     * Resumes the chunked upload that is previously paused based on the file data.
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.
     * @param { boolean } custom - Set true if used custom UI.
     * @returns void
     */


    Uploader.prototype.resume = function (fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.resumeFiles(fileDataFiles, custom);
    };

    Uploader.prototype.resumeFiles = function (fileData, custom) {
      var files = this.getFiles(fileData);

      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === '4') {
          this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };
    /**
     * Retries the canceled or failed file upload based on the file data.
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.
     * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.
     * @returns void
     */


    Uploader.prototype.retry = function (fileData, fromcanceledStage, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
    };

    Uploader.prototype.retryFailedFiles = function (fileData, fromcanceledStage, custom) {
      var files = this.getFiles(fileData);

      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === '5' || files[i].statusCode === '0') {
          if (this.asyncSettings.chunkSize > 0) {
            this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
          } else {
            var liElement = void 0;

            if (!custom) {
              liElement = this.fileList[this.filesData.indexOf(files[i])];
            }

            this.reloadcanceledFile(null, files[i], liElement, custom);
          }
        }
      }
    };
    /**
     * Stops the in-progress chunked upload based on the file data.
     * When the file upload is canceled, the partially uploaded file is removed from server.
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.
     * @returns void
     */


    Uploader.prototype.cancel = function (fileData) {
      fileData = fileData ? fileData : this.filesData;
      var cancelingFiles = this.getFilesInArray(fileData);
      this.cancelUpload(cancelingFiles);
    };

    Uploader.prototype.cancelUpload = function (fileData) {
      var files = this.getFiles(fileData);

      if (this.asyncSettings.chunkSize > 0) {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === '3') {
            var metaData = this.getCurrentMetaData(files[i], null);
            metaData.file.statusCode = '5';
            metaData.file.status = this.localizedTexts('fileUploadCancel');
            this.updateMetaData(metaData);
            this.showHideUploadSpinner(files[i]);
          }
        }
      } else {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === '3') {
            files[i].statusCode = '5';
            files[i].status = this.localizedTexts('fileUploadCancel');
            this.showHideUploadSpinner(files[i]);
          }
        }
      }
    };

    Uploader.prototype.showHideUploadSpinner = function (files) {
      var liElement = this.getLiElement(files);

      if (!(0, _ej2Base.isNullOrUndefined)(liElement) && (0, _ej2Base.isNullOrUndefined)(this.template)) {
        var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
        (0, _ej2Popups.createSpinner)({
          target: spinnerTarget,
          width: '20px'
        });
        (0, _ej2Popups.showSpinner)(spinnerTarget);
      }
    };

    __decorate([(0, _ej2Base.Complex)({
      saveUrl: '',
      removeUrl: ''
    }, AsyncSettings)], Uploader.prototype, "asyncSettings", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Uploader.prototype, "sequentialUpload", void 0);

    __decorate([(0, _ej2Base.Property)({})], Uploader.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)('')], Uploader.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Uploader.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Uploader.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Uploader.prototype, "multiple", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Uploader.prototype, "autoUpload", void 0);

    __decorate([(0, _ej2Base.Complex)({}, ButtonsProps)], Uploader.prototype, "buttons", void 0);

    __decorate([(0, _ej2Base.Property)('')], Uploader.prototype, "allowedExtensions", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Uploader.prototype, "minFileSize", void 0);

    __decorate([(0, _ej2Base.Property)(30000000)], Uploader.prototype, "maxFileSize", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Uploader.prototype, "dropArea", void 0);

    __decorate([(0, _ej2Base.Collection)([{}], FilesProp)], Uploader.prototype, "files", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Uploader.prototype, "showFileList", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Uploader.prototype, "directoryUpload", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "actionComplete", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "rendering", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "beforeUpload", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "fileListRendering", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "selected", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "uploading", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "success", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "failure", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "removing", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "beforeRemove", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "clearing", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "progress", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "chunkSuccess", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "chunkFailure", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "chunkUploading", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "canceling", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "pausing", void 0);

    __decorate([(0, _ej2Base.Event)()], Uploader.prototype, "resuming", void 0);

    Uploader = __decorate([_ej2Base.NotifyPropertyChanges], Uploader);
    return Uploader;
  }(_ej2Base.Component);

  _exports.Uploader = Uploader;
});;
define('@syncfusion/ej2-lists/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-lists/src/common/index',["exports", "./list-base"], function (_exports, _listBase) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_listBase).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _listBase[key];
  });
});;
define('@syncfusion/ej2-lists/src/common/list-base',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data"], function (_exports, _ej2Base, _ej2Data) {
  "use strict";

  _exports.__esModule = true;
  _exports.getFieldValues = getFieldValues;
  _exports.ListBase = _exports.cssClass = void 0;
  var cssClass = {
    li: 'e-list-item',
    ul: 'e-list-parent e-ul',
    group: 'e-list-group-item',
    icon: 'e-list-icon',
    text: 'e-list-text',
    check: 'e-list-check',
    checked: 'e-checked',
    selected: 'e-selected',
    expanded: 'e-expanded',
    textContent: 'e-text-content',
    hasChild: 'e-has-child',
    level: 'e-level',
    url: 'e-list-url',
    collapsible: 'e-icon-collapsible',
    disabled: 'e-disabled',
    image: 'e-list-img',
    iconWrapper: 'e-icon-wrapper',
    anchorWrap: 'e-anchor-wrap'
  };
  /**
   * Base List Generator
   */

  _exports.cssClass = cssClass;
  var ListBase;
  _exports.ListBase = ListBase;

  (function (ListBase) {
    /**
     * Default mapped fields.
     */
    ListBase.defaultMappedFields = {
      id: 'id',
      text: 'text',
      url: 'url',
      value: 'value',
      isChecked: 'isChecked',
      enabled: 'enabled',
      expanded: 'expanded',
      selected: 'selected',
      iconCss: 'iconCss',
      child: 'child',
      isVisible: 'isVisible',
      hasChildren: 'hasChildren',
      tooltip: 'tooltip',
      htmlAttributes: 'htmlAttributes',
      urlAttributes: 'urlAttributes',
      imageAttributes: 'imageAttributes',
      imageUrl: 'imageUrl',
      groupBy: null
    };
    var defaultAriaAttributes = {
      level: 1,
      listRole: 'presentation',
      itemRole: 'presentation',
      groupItemRole: 'group',
      itemText: 'list-item',
      wrapperRole: 'presentation'
    };
    var defaultListBaseOptions = {
      showCheckBox: false,
      showIcon: false,
      enableHtmlSanitizer: false,
      expandCollapse: false,
      fields: ListBase.defaultMappedFields,
      ariaAttributes: defaultAriaAttributes,
      listClass: '',
      itemClass: '',
      processSubChild: false,
      sortOrder: 'None',
      template: null,
      groupTemplate: null,
      headerTemplate: null,
      expandIconClass: 'e-icon-collapsible',
      moduleName: 'list',
      expandIconPosition: 'Right',
      itemNavigable: false
    };
    /**
     * Function helps to created and return the UL Li element based on your data.
     * @param  {{[key:string]:Object}[]|string[]} dataSource - Specifies an array of JSON or String data.
     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
     */

    function createList(createElement, dataSource, options, isSingleLevel) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var ariaAttributes = (0, _ej2Base.extend)({}, defaultAriaAttributes, curOpt.ariaAttributes);
      var type = typeofData(dataSource).typeof;

      if (type === 'string' || type === 'number') {
        return createListFromArray(createElement, dataSource, isSingleLevel, options);
      } else {
        return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel);
      }
    }

    ListBase.createList = createList;
    /**
     * Function helps to created an element list based on string array input .
     * @param  {string[]} dataSource - Specifies an array of string data
     */

    function createListFromArray(createElement, dataSource, isSingleLevel, options) {
      var subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options);
      return generateUL(createElement, subChild, null, options);
    }

    ListBase.createListFromArray = createListFromArray;
    /**
     * Function helps to created an element list based on string array input .
     * @param  {string[]} dataSource - Specifies an array of string data
     */

    function createListItemFromArray(createElement, dataSource, isSingleLevel, options) {
      var subChild = [];
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      _exports.cssClass = cssClass = getModuleClass(curOpt.moduleName);
      var id = generateId(); // generate id for drop-down-list option.

      for (var i = 0; i < dataSource.length; i++) {
        if ((0, _ej2Base.isNullOrUndefined)(dataSource[i])) {
          continue;
        }

        var li = void 0;

        if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: dataSource[i],
            text: dataSource[i],
            options: curOpt
          };
          curOpt.itemCreating(curData);
        }

        if (isSingleLevel) {
          li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);
        } else {
          li = generateLI(createElement, dataSource[i], undefined, null, null, options);
        }

        if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: dataSource[i],
            text: dataSource[i],
            item: li,
            options: curOpt
          };
          curOpt.itemCreated(curData);
        }

        subChild.push(li);
      }

      return subChild;
    }

    ListBase.createListItemFromArray = createListItemFromArray;
    /**
     * Function helps to created an element list based on array of JSON input .
     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.
     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
     */
    // tslint:disable-next-line:max-func-body-length

    function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      _exports.cssClass = cssClass = getModuleClass(curOpt.moduleName);
      var fields = (0, _ej2Base.extend)({}, ListBase.defaultMappedFields, curOpt.fields);
      var ariaAttributes = (0, _ej2Base.extend)({}, defaultAriaAttributes, curOpt.ariaAttributes);
      var id;
      var checkboxElement = [];

      if (level) {
        ariaAttributes.level = level;
      }

      var child = [];
      var li;

      if (dataSource && dataSource.length && !(0, _ej2Base.isNullOrUndefined)(typeofData(dataSource).item) && !typeofData(dataSource).item.hasOwnProperty(fields.id)) {
        id = generateId(); // generate id for drop-down-list option.
      }

      for (var i = 0; i < dataSource.length; i++) {
        var fieldData = getFieldValues(dataSource[i], fields);

        if ((0, _ej2Base.isNullOrUndefined)(dataSource[i])) {
          continue;
        }

        if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: dataSource[i],
            text: fieldData[fields.text],
            options: curOpt,
            fields: fields
          };
          curOpt.itemCreating(curData);
        }

        var curItem = dataSource[i];

        if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
          fieldData = getFieldValues(dataSource[i], fields);
        }

        if (fieldData.hasOwnProperty(fields.id) && !(0, _ej2Base.isNullOrUndefined)(fieldData[fields.id])) {
          id = fieldData[fields.id];
        }

        var innerEle = [];

        if (curOpt.showCheckBox) {
          if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
            checkboxElement.push(createElement('input', {
              className: cssClass.check,
              attrs: {
                type: 'checkbox'
              }
            }));
          } else {
            innerEle.push(createElement('input', {
              className: cssClass.check,
              attrs: {
                type: 'checkbox'
              }
            }));
          }
        }

        if (isSingleLevel === true) {
          if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !(0, _ej2Base.isNullOrUndefined)(fieldData[fields.iconCss])) {
            innerEle.push(createElement('span', {
              className: cssClass.icon + ' ' + fieldData[fields.iconCss]
            }));
          }

          li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, curItem.hasOwnProperty('isHeader') && curItem.isHeader ? true : false, id, i, options);

          if (curOpt.itemNavigable && checkboxElement.length) {
            (0, _ej2Base.prepend)(checkboxElement, li.firstElementChild);
          }
        } else {
          li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options);
          li.classList.add(cssClass.level + '-' + ariaAttributes.level);
          li.setAttribute('aria-level', ariaAttributes.level.toString());

          if (fieldData.hasOwnProperty(fields.tooltip)) {
            li.setAttribute('title', fieldData[fields.tooltip]);
          }

          if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
            setAttribute(li, fieldData[fields.htmlAttributes]);
          }

          if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {
            li.classList.add(cssClass.disabled);
          }

          if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {
            li.style.display = 'none';
          }

          if (fieldData.hasOwnProperty(fields.imageUrl) && !(0, _ej2Base.isNullOrUndefined)(fieldData[fields.imageUrl]) && !curOpt.template) {
            var attr = {
              src: fieldData[fields.imageUrl]
            };
            (0, _ej2Base.merge)(attr, fieldData[fields.imageAttributes]);
            (0, _ej2Base.prepend)([createElement('img', {
              className: cssClass.image,
              attrs: attr
            })], li.firstElementChild);
          }

          if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !(0, _ej2Base.isNullOrUndefined)(fieldData[fields.iconCss]) && !curOpt.template) {
            (0, _ej2Base.prepend)([createElement('div', {
              className: cssClass.icon + ' ' + fieldData[fields.iconCss]
            })], li.firstElementChild);
          }

          if (innerEle.length) {
            (0, _ej2Base.prepend)(innerEle, li.firstElementChild);
          }

          if (curOpt.itemNavigable && checkboxElement.length) {
            (0, _ej2Base.prepend)(checkboxElement, li.firstElementChild);
          }

          processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
        }

        if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: dataSource[i],
            text: fieldData[fields.text],
            item: li,
            options: curOpt,
            fields: fields
          };
          curOpt.itemCreated(curData);
        }

        checkboxElement = [];
        child.push(li);
      }

      return child;
    }

    ListBase.createListItemFromJson = createListItemFromJson;
    /**
     * Function helps to created an element list based on array of JSON input .
     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.
     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.
     */

    function createListFromJson(createElement, dataSource, options, level, isSingleLevel) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel);
      return generateUL(createElement, li, curOpt.listClass, options);
    }

    ListBase.createListFromJson = createListFromJson;
    /**
     * Return the next or previous visible element.
     * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.
     * @param  {Element} li - An element to find next or previous after this element.
     * @param  {boolean} isPrevious? - Specify when the need get previous element from array.
     */

    function getSiblingLI(elementArray, element, isPrevious) {
      _exports.cssClass = cssClass = getModuleClass(defaultListBaseOptions.moduleName);

      if (!elementArray || !elementArray.length) {
        return void 0;
      }

      var siblingLI;
      var liIndex;
      var liCollections = Array.prototype.slice.call(elementArray);

      if (element) {
        liIndex = indexOf(element, liCollections);
      } else {
        liIndex = isPrevious === true ? liCollections.length : -1;
      }

      siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];

      while (siblingLI && (!(0, _ej2Base.isVisible)(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
        liIndex = liIndex + (isPrevious === true ? -1 : 1);
        siblingLI = liCollections[liIndex];
      }

      return siblingLI;
    }

    ListBase.getSiblingLI = getSiblingLI;
    /**
     * Return the index of the li element
     * @param  {Element} item - An element to find next or previous after this element.
     * @param  {Element[]|NodeList} elementArray - An element array to find index of given li.
     */

    function indexOf(item, elementArray) {
      if (!elementArray || !item) {
        return void 0;
      } else {
        var liCollections = elementArray;
        liCollections = Array.prototype.slice.call(elementArray);
        return liCollections.indexOf(item);
      }
    }

    ListBase.indexOf = indexOf;
    /**
     * Returns the grouped data from given dataSource.
     * @param  {{[key:string]:Object}[]} dataSource - The JSON data which is necessary to process.
     * @param  {FieldsMapping} fields - Fields that are mapped from the data source.
     * @param  {SortOrder='None'} sortOrder- Specifies final result sort order.
     */

    function groupDataSource(dataSource, fields, sortOrder) {
      if (sortOrder === void 0) {
        sortOrder = 'None';
      }

      var curFields = (0, _ej2Base.extend)({}, ListBase.defaultMappedFields, fields);
      var cusQuery = new _ej2Data.Query().group(curFields.groupBy); // need to remove once sorting issues fixed in DataManager

      cusQuery = addSorting(sortOrder, 'key', cusQuery);
      var ds = getDataSource(dataSource, cusQuery);
      dataSource = [];

      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[j].items;
        var grpItem = {};
        var hdr = 'isHeader';
        grpItem[curFields.text] = ds[j].key;
        grpItem[hdr] = true;
        grpItem.id = 'group-list-item-' + (ds[j].key ? ds[j].key.toString().trim() : 'undefined');
        grpItem.items = itemObj;
        dataSource.push(grpItem);

        for (var k = 0; k < itemObj.length; k++) {
          dataSource.push(itemObj[k]);
        }
      }

      return dataSource;
    }

    ListBase.groupDataSource = groupDataSource;
    /**
     * Returns a sorted query object.
     * @param  {SortOrder} sortOrder - Specifies that sort order.
     * @param  {string} sortBy - Specifies sortBy fields.
     * @param  {Query=new Query()} query - Pass if any existing query.
     */

    function addSorting(sortOrder, sortBy, query) {
      if (query === void 0) {
        query = new _ej2Data.Query();
      }

      if (sortOrder === 'Ascending') {
        query.sortBy(sortBy, 'ascending', true);
      } else if (sortOrder === 'Descending') {
        query.sortBy(sortBy, 'descending', true);
      } else {
        for (var i = 0; i < query.queries.length; i++) {
          if (query.queries[i].fn === 'onSortBy') {
            query.queries.splice(i, 1);
          }
        }
      }

      return query;
    }

    ListBase.addSorting = addSorting;
    /**
     * Return an array of JSON Data that processed based on queries.
     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
     * @param  {Query} query - Specifies query that need to process.
     */

    function getDataSource(dataSource, query) {
      // tslint:disable-next-line
      return new _ej2Data.DataManager(dataSource).executeLocal(query);
    }

    ListBase.getDataSource = getDataSource;
    /**
     * Created JSON data based the UL and LI element
     * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON
     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
     */

    function createJsonFromElement(element, options) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var fields = (0, _ej2Base.extend)({}, ListBase.defaultMappedFields, curOpt.fields);
      var curEle = element.cloneNode(true);
      var jsonAr = [];
      curEle.classList.add('json-parent');
      var childs = curEle.querySelectorAll('.json-parent>li');
      curEle.classList.remove('json-parent');

      for (var i = 0; i < childs.length; i++) {
        var li = childs[i];
        var anchor = li.querySelector('a');
        var ul = li.querySelector('ul');
        var json = {};
        var childNodes = anchor ? anchor.childNodes : li.childNodes;
        var keys = Object.keys(childNodes);

        for (var i_1 = 0; i_1 < childNodes.length; i_1++) {
          if (!childNodes[Number(keys[i_1])].hasChildNodes()) {
            json[fields.text] = childNodes[Number(keys[i_1])].textContent;
          }
        }

        var attributes_1 = getAllAttributes(li);

        if (attributes_1.id) {
          json[fields.id] = attributes_1.id;
          delete attributes_1.id;
        } else {
          json[fields.id] = generateId();
        }

        if (Object.keys(attributes_1).length) {
          json[fields.htmlAttributes] = attributes_1;
        }

        if (anchor) {
          attributes_1 = getAllAttributes(anchor);

          if (Object.keys(attributes_1).length) {
            json[fields.urlAttributes] = attributes_1;
          }
        }

        if (ul) {
          json[fields.child] = createJsonFromElement(ul, options);
        }

        jsonAr.push(json);
      }

      return jsonAr;
    }

    ListBase.createJsonFromElement = createJsonFromElement;

    function typeofData(data) {
      var match = {
        typeof: null,
        item: null
      };

      for (var i = 0; i < data.length; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(data[i])) {
          return match = {
            typeof: typeof data[i],
            item: data[i]
          };
        }
      }

      return match;
    }

    function setAttribute(element, elementAttributes) {
      var attr = {};
      (0, _ej2Base.merge)(attr, elementAttributes);

      if (attr.class) {
        (0, _ej2Base.addClass)([element], attr.class.split(' '));
        delete attr.class;
      }

      (0, _ej2Base.attributes)(element, attr);
    }

    function getAllAttributes(element) {
      var attributes = {};
      var attr = element.attributes;

      for (var index = 0; index < attr.length; index++) {
        attributes[attr[index].nodeName] = attr[index].nodeValue;
      }

      return attributes;
    }
    /**
     * Created UL element from content template.
     * @param  {string} template - that need to convert and generate li element.
     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.
     */


    function renderContentTemplate(createElement, template, dataSource, fields, options) {
      _exports.cssClass = cssClass = getModuleClass(defaultListBaseOptions.moduleName);
      var ulElement = createElement('ul', {
        className: cssClass.ul,
        attrs: {
          role: 'presentation'
        }
      });
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var curFields = (0, _ej2Base.extend)({}, ListBase.defaultMappedFields, fields);
      var compiledString = (0, _ej2Base.compile)(template);
      var liCollection = [];
      var id = generateId(); // generate id for drop-down-list option.

      for (var i = 0; i < dataSource.length; i++) {
        var fieldData = getFieldValues(dataSource[i], curFields);
        var curItem = dataSource[i];
        var isHeader = curItem.isHeader;
        var value = fieldData[curFields.value];

        if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: curItem,
            text: value,
            options: curOpt,
            fields: curFields
          };
          curOpt.itemCreating(curData);
        }

        if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {
          fieldData = getFieldValues(dataSource[i], curFields);
          value = fieldData[curFields.value];
        }

        var li = createElement('li', {
          id: id + '-' + i,
          className: isHeader ? cssClass.group : cssClass.li,
          attrs: {
            role: 'presentation'
          }
        });

        if (isHeader) {
          li.innerText = fieldData[curFields.text];
        } else {
          var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;
          (0, _ej2Base.append)(compiledString(curItem, null, null, currentID, !!curOpt.isStringTemplate), li);
          li.setAttribute('data-value', value);
          li.setAttribute('role', 'option');
        }

        if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {
          var curData = {
            dataSource: dataSource,
            curData: curItem,
            text: value,
            item: li,
            options: curOpt,
            fields: curFields
          };
          curOpt.itemCreated(curData);
        }

        liCollection.push(li);
      }

      (0, _ej2Base.append)(liCollection, ulElement);
      return ulElement;
    }

    ListBase.renderContentTemplate = renderContentTemplate;
    /**
     * Created header items from group template.
     * @param  {string} template - that need to convert and generate li element.
     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.
     * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.
     * @param  {Element[]} headerItems? - Specifies listbase header items.
     */

    function renderGroupTemplate(groupTemplate, groupDataSource, fields, headerItems, options) {
      var compiledString = (0, _ej2Base.compile)(groupTemplate);
      var curFields = (0, _ej2Base.extend)({}, ListBase.defaultMappedFields, fields);
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var category = curFields.groupBy;

      for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
        var header = headerItems_1[_i];
        var headerData = {};
        headerData[category] = header.textContent;
        header.innerHTML = '';
        (0, _ej2Base.append)(compiledString(headerData, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
      }

      return headerItems;
    }

    ListBase.renderGroupTemplate = renderGroupTemplate;

    function generateId() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }

    ListBase.generateId = generateId;

    function processSubChild(createElement, fieldData, fields, ds, options, element, level) {
      // Get SubList
      var subDS = fieldData[fields.child] || [];
      var hasChildren = fieldData[fields.hasChildren]; //Create Sub child

      if (subDS.length) {
        hasChildren = true;
        element.classList.add(cssClass.hasChild);

        if (options.processSubChild) {
          var subLi = createListFromJson(createElement, subDS, options, ++level);
          element.appendChild(subLi);
        }
      } // Create expand and collapse node


      if (!!options.expandCollapse && hasChildren && !options.template) {
        element.firstElementChild.classList.add(cssClass.iconWrapper);
        var expandElement = options.expandIconPosition === 'Left' ? _ej2Base.prepend : _ej2Base.append;
        expandElement([createElement('div', {
          className: 'e-icons ' + options.expandIconClass
        })], element.querySelector('.' + cssClass.textContent));
      }
    }

    function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var ariaAttributes = (0, _ej2Base.extend)({}, defaultAriaAttributes, curOpt.ariaAttributes);
      var text = item;
      var value = item;
      var dataSource;

      if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {
        dataSource = item;
        text = typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number' ? fieldData[fields.text] : fieldData[fields.text] || '';
        value = fieldData[fields.value];
      }

      var elementID;

      if (!(0, _ej2Base.isNullOrUndefined)(dataSource) && !(0, _ej2Base.isNullOrUndefined)(fieldData[fields.id]) && fieldData[fields.id] !== '') {
        elementID = id;
      } else {
        elementID = id + '-' + index;
      }

      var li = createElement('li', {
        className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + ((0, _ej2Base.isNullOrUndefined)(className) ? '' : className),
        id: elementID,
        attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
          role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
        } : {}
      });

      if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {
        li.classList.add(cssClass.disabled);
      }

      if (grpLI) {
        li.innerText = text;
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(value)) {
          li.setAttribute('data-value', value);
        }

        li.setAttribute('role', 'option');

        if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
          setAttribute(li, fieldData[fields.htmlAttributes]);
        }

        if (innerElements.length && !curOpt.itemNavigable) {
          (0, _ej2Base.append)(innerElements, li);
        }

        if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
          li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));
        } else {
          if (innerElements.length && curOpt.itemNavigable) {
            (0, _ej2Base.append)(innerElements, li);
          }

          li.appendChild(document.createTextNode(text));
        }
      }

      return li;
    }

    function getModuleClass(moduleName) {
      var moduleClass;
      return moduleClass = {
        li: "e-" + moduleName + "-item",
        ul: "e-" + moduleName + "-parent e-ul",
        group: "e-" + moduleName + "-group-item",
        icon: "e-" + moduleName + "-icon",
        text: "e-" + moduleName + "-text",
        check: "e-" + moduleName + "-check",
        checked: 'e-checked',
        selected: 'e-selected',
        expanded: 'e-expanded',
        textContent: 'e-text-content',
        hasChild: 'e-has-child',
        level: 'e-level',
        url: "e-" + moduleName + "-url",
        collapsible: 'e-icon-collapsible',
        disabled: 'e-disabled',
        image: "e-" + moduleName + "-img",
        iconWrapper: 'e-icon-wrapper',
        anchorWrap: 'e-anchor-wrap'
      };
    }

    function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {
      var fieldData = getFieldValues(dataSource, fields);
      var attr = {
        href: fieldData[fields.url]
      };

      if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {
        (0, _ej2Base.merge)(attr, fieldData[fields.urlAttributes]);
        attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
      }

      var anchorTag;

      if (!isFullNavigation) {
        anchorTag = createElement('a', {
          className: cssClass.text + ' ' + cssClass.url,
          innerHTML: text
        });
      } else {
        anchorTag = createElement('a', {
          className: cssClass.text + ' ' + cssClass.url
        });
        var anchorWrapper = createElement('div', {
          className: cssClass.anchorWrap
        });

        if (innerElements && innerElements.length) {
          (0, _ej2Base.append)(innerElements, anchorWrapper);
        }

        anchorWrapper.appendChild(document.createTextNode(text));
        (0, _ej2Base.append)([anchorWrapper], anchorTag);
      }

      setAttribute(anchorTag, attr);
      return anchorTag;
    }
    /* tslint:disable:align */


    function generateLI(createElement, item, fieldData, fields, className, options) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var ariaAttributes = (0, _ej2Base.extend)({}, defaultAriaAttributes, curOpt.ariaAttributes);
      var text = item;
      var uID;
      var grpLI;
      var dataSource;

      if (typeof item !== 'string' && typeof item !== 'number') {
        dataSource = item;
        text = fieldData[fields.text] || '';
        uID = fieldData[fields.id];
        grpLI = item.hasOwnProperty('isHeader') && item.isHeader ? true : false;
      }

      if (options && options.enableHtmlSanitizer) {
        text = _ej2Base.SanitizeHtmlHelper.sanitize(text);
      }

      var li = createElement('li', {
        className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + ((0, _ej2Base.isNullOrUndefined)(className) ? '' : className),
        attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {
          role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
        } : {}
      });
      !(0, _ej2Base.isNullOrUndefined)(uID) ? li.setAttribute('data-uid', uID) : li.setAttribute('data-uid', generateId());
      var blazId = 'BlazId';

      if (options && !!options.removeBlazorID && typeof item === 'object' && item.hasOwnProperty(blazId)) {
        delete item[blazId];
      }

      if (grpLI && options && options.groupTemplate) {
        var compiledString = (0, _ej2Base.compile)(options.groupTemplate);
        (0, _ej2Base.append)(compiledString(item, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
      } else if (!grpLI && options && options.template) {
        var compiledString = (0, _ej2Base.compile)(options.template);
        (0, _ej2Base.append)(compiledString(item, null, null, curOpt.templateID, !!curOpt.isStringTemplate), li);
      } else {
        var innerDiv = createElement('div', {
          className: cssClass.textContent,
          attrs: ariaAttributes.wrapperRole !== '' ? {
            role: ariaAttributes.wrapperRole
          } : {}
        });

        if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
          innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));
        } else {
          innerDiv.appendChild(createElement('span', {
            className: cssClass.text,
            innerHTML: text,
            attrs: ariaAttributes.itemText !== '' ? {
              role: ariaAttributes.itemText
            } : {}
          }));
        }

        li.appendChild(innerDiv);
      }

      return li;
    }
    /**
     * Returns UL element based on the given LI element.
     * @param  {HTMLElement[]} liElement - Specifies array of LI element.
     * @param  {string} className? - Specifies class name that need to be added in UL element.
     * @param  {ListBaseOptions} options? - Specifies ListBase options.
     */


    function generateUL(createElement, liElement, className, options) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      var ariaAttributes = (0, _ej2Base.extend)({}, defaultAriaAttributes, curOpt.ariaAttributes);
      _exports.cssClass = cssClass = getModuleClass(curOpt.moduleName);
      var ulElement = createElement('ul', {
        className: cssClass.ul + ' ' + ((0, _ej2Base.isNullOrUndefined)(className) ? '' : className),
        attrs: ariaAttributes.listRole !== '' ? {
          role: ariaAttributes.listRole
        } : {}
      });
      (0, _ej2Base.append)(liElement, ulElement);
      return ulElement;
    }

    ListBase.generateUL = generateUL;
    /**
     * Returns LI element with additional DIV tag based on the given LI element.
     * @param  {liElement} liElement - Specifies LI element.
     * @param  {string} className? - Specifies class name that need to be added in created DIV element.
     * @param  {ListBaseOptions} options? - Specifies ListBase options.
     */

    function generateIcon(createElement, liElement, className, options) {
      var curOpt = (0, _ej2Base.extend)({}, defaultListBaseOptions, options);
      _exports.cssClass = cssClass = getModuleClass(curOpt.moduleName);
      var expandElement = curOpt.expandIconPosition === 'Left' ? _ej2Base.prepend : _ej2Base.append;
      expandElement([createElement('div', {
        className: 'e-icons ' + curOpt.expandIconClass + ' ' + ((0, _ej2Base.isNullOrUndefined)(className) ? '' : className)
      })], liElement.querySelector('.' + cssClass.textContent));
      return liElement;
    }

    ListBase.generateIcon = generateIcon;
  })(ListBase || (_exports.ListBase = ListBase = {}));
  /**
   * Used to get dataSource item from complex data using fields.
   * @param {{[key:string]:Object}|string[]|string} dataSource - Specifies an  JSON or String data.
   * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.
   */


  function getFieldValues(dataItem, fields) {
    var fieldData = {};

    if ((0, _ej2Base.isNullOrUndefined)(dataItem) || typeof dataItem === 'string' || typeof dataItem === 'number' || !(0, _ej2Base.isNullOrUndefined)(dataItem.isHeader)) {
      return dataItem;
    } else {
      for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
        var field = _a[_i];
        var dataField = fields[field];
        var value = !(0, _ej2Base.isNullOrUndefined)(dataField) && typeof dataField === 'string' ? (0, _ej2Base.getValue)(dataField, dataItem) : undefined;

        if (!(0, _ej2Base.isNullOrUndefined)(value)) {
          fieldData[dataField] = value;
        }
      }
    }

    return fieldData;
  }
});;
define('@syncfusion/ej2-lists/src/index',["exports", "./list-view/index", "./common/index", "./sortable"], function (_exports, _index, _index2, _sortable) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_sortable).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _sortable[key];
  });
});;
define('@syncfusion/ej2-lists/src/list-view/index',["exports", "./list-view", "./virtualization"], function (_exports, _listView, _virtualization) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_listView).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _listView[key];
  });
  Object.keys(_virtualization).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _virtualization[key];
  });
});;
define('@syncfusion/ej2-lists/src/list-view/list-view',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-buttons", "../common/list-base"], function (_exports, _ej2Base, _ej2Data, _ej2Buttons, _listBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.ListView = _exports.FieldSettings = _exports.classNames = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];
  var effectsConfig = {
    'None': [],
    'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],
    'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],
    'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],
    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
  };
  var effectsRTLConfig = {
    'None': [],
    'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],
    'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],
    'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],
    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
  }; // don't use space in classnames.

  var classNames = {
    root: 'e-listview',
    hover: 'e-hover',
    selected: 'e-active',
    focused: 'e-focused',
    parentItem: 'e-list-parent',
    listItem: 'e-list-item',
    listIcon: 'e-list-icon',
    textContent: 'e-text-content',
    listItemText: 'e-list-text',
    groupListItem: 'e-list-group-item',
    hasChild: 'e-has-child',
    view: 'e-view',
    header: 'e-list-header',
    headerText: 'e-headertext',
    headerTemplateText: 'e-headertemplate-text',
    text: 'e-text',
    disable: 'e-disabled',
    content: 'e-content',
    icon: 'e-icons',
    backIcon: 'e-icon-back',
    checkboxWrapper: 'e-checkbox-wrapper',
    checkbox: 'e-checkbox',
    checked: 'e-check',
    checklist: 'e-checklist',
    checkboxIcon: 'e-frame',
    checkboxRight: 'e-checkbox-right',
    checkboxLeft: 'e-checkbox-left',
    listviewCheckbox: 'e-listview-checkbox',
    itemCheckList: 'e-checklist'
  };
  _exports.classNames = classNames;
  var LISTVIEW_TEMPLATE_PROPERTY = 'Template';
  var LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';
  var LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';

  var FieldSettings =
  /** @class */
  function (_super) {
    __extends(FieldSettings, _super);

    function FieldSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('id')], FieldSettings.prototype, "id", void 0);

    __decorate([(0, _ej2Base.Property)('text')], FieldSettings.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('isChecked')], FieldSettings.prototype, "isChecked", void 0);

    __decorate([(0, _ej2Base.Property)('isVisible')], FieldSettings.prototype, "isVisible", void 0);

    __decorate([(0, _ej2Base.Property)('enabled')], FieldSettings.prototype, "enabled", void 0);

    __decorate([(0, _ej2Base.Property)('iconCss')], FieldSettings.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('child')], FieldSettings.prototype, "child", void 0);

    __decorate([(0, _ej2Base.Property)('tooltip')], FieldSettings.prototype, "tooltip", void 0);

    __decorate([(0, _ej2Base.Property)('groupBy')], FieldSettings.prototype, "groupBy", void 0);

    __decorate([(0, _ej2Base.Property)('text')], FieldSettings.prototype, "sortBy", void 0);

    __decorate([(0, _ej2Base.Property)('htmlAttributes')], FieldSettings.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)('tableName')], FieldSettings.prototype, "tableName", void 0);

    return FieldSettings;
  }(_ej2Base.ChildProperty);

  _exports.FieldSettings = FieldSettings;

  /**
   * Represents the EJ2 ListView control.
   * ```html
   * <div id="listview">
   * <ul>
   * <li>Favorite</li>
   * <li>Documents</li>
   * <li>Downloads</li>
   * </ul>
   * </div>
   * ```
   * ```typescript
   *   var lvObj = new ListView({});
   *   lvObj.appendTo("#listview");
   * ```
   */
  var ListView =
  /** @class */
  function (_super) {
    __extends(ListView, _super);
    /**
     * Constructor for creating the widget
     */


    function ListView(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * @private
     */


    ListView.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'htmlAttributes':
            this.setHTMLAttribute();
            break;

          case 'cssClass':
            this.setCSSClass(oldProp.cssClass);
            break;

          case 'enable':
            this.setEnable();
            break;

          case 'width':
          case 'height':
            this.setSize();
            break;

          case 'enableRtl':
            this.setEnableRTL();
            break;

          case 'fields':
            this.listBaseOption.fields = this.fields.properties;

            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }

            break;

          case 'headerTitle':
            if (!this.curDSLevel.length) {
              this.header(this.headerTitle, false);
            }

            break;

          case 'showHeader':
            this.header(this.headerTitle, false);
            break;

          case 'enableVirtualization':
            if (!(0, _ej2Base.isNullOrUndefined)(this.contentContainer)) {
              (0, _ej2Base.detach)(this.contentContainer);
            }

            this.refresh();
            break;

          case 'showCheckBox':
          case 'checkBoxPosition':
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.setCheckbox();
            }

            break;

          case 'dataSource':
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }

            break;

          case 'sortOrder':
          case 'showIcon':
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.listBaseOption.showIcon = this.showIcon;
              this.curViewDS = this.getSubDS();
              this.resetCurrentList();
            }

            break;

          default:
            break;
        }
      }
    }; // Model Changes


    ListView.prototype.setHTMLAttribute = function () {
      if (Object.keys(this.htmlAttributes).length) {
        (0, _ej2Base.attributes)(this.element, this.htmlAttributes);
      }
    };

    ListView.prototype.setCSSClass = function (oldCSSClass) {
      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.element], this.cssClass.split(' ').filter(function (css) {
          return css;
        }));
      }

      if (oldCSSClass) {
        (0, _ej2Base.removeClass)([this.element], oldCSSClass.split(' ').filter(function (css) {
          return css;
        }));
      }
    };

    ListView.prototype.setSize = function () {
      this.element.style.height = (0, _ej2Base.formatUnit)(this.height);
      this.element.style.width = (0, _ej2Base.formatUnit)(this.width);
      this.isWindow = this.element.clientHeight ? false : true;
    };

    ListView.prototype.setEnable = function () {
      this.enableElement(this.element, this.enable);
    };

    ListView.prototype.setEnableRTL = function () {
      if (this.enableRtl) {
        this.element.classList.add('e-rtl');
      } else {
        this.element.classList.remove('e-rtl');
      }
    };

    ListView.prototype.enableElement = function (element, isEnabled) {
      if (isEnabled) {
        element.classList.remove(classNames.disable);
      } else {
        element.classList.add(classNames.disable);
      }
    }; // Support Component Functions


    ListView.prototype.header = function (text, showBack) {
      if (this.headerEle === undefined && this.showHeader) {
        if (this.enableHtmlSanitizer) {
          this.setProperties({
            headerTitle: _ej2Base.SanitizeHtmlHelper.sanitize(this.headerTitle)
          }, true);
        }

        this.headerEle = this.createElement('div', {
          className: classNames.header
        });
        var innerHeaderEle = this.createElement('span', {
          className: classNames.headerText,
          innerHTML: this.headerTitle
        });
        var textEle = this.createElement('div', {
          className: classNames.text,
          innerHTML: innerHeaderEle.outerHTML
        });
        var hedBackButton = this.createElement('div', {
          className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',
          attrs: {
            style: 'display:none;'
          }
        });
        this.headerEle.appendChild(hedBackButton);
        this.headerEle.appendChild(textEle);

        if (this.headerTemplate) {
          var compiledString = (0, _ej2Base.compile)(this.headerTemplate);
          var headerTemplateEle = this.createElement('div', {
            className: classNames.headerTemplateText
          });
          (0, _ej2Base.append)(compiledString({}, null, null, this.LISTVIEW_HEADERTEMPLATE_ID), headerTemplateEle);
          (0, _ej2Base.append)([headerTemplateEle], this.headerEle);
          this.updateBlazorTemplates(false, true, true);
        }

        if (this.headerTemplate && this.headerTitle) {
          textEle.classList.add('header');
        }

        this.element.classList.add('e-has-header');
        (0, _ej2Base.prepend)([this.headerEle], this.element);
      } else if (this.headerEle) {
        if (this.showHeader) {
          this.headerEle.style.display = '';
          var textEle = this.headerEle.querySelector('.' + classNames.headerText);
          var hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);

          if (this.enableHtmlSanitizer) {
            text = _ej2Base.SanitizeHtmlHelper.sanitize(text);
          }

          textEle.innerHTML = text;

          if (this.headerTemplate && showBack) {
            textEle.parentElement.classList.remove('header');
            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');
          }

          if (this.headerTemplate && !showBack) {
            textEle.parentElement.classList.add('header');
            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');
            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');
          }

          if (showBack === true) {
            hedBackButton.style.display = '';
          } else {
            hedBackButton.style.display = 'none';
          }
        } else {
          this.headerEle.style.display = 'none';
        }
      }
    }; // Animation Related Functions


    ListView.prototype.switchView = function (fromView, toView, reverse) {
      var _this = this;

      if (fromView && toView) {
        var fPos_1 = fromView.style.position;
        var overflow_1 = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';
        fromView.style.position = 'absolute';
        fromView.classList.add('e-view');
        var anim = void 0;
        var duration = this.animation.duration;

        if (this.animation.effect) {
          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
        } else {
          var slideLeft = 'SlideLeft';
          anim = effectsConfig[slideLeft];
          reverse = this.enableRtl;
          duration = 0;
        }

        this.element.style.overflow = 'hidden';
        this.aniObj.animate(fromView, {
          name: reverse === true ? anim[0] : anim[1],
          duration: duration,
          timingFunction: this.animation.easing,
          end: function (model) {
            fromView.style.display = 'none';
            _this.element.style.overflow = overflow_1;
            fromView.style.position = fPos_1;
            fromView.classList.remove('e-view');
          }
        });
        toView.style.display = '';
        this.aniObj.animate(toView, {
          name: reverse === true ? anim[2] : anim[3],
          duration: duration,
          timingFunction: this.animation.easing,
          end: function () {
            _this.trigger('actionComplete');
          }
        });
        this.curUL = toView;
      }
    };

    ListView.prototype.preRender = function () {
      this.listBaseOption = {
        template: this.template,
        headerTemplate: this.headerTemplate,
        groupTemplate: this.groupTemplate,
        expandCollapse: true,
        listClass: '',
        ariaAttributes: {
          itemRole: 'option',
          listRole: 'presentation',
          itemText: '',
          groupItemRole: 'group',
          wrapperRole: 'presentation'
        },
        fields: this.fields.properties,
        sortOrder: this.sortOrder,
        showIcon: this.showIcon,
        itemCreated: this.renderCheckbox.bind(this),
        templateID: "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,
        groupTemplateID: "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        removeBlazorID: true
      };
      this.initialization();
    };

    ListView.prototype.initialization = function () {
      this.curDSLevel = [];
      this.animateOptions = {};
      this.curViewDS = [];
      this.currentLiElements = [];
      this.isNestedList = false;
      this.selectedData = [];
      this.selectedId = [];
      this.LISTVIEW_TEMPLATE_ID = "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;
      this.LISTVIEW_GROUPTEMPLATE_ID = "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;
      this.LISTVIEW_HEADERTEMPLATE_ID = "" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;
      this.aniObj = new _ej2Base.Animation(this.animateOptions);
      this.removeElement(this.curUL);
      this.removeElement(this.ulElement);
      this.removeElement(this.headerEle);
      this.removeElement(this.contentContainer);
      this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;
    };

    ListView.prototype.renderCheckbox = function (args) {
      if (args.item.classList.contains(classNames.hasChild)) {
        this.isNestedList = true;
      }

      if (this.showCheckBox && this.isValidLI(args.item)) {
        var checkboxElement = void 0;
        var fieldData = void 0;
        checkboxElement = (0, _ej2Buttons.createCheckBox)(this.createElement, false, {
          checked: false,
          enableRtl: this.enableRtl,
          cssClass: classNames.listviewCheckbox
        });
        checkboxElement.setAttribute('role', 'checkbox');
        var frameElement_1 = checkboxElement.querySelector('.' + classNames.checkboxIcon);
        args.item.classList.add(classNames.itemCheckList);
        args.item.firstElementChild.classList.add(classNames.checkbox);

        if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {
          fieldData = (0, _listBase.getFieldValues)(args.curData, this.listBaseOption.fields);

          if (fieldData[this.listBaseOption.fields.isChecked]) {
            this.checkInternally(args, checkboxElement);
          }
        } else if ((typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1) {
          this.checkInternally(args, checkboxElement);
        }

        checkboxElement.setAttribute('aria-checked', frameElement_1.classList.contains(classNames.checked) ? 'true' : 'false');

        if (this.checkBoxPosition === 'Left') {
          checkboxElement.classList.add(classNames.checkboxLeft);
          args.item.firstElementChild.classList.add(classNames.checkboxLeft);
          args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
        } else {
          checkboxElement.classList.add(classNames.checkboxRight);
          args.item.firstElementChild.classList.add(classNames.checkboxRight);
          args.item.firstElementChild.appendChild(checkboxElement);
        }

        this.currentLiElements.push(args.item);
      }
    };

    ListView.prototype.checkInternally = function (args, checkboxElement) {
      args.item.classList.add(classNames.selected);
      args.item.setAttribute('aria-selected', 'true');
      checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);
      checkboxElement.setAttribute('aria-checked', 'true');
    };
    /**
     * It is used to check the checkbox of an item.
     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
     */


    ListView.prototype.checkItem = function (item) {
      this.toggleCheckBase(item, true);
    };

    ListView.prototype.toggleCheckBase = function (item, checked) {
      if (this.showCheckBox) {
        var liElement = item;

        if (item instanceof Object && item.constructor !== HTMLLIElement) {
          liElement = this.getLiFromObjOrElement(item);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(liElement)) {
          var checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);
          checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);
          liElement.setAttribute('aria-selected', checked ? 'true' : 'false');
          checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);
          checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');
        }

        this.setSelectedItemData(liElement);
      }
    };
    /**
     * It is used to uncheck the checkbox of an item.
     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.
     */


    ListView.prototype.uncheckItem = function (item) {
      this.toggleCheckBase(item, false);
    };
    /**
     * It is used to check all the items in ListView.
     */


    ListView.prototype.checkAllItems = function () {
      this.toggleAllCheckBase(true);
    };
    /**
     * It is used to un-check all the items in ListView.
     */


    ListView.prototype.uncheckAllItems = function () {
      this.toggleAllCheckBase(false);
    };

    ListView.prototype.toggleAllCheckBase = function (checked) {
      if (this.showCheckBox) {
        for (var i = 0; i < this.liCollection.length; i++) {
          var checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);

          if (checkIcon) {
            if (checked) {
              if (!checkIcon.classList.contains(classNames.checked)) {
                this.checkItem(this.liCollection[i]);
              }
            } else {
              if (checkIcon.classList.contains(classNames.checked)) {
                this.uncheckItem(this.liCollection[i]);
              }
            }
          }
        }

        if (this.enableVirtualization) {
          this.virtualizationModule.checkedItem(checked);
        }
      }
    };

    ListView.prototype.setCheckbox = function () {
      if (this.showCheckBox) {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
        var args = {
          item: undefined,
          curData: undefined,
          dataSource: undefined,
          fields: undefined,
          options: undefined,
          text: ''
        };

        for (var i = 0; i < liCollection.length; i++) {
          var element = liCollection[i];
          args.item = element;
          args.curData = this.getItemData(element);

          if (element.querySelector('.' + classNames.checkboxWrapper)) {
            this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
          }

          this.renderCheckbox(args);

          if (args.item.classList.contains(classNames.selected)) {
            this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
          }
        }
      } else {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));

        for (var i = 0; i < liCollection.length; i++) {
          var element = liCollection[i];
          element.classList.remove(classNames.selected);
          element.firstElementChild.classList.remove(classNames.checkbox);
          this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));
        }

        if (this.selectedItems) {
          this.selectedItems.item.classList.add(classNames.selected);
        }
      }
    };
    /**
     * It is used to refresh the UI list item height
     */


    ListView.prototype.refreshItemHeight = function () {
      this.virtualizationModule.refreshItemHeight();
    };

    ListView.prototype.clickHandler = function (e) {
      var target = e.target;
      var classList = target.classList;

      if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }

        this.back();
      } else {
        var li = (0, _ej2Base.closest)(target.parentNode, '.' + classNames.listItem);

        if (li === null) {
          li = target;
        }

        this.removeFocus();

        if (this.enable && this.showCheckBox && this.isValidLI(li)) {
          if (e.target.classList.contains(classNames.checkboxIcon)) {
            li.classList.add(classNames.focused);

            if ((0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + classNames.checked))) {
              var args = {
                curData: undefined,
                dataSource: undefined,
                fields: undefined,
                options: undefined,
                text: undefined,
                item: li
              };
              this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
            } else {
              this.uncheckItem(li);
              li.classList.add(classNames.focused);
            }

            if (this.enableVirtualization) {
              this.virtualizationModule.setCheckboxLI(li, e);
            }

            if (e) {
              var eventArgs = this.selectEventData(li, e);
              var checkIcon = li.querySelector('.' + classNames.checkboxIcon);
              (0, _ej2Base.merge)(eventArgs, {
                isChecked: checkIcon.classList.contains(classNames.checked)
              });
              this.trigger('select', eventArgs);
            }
          } else if (li.classList.contains(classNames.hasChild)) {
            this.removeHover();
            this.removeSelect();
            this.removeSelect(li);
            this.setSelectLI(li, e);
            li.classList.remove(classNames.selected);
          } else {
            this.setCheckboxLI(li, e);
          }
        } else {
          this.setSelectLI(li, e);
        }
      }
    };

    ListView.prototype.removeElement = function (element) {
      return element && element.parentNode && element.parentNode.removeChild(element);
    };

    ListView.prototype.hoverHandler = function (e) {
      var curLi = (0, _ej2Base.closest)(e.target.parentNode, '.' + classNames.listItem);
      this.setHoverLI(curLi);
    };

    ListView.prototype.leaveHandler = function (e) {
      this.removeHover();
    };

    ;

    ListView.prototype.homeKeyHandler = function (e, end) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        if (this.selectedItems) {
          this.selectedItems.item.setAttribute('aria-selected', 'false');
        }

        var li = this.curUL.querySelectorAll('.' + classNames.listItem);
        var focusedElement = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);

        if (focusedElement) {
          focusedElement.classList.remove(classNames.focused);

          if (!this.showCheckBox) {
            focusedElement.classList.remove(classNames.selected);
          }
        }

        var index = !end ? 0 : li.length - 1;

        if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {
          li[index].classList.add(classNames.focused);
        } else {
          this.setSelectLI(li[index], e);
        }

        if (li[index]) {
          this.element.setAttribute('aria-activedescendant', li[index].id.toString());
        } else {
          this.element.removeAttribute('aria-activedescendant');
        }
      }
    };

    ListView.prototype.onArrowKeyDown = function (e, prev) {
      var siblingLI;
      var li;
      var hasChild = !(0, _ej2Base.isNullOrUndefined)(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;

      if (hasChild || this.showCheckBox) {
        li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);
        siblingLI = _listBase.ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);

        if (!(0, _ej2Base.isNullOrUndefined)(siblingLI)) {
          if (li) {
            li.classList.remove(classNames.focused);

            if (!this.showCheckBox) {
              li.classList.remove(classNames.selected);
            }
          }

          if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {
            siblingLI.classList.add(classNames.focused);
          } else {
            this.setSelectLI(siblingLI, e);
          }
        }
      } else {
        li = this.curUL.querySelector('.' + classNames.selected);
        siblingLI = _listBase.ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);
        this.setSelectLI(siblingLI, e);
      }

      if (siblingLI) {
        this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());
      } else {
        this.element.removeAttribute('aria-activedescendant');
      }

      return siblingLI;
    };

    ListView.prototype.arrowKeyHandler = function (e, prev) {
      var _this = this;

      e.preventDefault();

      if (Object.keys(this.dataSource).length && this.curUL) {
        var siblingLI = this.onArrowKeyDown(e, prev);
        var elementTop = this.element.getBoundingClientRect().top;
        var elementHeight = this.element.getBoundingClientRect().height;
        var firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();
        var heightDiff = void 0;
        var groupItemBounds = void 0;

        if (this.fields.groupBy) {
          groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();
        }

        if (siblingLI) {
          var siblingTop = siblingLI.getBoundingClientRect().top;
          var siblingHeight = siblingLI.getBoundingClientRect().height;

          if (!prev) {
            var height = this.isWindow ? window.innerHeight : elementHeight;
            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;

            if (heightDiff > height) {
              this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) : this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
            }
          } else {
            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;

            if (heightDiff < 0) {
              this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop + heightDiff;
            }
          }
        } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
          this.onUIScrolled = function () {
            _this.onArrowKeyDown(e, prev);

            _this.onUIScrolled = undefined;
          };

          heightDiff = this.virtualizationModule.listItemHeight;
          this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;
        } else if (prev) {
          if (this.showHeader && this.headerEle) {
            var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
            var headerBounds = this.headerEle.getBoundingClientRect();
            heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;
            this.isWindow ? window.scroll(0, pageYOffset - heightDiff) : this.element.scrollTop = 0;
          } else if (this.fields.groupBy) {
            heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;
            this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop - heightDiff;
          }
        }
      }
    };

    ListView.prototype.enterKeyHandler = function (e) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var hasChild = !(0, _ej2Base.isNullOrUndefined)(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;
        var li = this.curUL.querySelector('.' + classNames.focused);

        if (hasChild && li) {
          li.classList.remove(classNames.focused);

          if (this.showCheckBox) {
            this.removeSelect();
            this.removeSelect(li);
            this.removeHover();
          }

          this.setSelectLI(li, e);
        }
      }
    };

    ListView.prototype.spaceKeyHandler = function (e) {
      if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
        var li = this.curUL.querySelector('.' + classNames.focused);

        if (!(0, _ej2Base.isNullOrUndefined)(li) && (0, _ej2Base.isNullOrUndefined)(li.querySelector('.' + classNames.checked))) {
          var args = {
            curData: undefined,
            dataSource: undefined,
            fields: undefined,
            options: undefined,
            text: undefined,
            item: li
          };
          this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));
        } else {
          this.uncheckItem(li);
        }
      }
    };

    ListView.prototype.keyActionHandler = function (e) {
      switch (e.keyCode) {
        case 36:
          this.homeKeyHandler(e);
          break;

        case 35:
          this.homeKeyHandler(e, true);
          break;

        case 40:
          this.arrowKeyHandler(e);
          break;

        case 38:
          this.arrowKeyHandler(e, true);
          break;

        case 13:
          this.enterKeyHandler(e);
          break;

        case 8:
          if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
            this.uncheckAllItems();
          }

          this.back();
          break;

        case 32:
          this.spaceKeyHandler(e);
          break;
      }
    };

    ListView.prototype.swipeActionHandler = function (e) {
      if (e.swipeDirection === 'Right') {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }

        this.back();
      }
    };

    ListView.prototype.focusout = function () {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var focusedElement = this.curUL.querySelector('.' + classNames.focused);
        var activeElement = this.curUL.querySelector('[aria-selected = true]');

        if (focusedElement) {
          focusedElement.classList.remove(classNames.focused);

          if (activeElement && !this.showCheckBox) {
            activeElement.classList.add(classNames.selected);
          }
        }
      }
    };

    ListView.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);

      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

      if (!this.enableVirtualization) {
        _ej2Base.EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);

        _ej2Base.EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);
      }

      _ej2Base.EventHandler.add(this.element, 'focusout', this.focusout, this);

      this.touchModule = new _ej2Base.Touch(this.element, {
        swipe: this.swipeActionHandler.bind(this)
      });
    };

    ListView.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

      if (!this.enableVirtualization) {
        _ej2Base.EventHandler.remove(this.element, 'mouseover', this.hoverHandler);

        _ej2Base.EventHandler.remove(this.element, 'mouseout', this.leaveHandler);
      }

      _ej2Base.EventHandler.remove(this.element, 'mouseover', this.hoverHandler);

      _ej2Base.EventHandler.remove(this.element, 'mouseout', this.leaveHandler);

      this.touchModule.destroy();
    };

    ListView.prototype.removeFocus = function () {
      var focusedLI = this.element.querySelectorAll('.' + classNames.focused);

      for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
        var ele = focusedLI_1[_i];
        ele.classList.remove(classNames.focused);
      }
    };

    ListView.prototype.removeHover = function () {
      var hoverLI = this.element.querySelector('.' + classNames.hover);

      if (hoverLI) {
        hoverLI.classList.remove(classNames.hover);
      }
    };

    ListView.prototype.removeSelect = function (li) {
      if ((0, _ej2Base.isNullOrUndefined)(li)) {
        var selectedLI = this.element.querySelectorAll('.' + classNames.selected);

        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
          var ele = selectedLI_1[_i];

          if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {
            continue;
          } else {
            ele.setAttribute('aria-selected', 'false');
            ele.classList.remove(classNames.selected);
          }
        }
      } else {
        li.classList.remove(classNames.selected);
        li.setAttribute('aria-selected', 'false');
      }
    };

    ListView.prototype.isValidLI = function (li) {
      return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);
    };

    ListView.prototype.setCheckboxLI = function (li, e) {
      if (this.isValidLI(li) && this.enable && this.showCheckBox) {
        if (this.curUL.querySelector('.' + classNames.focused)) {
          this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);
        }

        li.classList.add(classNames.focused);
        var checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);
        var checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);
        this.removeHover();

        if (!checkIcon.classList.contains(classNames.checked)) {
          checkIcon.classList.add(classNames.checked);
          li.classList.add(classNames.selected);
          li.setAttribute('aria-selected', 'true');
        } else {
          checkIcon.classList.remove(classNames.checked);
          li.classList.remove(classNames.selected);
          li.setAttribute('aria-selected', 'false');
        }

        checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ? 'true' : 'false');
        var eventArgs = this.selectEventData(li, e);
        (0, _ej2Base.merge)(eventArgs, {
          isChecked: checkIcon.classList.contains(classNames.checked)
        });

        if (this.enableVirtualization) {
          this.virtualizationModule.setCheckboxLI(li, e);
        }

        this.trigger('select', eventArgs);
        this.setSelectedItemData(li);
        this.renderSubList(li);
      }
    };

    ListView.prototype.selectEventData = function (li, e) {
      var data = this.getItemData(li);
      var fieldData = (0, _listBase.getFieldValues)(data, this.listBaseOption.fields);
      var selectedItem;

      if (!(0, _ej2Base.isNullOrUndefined)(data) && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {
        selectedItem = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        selectedItem = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data: data
        };
      }

      var eventArgs = {};
      (0, _ej2Base.merge)(eventArgs, selectedItem);

      if (e) {
        (0, _ej2Base.merge)(eventArgs, {
          isInteracted: true,
          event: e,
          index: Array.prototype.indexOf.call(this.curUL.children, li)
        });
      }

      return eventArgs;
    };

    ListView.prototype.setSelectedItemData = function (li) {
      var data = this.getItemData(li);
      var fieldData = (0, _listBase.getFieldValues)(data, this.listBaseOption.fields);

      if (!(0, _ej2Base.isNullOrUndefined)(data) && (typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number')) {
        this.selectedItems = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        this.selectedItems = {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          data: data
        };
      }
    };

    ListView.prototype.setSelectLI = function (li, e) {
      if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {
        if (!this.showCheckBox) {
          this.removeSelect();
        }

        li.classList.add(classNames.selected);
        li.setAttribute('aria-selected', 'true');
        this.removeHover();
        this.setSelectedItemData(li);

        if (this.enableVirtualization) {
          this.virtualizationModule.setSelectLI(li, e);
        }

        var eventArgs = this.selectEventData(li, e);
        this.trigger('select', eventArgs);
        this.selectedLI = li;
        this.renderSubList(li);
      }
    };

    ListView.prototype.setHoverLI = function (li) {
      if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {
        var lastLi = this.element.querySelectorAll('.' + classNames.hover);

        if (lastLi && lastLi.length) {
          (0, _ej2Base.removeClass)(lastLi, classNames.hover);
        }

        if (!li.classList.contains(classNames.selected) || this.showCheckBox) {
          li.classList.add(classNames.hover);
        }
      }
    }; //Data Source Related Functions


    ListView.prototype.getSubDS = function () {
      var levelKeys = this.curDSLevel;

      if (levelKeys.length) {
        var ds = this.localData;

        for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
          var key = levelKeys_1[_i];
          var field = {};
          field[this.fields.id] = key;
          this.curDSJSON = this.findItemFromDS(ds, field);
          var fieldData = (0, _listBase.getFieldValues)(this.curDSJSON, this.listBaseOption.fields);
          ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
        }

        return ds;
      }

      return this.localData;
    };

    ListView.prototype.getItemData = function (li) {
      var dataSource = this.dataSource instanceof _ej2Data.DataManager ? this.localData : this.dataSource;
      var fields = this.getElementUID(li);
      var curDS;

      if ((0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {
        curDS = this.curViewDS;
      } else {
        curDS = dataSource;
      }

      return this.findItemFromDS(curDS, fields);
    };

    ListView.prototype.findItemFromDS = function (dataSource, fields, parent) {
      var _this = this;

      var resultJSON;

      if (dataSource && dataSource.length && fields) {
        dataSource.some(function (data) {
          var fieldData = (0, _listBase.getFieldValues)(data, _this.listBaseOption.fields); //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)

          if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!(0, _ej2Base.isNullOrUndefined)(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {
            resultJSON = parent ? dataSource : data;
          } else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {
            resultJSON = parent ? dataSource : data;
          } else if (!(0, _ej2Base.isNullOrUndefined)(fields[_this.fields.id]) && (0, _ej2Base.isNullOrUndefined)(fieldData[_this.fields.id])) {
            var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]');

            if (li && li.innerText.trim() === fieldData[_this.fields.text]) {
              resultJSON = data;
            }
          } else if (fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length) {
            resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
          }

          return !!resultJSON;
        });
      } else {
        resultJSON = dataSource;
      }

      return resultJSON;
    };

    ListView.prototype.getQuery = function () {
      var columns = [];
      var query = this.query ? this.query : new _ej2Data.Query();

      if (!this.query) {
        for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
          var column = _a[_i];

          if (column !== 'tableName' && !!this.fields[column] && this.fields[column] !== _listBase.ListBase.defaultMappedFields[column] && columns.indexOf(this.fields[column]) === -1) {
            columns.push(this.fields[column]);
          }
        }

        query.select(columns);

        if (this.fields.properties.hasOwnProperty('tableName')) {
          query.from(this.fields.tableName);
        }
      }

      return query;
    };

    ListView.prototype.setViewDataSource = function (dataSource) {
      if (dataSource === void 0) {
        dataSource = this.localData;
      }

      if (dataSource && this.fields.groupBy) {
        if (this.sortOrder !== 'None') {
          this.curViewDS = _listBase.ListBase.groupDataSource(_listBase.ListBase.getDataSource(dataSource, _listBase.ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);
        } else {
          this.curViewDS = _listBase.ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
        }
      } else if (dataSource && this.sortOrder !== 'None') {
        this.curViewDS = _listBase.ListBase.getDataSource(dataSource, _listBase.ListBase.addSorting(this.sortOrder, this.fields.sortBy));
      } else {
        this.curViewDS = dataSource;
      }
    };

    ListView.prototype.isInAnimation = function () {
      return this.curUL.classList.contains('.e-animate');
    };

    ListView.prototype.setLocalData = function () {
      var _this = this;

      this.trigger('actionBegin');

      if (this.dataSource instanceof _ej2Data.DataManager) {
        this.dataSource.executeQuery(this.getQuery()).then(function (e) {
          if (_this.isDestroyed) {
            return;
          }

          _this.localData = e.result;

          _this.removeElement(_this.contentContainer);

          _this.renderList();

          _this.trigger('actionComplete', e);
        }).catch(function (e) {
          if (_this.isDestroyed) {
            return;
          }

          _this.trigger('actionFailure', e);
        });
      } else if (!this.dataSource || !this.dataSource.length) {
        var ul = this.element.querySelector('ul');

        if (ul) {
          (0, _ej2Base.remove)(ul);
          this.setProperties({
            dataSource: _listBase.ListBase.createJsonFromElement(ul)
          }, true);
          this.localData = this.dataSource;
          this.renderList();
          this.trigger('actionComplete', {
            data: this.localData
          });
        }
      } else {
        this.localData = this.dataSource;
        this.renderList();
        this.trigger('actionComplete', {
          data: this.localData
        });
      }
    };

    ListView.prototype.reRender = function () {
      this.resetBlazorTemplates();
      this.removeElement(this.headerEle);
      this.removeElement(this.ulElement);
      this.removeElement(this.contentContainer);

      if (Object.keys(window).indexOf('ejsInterop') === -1) {
        this.element.innerHTML = '';
      }

      this.headerEle = this.ulElement = this.liCollection = undefined;
      this.setLocalData();
      this.header();
    };

    ListView.prototype.resetCurrentList = function () {
      this.resetBlazorTemplates();
      this.setViewDataSource(this.curViewDS);
      this.contentContainer.innerHTML = '';
      this.createList();
      this.renderIntoDom(this.curUL);
    };

    ListView.prototype.setAttributes = function (liElements) {
      for (var i = 0; i < liElements.length; i++) {
        var element = liElements[i];

        if (element.classList.contains('e-list-item')) {
          element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));
          element.setAttribute('aria-selected', 'false');
          element.setAttribute('tabindex', '-1');
        }
      }
    };

    ListView.prototype.createList = function () {
      this.currentLiElements = [];
      this.isNestedList = false;
      this.ulElement = this.curUL = _listBase.ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption);
      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
      this.setAttributes(this.liCollection);
      this.updateBlazorTemplates(true);
    };

    ListView.prototype.resetBlazorTemplates = function () {
      // tslint:disable-next-line:no-any
      var templateCollection = _ej2Base.blazorTemplates;

      if (this.template) {
        templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];
        (0, _ej2Base.resetBlazorTemplate)(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);
      }

      if (this.groupTemplate) {
        templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];
        (0, _ej2Base.resetBlazorTemplate)(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);
      }

      if (this.headerTemplate) {
        (0, _ej2Base.resetBlazorTemplate)(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);
      }
    };

    ListView.prototype.updateBlazorTemplates = function (template, headerTemplate, resetExistingElements) {
      if (template === void 0) {
        template = false;
      }

      if (headerTemplate === void 0) {
        headerTemplate = false;
      }

      if (resetExistingElements === void 0) {
        resetExistingElements = false;
      }

      if (this.template && template && !this.enableVirtualization) {
        (0, _ej2Base.updateBlazorTemplate)(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);
      }

      if (this.groupTemplate && template && !this.enableVirtualization) {
        (0, _ej2Base.updateBlazorTemplate)(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);
      }

      if (this.headerTemplate && headerTemplate) {
        (0, _ej2Base.updateBlazorTemplate)(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);
      }
    };

    ListView.prototype.renderSubList = function (li) {
      var uID = li.getAttribute('data-uid');

      if (li.classList.contains(classNames.hasChild) && uID) {
        var ul = (0, _ej2Base.closest)(li.parentNode, '.' + classNames.parentItem);
        var ele = this.element.querySelector('[pid=\'' + uID + '\']');
        this.curDSLevel.push(uID);
        this.setViewDataSource(this.getSubDS());

        if (!ele) {
          var data = this.curViewDS;
          ele = _listBase.ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length);
          var lists = ele.querySelectorAll('.' + classNames.listItem);
          this.setAttributes(lists);
          ele.setAttribute('pID', uID);
          ele.style.display = 'none';
          this.renderIntoDom(ele);
          this.updateBlazorTemplates(true);
        }

        this.switchView(ul, ele);
        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

        if (this.selectedItems) {
          var fieldData = (0, _listBase.getFieldValues)(this.selectedItems.data, this.listBaseOption.fields);
          this.header(fieldData[this.listBaseOption.fields.text], true);
        }

        this.selectedLI = undefined;
      }
    };

    ListView.prototype.renderIntoDom = function (ele) {
      this.contentContainer.appendChild(ele);
    };

    ListView.prototype.renderList = function (data) {
      this.setViewDataSource(data);

      if (this.enableVirtualization) {
        if (Object.keys(this.dataSource).length) {
          if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
            this.listBaseOption.template = null;
            this.listBaseOption.groupTemplate = null;
            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
          }

          this.virtualizationModule.uiVirtualization();
        }
      } else {
        this.createList();
        this.contentContainer = this.createElement('div', {
          className: classNames.content
        });
        this.element.appendChild(this.contentContainer);
        this.renderIntoDom(this.ulElement);
      }
    };

    ListView.prototype.getElementUID = function (obj) {
      var fields = {};

      if (obj instanceof Element) {
        fields[this.fields.id] = obj.getAttribute('data-uid');
      } else {
        fields = obj;
      }

      return fields;
    };
    /**
     * It is used to Initialize the control rendering.
     */


    ListView.prototype.render = function () {
      this.element.classList.add(classNames.root);
      (0, _ej2Base.attributes)(this.element, {
        role: 'listbox',
        tabindex: '0'
      });
      this.setCSSClass();
      this.setEnableRTL();
      this.setEnable();
      this.setSize();
      this.wireEvents();
      this.header();
      this.setLocalData();
      this.setHTMLAttribute();
      this.rippleFn = (0, _ej2Base.rippleEffect)(this.element, {
        selector: '.' + classNames.listItem
      });
      this.renderComplete();
    };
    /**
     * It is used to destroy the ListView component.
     */


    ListView.prototype.destroy = function () {
      this.resetBlazorTemplates();
      this.unWireEvents();
      var classAr = [classNames.root, classNames.disable, 'e-rtl', 'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter(function (css) {
        return css;
      }));
      (0, _ej2Base.removeClass)([this.element], classAr);
      this.element.removeAttribute('role');
      this.element.removeAttribute('tabindex');
      this.element.innerHTML = '';
      this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;

      _super.prototype.destroy.call(this);
    };
    /**
     * It helps to switch back from navigated sub list.
     */


    ListView.prototype.back = function () {
      var pID = this.curDSLevel[this.curDSLevel.length - 1];

      if (pID === undefined || this.isInAnimation()) {
        return;
      }

      this.curDSLevel.pop();
      this.setViewDataSource(this.getSubDS());
      var toUL = this.element.querySelector('[data-uid=\'' + pID + '\']');
      var fromUL = this.curUL;

      if (!toUL) {
        this.createList();
        this.renderIntoDom(this.ulElement);
        toUL = this.curUL;
      } else {
        toUL = toUL.parentElement;
      }

      var fieldData = (0, _listBase.getFieldValues)(this.curDSJSON, this.listBaseOption.fields);
      var text = fieldData[this.fields.text];
      this.switchView(fromUL, toUL, true);
      this.removeFocus();
      var li = this.element.querySelector('[data-uid=\'' + pID + '\']');
      li.classList.add(classNames.focused);

      if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {
        li.setAttribute('aria-selected', 'true');
      } else {
        li.classList.remove(classNames.selected);
        li.setAttribute('aria-selected', 'false');
      }

      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);

      if (this.enableHtmlSanitizer) {
        this.setProperties({
          headerTitle: _ej2Base.SanitizeHtmlHelper.sanitize(this.headerTitle)
        }, true);
      }

      this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false);
    };
    /**
     * It is used to select the list item from the ListView.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.selectItem = function (obj) {
      if (this.enableVirtualization) {
        this.virtualizationModule.selectItem(obj);
      } else if (this.showCheckBox) {
        this.setCheckboxLI(this.getLiFromObjOrElement(obj));
      } else {
        (0, _ej2Base.isNullOrUndefined)(obj) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(obj));
      }
    };

    ListView.prototype.getLiFromObjOrElement = function (obj) {
      var li;
      var dataSource = this.dataSource instanceof _ej2Data.DataManager ? this.localData : this.dataSource;

      if (!(0, _ej2Base.isNullOrUndefined)(obj)) {
        if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
          if (obj instanceof Element) {
            var uid = obj.getAttribute('data-uid').toString();

            for (var i = 0; i < this.liCollection.length; i++) {
              if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {
                li = this.liCollection[i];
                break;
              }
            }
          } else {
            Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), function (item) {
              if (item.innerText.trim() === obj.toString()) {
                li = item;
                return true;
              } else {
                return false;
              }
            });
          }
        } else {
          var resultJSON = this.getItemData(obj);
          var fieldData = (0, _listBase.getFieldValues)(resultJSON, this.listBaseOption.fields);

          if (resultJSON) {
            li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

            if (!this.enableVirtualization && (0, _ej2Base.isNullOrUndefined)(li)) {
              var curLi = this.element.querySelectorAll('.' + classNames.listItem);

              for (var i = 0; i < curLi.length; i++) {
                if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {
                  li = curLi[i];
                }
              }
            }
          }
        }
      }

      return li;
    };
    /**
     * It is used to select multiple list item from the ListView.
     * @param  {Fields[] | HTMLElement[] | Element[]} obj - We can pass array of elements or array of field Object with ID and Text fields.
     */


    ListView.prototype.selectMultipleItems = function (obj) {
      if (!(0, _ej2Base.isNullOrUndefined)(obj)) {
        for (var i = 0; i < obj.length; i++) {
          if (!(0, _ej2Base.isNullOrUndefined)(obj[i])) {
            this.selectItem(obj[i]);
          }
        }
      }
    };

    ListView.prototype.getParentId = function () {
      var parentId = [];

      if (this.isNestedList) {
        for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
          parentId.push(this.curDSLevel[i]);
        }
      }

      return parentId;
    };
    /**
     * It is used to get the currently [here](./selectedItem)
     *  item details from the list items.
     * @blazorType ListSelectedItem<TValue>
     */


    ListView.prototype.getSelectedItems = function () {
      // tslint:disable-next-line:no-any
      var finalValue;
      var isCompleted = false;
      this.selectedId = [];
      var dataSource = this.dataSource instanceof _ej2Data.DataManager ? this.localData : this.dataSource;

      if (this.enableVirtualization && !isCompleted) {
        finalValue = this.virtualizationModule.getSelectedItems();
        isCompleted = true;
      } else if (this.showCheckBox && !isCompleted) {
        // tslint:disable-next-line:no-any
        var liCollection = this.curUL.getElementsByClassName(classNames.selected);
        var liTextCollection = [];
        var liDataCollection = [];
        this.selectedId = [];
        var dataParent = [];

        for (var i = 0; i < liCollection.length; i++) {
          if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {
            liTextCollection.push(liCollection[i].innerText.trim());
          } else {
            var tempData = this.getItemData(liCollection[i]);
            var fieldData = (0, _listBase.getFieldValues)(tempData, this.listBaseOption.fields);

            if (this.isNestedList) {
              dataParent.push({
                data: tempData,
                parentId: this.getParentId()
              });
            } else {
              liDataCollection.push(tempData);
            }

            if (fieldData) {
              liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
              this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            } else {
              liTextCollection.push(undefined);
              this.selectedId.push(undefined);
            }
          }
        }

        if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
          finalValue = {
            item: liCollection,
            data: dataSource,
            text: liTextCollection
          };
          isCompleted = true;
        }

        if (this.isNestedList && !isCompleted) {
          finalValue = {
            item: liCollection,
            data: dataParent,
            text: liTextCollection
          };
          isCompleted = true;
        } else if (!isCompleted) {
          finalValue = {
            item: liCollection,
            data: liDataCollection,
            text: liTextCollection
          };
          isCompleted = true;
        }
      } else if (!isCompleted) {
        var liElement = this.element.getElementsByClassName(classNames.selected)[0];
        var fieldData = (0, _listBase.getFieldValues)(this.getItemData(liElement), this.listBaseOption.fields);

        if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {
          finalValue = !(0, _ej2Base.isNullOrUndefined)(liElement) ? {
            item: liElement,
            data: dataSource,
            text: liElement.innerText.trim()
          } : undefined;
          isCompleted = true;
        } else if (!isCompleted) {
          if ((0, _ej2Base.isNullOrUndefined)(fieldData) || (0, _ej2Base.isNullOrUndefined)(liElement)) {
            finalValue = undefined;
            isCompleted = true;
          } else {
            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            finalValue = {
              text: fieldData[this.listBaseOption.fields.text],
              item: liElement,
              data: this.getItemData(liElement)
            };
            isCompleted = true;
          }
        }
      }

      if ((0, _ej2Base.isBlazor)()) {
        // tslint:disable-next-line:no-any
        return this.blazorGetSelectedItems(finalValue);
      } else {
        return finalValue;
      }
    }; // tslint:disable-next-line:no-any


    ListView.prototype.blazorGetSelectedItems = function (finalGetSelectedItem) {
      var blazorSelectedItem = {
        data: [],
        index: [],
        parentId: [],
        text: []
      };

      if (!(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem)) {
        if (!(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem.data)) {
          if (this.showCheckBox && this.isNestedList) {
            for (var i = 0; i < finalGetSelectedItem.data.length; i++) {
              blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);
            }

            if (!(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem.data[0]) && !(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem.data[0].parentId)) {
              blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;
            }
          } else {
            blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);
          }
        }

        if (!(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem.text)) {
          blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(finalGetSelectedItem.index)) {
          blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);
        }
      }

      return blazorSelectedItem;
    }; // tslint:disable-next-line:no-any


    ListView.prototype.convertItemsToArray = function (items) {
      return Array.isArray(items) ? items.slice() : [items];
    };
    /**
     * It is used to find out an item details from the current list.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     * @blazorType TValue
     */


    ListView.prototype.findItem = function (obj) {
      return this.getItemData(obj);
    };
    /**
     * A function that used to enable the disabled list items based on passed element.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.enableItem = function (obj) {
      this.setItemState(obj, true);

      if (this.enableVirtualization) {
        this.virtualizationModule.enableItem(obj);
      }
    };
    /**
     * It is used to disable the list items based on passed element.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.disableItem = function (obj) {
      this.setItemState(obj, false);

      if (this.enableVirtualization) {
        this.virtualizationModule.disableItem(obj);
      }
    }; //A function that used to set state of the list item like enable, disable.


    ListView.prototype.setItemState = function (obj, isEnable) {
      var resultJSON = this.getItemData(obj);
      var fieldData = (0, _listBase.getFieldValues)(resultJSON, this.listBaseOption.fields);

      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

        if (isEnable) {
          if (li) {
            li.classList.remove(classNames.disable);
          }

          delete resultJSON[this.fields.enabled];
        } else if (!isEnable) {
          if (li) {
            li.classList.add(classNames.disable);
          }

          resultJSON[this.fields.enabled] = false;
        }
      }
    };
    /**
     * It is used to show an list item from the ListView.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.showItem = function (obj) {
      this.showHideItem(obj, false, '');

      if (this.enableVirtualization) {
        this.virtualizationModule.showItem(obj);
      }
    };
    /**
     * It is used to hide an item from the ListView.
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.hideItem = function (obj) {
      this.showHideItem(obj, true, 'none');

      if (this.enableVirtualization) {
        this.virtualizationModule.hideItem(obj);
      }
    };

    ListView.prototype.showHideItem = function (obj, isHide, display) {
      var resultJSON = this.getItemData(obj);
      var fieldData = (0, _listBase.getFieldValues)(resultJSON, this.listBaseOption.fields);

      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');

        if (li) {
          li.style.display = display;
        }

        if (isHide) {
          resultJSON[this.fields.isVisible] = false;
        } else {
          delete resultJSON[this.fields.isVisible];
        }
      }
    };
    /**
     * It adds new item(s) to current ListView.
     * To add a new item(s) in the listview, we need to pass `data` as array of items that needs
     * to be added and `fields` as the target item to which we need to add the given item(s) as its children.
     * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}
     * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.
     * @param  {Fields} fields - Target item to add the given data as its children (can be null).
     * @blazorArgsType data|List<TValue>,fields|TValue
     */


    ListView.prototype.addItem = function (data, fields) {
      if (fields === void 0) {
        fields = undefined;
      }

      var dataSource = this.dataSource instanceof _ej2Data.DataManager ? this.localData : this.dataSource;
      this.addItemInternally(data, fields, dataSource);
    };

    ListView.prototype.addItemInternally = function (data, fields, dataSource) {
      if (data instanceof Array) {
        if (this.enableVirtualization) {
          this.virtualizationModule.addItem(data, fields, dataSource);
        } else {
          var ds = this.findItemFromDS(dataSource, fields);
          var child = void 0;

          if (ds) {
            var fieldData = (0, _listBase.getFieldValues)(ds, this.listBaseOption.fields);
            child = fieldData[this.fields.child];

            if (!child) {
              child = [];
            }

            child = child.concat(data);
          } // check for whether target is nested level or top level in list


          if (ds instanceof Array) {
            for (var i = 0; i < data.length; i++) {
              dataSource.push(data[i]);
              this.setViewDataSource(dataSource); // since it is top level target, get the content container's first child
              // as it is always the top level UL

              var targetUL = this.contentContainer ? this.contentContainer.children[0] : null; // check for whether the list was previously empty or not, if it is
              // proceed to call initial render

              if (this.contentContainer && targetUL) {
                this.addItemIntoDom(data[i], targetUL, this.curViewDS);
              } else {
                this.reRender();
              }
            }

            if (this.curUL) {
              this.updateBlazorTemplates(true);
            }

            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);
          } else {
            // proceed as target item is in nested level, only if it is a valid target ds
            if (ds) {
              ds[this.fields.child] = child;
              this.addItemInNestedList(ds, data);
            }
          }
        }
      }
    };

    ListView.prototype.addItemInNestedList = function (targetItemData, itemQueue) {
      var targetItemId = targetItemData[this.fields.id];
      var targetChildDS = targetItemData[this.fields.child];
      var isAlreadyRenderedUL = this.element.querySelector('[pid=\'' + targetItemId + '\']');
      var targetLi = this.element.querySelector('[data-uid=\'' + targetItemId + '\']');
      var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? (0, _ej2Base.closest)(targetLi, 'ul') : null;
      var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
      var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;
      var isRefreshTemplateNeeded = false; // if li element is already rendered, that element needs to be refreshed so that
      // it becomes child viewable due to new child items are added now

      if (isTargetEmptyChild) {
        var targetRefreshedElement = _listBase.ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption);

        this.setAttributes(targetRefreshedElement);
        targetUL.insertBefore(targetRefreshedElement[0], targetLi);
        (0, _ej2Base.detach)(targetLi);
        isRefreshTemplateNeeded = true;
      } // if it is already rendered element, we need to create and append new elements


      if (isAlreadyRenderedUL && itemQueue) {
        for (var i = 0; i < itemQueue.length; i++) {
          targetDS.push(itemQueue[i]);
          this.addItemIntoDom(itemQueue[i], targetUL, targetDS);
        }

        isRefreshTemplateNeeded = true;
      }

      if (isRefreshTemplateNeeded) {
        this.updateBlazorTemplates(true);
      }
    };

    ListView.prototype.addItemIntoDom = function (currentItem, targetUL, curViewDS) {
      var index = curViewDS.indexOf(currentItem);
      this.addListItem(currentItem, index, targetUL, curViewDS);
      var curItemDS = curViewDS[index - 1];

      if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
        this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
      }
    };

    ListView.prototype.addListItem = function (dataSource, index, ulElement, curViewDS) {
      var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;

      var li = _listBase.ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption);

      this.setAttributes(li);
      ulElement.insertBefore(li[0], target);
    };
    /**
     * A function that removes the item from data source based on passed element like fields: { text: 'Name', tooltip: 'Name', id:'id'}
     * @param  {Fields | HTMLElement | Element} obj - We can pass element Object or Fields as Object with ID and Text fields.
     */


    ListView.prototype.removeItem = function (obj) {
      var listDataSource = this.dataSource instanceof _ej2Data.DataManager ? this.localData : this.dataSource;

      if (this.enableVirtualization) {
        this.virtualizationModule.removeItem(obj);
      } else {
        this.removeItemFromList(obj, listDataSource);
        this.updateBlazorTemplates(true);
      }
    };

    ListView.prototype.removeItemFromList = function (obj, listDataSource) {
      var _this = this;

      var curViewDS = this.curViewDS;
      var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
      var dataSource;
      dataSource = this.findItemFromDS(listDataSource, fields, true);

      if (dataSource) {
        var data_1;
        data_1 = this.findItemFromDS(dataSource, fields);
        var index = curViewDS.indexOf(data_1);
        var li = this.getLiFromObjOrElement(obj);
        var groupLi = void 0;
        this.validateNestedView(li);

        if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
          if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && ((0, _ej2Base.isNullOrUndefined)(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {
            groupLi = li.previousElementSibling;
          }
        }

        if (li) {
          (0, _ej2Base.detach)(li);
        }

        if (groupLi) {
          (0, _ej2Base.detach)(groupLi);
        } // tslint:disable-next-line:no-any


        var foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, function (value) {
          return value === data_1[_this.fields.id];
        }, null) : null;
        var dsIndex = dataSource.indexOf(data_1);
        dataSource.splice(dsIndex, 1);
        this.setViewDataSource(listDataSource);

        if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
          var parentLi = this.getLiFromObjOrElement(foundData.parent);

          if (parentLi) {
            var li_1 = _listBase.ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption);

            this.setAttributes(li_1);
            parentLi.parentElement.insertBefore(li_1[0], parentLi);
            parentLi.parentElement.removeChild(parentLi);
          }
        }

        if (dataSource.length <= 0) {
          this.back();
        }

        this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));
      }
    }; // validate before removing an element whether the current view is inside target element's child view


    ListView.prototype.validateNestedView = function (li) {
      var liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;

      if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
        while (this.curDSLevel.some(function (id) {
          return id.toString().toLowerCase() === liID;
        })) {
          this.back();
        }
      }
    };
    /**
     * A function that removes multiple item from list view based on given input.
     * @param  {Fields[] | HTMLElement[] | Element[]} obj - We can pass array of elements or array of field Object with ID and Text fields.
     */


    ListView.prototype.removeMultipleItems = function (obj) {
      if (obj.length) {
        for (var i = 0; i < obj.length; i++) {
          this.removeItem(obj[i]);
        }

        this.updateBlazorTemplates(true);
      }
    }; // tslint:disable-next-line:no-any


    ListView.prototype.findParent = function (dataSource, id, callback, parent) {
      if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {
        return (0, _ej2Base.extend)({}, dataSource);
      }

      for (var i = 0; i < Object.keys(dataSource).length; i++) {
        if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {
          // tslint:disable-next-line:no-any
          var result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);

          if (result != null) {
            if (!result.parent) {
              result.parent = parent;
            }

            return result;
          }
        }
      }

      return null;
    }; // Module Required function


    ListView.prototype.getModuleName = function () {
      return 'listview';
    };

    ListView.prototype.requiredModules = function () {
      var modules = [];

      if (this.enableVirtualization) {
        modules.push({
          args: [this],
          member: 'virtualization'
        });
      }

      return modules;
    };
    /**
     * Get the properties to be maintained in the persisted state.
     */


    ListView.prototype.getPersistData = function () {
      return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes', 'enable', 'fields', 'animation', 'headerTitle', 'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);
    };

    __decorate([(0, _ej2Base.Property)('')], ListView.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListView.prototype, "enableVirtualization", void 0);

    __decorate([(0, _ej2Base.Property)({})], ListView.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)(true)], ListView.prototype, "enable", void 0);

    __decorate([(0, _ej2Base.Property)([])], ListView.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)()], ListView.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Complex)(_listBase.ListBase.defaultMappedFields, FieldSettings)], ListView.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)({
      effect: 'SlideLeft',
      duration: 400,
      easing: 'ease'
    })], ListView.prototype, "animation", void 0);

    __decorate([(0, _ej2Base.Property)('None')], ListView.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListView.prototype, "showIcon", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListView.prototype, "showCheckBox", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], ListView.prototype, "checkBoxPosition", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListView.prototype, "headerTitle", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListView.prototype, "showHeader", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ListView.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListView.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('')], ListView.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListView.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListView.prototype, "headerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(null)], ListView.prototype, "groupTemplate", void 0);

    __decorate([(0, _ej2Base.Event)()], ListView.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], ListView.prototype, "actionBegin", void 0);

    __decorate([(0, _ej2Base.Event)()], ListView.prototype, "actionComplete", void 0);

    __decorate([(0, _ej2Base.Event)()], ListView.prototype, "actionFailure", void 0);

    ListView = __decorate([_ej2Base.NotifyPropertyChanges], ListView);
    return ListView;
  }(_ej2Base.Component);

  _exports.ListView = ListView;
});;
define('@syncfusion/ej2-lists/src/list-view/virtualization',["exports", "./list-view", "@syncfusion/ej2-base", "../common/list-base", "@syncfusion/ej2-data"], function (_exports, _listView, _ej2Base, _listBase, _ej2Data) {
  "use strict";

  _exports.__esModule = true;
  _exports.Virtualization = void 0;

  var Virtualization =
  /** @class */
  function () {
    function Virtualization(instance) {
      this.listViewInstance = instance;
    }
    /**
     * For internal use only.
     * @private
     */


    Virtualization.prototype.isNgTemplate = function () {
      return !(0, _ej2Base.isNullOrUndefined)(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';
    };
    /**
     * For internal use only.
     * @private
     */


    Virtualization.prototype.uiVirtualization = function () {
      var curViewDS = this.listViewInstance.curViewDS;
      var firstDs = curViewDS.slice(0, 1);
      this.listViewInstance.ulElement = this.listViewInstance.curUL = _listBase.ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);
      this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', {
        className: _listView.classNames.content
      });
      this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
      this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
      this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
      this.expectedDomItemCount = this.ValidateItemCount(10000);
      this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
      this.uiFirstIndex = 0;
      this.uiLastIndex = this.domItemCount - 1;
      this.wireScrollEvent(false);
      var otherDs = curViewDS.slice(1, this.domItemCount);

      var listItems = _listBase.ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);

      (0, _ej2Base.append)(listItems, this.listViewInstance.ulElement);
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
      this.topElement = this.listViewInstance.createElement('div');
      this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
      this.bottomElement = this.listViewInstance.createElement('div');
      this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      this.topElement.style.height = 0 + 'px';
      this.bottomElement.style.height = this.totalHeight + 'px';
      this.topElementHeight = 0;
      this.bottomElementHeight = this.totalHeight;
      this.listDiff = 0;
      this.uiIndicesInitialization();
    };

    Virtualization.prototype.wireScrollEvent = function (destroy) {
      if (!destroy) {
        if (this.listViewInstance.isWindow) {
          this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
          window.addEventListener('scroll', this.onVirtualScroll);
        } else {
          _ej2Base.EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);
        }
      } else {
        this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) : _ej2Base.EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);
      }
    };

    Virtualization.prototype.ValidateItemCount = function (dataSourceLength) {
      var height = parseFloat((0, _ej2Base.formatUnit)(this.listViewInstance.height));
      var itemCount = this.listViewInstance.isWindow ? Math.round(window.innerHeight / this.listItemHeight * 3) : Math.round(height / this.listItemHeight * 1.5);

      if (itemCount > dataSourceLength) {
        itemCount = dataSourceLength;
      }

      return itemCount;
    };

    Virtualization.prototype.uiIndicesInitialization = function () {
      this.uiIndices = {
        'activeIndices': [],
        'disabledItemIndices': [],
        'hiddenItemIndices': []
      };
      var data = this.listViewInstance.curViewDS;

      for (var i = 0; i < data.length; i++) {
        if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
          this.uiIndices.activeIndices.push(i);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
          this.uiIndices.disabledItemIndices.push(i);
        }
      }

      if (this.isNgTemplate()) {
        var items = this.listViewInstance.element.querySelectorAll('.' + _listView.classNames.listItem);

        for (var index = 0; index < items.length; index++) {
          items[index].context = this.listViewInstance.viewContainerRef._embeddedViews[index].context;
        }
      }
    };

    Virtualization.prototype.refreshItemHeight = function () {
      if (this.listViewInstance.curViewDS.length) {
        var curViewDS = this.listViewInstance.curViewDS;
        this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
        this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
        this.bottomElementHeight = this.totalHeight;
        this.bottomElement.style.height = this.totalHeight + 'px';
      }
    };

    Virtualization.prototype.getscrollerHeight = function (startingHeight) {
      return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
    };

    Virtualization.prototype.onVirtualUiScroll = function () {
      var _a;

      var startingHeight;

      if (this.listViewInstance.isWindow) {
        startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
      } else {
        startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
      }

      this.scrollPosition = (0, _ej2Base.isNullOrUndefined)(this.scrollPosition) ? 0 : this.scrollPosition;
      var scroll = this.getscrollerHeight(startingHeight);
      this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);
      this.bottomElementHeight = this.totalHeight - this.topElementHeight;
      _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];

      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
        this.topElement.style.height = this.topElementHeight + 'px';
        this.bottomElement.style.height = this.bottomElementHeight + 'px';

        if (scroll > this.scrollPosition) {
          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);

          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, true);
          } else {
            this.onNormalScroll(listDiff, true);
          }
        } else {
          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);

          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, false);
          } else {
            this.onNormalScroll(listDiff, false);
          }
        }

        this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);

        if (typeof this.listViewInstance.onUIScrolled === 'function') {
          this.listViewInstance.onUIScrolled();
        }
      }

      this.scrollPosition = scroll;
    };

    Virtualization.prototype.onLongScroll = function (listDiff, isScrollingDown) {
      var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
      var elements = this.listViewInstance.ulElement.querySelectorAll('li');

      for (var i = 0; i < elements.length; i++) {
        this.updateUI(elements[i], index);
        index++;
      }

      this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
      this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
    };

    Virtualization.prototype.onNormalScroll = function (listDiff, isScrollingDown) {
      if (isScrollingDown) {
        for (var i = 0; i < listDiff; i++) {
          var index = ++this.uiLastIndex;
          this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
          this.uiFirstIndex++;
        }
      } else {
        for (var i = 0; i < listDiff; i++) {
          var index = --this.uiFirstIndex;
          var target = this.topElement.nextSibling;
          this.updateUI(this.bottomElement.previousElementSibling, index, target);
          this.uiLastIndex--;
        }
      }
    };

    Virtualization.prototype.updateUiContent = function (element, index) {
      var curViewDs = this.listViewInstance.curViewDS;

      if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
        element.dataset.uid = _listBase.ListBase.generateId();
        element.getElementsByClassName(_listView.classNames.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
      } else {
        element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? curViewDs[index][this.listViewInstance.fields.id].toString() : _listBase.ListBase.generateId();
        element.getElementsByClassName(_listView.classNames.listItemText)[0].innerHTML = curViewDs[index][this.listViewInstance.fields.text].toString();
      }

      if (this.listViewInstance.showIcon) {
        if (element.querySelector('.' + _listView.classNames.listIcon)) {
          (0, _ej2Base.detach)(element.querySelector('.' + _listView.classNames.listIcon));
        }

        if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
          var textContent = element.querySelector('.' + _listView.classNames.textContent);
          var target = this.listViewInstance.createElement('div', {
            className: _listView.classNames.listIcon + ' ' + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]
          });
          textContent.insertBefore(target, element.querySelector('.' + _listView.classNames.listItemText));
        }
      }

      if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
        if (!this.checkListWrapper) {
          this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + _listView.classNames.checkboxWrapper).cloneNode(true);
        }

        var textContent = element.querySelector('.' + _listView.classNames.textContent);

        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element.querySelector('.' + _listView.classNames.checkboxWrapper)) {
            element.classList.remove(_listView.classNames.checklist);
            textContent.classList.remove(_listView.classNames.checkbox);
            (0, _ej2Base.detach)(element.querySelector('.' + _listView.classNames.checkboxWrapper));
          }
        } else {
          if (!element.querySelector('.' + _listView.classNames.checkboxWrapper)) {
            element.classList.add(_listView.classNames.checklist);
            textContent.classList.add(_listView.classNames.checkbox);
            textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + _listView.classNames.listItemText));
          }
        }
      }
    };

    Virtualization.prototype.changeElementAttributes = function (element, index) {
      element.classList.remove(_listView.classNames.disable);

      if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
        element.classList.add(_listView.classNames.disable);
      }

      element.style.display = '';

      if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
        element.style.display = 'none';
      }

      if (this.listViewInstance.showCheckBox) {
        var checklistElement = element.querySelector('.' + _listView.classNames.checkboxWrapper);
        element.classList.remove(_listView.classNames.selected);
        element.classList.remove(_listView.classNames.focused);

        if (checklistElement) {
          checklistElement.removeAttribute('aria-checked');
          checklistElement.firstElementChild.classList.remove(_listView.classNames.checked);
        }

        if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(_listView.classNames.selected)) {
          element.classList.add(_listView.classNames.selected);
          checklistElement.firstElementChild.classList.add(_listView.classNames.checked);
          checklistElement.setAttribute('aria-checked', 'true');

          if (this.activeIndex === index) {
            element.classList.add(_listView.classNames.focused);
          }
        }
      } else {
        element.classList.remove(_listView.classNames.selected);
        element.removeAttribute('aria-selected');

        if (!(0, _ej2Base.isNullOrUndefined)(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(_listView.classNames.selected)) {
          element.classList.add(_listView.classNames.selected);
          element.setAttribute('aria-selected', 'true');
        }
      }

      if (this.listViewInstance.fields.groupBy) {
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element.classList.contains(_listView.classNames.listItem)) {
            element.classList.remove(_listView.classNames.listItem);
            element.setAttribute('role', 'group');
            element.classList.add(_listView.classNames.groupListItem);
          }
        } else {
          if (element.classList.contains(_listView.classNames.groupListItem)) {
            element.classList.remove(_listView.classNames.groupListItem);
            element.setAttribute('role', 'listitem');
            element.classList.add(_listView.classNames.listItem);
          }
        }
      }
    };

    Virtualization.prototype.findDSAndIndexFromId = function (ds, fields) {
      var _this = this;

      var resultJSON = {};
      fields = this.listViewInstance.getElementUID(fields);

      if (!(0, _ej2Base.isNullOrUndefined)(fields)) {
        ds.some(function (data, index) {
          if (fields[_this.listViewInstance.fields.id] && fields[_this.listViewInstance.fields.id].toString() === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id].toString()) || fields === data) {
            resultJSON.index = index;
            resultJSON.data = data;
            return true;
          } else {
            return false;
          }
        });
      }

      return resultJSON;
    };

    Virtualization.prototype.getSelectedItems = function () {
      var _this = this;

      if (!(0, _ej2Base.isNullOrUndefined)(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
        var dataCollection = [];
        var textCollection = [];

        if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
          var curViewDS_1 = this.listViewInstance.curViewDS;

          if (this.listViewInstance.showCheckBox) {
            var indices = this.uiIndices.activeIndices;

            for (var i = 0; i < indices.length; i++) {
              dataCollection.push(curViewDS_1[indices[i]]);
            }

            return {
              text: dataCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function (index) {
                return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);
              })
            };
          } else {
            return {
              text: curViewDS_1[this.activeIndex],
              data: curViewDS_1[this.activeIndex],
              index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])
            };
          }
        } else {
          var curViewDS_2 = this.listViewInstance.curViewDS;
          var text = this.listViewInstance.fields.text;

          if (this.listViewInstance.showCheckBox) {
            var indexArray = this.uiIndices.activeIndices;

            for (var i = 0; i < indexArray.length; i++) {
              textCollection.push(curViewDS_2[indexArray[i]][text]);
              dataCollection.push(curViewDS_2[indexArray[i]]);
            }

            var dataSource_1 = this.listViewInstance.dataSource instanceof _ej2Data.DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: textCollection,
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function (index) {
                return dataSource_1.indexOf(curViewDS_2[index]);
              })
            };
          } else {
            var dataSource = this.listViewInstance.dataSource instanceof _ej2Data.DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS_2[this.activeIndex],
              index: dataSource.indexOf(curViewDS_2[this.activeIndex])
            };
          }
        }
      } else {
        return undefined;
      }
    };

    Virtualization.prototype.selectItem = function (obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

      if (Object.keys(resutJSON).length) {
        var isSelected = this.activeIndex === resutJSON.index;
        var isChecked = void 0;
        this.activeIndex = resutJSON.index;

        if (this.listViewInstance.showCheckBox) {
          if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
            isChecked = true;
            this.uiIndices.activeIndices.push(resutJSON.index);
          } else {
            isChecked = false;
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
          }

          if (this.listViewInstance.curUL.querySelector('.' + _listView.classNames.focused)) {
            this.listViewInstance.curUL.querySelector('.' + _listView.classNames.focused).classList.remove(_listView.classNames.focused);
          }
        }

        if (this.listViewInstance.getLiFromObjOrElement(obj)) {
          if (this.listViewInstance.showCheckBox) {
            this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
          } else {
            this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
          }
        } else {
          var eventArgs = void 0;

          if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {
            eventArgs = {
              text: this.listViewInstance.curViewDS[this.activeIndex],
              data: this.listViewInstance.curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          } else {
            var curViewDS = this.listViewInstance.curViewDS;
            eventArgs = {
              text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          }

          if (this.listViewInstance.showCheckBox) {
            eventArgs.isChecked = isChecked;
            this.listViewInstance.trigger('select', eventArgs);
          } else if (!isSelected) {
            this.listViewInstance.removeSelect();
            this.listViewInstance.trigger('select', eventArgs);
          }
        }
      } else if ((0, _ej2Base.isNullOrUndefined)(obj) && !this.listViewInstance.showCheckBox) {
        this.listViewInstance.removeSelect();
        this.activeIndex = undefined;
      }
    };

    Virtualization.prototype.enableItem = function (obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

      if (Object.keys(resutJSON).length) {
        this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
      }
    };

    Virtualization.prototype.disableItem = function (obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

      if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.disabledItemIndices.push(resutJSON.index);
      }
    };

    Virtualization.prototype.showItem = function (obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

      if (Object.keys(resutJSON).length) {
        this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
      }
    };

    Virtualization.prototype.hideItem = function (obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);

      if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.hiddenItemIndices.push(resutJSON.index);
      }
    };

    Virtualization.prototype.removeItem = function (obj) {
      var dataSource;
      var curViewDS = this.listViewInstance.curViewDS;
      var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);

      if (Object.keys(resutJSON).length) {
        dataSource = resutJSON.data;

        if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
          this.removeUiItem(resutJSON.index - 1);
          this.removeUiItem(resutJSON.index - 1);
        } else {
          this.removeUiItem(resutJSON.index);
        }
      }

      var listDataSource = this.listViewInstance.dataSource instanceof _ej2Data.DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;
      var index = listDataSource.indexOf(dataSource);

      if (index !== -1) {
        listDataSource.splice(index, 1);
        this.listViewInstance.setViewDataSource(listDataSource);
      } // recollect all the list item into collection


      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
    };

    Virtualization.prototype.setCheckboxLI = function (li, e) {
      var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;

      if (li.classList.contains(_listView.classNames.selected)) {
        if (this.uiIndices.activeIndices.indexOf(index) === -1) {
          this.uiIndices.activeIndices.push(index);
        }
      } else {
        this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
      }
    };

    Virtualization.prototype.setSelectLI = function (li, e) {
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;
    };

    Virtualization.prototype.checkedItem = function (checked) {
      if (checked) {
        this.uiIndices.activeIndices = [];
        this.activeIndex = undefined;
        var data = this.listViewInstance.curViewDS;

        for (var index = 0; index < data.length; index++) {
          if (!data[index].isHeader) {
            this.uiIndices.activeIndices.push(index);
          }
        }
      } else {
        this.activeIndex = undefined;
        this.uiIndices.activeIndices = [];
      }
    };

    Virtualization.prototype.addUiItem = function (index) {
      // virtually new add list item based on the scollbar position
      // if the scroll bar is at the top, just pretend the new item has been added since no UI
      // change is required for the item that has been added at last but when scroll bar is at the bottom
      // just detach top and inject into bottom to mimic new item is added
      var curViewDs = this.listViewInstance.curViewDS;
      this.changeUiIndices(index, true);

      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex++;
      }

      if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
        this.uiIndices.activeIndices.push(index);
      }

      if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
      }

      if (parseFloat(this.bottomElement.style.height)) {
        var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
        var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);

        if (target) {
          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';
          this.updateUI(liItem, index, target);
        }
      } else {
        var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;
        var target = void 0;

        if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
          target = this.listViewInstance.curUL.lastElementChild;
        } else {
          target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        }

        this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';
        this.uiFirstIndex++;
        this.uiLastIndex++;

        if (target) {
          this.updateUI(liItem, index, target);
          this.listViewInstance.isWindow ? window.scrollTo(0, pageYOffset + this.listItemHeight) : this.listViewInstance.element.scrollTop += this.listItemHeight;
        }
      }

      this.totalHeight += this.listItemHeight;
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };

    Virtualization.prototype.removeUiItem = function (index) {
      this.totalHeight -= this.listItemHeight;
      var curViewDS = this.listViewInstance.curViewDS[index];
      var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
      this.listViewInstance.curViewDS.splice(index, 1);

      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex--;
      }

      if (liItem) {
        if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
          (0, _ej2Base.detach)(liItem);
          this.domItemCount--;
          this.uiLastIndex--;
          this.totalHeight = 0;
        } else {
          if (liItem.classList.contains(_listView.classNames.disable)) {
            liItem.classList.remove(_listView.classNames.disable);
            this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
          }

          if (liItem.style.display === 'none') {
            liItem.style.display = '';
            this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
          }

          if (this.listViewInstance.showCheckBox && liItem.classList.contains(_listView.classNames.selected)) {
            this.listViewInstance.removeSelect();
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
            var checklistElement = liItem.querySelector('.' + _listView.classNames.checkboxWrapper);
            checklistElement.removeAttribute('aria-checked');
            checklistElement.firstElementChild.classList.remove(_listView.classNames.checked);

            if (liItem.classList.contains(_listView.classNames.focused)) {
              liItem.classList.remove(_listView.classNames.focused);
              this.activeIndex = undefined;
            }
          } else if (liItem.classList.contains(_listView.classNames.selected)) {
            this.listViewInstance.removeSelect();
            this.activeIndex = undefined;
          }

          if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else if (parseFloat(this.bottomElement.style.height)) {
            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else {
            this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';
            this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
            this.uiLastIndex--;
            this.uiFirstIndex--;
          }
        }
      }

      this.changeUiIndices(index, false);
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };

    Virtualization.prototype.changeUiIndices = function (index, increment) {
      var keys = Object.keys(this.uiIndices);

      for (var ind = 0; ind < keys.length; ind++) {
        this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(function (i) {
          if (i >= index) {
            return increment ? ++i : --i;
          } else {
            return i;
          }
        });
      }
    };

    Virtualization.prototype.addItem = function (data, fields, dataSource) {
      for (var i = 0; i < data.length; i++) {
        var currentItem = data[i]; // push the given data to main data array

        dataSource.push(currentItem); // recalculate all the group data or other datasource related things

        this.listViewInstance.setViewDataSource(dataSource); // render list items for first time due to no datasource present earlier

        if (!this.domItemCount) {
          // fresh rendering for first time
          if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
            this.listViewInstance.listBaseOption.template = null;
            this.listViewInstance.listBaseOption.groupTemplate = null;
            this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
          }

          this.uiVirtualization(); // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM
        } else if (this.domItemCount < this.expectedDomItemCount) {
          var ds = this.listViewInstance.findItemFromDS(dataSource, fields);

          if (ds instanceof Array) {
            if (this.listViewInstance.ulElement) {
              var index = this.listViewInstance.curViewDS.indexOf(currentItem); // inject new list item into DOM

              this.createAndInjectNewItem(currentItem, index); // check for group header item

              var curViewDS = this.listViewInstance.curViewDS[index - 1];

              if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
                // target group item index in datasource
                --index; // inject new group header into DOM for previously created list item

                this.createAndInjectNewItem(curViewDS, index);
              }
            } // recollect all the list item into collection


            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');
          }
        } else {
          var index = this.listViewInstance.curViewDS.indexOf(currentItem); // virtually new add list item based on the scollbar position

          this.addUiItem(index); // check for group header item needs to be added

          var curViewDS = this.listViewInstance.curViewDS[index - 1];

          if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
            this.addUiItem(index - 1);
          }
        }
      }
    };

    Virtualization.prototype.createAndInjectNewItem = function (itemData, index) {
      // generate li item for given datasource
      var target;

      var li = _listBase.ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption); // check for target element whether to insert before last item or group item


      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
        target = this.listViewInstance.curUL.lastElementChild;
      } else {
        // target group header's first child item to append its header
        target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
      } // insert before the target element


      this.listViewInstance.ulElement.insertBefore(li[0], target); // increment internal DOM count, last index count for new element

      this.domItemCount++;

      if (this.bottomElementHeight <= 0) {
        this.uiLastIndex++;
      } // recalculate the current item height, to avoid jumpy scroller


      this.refreshItemHeight();
    };

    Virtualization.prototype.createUIItem = function (args) {
      var template = this.listViewInstance.createElement('div');
      var commonTemplate = '<div class="e-text-content" role="presentation"> ' + '<span class="e-list-text"> ${' + this.listViewInstance.fields.text + '} </span></div>';
      template.innerHTML = this.listViewInstance.template || commonTemplate; // tslint:disable-next-line:no-any

      var templateElements = template.getElementsByTagName('*');
      var groupTemplate = this.listViewInstance.createElement('div');

      if (this.listViewInstance.fields.groupBy) {
        groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;
      } // tslint:disable-next-line:no-any


      var groupTemplateElements = groupTemplate.getElementsByTagName('*');

      if (args.curData.isHeader) {
        this.headerData = args.curData;
      }

      this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;
      args.item.innerHTML = '';
      args.item.context = {
        data: args.curData,
        nodes: {
          flatTemplateNodes: [],
          groupTemplateNodes: []
        }
      };

      for (var i = 0; i < templateElements.length; i++) {
        this.compileTemplate(templateElements[i], args.item, false);
      }

      for (var i = 0; i < groupTemplateElements.length; i++) {
        this.compileTemplate(groupTemplateElements[i], args.item, true);
      }

      args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;
      args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';
      var element = args.curData.isHeader ? groupTemplate : template;
      args.item.insertBefore(element.firstElementChild, null);
    };

    Virtualization.prototype.compileTemplate = function (element, item, isHeader) {
      this.textProperty(element, item, isHeader);
      this.classProperty(element, item, isHeader);
      this.attributeProperty(element, item, isHeader);
    };

    Virtualization.prototype.onChange = function (newData, listElement) {
      listElement.context.data = newData;
      var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;
      var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;

      if (!(0, _ej2Base.isNullOrUndefined)(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {
        var element = listElement.firstElementChild;
        (0, _ej2Base.detach)(listElement.firstElementChild);
        listElement.insertBefore(listElement.context.template, null);
        listElement.context.template = element;
        listElement.context.type = 'flatList';

        for (var i = 0; i < groupTemplateNodes.length; i++) {
          groupTemplateNodes[i].onChange(newData);
        }
      } else if (!newData.isHeader && listElement.context.type === 'flatList') {
        var element = listElement.firstElementChild;
        (0, _ej2Base.detach)(listElement.firstElementChild);
        listElement.insertBefore(listElement.context.template, null);
        listElement.context.template = element;
        listElement.context.type = 'groupList';

        for (var i = 0; i < flatTemplateNodes.length; i++) {
          flatTemplateNodes[i].onChange(newData);
        }
      } else if (!newData.isHeader) {
        for (var i = 0; i < flatTemplateNodes.length; i++) {
          flatTemplateNodes[i].onChange(newData);
        }
      } else {
        for (var i = 0; i < groupTemplateNodes.length; i++) {
          groupTemplateNodes[i].onChange(newData);
        }
      }
    };

    Virtualization.prototype.updateContextData = function (listElement, node, isHeader) {
      if (isHeader) {
        listElement.context.nodes.groupTemplateNodes.push(node);
      } else {
        listElement.context.nodes.flatTemplateNodes.push(node);
      }
    };

    Virtualization.prototype.classProperty = function (element, listElement, isHeader) {
      var regex = new RegExp('\\${([^}]*)}', 'g');
      var resultantOutput = [];
      var regexMatch;

      while (regexMatch !== null) {
        var match = regex.exec(element.className);
        resultantOutput.push(match);
        regexMatch = match;

        if (regexMatch === null) {
          resultantOutput.pop();
        }
      }

      if (resultantOutput && resultantOutput.length) {
        var _loop_1 = function (i) {
          var classNameMatch = resultantOutput[i];
          var classFunction;

          if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {
            // tslint:disable-next-line:no-function-constructor-with-string-args
            classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\$/g, 'data.'));
          } else {
            // tslint:disable-next-line:no-function-constructor-with-string-args
            classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);
          }

          var subNode = {};

          if (isHeader) {
            subNode.bindedvalue = classFunction(this_1.headerData);
          } else {
            subNode.bindedvalue = classFunction(this_1.templateData);
          }

          subNode.onChange = function (value) {
            if (subNode.bindedvalue) {
              (0, _ej2Base.removeClass)([element], subNode.bindedvalue.split(' ').filter(function (css) {
                return css;
              }));
            }

            var newCss = classFunction(value);

            if (newCss) {
              (0, _ej2Base.addClass)([element], newCss.split(' ').filter(function (css) {
                return css;
              }));
            }

            subNode.bindedvalue = newCss;
          };

          var className = classNameMatch[0].split(' ');

          for (var i_1 = 0; i_1 < className.length; i_1++) {
            element.classList.remove(className[i_1]);
          }

          if (subNode.bindedvalue) {
            (0, _ej2Base.addClass)([element], subNode.bindedvalue.split(' ').filter(function (css) {
              return css;
            }));
          }

          this_1.updateContextData(listElement, subNode, isHeader);
        };

        var this_1 = this;

        for (var i = 0; i < resultantOutput.length; i++) {
          _loop_1(i);
        }
      }
    };

    Virtualization.prototype.attributeProperty = function (element, listElement, isHeader) {
      var attributeNames = [];

      for (var i = 0; i < element.attributes.length; i++) {
        attributeNames.push(element.attributes[i].nodeName);
      }

      if (attributeNames.indexOf('class') !== -1) {
        attributeNames.splice(attributeNames.indexOf('class'), 1);
      }

      var _loop_2 = function (i) {
        var attributeName = attributeNames[i];
        var attrNameMatch = new RegExp('\\${([^}]*)}', 'g').exec(attributeName) || [];
        var attrValueMatch = new RegExp('\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName)) || [];
        var attributeNameFunction;
        var attributeValueFunction;

        if (attrNameMatch.length || attrValueMatch.length) {
          if (attrNameMatch[1]) {
            // tslint:disable-next-line:no-function-constructor-with-string-args
            attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);
          }

          if (attrValueMatch[1]) {
            if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {
              // tslint:disable-next-line:no-function-constructor-with-string-args
              attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\$/g, 'data.'));
            } else {
              // tslint:disable-next-line:no-function-constructor-with-string-args
              attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);
            }
          }

          var subNode_1 = {};

          if (isHeader) {
            subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this_2.headerData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this_2.headerData)];
          } else {
            subNode_1.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this_2.templateData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this_2.templateData)];
          }

          subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ? attributeName : subNode_1.bindedvalue[0];

          subNode_1.onChange = function (value) {
            var bindedvalue = subNode_1.bindedvalue[1] === undefined ? element.getAttribute(subNode_1.attrName) : attributeValueFunction(value);
            element.removeAttribute(subNode_1.attrName);
            subNode_1.attrName = subNode_1.bindedvalue[0] === undefined ? subNode_1.attrName : attributeNameFunction(value);
            element.setAttribute(subNode_1.attrName, bindedvalue);
            subNode_1.bindedvalue = [subNode_1.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value), subNode_1.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];
          };

          var attributeValue = subNode_1.bindedvalue[1] === undefined ? element.getAttribute(attributeName) : subNode_1.bindedvalue[1];
          element.removeAttribute(attributeName);
          element.setAttribute(subNode_1.attrName, attributeValue);
          this_2.updateContextData(listElement, subNode_1, isHeader);
        }
      };

      var this_2 = this;

      for (var i = 0; i < attributeNames.length; i++) {
        _loop_2(i);
      }
    };

    Virtualization.prototype.textProperty = function (element, listElement, isHeader) {
      var regex = new RegExp('\\${([^}]*)}', 'g');
      var resultantOutput = [];
      var regexMatch;

      while (regexMatch !== null) {
        var match = regex.exec(element.innerText);
        resultantOutput.push(match);
        regexMatch = match;

        if (regexMatch === null) {
          resultantOutput.pop();
        }
      }

      var isChildHasTextContent = Array.prototype.some.call(element.children, function (element) {
        if (new RegExp('\\${([^}]*)}', 'g').exec(element.innerText)) {
          return true;
        } else {
          return false;
        }
      });

      if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {
        var _loop_3 = function (i) {
          var textPropertyMatch = resultantOutput[i];
          var subNode = {};
          var textFunction;

          if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {
            // tslint:disable-next-line:no-function-constructor-with-string-args
            textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\$/g, 'data.'));
          } else {
            // tslint:disable-next-line:no-function-constructor-with-string-args
            textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);
          }

          if (isHeader) {
            subNode.bindedvalue = textFunction(this_3.headerData);
          } else {
            subNode.bindedvalue = textFunction(this_3.templateData);
          }

          subNode.onChange = function (value) {
            element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));
            subNode.bindedvalue = textFunction(value);
          };

          element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);
          this_3.updateContextData(listElement, subNode, isHeader);
        };

        var this_3 = this;

        for (var i = 0; i < resultantOutput.length; i++) {
          _loop_3(i);
        }
      }
    };

    Virtualization.prototype.reRenderUiVirtualization = function () {
      this.wireScrollEvent(true);

      if (this.listViewInstance.contentContainer) {
        (0, _ej2Base.detach)(this.listViewInstance.contentContainer);
      }

      this.listViewInstance.preRender(); // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero
      // and then manually adding item using addItem API

      this.domItemCount = 0;
      this.listViewInstance.header();
      this.listViewInstance.setLocalData();
    };

    Virtualization.prototype.updateUI = function (element, index, targetElement) {
      var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;

      if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
        var curViewDS = this.listViewInstance.curViewDS[index];
        element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id].toString() : _listBase.ListBase.generateId();
        onChange(curViewDS, element, this);
      } else {
        this.updateUiContent(element, index);
      }

      this.changeElementAttributes(element, index);

      if (targetElement) {
        this.listViewInstance.ulElement.insertBefore(element, targetElement);
      }
    };

    Virtualization.prototype.onNgChange = function (newData, listElement, virtualThis) {
      // compile given target element with template for new data
      var templateCompiler = (0, _ej2Base.compile)(virtualThis.listViewInstance.template);
      var resultElement = templateCompiler(newData);

      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }

      listElement.appendChild(resultElement[0]);
    };

    Virtualization.prototype.getModuleName = function () {
      return 'virtualization';
    };

    Virtualization.prototype.destroy = function () {
      this.wireScrollEvent(true);
    };

    return Virtualization;
  }();

  _exports.Virtualization = Virtualization;
});;
define('@syncfusion/ej2-lists/src/sortable/index',["exports", "./sortable"], function (_exports, _sortable) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_sortable).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _sortable[key];
  });
});;
define('@syncfusion/ej2-lists/src/sortable/sortable',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.moveTo = moveTo;
  _exports.Sortable = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * Sortable Module provides support to enable sortable functionality in Dom Elements.
   * ```html
   * <div id="sortable">
   *   <div>Item 1</div>
   *   <div>Item 2</div>
   *   <div>Item 3</div>
   *   <div>Item 4</div>
   *   <div>Item 5</div>
   * </div>
   * ```
   * ```typescript
   *   let ele: HTMLElement = document.getElementById('sortable');
   *   let sortObj: Sortable = new Sortable(ele, {});
   * ```
   */
  var Sortable =
  /** @class */
  function (_super) {
    __extends(Sortable, _super);

    function Sortable(element, options) {
      var _this = _super.call(this, options, element) || this;

      _this.getHelper = function (e) {
        var target = _this.getSortableElement(e.sender.target);

        if (!_this.isValidTarget(target, _this)) {
          return false;
        }

        var element;

        if (_this.helper) {
          element = _this.helper({
            sender: target,
            element: e.element
          });
        } else {
          element = target.cloneNode(true);
          element.style.width = target.offsetWidth + "px";
          element.style.height = target.offsetHeight + "px";
        }

        (0, _ej2Base.addClass)([element], ['e-sortableclone']);

        _this.element.appendChild(element);

        return element;
      };

      _this.onDrag = function (e) {
        _this.trigger('drag', {
          event: e.event,
          element: _this.element,
          target: e.target
        });

        var newInst = _this.getSortableInstance(e.target);

        var target = _this.getSortableElement(e.target, newInst);

        if (_this.isValidTarget(target, newInst) && _this.curTarget !== target && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
          _this.curTarget = target;

          var oldIdx = _this.getIndex(newInst.placeHolderElement, newInst);

          oldIdx = (0, _ej2Base.isNullOrUndefined)(oldIdx) ? _this.getIndex(_this.target) : _this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
          newInst.placeHolderElement = _this.getPlaceHolder(target, newInst);

          var newIdx = _this.getIndex(target, newInst);

          var idx = newInst.element !== _this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;

          if (newInst.placeHolderElement) {
            if (newInst.element !== _this.element && idx === newInst.element.childElementCount - 1) {
              newInst.element.appendChild(newInst.placeHolderElement);
            } else {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[idx]);
            }

            _this.refreshDisabled(oldIdx, newIdx, newInst);
          } else {
            _this.updateItemClass(newInst);

            newInst.element.insertBefore(_this.target, newInst.element.children[idx]);

            _this.refreshDisabled(oldIdx, newIdx, newInst);

            _this.curTarget = _this.target;

            _this.trigger('drop', {
              event: e.event,
              element: newInst.element,
              previousIndex: oldIdx,
              currentIndex: newIdx,
              target: e.target,
              helper: newInst.element.lastChild,
              droppedElement: _this.target,
              scope: _this.scope
            });
          }
        }

        newInst = _this.getSortableInstance(_this.curTarget);

        if ((0, _ej2Base.isNullOrUndefined)(target) && e.target !== newInst.placeHolderElement) {
          if (_this.isPlaceHolderPresent(newInst)) {
            _this.removePlaceHolder(newInst);
          }
        } else {
          var placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));
          var inst_1;
          placeHolders.forEach(function (placeHolder) {
            inst_1 = _this.getSortableInstance(placeHolder);

            if (inst_1.element && inst_1 !== newInst) {
              _this.removePlaceHolder(inst_1);
            }
          });
        }
      };

      _this.onDragStart = function (e) {
        _this.target = _this.getSortableElement(e.target);

        _this.target.classList.add('e-grabbed');

        _this.curTarget = _this.target;

        if (_ej2Base.isBlazor) {
          _this.trigger('dragStart', {
            event: e.event,
            element: _this.element,
            target: _this.target,
            bindEvents: e.bindEvents,
            dragElement: e.dragElement
          });
        } else {
          _this.trigger('dragStart', {
            event: e.event,
            element: _this.element,
            target: _this.target
          });
        }
      };

      _this.onDragStop = function (e) {
        var dropInst = _this.getSortableInstance(_this.curTarget);

        var prevIdx;
        var curIdx;
        prevIdx = _this.getIndex(_this.target);

        if (_this.isPlaceHolderPresent(dropInst)) {
          var curIdx_1 = _this.getIndex(dropInst.placeHolderElement, dropInst);

          var args = {
            previousIndex: prevIdx,
            currentIndex: curIdx_1,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false
          };

          _this.trigger('beforeDrop', args, function (observedArgs) {
            if (!observedArgs.cancel) {
              _this.updateItemClass(dropInst);

              dropInst.element.insertBefore(_this.target, dropInst.placeHolderElement);

              var curIdx_2 = _this.getIndex(_this.target, dropInst);

              prevIdx = _this === dropInst && prevIdx - curIdx_2 > 1 ? prevIdx - 1 : prevIdx;

              _this.trigger('drop', {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx_2,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope
              });
            }

            (0, _ej2Base.remove)(dropInst.placeHolderElement);
          });
        }

        dropInst = _this.getSortableInstance(e.target);
        curIdx = dropInst.element.childElementCount;
        prevIdx = _this.getIndex(_this.target);

        if (dropInst.element === e.target) {
          var beforeDropArgs = {
            previousIndex: prevIdx,
            currentIndex: curIdx,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false
          };

          _this.trigger('beforeDrop', beforeDropArgs, function (observedArgs) {
            if (!observedArgs.cancel) {
              _this.updateItemClass(dropInst);

              dropInst.element.appendChild(_this.target);

              _this.trigger('drop', {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope
              });
            }
          });
        }

        _this.target.classList.remove('e-grabbed');

        _this.target = null;
        _this.curTarget = null;
        (0, _ej2Base.remove)(e.helper);
        (0, _ej2Base.getComponent)(_this.element, _ej2Base.Draggable).intDestroy(e.event);
      };

      _this.bind();

      return _this;
    }

    Sortable_1 = Sortable;

    Sortable.prototype.bind = function () {
      if (!this.element.id) {
        this.element.id = (0, _ej2Base.getUniqueID)('sortable');
      }

      if (!this.itemClass) {
        this.itemClass = 'e-sort-item';
        this.dataBind();
      }

      this.initializeDraggable();
    };

    Sortable.prototype.initializeDraggable = function () {
      new _ej2Base.Draggable(this.element, {
        helper: this.getHelper,
        dragStart: this.onDragStart,
        drag: this.onDrag,
        dragStop: this.onDragStop,
        dragTarget: "." + this.itemClass,
        enableTapHold: true,
        tapHoldThreshold: 200,
        queryPositionInfo: this.queryPositionInfo
      });
    };

    Sortable.prototype.getPlaceHolder = function (target, instance) {
      if (instance.placeHolder) {
        if (this.isPlaceHolderPresent(instance)) {
          (0, _ej2Base.remove)(instance.placeHolderElement);
        }

        instance.placeHolderElement = instance.placeHolder({
          element: instance.element,
          grabbedElement: this.target,
          target: target
        });
        instance.placeHolderElement.classList.add('e-sortable-placeholder');
        return instance.placeHolderElement;
      }

      return null;
    };

    Sortable.prototype.isValidTarget = function (target, instance) {
      return target && (0, _ej2Base.compareElementParent)(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains('e-disabled');
    };

    Sortable.prototype.removePlaceHolder = function (instance) {
      (0, _ej2Base.remove)(instance.placeHolderElement);
      instance.placeHolderElement = null;
    };

    Sortable.prototype.updateItemClass = function (instance) {
      if (this !== instance) {
        this.target.classList.remove(this.itemClass);
        this.target.classList.add(instance.itemClass);
      }
    };

    Sortable.prototype.getSortableInstance = function (element) {
      element = (0, _ej2Base.closest)(element, ".e-" + this.getModuleName());

      if (element) {
        var inst = (0, _ej2Base.getComponent)(element, Sortable_1);
        return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
      } else {
        return this;
      }
    };

    Sortable.prototype.refreshDisabled = function (oldIdx, newIdx, instance) {
      if (instance === this) {
        var element = void 0;
        var increased = oldIdx < newIdx;
        var disabledIdx = void 0;
        var start = increased ? oldIdx : newIdx;
        var end = increased ? newIdx : oldIdx;

        while (start <= end) {
          element = this.element.children[start];

          if (element.classList.contains('e-disabled')) {
            disabledIdx = this.getIndex(element);
            this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);
            start = increased ? disabledIdx + 2 : disabledIdx + 1;
          } else {
            start++;
          }
        }
      }
    };

    Sortable.prototype.getIndex = function (target, instance) {
      if (instance === void 0) {
        instance = this;
      }

      var idx;
      [].slice.call(instance.element.children).forEach(function (element, index) {
        if (element === target) {
          idx = index;
        }
      });
      return idx;
    };

    Sortable.prototype.getSortableElement = function (element, instance) {
      if (instance === void 0) {
        instance = this;
      }

      return (0, _ej2Base.closest)(element, "." + instance.itemClass);
    };

    Sortable.prototype.queryPositionInfo = function (value) {
      value.left = pageXOffset ? parseFloat(value.left) - pageXOffset + "px" : value.left;
      value.top = pageYOffset ? parseFloat(value.top) - pageYOffset + "px" : value.top;
      return value;
    };

    Sortable.prototype.isPlaceHolderPresent = function (instance) {
      return instance.placeHolderElement && !!(0, _ej2Base.closest)(instance.placeHolderElement, "#" + instance.element.id);
    };
    /**
     * It is used to sort array of elements from source element to destination element.
     * @param destination - Defines the destination element to which the sortable elements needs to be appended.
     * If it is null, then the Sortable library element will be considered as destination.
     * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.
     * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.
     * If it is null, elements will be appended as last child.
     * @method moveTo
     * @return {void}
     */


    Sortable.prototype.moveTo = function (destination, targetIndexes, insertBefore) {
      moveTo(this.element, destination, targetIndexes, insertBefore);
    };
    /**
     * It is used to destroy the Sortable library.
     */


    Sortable.prototype.destroy = function () {
      if (this.itemClass === 'e-sort-item') {
        this.itemClass = null;
        this.dataBind();
      }

      (0, _ej2Base.getComponent)(this.element, _ej2Base.Draggable).destroy();

      _super.prototype.destroy.call(this);
    };

    Sortable.prototype.getModuleName = function () {
      return 'sortable';
    };

    Sortable.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'itemClass':
            [].slice.call(this.element.children).forEach(function (element) {
              if (element.classList.contains(oldProp.itemClass)) {
                element.classList.remove(oldProp.itemClass);
              }

              if (newProp.itemClass) {
                element.classList.add(newProp.itemClass);
              }
            });
            break;
        }
      }
    };

    var Sortable_1;

    __decorate([(0, _ej2Base.Property)(false)], Sortable.prototype, "enableAnimation", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Sortable.prototype, "itemClass", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Sortable.prototype, "scope", void 0);

    __decorate([(0, _ej2Base.Property)()], Sortable.prototype, "helper", void 0);

    __decorate([(0, _ej2Base.Property)()], Sortable.prototype, "placeHolder", void 0);

    __decorate([(0, _ej2Base.Event)()], Sortable.prototype, "drag", void 0);

    __decorate([(0, _ej2Base.Event)()], Sortable.prototype, "dragStart", void 0);

    __decorate([(0, _ej2Base.Event)()], Sortable.prototype, "beforeDrop", void 0);

    __decorate([(0, _ej2Base.Event)()], Sortable.prototype, "drop", void 0);

    Sortable = Sortable_1 = __decorate([_ej2Base.NotifyPropertyChanges], Sortable);
    return Sortable;
  }(_ej2Base.Base);

  _exports.Sortable = Sortable;

  /**
   * It is used to sort array of elements from source element to destination element.
   * @private
   */
  function moveTo(from, to, targetIndexes, insertBefore) {
    var targetElements = [];

    if (!to) {
      to = from;
    }

    if (targetIndexes && targetIndexes.length) {
      targetIndexes.forEach(function (index) {
        targetElements.push(from.children[index]);
      });
    } else {
      targetElements = [].slice.call(from.children);
    }

    if ((0, _ej2Base.isNullOrUndefined)(insertBefore)) {
      targetElements.forEach(function (target) {
        to.appendChild(target);
      });
    } else {
      var insertElement_1 = to.children[insertBefore];
      targetElements.forEach(function (target) {
        to.insertBefore(target, insertElement_1);
      });
    }
  }
});;
define('@syncfusion/ej2-navigations/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-navigations/src/accordion/accordion',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.Accordion = _exports.AccordionItem = _exports.AccordionAnimationSettings = _exports.AccordionActionSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_ACRDN_ROOT = 'e-acrdn-root';
  var CLS_ROOT = 'e-accordion';
  var CLS_ITEM = 'e-acrdn-item';
  var CLS_ITEMFOCUS = 'e-item-focus';
  var CLS_ITEMHIDE = 'e-hide';
  var CLS_HEADER = 'e-acrdn-header';
  var CLS_HEADERICN = 'e-acrdn-header-icon';
  var CLS_HEADERCTN = 'e-acrdn-header-content';
  var CLS_CONTENT = 'e-acrdn-panel';
  var CLS_CTENT = 'e-acrdn-content';
  var CLS_TOOGLEICN = 'e-toggle-icon';
  var CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';
  var CLS_EXPANDICN = 'e-expand-icon';
  var CLS_RTL = 'e-rtl';
  var CLS_CTNHIDE = 'e-content-hide';
  var CLS_SLCT = 'e-select';
  var CLS_SLCTED = 'e-selected';
  var CLS_ACTIVE = 'e-active';
  var CLS_ANIMATE = 'e-animate';
  var CLS_DISABLE = 'e-overlay';
  var CLS_TOGANIMATE = 'e-toggle-animation';
  var CLS_NEST = 'e-nested';
  var CLS_EXPANDSTATE = 'e-expand-state';
  var CLS_CONTAINER = 'e-accordion-container';

  var AccordionActionSettings =
  /** @class */
  function (_super) {
    __extends(AccordionActionSettings, _super);

    function AccordionActionSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('SlideDown')], AccordionActionSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)(400)], AccordionActionSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('linear')], AccordionActionSettings.prototype, "easing", void 0);

    return AccordionActionSettings;
  }(_ej2Base.ChildProperty);

  _exports.AccordionActionSettings = AccordionActionSettings;

  var AccordionAnimationSettings =
  /** @class */
  function (_super) {
    __extends(AccordionAnimationSettings, _super);

    function AccordionAnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideUp',
      duration: 400,
      easing: 'linear'
    }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "collapse", void 0);

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideDown',
      duration: 400,
      easing: 'linear'
    }, AccordionActionSettings)], AccordionAnimationSettings.prototype, "expand", void 0);

    return AccordionAnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.AccordionAnimationSettings = AccordionAnimationSettings;

  /**
   * An item object that is used to configure Accordion items.
   */
  var AccordionItem =
  /** @class */
  function (_super) {
    __extends(AccordionItem, _super);

    function AccordionItem() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(null)], AccordionItem.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AccordionItem.prototype, "header", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AccordionItem.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(null)], AccordionItem.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)(false)], AccordionItem.prototype, "expanded", void 0);

    return AccordionItem;
  }(_ej2Base.ChildProperty);

  _exports.AccordionItem = AccordionItem;

  /**
   * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.
   * ```html
   * <div id='accordion'/>
   * <script>
   *   var accordionObj = new Accordion();
   *   accordionObj.appendTo('#accordion');
   * </script>
   * ```
   */
  var Accordion =
  /** @class */
  function (_super) {
    __extends(Accordion, _super);
    /**
     * Initializes a new instance of the Accordion class.
     * @param options  - Specifies Accordion model properties as options.
     * @param element  - Specifies the element that is rendered as an Accordion.
     */


    function Accordion(options, element) {
      var _this = _super.call(this, options, element) || this;
      /**
       * Contains the keyboard configuration of the Accordion.
       */


      _this.keyConfigs = {
        moveUp: 'uparrow',
        moveDown: 'downarrow',
        enter: 'enter',
        space: 'space',
        home: 'home',
        end: 'end'
      };
      return _this;
    }
    /**
     * Removes the control from the DOM and also removes all its related events.
     * @returns void
     */


    Accordion.prototype.destroy = function () {
      var _this = this;

      var ele = this.element;
      this.resetBlazorTemplates();

      _super.prototype.destroy.call(this);

      this.unwireEvents();
      this.isDestroy = true;
      this.restoreContent(null);
      [].slice.call(ele.children).forEach(function (el) {
        if (!el.classList.contains('blazor-template')) {
          ele.removeChild(el);
        }
      });

      if (this.trgtEle) {
        while (this.ctrlTem.firstElementChild) {
          ele.appendChild(this.ctrlTem.firstElementChild);
        }
      }

      ele.classList.remove(CLS_ACRDN_ROOT);
      ele.removeAttribute('style');
      ['aria-disabled', 'aria-multiselectable', 'role', 'data-ripple'].forEach(function (attrb) {
        _this.element.removeAttribute(attrb);
      });
    };

    Accordion.prototype.preRender = function () {
      var nested = (0, _ej2Base.closest)(this.element, '.' + CLS_CONTENT);
      this.isNested = false;
      this.templateEle = [];

      if (!this.isDestroy) {
        this.isDestroy = false;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(nested)) {
        nested.classList.add(CLS_NEST);
        this.isNested = true;
      } else {
        this.element.classList.add(CLS_ACRDN_ROOT);
      }

      if (this.enableRtl) {
        this.add(this.element, CLS_RTL);
      }

      if (!this.enablePersistence || (0, _ej2Base.isNullOrUndefined)(this.expandedItems)) {
        this.expandedItems = [];
      }
    };

    Accordion.prototype.resetBlazorTemplates = function () {
      var _this = this;

      if ((0, _ej2Base.isBlazor)() && !this.isStringTemplate) {
        if (this.itemTemplate) {
          // tslint:disable-next-line:no-any
          _ej2Base.blazorTemplates[this.element.id + '_itemTemplate'] = [];
          (0, _ej2Base.resetBlazorTemplate)(this.element.id + '_itemTemplate', 'ItemTemplate');
        }

        if (this.headerTemplate) {
          // tslint:disable-next-line:no-any
          _ej2Base.blazorTemplates[this.element.id + '_headerTemplate'] = [];
          (0, _ej2Base.resetBlazorTemplate)(this.element.id + '_headerTemplate', 'HeaderTemplate');
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.items)) {
          this.items.forEach(function (item, index) {
            if (item && item.header && item.header.indexOf('<div>Blazor') === 0) {
              // tslint:disable-next-line:no-any
              _ej2Base.blazorTemplates[_this.element.id + index + '_header'] = [];
              (0, _ej2Base.resetBlazorTemplate)(_this.element.id + index + '_header', 'HeaderTemplate');
            }

            if (item && item.content && item.content.indexOf('<div>Blazor') === 0) {
              // tslint:disable-next-line:no-any
              _ej2Base.blazorTemplates[_this.element.id + index + '_content'] = [];
              (0, _ej2Base.resetBlazorTemplate)(_this.element.id + index + '_content', 'ContentTemplate');
            }
          });
        }
      }
    };

    Accordion.prototype.add = function (ele, val) {
      ele.classList.add(val);
    };

    Accordion.prototype.remove = function (ele, val) {
      ele.classList.remove(val);
    };
    /**
     * To initialize the control rendering
     * @private
     */


    Accordion.prototype.render = function () {
      this.initializeheaderTemplate();
      this.initializeItemTemplate();
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };

    Accordion.prototype.initialize = function () {
      var width = (0, _ej2Base.formatUnit)(this.width);
      var height = (0, _ej2Base.formatUnit)(this.height);
      (0, _ej2Base.setStyleAttribute)(this.element, {
        'width': width,
        'height': height
      });
      var ariaAttr = {
        'aria-disabled': 'false',
        'role': 'presentation',
        'aria-multiselectable': 'true'
      };

      if (this.expandedItems.length > 0) {
        this.initExpand = this.expandedItems;
      }

      (0, _ej2Base.attributes)(this.element, ariaAttr);

      if (this.expandMode === 'Single') {
        this.element.setAttribute('aria-multiselectable', 'false');
      }
    };

    Accordion.prototype.renderControl = function () {
      this.trgtEle = this.element.children.length > 0 && !((0, _ej2Base.isBlazor)() && !this.isStringTemplate) ? (0, _ej2Base.select)('div', this.element) : null;
      this.renderItems();
      this.initItemExpand();
    };

    Accordion.prototype.unwireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

      if (!(0, _ej2Base.isNullOrUndefined)(this.keyModule)) {
        this.keyModule.destroy();
      }
    };

    Accordion.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

      if (!this.isNested && !this.isDestroy) {
        (0, _ej2Base.rippleEffect)(this.element, {
          selector: '.' + CLS_HEADER
        });
      }

      if (!this.isNested) {
        this.keyModule = new _ej2Base.KeyboardEvents(this.element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigs,
          eventName: 'keydown'
        });
      }
    };

    Accordion.prototype.templateParser = function (template) {
      if (template) {
        try {
          if (document.querySelectorAll(template).length) {
            return (0, _ej2Base.compile)(document.querySelector(template).innerHTML.trim());
          }
        } catch (error) {
          return (0, _ej2Base.compile)(template);
        }
      }

      return undefined;
    };

    Accordion.prototype.initializeheaderTemplate = function () {
      if (this.headerTemplate) {
        this.headerTemplateFn = this.templateParser(this.headerTemplate);
      }
    };

    Accordion.prototype.initializeItemTemplate = function () {
      if (this.itemTemplate) {
        this.itemTemplateFn = this.templateParser(this.itemTemplate);
      }
    };

    Accordion.prototype.getheaderTemplate = function () {
      return this.headerTemplateFn;
    };

    Accordion.prototype.getItemTemplate = function () {
      return this.itemTemplateFn;
    };

    Accordion.prototype.updateContentBlazorTemplate = function (item, index) {
      if (this.itemTemplate && (0, _ej2Base.isBlazor)() && !this.isStringTemplate) {
        (0, _ej2Base.updateBlazorTemplate)(this.element.id + '_itemTemplate', 'ItemTemplate', this, false);
      }

      if (item && item.content && (0, _ej2Base.isBlazor)() && !this.isStringTemplate && item.content.indexOf('<div>Blazor') === 0) {
        (0, _ej2Base.updateBlazorTemplate)(this.element.id + index + '_content', 'ContentTemplate', item);
      }
    };

    Accordion.prototype.updateHeaderBlazorTemplate = function (item, index) {
      if (this.headerTemplate && (0, _ej2Base.isBlazor)() && !this.isStringTemplate) {
        (0, _ej2Base.updateBlazorTemplate)(this.element.id + '_headerTemplate', 'HeaderTemplate', this, false);
      }

      if (item && item.header && (0, _ej2Base.isBlazor)() && !this.isStringTemplate && item.header.indexOf('<div>Blazor') === 0) {
        (0, _ej2Base.updateBlazorTemplate)(this.element.id + index + '_header', 'HeaderTemplate', item);
      }
    };

    Accordion.prototype.focusIn = function (e) {
      e.target.parentElement.classList.add(CLS_ITEMFOCUS);
    };

    Accordion.prototype.focusOut = function (e) {
      e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
    };

    Accordion.prototype.ctrlTemplate = function () {
      this.ctrlTem = this.element.cloneNode(true);
      var innerEles;
      var rootEle = (0, _ej2Base.select)('.' + CLS_CONTAINER, this.element);

      if (rootEle) {
        innerEles = rootEle.children;
      } else {
        innerEles = this.element.children;
      }

      var items = [];
      /* tslint:disable */

      [].slice.call(innerEles).forEach(function (el) {
        items.push({
          header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',
          content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''
        });
        el.parentNode.removeChild(el);
      });
      /* tslint:enable */

      if (rootEle) {
        this.element.removeChild(rootEle);
      }

      this.setProperties({
        items: items
      }, true);
    };

    Accordion.prototype.toggleIconGenerate = function () {
      var tglIcon = this.createElement('div', {
        className: CLS_TOOGLEICN
      });
      var hdrColIcon = this.createElement('span', {
        className: CLS_COLLAPSEICN
      });
      tglIcon.appendChild(hdrColIcon);
      return tglIcon;
    };

    Accordion.prototype.initItemExpand = function () {
      var len = this.initExpand.length;

      if (len === 0) {
        return;
      }

      if (this.expandMode === 'Single') {
        this.expandItem(true, this.initExpand[len - 1]);
      } else {
        for (var i = 0; i < len; i++) {
          this.expandItem(true, this.initExpand[i]);
        }
      }
    };

    Accordion.prototype.renderItems = function () {
      var _this = this;

      var ele = this.element;
      var innerItem;
      var innerDataSourceItem;

      if ((0, _ej2Base.isNullOrUndefined)(this.initExpand)) {
        this.initExpand = [];
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.trgtEle)) {
        this.ctrlTemplate();
      }

      if (this.dataSource.length > 0) {
        this.dataSource.forEach(function (item, index) {
          innerDataSourceItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerDataSourceItem);

          if (innerDataSourceItem.childElementCount > 0) {
            _ej2Base.EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);

            _ej2Base.EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
          }
        });
        this.updateHeaderBlazorTemplate();
      } else {
        var items = this.items;

        if (ele && items.length > 0) {
          items.forEach(function (item, index) {
            innerItem = _this.renderInnerItem(item, index);
            ele.appendChild(innerItem);

            _this.updateHeaderBlazorTemplate(item, index);

            if (innerItem.childElementCount > 0) {
              _ej2Base.EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);

              _ej2Base.EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
            }
          });
        }
      }
    };

    Accordion.prototype.clickHandler = function (e) {
      var _this = this;

      var trgt = e.target;
      var items = this.getItems();
      var eventArgs = {};
      var index;
      var tglIcon;
      var acrdEle = (0, _ej2Base.closest)(trgt, '.' + CLS_ROOT);

      if (acrdEle !== this.element) {
        return;
      }

      trgt.classList.add('e-target');
      var acrdnItem = (0, _ej2Base.closest)(trgt, '.' + CLS_ITEM);
      var acrdnHdr = (0, _ej2Base.closest)(trgt, '.' + CLS_HEADER);
      var acrdnCtn = (0, _ej2Base.closest)(trgt, '.' + CLS_CONTENT);

      if (acrdnItem && ((0, _ej2Base.isNullOrUndefined)(acrdnHdr) || (0, _ej2Base.isNullOrUndefined)(acrdnCtn))) {
        acrdnHdr = acrdnItem.children[0];
        acrdnCtn = acrdnItem.children[1];
      }

      if (acrdnHdr) {
        tglIcon = (0, _ej2Base.select)('.' + CLS_TOOGLEICN, acrdnHdr);
      }

      var acrdnCtnItem;

      if (acrdnHdr) {
        acrdnCtnItem = (0, _ej2Base.closest)(acrdnHdr, '.' + CLS_ITEM);
      } else if (acrdnCtn) {
        acrdnCtnItem = (0, _ej2Base.closest)(acrdnCtn, '.' + CLS_ITEM);
      }

      var acrdActive = [];
      index = this.getIndexByItem(acrdnItem);

      if (acrdnCtnItem) {
        eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
      }

      eventArgs.originalEvent = e;
      var ctnCheck = !(0, _ej2Base.isNullOrUndefined)(tglIcon) && acrdnItem.childElementCount <= 1;

      if (ctnCheck && ((0, _ej2Base.isNullOrUndefined)(acrdnCtn) || !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {
        acrdnItem.appendChild(this.contentRendering(index));
        this.updateContentBlazorTemplate(eventArgs.item, index);
        this.ariaAttrUpdate(acrdnItem);
      }

      this.trigger('clicked', eventArgs);
      var cntclkCheck = acrdnCtn && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.e-target', acrdnCtn));
      var inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT;
      var inlineEleAcrdn = acrdnCtn && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_ROOT, acrdnCtn)) && (0, _ej2Base.isNullOrUndefined)((0, _ej2Base.closest)(trgt, inlineAcrdnSel));
      var nestContCheck = acrdnCtn && (0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_ROOT, acrdnCtn)) || !((0, _ej2Base.closest)(trgt, '.' + CLS_ROOT) === this.element);
      cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
      trgt.classList.remove('e-target');

      if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
        return;
      }

      var acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);
      var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
      [].slice.call(acrdnchild).forEach(function (el) {
        if (el.classList.contains(CLS_ACTIVE)) {
          acrdActive.push(el);
        }
      });
      var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM + ' [' + CLS_ANIMATE + ']'));

      if (acrdAniEle.length > 0) {
        for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
          var el = acrdAniEle_1[_i];
          acrdActive.push(el.parentElement);
        }
      }

      var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';
      var sameHeader = false;

      if (!(0, _ej2Base.isNullOrUndefined)(acrdnItem) && !(0, _ej2Base.isNullOrUndefined)(acrdnHdr)) {
        var acrdnCtn_1 = (0, _ej2Base.select)('.' + CLS_CONTENT, acrdnItem);
        var acrdnRoot = (0, _ej2Base.closest)(acrdnItem, '.' + CLS_ACRDN_ROOT);
        var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);

        if ((0, _ej2Base.isNullOrUndefined)(acrdnCtn_1)) {
          return;
        }

        sameHeader = expandState === acrdnItem;

        if ((0, _ej2Base.isVisible)(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
          this.collapse(acrdnCtn_1);
        } else {
          if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {
            acrdActive.forEach(function (el) {
              _this.collapse((0, _ej2Base.select)('.' + CLS_CONTENT, el));

              el.classList.remove(CLS_EXPANDSTATE);
            });
          }

          this.expand(acrdnCtn_1);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(expandState) && !sameHeader) {
          expandState.classList.remove(CLS_EXPANDSTATE);
        }
      }
    };

    Accordion.prototype.eleMoveFocus = function (action, root, trgt) {
      var clst;
      var clstItem = (0, _ej2Base.closest)(trgt, '.' + CLS_ITEM);

      if (trgt === root) {
        clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);
      } else if (trgt.classList.contains(CLS_HEADER)) {
        clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;

        if (clstItem) {
          clst = (0, _ej2Base.select)('.' + CLS_HEADER, clstItem);
        }
      }

      if (clst) {
        clst.focus();
      }
    };

    Accordion.prototype.keyActionHandler = function (e) {
      var trgt = e.target;
      var header = (0, _ej2Base.closest)(e.target, CLS_HEADER);

      if ((0, _ej2Base.isNullOrUndefined)(header) && !trgt.classList.contains(CLS_ROOT) && !trgt.classList.contains(CLS_HEADER)) {
        return;
      }

      var clst;
      var root = this.element;
      var content;

      switch (e.action) {
        case 'moveUp':
          this.eleMoveFocus(e.action, root, trgt);
          break;

        case 'moveDown':
          this.eleMoveFocus(e.action, root, trgt);
          break;

        case 'space':
        case 'enter':
          content = trgt.nextElementSibling;

          if (!(0, _ej2Base.isNullOrUndefined)(content) && content.classList.contains(CLS_CONTENT)) {
            if (content.getAttribute('e-animate') !== 'true') {
              trgt.click();
            }
          } else {
            trgt.click();
          }

          break;

        case 'home':
        case 'end':
          clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
          clst.focus();
          break;
      }
    };

    Accordion.prototype.headerEleGenerate = function () {
      var header = this.createElement('div', {
        className: CLS_HEADER,
        id: (0, _ej2Base.getUniqueID)('acrdn_header')
      });
      var items = this.getItems();
      var ariaAttr = {
        'tabindex': '0',
        'role': 'heading',
        'aria-selected': 'false',
        'aria-disabled': 'false',
        'aria-level': items.length.toString()
      };
      (0, _ej2Base.attributes)(header, ariaAttr);
      return header;
    };

    Accordion.prototype.renderInnerItem = function (item, index) {
      var innerEle;
      innerEle = this.createElement('div', {
        className: CLS_ITEM
      });
      innerEle.id = (0, _ej2Base.getUniqueID)('acrdn_item');
      (0, _ej2Base.attributes)(innerEle, {
        'aria-expanded': 'false'
      });

      if (this.headerTemplate) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement('div', {
          className: CLS_HEADERCTN
        });
        ctnEle.appendChild(hdrEle);
        (0, _ej2Base.append)(this.getheaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);
        innerEle.appendChild(ctnEle);
        ctnEle.appendChild(this.toggleIconGenerate());
        this.add(innerEle, CLS_SLCT);
        return innerEle;
      }

      if (item.header && this.angularnativeCondiCheck(item, 'header')) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement('div', {
          className: CLS_HEADERCTN
        });
        ctnEle.appendChild(hdrEle);
        ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));
        innerEle.appendChild(ctnEle);
      }

      var hdr = (0, _ej2Base.select)('.' + CLS_HEADER, innerEle);

      if (item.expanded && !(0, _ej2Base.isNullOrUndefined)(index) && !this.enablePersistence) {
        if (this.initExpand.indexOf(index) === -1) {
          this.initExpand.push(index);
        }
      }

      if (item.cssClass) {
        var acrdnClass = item.cssClass;
        var arcdnClassList = [];
        arcdnClassList = acrdnClass.split(' ');
        arcdnClassList.forEach(function (el) {
          (0, _ej2Base.addClass)([innerEle], el);
        });
      }

      if (item.iconCss) {
        var hdrIcnEle = this.createElement('div', {
          className: CLS_HEADERICN
        });
        var icon = this.createElement('span', {
          className: item.iconCss + ' e-icons'
        });
        hdrIcnEle.appendChild(icon);

        if ((0, _ej2Base.isNullOrUndefined)(hdr)) {
          hdr = this.headerEleGenerate();
          hdr.appendChild(hdrIcnEle);
          innerEle.appendChild(hdr);
        } else {
          hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
        }
      }

      if (item.content && this.angularnativeCondiCheck(item, 'content')) {
        var hdrIcon = this.toggleIconGenerate();

        if ((0, _ej2Base.isNullOrUndefined)(hdr)) {
          hdr = this.headerEleGenerate();
          innerEle.appendChild(hdr);
        }

        hdr.appendChild(hdrIcon);
        this.add(innerEle, CLS_SLCT);
      }

      return innerEle;
    };

    Accordion.prototype.angularnativeCondiCheck = function (item, prop) {
      var property = prop === 'content' ? item.content : item.header;
      var content = property;

      if (this.isAngular && !(0, _ej2Base.isNullOrUndefined)(content.elementRef)) {
        var data = content.elementRef.nativeElement.data;

        if ((0, _ej2Base.isNullOrUndefined)(data) || data === '' || data.indexOf('bindings=') === -1) {
          return true;
        }

        var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));

        if (!(0, _ej2Base.isNullOrUndefined)(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    };

    Accordion.prototype.fetchElement = function (ele, value, index, isHeader) {
      var templateFn;
      var temString;

      try {
        if (document.querySelectorAll(value).length) {
          var eleVal = document.querySelector(value);
          temString = eleVal.outerHTML.trim();
          ele.appendChild(eleVal);
          eleVal.style.display = '';
        }
      } catch (e) {
        if (typeof value === 'string' && (0, _ej2Base.isBlazor)() && value.indexOf('<div>Blazor') !== 0) {
          ele.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(value);
          /* tslint:disable */
        } else if (!(0, _ej2Base.isNullOrUndefined)(this.trgtEle) && value instanceof HTMLElement) {
          ele.appendChild(value);
          ele.firstElementChild.style.display = '';
          /* tslint:enable */
        } else {
          templateFn = (0, _ej2Base.compile)(value);
        }
      }

      var tempArray;

      if (!(0, _ej2Base.isNullOrUndefined)(templateFn)) {
        var templateProps = void 0;

        if (ele.classList.contains(CLS_HEADERCTN)) {
          templateProps = this.element.id + index + '_header';
        } else if (ele.classList.contains(CLS_CTENT)) {
          templateProps = this.element.id + index + '_content';
        }

        tempArray = templateFn({}, null, null, templateProps, this.isStringTemplate);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(tempArray) && tempArray.length > 0 && !((0, _ej2Base.isNullOrUndefined)(tempArray[0].tagName) && tempArray.length === 1)) {
        [].slice.call(tempArray).forEach(function (el) {
          if (!(0, _ej2Base.isNullOrUndefined)(el.tagName)) {
            el.style.display = '';
          }

          ele.appendChild(el);
        });
      } else if (ele.childElementCount === 0) {
        ele.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(value);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(temString)) {
        if (this.templateEle.indexOf(value) === -1) {
          this.templateEle.push(value);
        }
      }

      return ele;
    };

    Accordion.prototype.ariaAttrUpdate = function (itemEle) {
      var header = (0, _ej2Base.select)('.' + CLS_HEADER, itemEle);
      var content = (0, _ej2Base.select)('.' + CLS_CONTENT, itemEle);
      header.setAttribute('aria-controls', content.id);
      content.setAttribute('aria-labelledby', header.id);
      content.setAttribute('role', 'definition');
    };

    Accordion.prototype.contentRendering = function (index) {
      var itemcnt = this.createElement('div', {
        className: CLS_CONTENT + ' ' + CLS_CTNHIDE,
        id: (0, _ej2Base.getUniqueID)('acrdn_panel')
      });
      (0, _ej2Base.attributes)(itemcnt, {
        'aria-hidden': 'true'
      });
      var ctn = this.createElement('div', {
        className: CLS_CTENT
      });

      if (this.dataSource.length > 0) {
        (0, _ej2Base.append)(this.getItemTemplate()(this.dataSource[index], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);
        itemcnt.appendChild(ctn);
      } else {
        itemcnt.appendChild(this.fetchElement(ctn, this.items[index].content, index, false));
      }

      return itemcnt;
    };

    Accordion.prototype.expand = function (trgt) {
      var _this = this;

      var eventArgs;
      var items = this.getItems();
      var trgtItemEle = (0, _ej2Base.closest)(trgt, '.' + CLS_ITEM);

      if ((0, _ej2Base.isNullOrUndefined)(trgt) || (0, _ej2Base.isVisible)(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE)) {
        return;
      }

      var acrdnRoot = (0, _ej2Base.closest)(trgtItemEle, '.' + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);
      var animation = {
        name: this.animation.expand.effect,
        duration: this.animation.expand.duration,
        timingFunction: this.animation.expand.easing
      };
      var icon = (0, _ej2Base.select)('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector('.' + CLS_CONTENT),
        isExpanded: true
      };
      var eff = animation.name;
      this.trigger('expanding', eventArgs, function (expandArgs) {
        if (!expandArgs.cancel) {
          icon.classList.add(CLS_TOGANIMATE);

          _this.expandedItemsPush(trgtItemEle);

          if (!(0, _ej2Base.isNullOrUndefined)(expandState)) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }

          trgtItemEle.classList.add(CLS_EXPANDSTATE);

          if (animation.name === 'None') {
            _this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);

            _this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.expandAnimation(eff, icon, trgt, trgtItemEle, animation, expandArgs);
          }
        }
      });
    };

    Accordion.prototype.expandAnimation = function (ef, icn, trgt, trgtItemEle, animate, args) {
      var _this = this;

      var height;
      var trgtHgt;
      this.lastActiveItemId = trgtItemEle.id;

      if (ef === 'SlideDown') {
        animate.begin = function () {
          _this.expandProgress('begin', icn, trgt, trgtItemEle, args);

          trgt.style.position = 'absolute';
          height = trgtItemEle.offsetHeight;
          trgtHgt = trgt.offsetHeight;
          trgt.style.maxHeight = trgt.offsetHeight + 'px';
          trgtItemEle.style.maxHeight = '';
        };

        animate.progress = function () {
          trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';
        };

        animate.end = function () {
          (0, _ej2Base.setStyleAttribute)(trgt, {
            'position': '',
            'maxHeight': ''
          });
          trgtItemEle.style.minHeight = '';

          _this.expandProgress('end', icn, trgt, trgtItemEle, args);
        };
      } else {
        animate.begin = function () {
          _this.expandProgress('begin', icn, trgt, trgtItemEle, args);
        };

        animate.end = function () {
          _this.expandProgress('end', icn, trgt, trgtItemEle, args);
        };
      }

      new _ej2Base.Animation(animate).animate(trgt);
    };

    Accordion.prototype.expandProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(trgt, CLS_CTNHIDE);
      this.add(trgtItemEle, CLS_SLCTED);
      this.add(icon, CLS_EXPANDICN);

      if (progress === 'end') {
        this.add(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute('aria-hidden', 'false');
        (0, _ej2Base.attributes)(trgtItemEle, {
          'aria-expanded': 'true'
        });
        (0, _ej2Base.attributes)(trgt.previousElementSibling, {
          'aria-selected': 'true'
        });
        icon.classList.remove(CLS_TOGANIMATE);
        this.trigger('expanded', eventArgs);
      }
    };

    Accordion.prototype.expandedItemsPush = function (item) {
      var index = this.getIndexByItem(item);

      if (this.expandedItems.indexOf(index) === -1) {
        this.expandedItems.push(index);
      }
    };

    Accordion.prototype.getIndexByItem = function (item) {
      var itemEle = this.getItemElements();
      return [].slice.call(itemEle).indexOf(item);
    };

    Accordion.prototype.getItemElements = function () {
      var itemEle = [];
      var itemCollection = this.element.children;
      [].slice.call(itemCollection).forEach(function (el) {
        if (el.classList.contains(CLS_ITEM)) {
          itemEle.push(el);
        }
      });
      return itemEle;
    };

    Accordion.prototype.expandedItemsPop = function (item) {
      var index = this.getIndexByItem(item);
      this.expandedItems.splice(this.expandedItems.indexOf(index), 1);
    };

    Accordion.prototype.collapse = function (trgt) {
      var _this = this;

      var eventArgs;
      var items = this.getItems();
      var trgtItemEle = (0, _ej2Base.closest)(trgt, '.' + CLS_ITEM);

      if ((0, _ej2Base.isNullOrUndefined)(trgt) || !(0, _ej2Base.isVisible)(trgt) || trgtItemEle.classList.contains(CLS_DISABLE)) {
        return;
      }

      var animation = {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing
      };
      var icon = (0, _ej2Base.select)('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector('.' + CLS_CONTENT),
        isExpanded: false
      };
      var eff = animation.name;
      this.trigger('expanding', eventArgs, function (expandArgs) {
        if (!expandArgs.cancel) {
          _this.expandedItemsPop(trgtItemEle);

          trgtItemEle.classList.add(CLS_EXPANDSTATE);
          icon.classList.add(CLS_TOGANIMATE);

          if (animation.name === 'None') {
            _this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);

            _this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.collapseAnimation(eff, trgt, trgtItemEle, icon, animation, expandArgs);
          }
        }
      });
    };

    Accordion.prototype.collapseAnimation = function (ef, trgt, trgtItEl, icn, animate, args) {
      var _this = this;

      var height;
      var trgtHeight;
      var itemHeight;
      var remain;
      this.lastActiveItemId = trgtItEl.id;

      if (ef === 'SlideUp') {
        animate.begin = function () {
          itemHeight = trgtItEl.offsetHeight;
          trgtItEl.style.minHeight = itemHeight + 'px';
          trgt.style.position = 'absolute';
          height = trgtItEl.offsetHeight;
          trgtHeight = trgt.offsetHeight;
          trgt.style.maxHeight = trgtHeight + 'px';

          _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
        };

        animate.progress = function () {
          remain = height - (trgtHeight - trgt.offsetHeight);

          if (remain < itemHeight) {
            trgtItEl.style.minHeight = remain + 'px';
          }
        };

        animate.end = function () {
          trgt.style.display = 'none';

          _this.collapseProgress('end', icn, trgt, trgtItEl, args);

          trgtItEl.style.minHeight = '';
          (0, _ej2Base.setStyleAttribute)(trgt, {
            'position': '',
            'maxHeight': '',
            'display': ''
          });
        };
      } else {
        animate.begin = function () {
          _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
        };

        animate.end = function () {
          _this.collapseProgress('end', icn, trgt, trgtItEl, args);
        };
      }

      new _ej2Base.Animation(animate).animate(trgt);
    };

    Accordion.prototype.collapseProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(icon, CLS_EXPANDICN);
      this.remove(trgtItemEle, CLS_SLCTED);

      if (progress === 'end') {
        this.add(trgt, CLS_CTNHIDE);
        icon.classList.remove(CLS_TOGANIMATE);
        this.remove(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute('aria-hidden', 'true');
        (0, _ej2Base.attributes)(trgtItemEle, {
          'aria-expanded': 'false'
        });
        (0, _ej2Base.attributes)(trgt.previousElementSibling, {
          'aria-selected': 'false'
        });
        this.trigger('expanded', eventArgs);
      }
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    Accordion.prototype.getModuleName = function () {
      return 'accordion';
    };

    Accordion.prototype.itemAttribUpdate = function () {
      var items = this.getItems();
      var itemEle = this.getItemElements();
      var itemLen = items.length;
      itemEle.forEach(function (ele) {
        (0, _ej2Base.select)('.' + CLS_HEADER, ele).setAttribute('aria-level', '' + itemLen);
      });
    };

    Accordion.prototype.getItems = function () {
      var items;

      if (this.itemTemplate && this.headerTemplate) {
        items = this.dataSource;
      } else {
        items = this.items;
      }

      return items;
    };
    /**
     * Adds new item to the Accordion with the specified index of the Accordion.
     * @param  {AccordionItemModel | Object} item - Item array that is to be added to the Accordion.
     * @param  {number} index - Number value that determines where the item should be added.
     * By default, item is added at the last index if the index is not specified.
     * @returns void
     */


    Accordion.prototype.addItem = function (item, index) {
      var ele = this.element;
      var itemEle = this.getItemElements();
      var items = this.getItems();

      if ((0, _ej2Base.isNullOrUndefined)(index)) {
        index = items.length;
      }

      if (ele.childElementCount >= index) {
        items.splice(index, 0, item);
        var innerItemEle = this.renderInnerItem(item, index);

        if (ele.childElementCount === index) {
          ele.appendChild(innerItemEle);
        } else {
          ele.insertBefore(innerItemEle, itemEle[index]);
        }

        this.updateHeaderBlazorTemplate();

        _ej2Base.EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);

        _ej2Base.EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);

        this.itemAttribUpdate();
      }

      this.expandedItems = [];
      this.expandedItemRefresh(ele);

      if (item && item.expanded) {
        this.expandItem(true, index);
      }
    };

    Accordion.prototype.expandedItemRefresh = function (ele) {
      var _this = this;

      var itemEle = this.getItemElements();
      [].slice.call(itemEle).forEach(function (el) {
        if (el.classList.contains(CLS_SLCTED)) {
          _this.expandedItemsPush(el);
        }
      });
    };
    /**
     * Dynamically removes item from Accordion.
     * @param  {number} index - Number value that determines which item should be removed.
     * @returns void.
     */


    Accordion.prototype.removeItem = function (index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[index];
      var items = this.getItems();

      if ((0, _ej2Base.isNullOrUndefined)(ele)) {
        return;
      }

      this.restoreContent(index);
      (0, _ej2Base.detach)(ele);
      items.splice(index, 1);
      this.itemAttribUpdate();
      this.expandedItems = [];
      this.expandedItemRefresh(this.element);
    };
    /**
     * Sets focus to the specified index item header in Accordion.
     * @param  {number} index - Number value that determines which item should be focused.
     * @returns void.
     */


    Accordion.prototype.select = function (index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[index];

      if ((0, _ej2Base.isNullOrUndefined)(ele) || (0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_HEADER, ele))) {
        return;
      }

      ele.children[0].focus();
    };
    /**
     * Shows or hides the specified item from Accordion.
     * @param  {number} index - Number value that determines which item should be hidden/shown.
     * @param  {Boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.
     *  If the `isHidden` value is false, the item is shown or else item it is hidden.
     * @returns void.
     */


    Accordion.prototype.hideItem = function (index, isHidden) {
      var itemEle = this.getItemElements();
      var ele = itemEle[index];

      if ((0, _ej2Base.isNullOrUndefined)(ele)) {
        return;
      }

      if ((0, _ej2Base.isNullOrUndefined)(isHidden)) {
        isHidden = true;
      }

      isHidden ? this.add(ele, CLS_ITEMHIDE) : this.remove(ele, CLS_ITEMHIDE);
    };
    /**
     * Enables/Disables the specified Accordion item.
     * @param  {number} index - Number value that determines which item should be enabled/disabled.
     * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).
     * If the `isEnable` value is true, the item is enabled or else it is disabled.
     * @returns void.
     */


    Accordion.prototype.enableItem = function (index, isEnable) {
      var itemEle = this.getItemElements();
      var ele = itemEle[index];

      if ((0, _ej2Base.isNullOrUndefined)(ele)) {
        return;
      }

      var eleHeader = ele.firstElementChild;

      if (isEnable) {
        this.remove(ele, CLS_DISABLE);
        (0, _ej2Base.attributes)(eleHeader, {
          'tabindex': '0',
          'aria-disabled': 'false'
        });
        eleHeader.focus();
      } else {
        if (ele.classList.contains(CLS_ACTIVE)) {
          this.expandItem(false, index);
          this.eleMoveFocus('movedown', this.element, eleHeader);
        }

        this.add(ele, CLS_DISABLE);
        eleHeader.setAttribute('aria-disabled', 'true');
        eleHeader.removeAttribute('tabindex');
      }
    };
    /**
     * Expands/Collapses the specified Accordion item.
     * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.
     * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.
     *  Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.
     * @returns void.
     */


    Accordion.prototype.expandItem = function (isExpand, index) {
      var _this = this;

      var root = this.element;
      var itemEle = this.getItemElements();

      if ((0, _ej2Base.isNullOrUndefined)(index)) {
        if (this.expandMode === 'Single' && isExpand) {
          var ele = itemEle[itemEle.length - 1];
          this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
        } else {
          var item = (0, _ej2Base.select)('#' + this.lastActiveItemId, this.element);
          [].slice.call(itemEle).forEach(function (el) {
            _this.itemExpand(isExpand, el, _this.getIndexByItem(el));

            el.classList.remove(CLS_EXPANDSTATE);
          });
          var expandedItem = (0, _ej2Base.select)('.' + CLS_EXPANDSTATE, this.element);

          if (expandedItem) {
            expandedItem.classList.remove(CLS_EXPANDSTATE);
          }

          if (item) {
            item.classList.add(CLS_EXPANDSTATE);
          }
        }
      } else {
        var ele = itemEle[index];

        if ((0, _ej2Base.isNullOrUndefined)(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
          return;
        } else {
          if (this.expandMode === 'Single') {
            this.expandItem(false);
          }

          this.itemExpand(isExpand, ele, index);
        }
      }
    };

    Accordion.prototype.itemExpand = function (isExpand, ele, index) {
      var ctn = ele.children[1];
      var items = this.getItems();

      if (ele.classList.contains(CLS_DISABLE)) {
        return;
      }

      if ((0, _ej2Base.isNullOrUndefined)(ctn) && isExpand) {
        ctn = this.contentRendering(index);
        ele.appendChild(ctn);
        this.updateContentBlazorTemplate(items[index], index);
        this.ariaAttrUpdate(ele);
      } else if ((0, _ej2Base.isNullOrUndefined)(ctn)) {
        return;
      }

      isExpand ? this.expand(ctn) : this.collapse(ctn);
    };

    Accordion.prototype.destroyItems = function () {
      this.restoreContent(null);
      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {
        (0, _ej2Base.detach)(el);
      });
    };

    Accordion.prototype.restoreContent = function (index) {
      var ctnElePos;

      if ((0, _ej2Base.isNullOrUndefined)(index)) {
        ctnElePos = this.element;
      } else {
        ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM)[index];
      }

      this.templateEle.forEach(function (eleStr) {
        if (!(0, _ej2Base.isNullOrUndefined)(ctnElePos.querySelector(eleStr))) {
          document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';
        }
      });
    };

    Accordion.prototype.updateItem = function (item, index) {
      if (!(0, _ej2Base.isNullOrUndefined)(item)) {
        var items = this.getItems();
        var itemObj = items[index];
        items.splice(index, 1);
        this.restoreContent(index);
        (0, _ej2Base.detach)(item);
        this.addItem(itemObj, index);
      }
    };

    Accordion.prototype.getPersistData = function () {
      var keyEntity = ['expandedItems'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
     * @param  {AccordionModel} newProp
     * @param  {AccordionModel} oldProp
     * @returns void
     * @private
     */


    Accordion.prototype.onPropertyChanged = function (newProp, oldProp) {
      var acrdn = this.element;
      var isRefresh = false;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'items':
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);

              for (var j = 0; j < changedProp.length; j++) {
                var index = parseInt(Object.keys(newProp.items)[j], 10);
                var property = Object.keys(newProp.items[index])[0];
                var item = (0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element)[index];
                var oldVal = Object(oldProp.items[index])[property];
                var newVal = Object(newProp.items[index])[property];
                var temp = property;

                if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {
                  this.updateItem(item, index);
                }

                if (property === 'cssClass' && !(0, _ej2Base.isNullOrUndefined)(item)) {
                  item.classList.remove(oldVal);
                  item.classList.add(newVal);
                }

                if (property === 'content' && !(0, _ej2Base.isNullOrUndefined)(item) && item.children.length === 2) {
                  if (item.classList.contains(CLS_SLCTED)) {
                    this.expandItem(false, index);
                  }

                  (0, _ej2Base.detach)(item.querySelector('.' + CLS_CONTENT));
                }
              }
            } else {
              isRefresh = true;
            }

            break;

          case 'dataSource':
            isRefresh = true;
            break;

          case 'headerTemplate':
            this.initializeheaderTemplate();
            isRefresh = true;
            break;

          case 'itemTemplate':
            this.initializeItemTemplate();
            isRefresh = true;
            break;

          case 'enableRtl':
            newProp.enableRtl ? this.add(acrdn, CLS_RTL) : this.remove(acrdn, CLS_RTL);
            break;

          case 'height':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'height': (0, _ej2Base.formatUnit)(newProp.height)
            });
            break;

          case 'width':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'width': (0, _ej2Base.formatUnit)(newProp.width)
            });
            break;

          case 'expandMode':
            if (newProp.expandMode === 'Single') {
              this.element.setAttribute('aria-multiselectable', 'false');

              if (this.expandedItems.length > 1) {
                this.expandItem(false);
              }
            } else {
              this.element.setAttribute('aria-multiselectable', 'true');
            }

            break;
        }
      }

      if (isRefresh) {
        this.resetBlazorTemplates();
        this.destroyItems();
        this.renderItems();
        this.initItemExpand();
      }
    };

    __decorate([(0, _ej2Base.Collection)([], AccordionItem)], Accordion.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)([])], Accordion.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)()], Accordion.prototype, "itemTemplate", void 0);

    __decorate([(0, _ej2Base.Property)()], Accordion.prototype, "headerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], Accordion.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Accordion.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('Multiple')], Accordion.prototype, "expandMode", void 0);

    __decorate([(0, _ej2Base.Complex)({}, AccordionAnimationSettings)], Accordion.prototype, "animation", void 0);

    __decorate([(0, _ej2Base.Event)()], Accordion.prototype, "clicked", void 0);

    __decorate([(0, _ej2Base.Event)()], Accordion.prototype, "expanding", void 0);

    __decorate([(0, _ej2Base.Event)()], Accordion.prototype, "expanded", void 0);

    __decorate([(0, _ej2Base.Event)()], Accordion.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Accordion.prototype, "destroyed", void 0);

    Accordion = __decorate([_ej2Base.NotifyPropertyChanges], Accordion);
    return Accordion;
  }(_ej2Base.Component);

  _exports.Accordion = Accordion;
});;
define('@syncfusion/ej2-navigations/src/accordion/index',["exports", "./accordion"], function (_exports, _accordion) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_accordion).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _accordion[key];
  });
});;
define('@syncfusion/ej2-navigations/src/common/h-scroll',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.HScroll = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_ROOT = 'e-hscroll';
  var CLS_RTL = 'e-rtl';
  var CLS_DISABLE = 'e-overlay';
  var CLS_HSCROLLBAR = 'e-hscroll-bar';
  var CLS_HSCROLLCON = 'e-hscroll-content';
  var CLS_NAVARROW = 'e-nav-arrow';
  var CLS_NAVRIGHTARROW = 'e-nav-right-arrow';
  var CLS_NAVLEFTARROW = 'e-nav-left-arrow';
  var CLS_HSCROLLNAV = 'e-scroll-nav';
  var CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';
  var CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';
  var CLS_DEVICE = 'e-scroll-device';
  var CLS_OVERLAY = 'e-scroll-overlay';
  var CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';
  var CLS_LEFTOVERLAY = 'e-scroll-left-overlay';
  var OVERLAY_MAXWID = 40;
  /**
   * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.
   * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.
   * Hidden content can be view by touch moving or icon click.
   * ```html
   * <div id="scroll"/>
   * <script>
   *   var scrollObj = new HScroll();
   *   scrollObj.appendTo("#scroll");
   * </script>
   * ```
   */

  var HScroll =
  /** @class */
  function (_super) {
    __extends(HScroll, _super);
    /**
     * Initializes a new instance of the HScroll class.
     * @param options  - Specifies HScroll model properties as options.
     * @param element  - Specifies the element for which horizontal scrolling applies.
     */


    function HScroll(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the event handler
     * @private
     */


    HScroll.prototype.preRender = function () {
      this.browser = _ej2Base.Browser.info.name;
      this.browserCheck = this.browser === 'mozilla';
      this.isDevice = _ej2Base.Browser.isDevice;
      this.customStep = true;
      var element = this.element;
      this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
      this.initialize();

      if (element.id === '') {
        element.id = (0, _ej2Base.getUniqueID)('hscroll');
        this.uniqueId = true;
      }

      element.style.display = 'block';

      if (this.enableRtl) {
        element.classList.add(CLS_RTL);
      }
    };
    /**
     * To Initialize the horizontal scroll  rendering
     * @private
     */


    HScroll.prototype.render = function () {
      this.touchModule = new _ej2Base.Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });

      _ej2Base.EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);

      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }

      this.setScrollState();
    };

    HScroll.prototype.setScrollState = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };

    HScroll.prototype.initialize = function () {
      var scrollEle = this.createElement('div', {
        className: CLS_HSCROLLCON
      });
      var scrollDiv = this.createElement('div', {
        className: CLS_HSCROLLBAR
      });
      scrollDiv.setAttribute('tabindex', '-1');
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);

      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }

      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = 'hidden';
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };

    HScroll.prototype.getPersistData = function () {
      var keyEntity = ['scrollStep'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    HScroll.prototype.getModuleName = function () {
      return 'hScroll';
    };
    /**
     * Removes the control from the DOM and also removes all its related events.
     * @returns void
     */


    HScroll.prototype.destroy = function () {
      var ele = this.element;
      ele.style.display = '';
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      var nav = (0, _ej2Base.selectAll)('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);
      var overlay = (0, _ej2Base.selectAll)('.' + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function (ele) {
        (0, _ej2Base.detach)(ele);
      });

      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }

      if (this.uniqueId) {
        this.element.removeAttribute('id');
      }

      (0, _ej2Base.detach)(this.scrollEle);

      if (nav.length > 0) {
        (0, _ej2Base.detach)(nav[0]);

        if (!(0, _ej2Base.isNullOrUndefined)(nav[1])) {
          (0, _ej2Base.detach)(nav[1]);
        }
      }

      _ej2Base.EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);

      this.touchModule.destroy();
      this.touchModule = null;

      _super.prototype.destroy.call(this);
    };
    /**
     * Specifies the value to disable/enable the HScroll component.
     * When set to `true` , the component will be disabled.
     * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).
     * @returns void.
     */


    HScroll.prototype.disable = function (value) {
      var navEles = (0, _ej2Base.selectAll)('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);
      value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE);
      [].slice.call(navEles).forEach(function (el) {
        el.setAttribute('tabindex', !value ? '0' : '-1');
      });
    };

    HScroll.prototype.createOverlay = function (element) {
      var id = element.id.concat('_nav');
      var rightOverlayEle = this.createElement('div', {
        className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY
      });
      var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement('div', {
        id: id.concat('_right'),
        className: clsRight
      });
      var navItem = this.createElement('div', {
        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement('div', {
        className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY
      });

      if (this.ieCheck) {
        rightEle.classList.add('e-ie-align');
      }

      element.appendChild(rightOverlayEle);
      element.appendChild(rightEle);
      element.insertBefore(leftEle, element.firstChild);
      this.eventBinding([rightEle]);
    };

    HScroll.prototype.createNavIcon = function (element) {
      var id = element.id.concat('_nav');
      var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
      var nav = this.createElement('div', {
        id: id.concat('_right'),
        className: clsRight
      });
      nav.setAttribute('aria-disabled', 'false');
      var navItem = this.createElement('div', {
        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);
      var navEle = this.createElement('div', {
        id: id.concat('_left'),
        className: clsLeft + ' ' + CLS_DISABLE
      });
      navEle.setAttribute('aria-disabled', 'true');
      var navLeftItem = this.createElement('div', {
        className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element.appendChild(nav);
      element.insertBefore(navEle, element.firstChild);

      if (this.ieCheck) {
        nav.classList.add('e-ie-align');
        navEle.classList.add('e-ie-align');
      }

      this.eventBinding([nav, navEle]);
    };

    HScroll.prototype.onKeyPress = function (e) {
      var _this = this;

      if (e.key === 'Enter') {
        var timeoutFun_1 = function () {
          _this.keyTimeout = true;

          _this.eleScrolling(10, e.target, true);
        };

        this.keyTimer = window.setTimeout(function () {
          timeoutFun_1();
        }, 100);
      }
    };

    HScroll.prototype.onKeyUp = function (e) {
      if (e.key !== 'Enter') {
        return;
      }

      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }

      clearTimeout(this.keyTimer);
    };

    HScroll.prototype.eventBinding = function (ele) {
      var _this = this;

      [].slice.call(ele).forEach(function (el) {
        new _ej2Base.Touch(el, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        el.addEventListener('keydown', _this.onKeyPress.bind(_this));
        el.addEventListener('keyup', _this.onKeyUp.bind(_this));
        el.addEventListener('mouseup', _this.repeatScroll.bind(_this));
        el.addEventListener('touchend', _this.repeatScroll.bind(_this));
        el.addEventListener('contextmenu', function (e) {
          e.preventDefault();
        });

        _ej2Base.EventHandler.add(el, 'click', _this.clickEventHandler, _this);
      });
    };

    HScroll.prototype.repeatScroll = function () {
      clearInterval(this.timeout);
    };

    HScroll.prototype.tabHoldHandler = function (e) {
      var _this = this;

      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;

      var timeoutFun = function () {
        _this.eleScrolling(scrollDis, trgt, true);
      };

      this.timeout = window.setInterval(function () {
        timeoutFun();
      }, 50);
    };

    HScroll.prototype.contains = function (ele, className) {
      return ele.classList.contains(className);
    };

    HScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
      var element = this.scrollEle;
      var rootEle = this.element;
      var classList = trgt.classList;

      if (classList.contains(CLS_HSCROLLNAV)) {
        classList = trgt.querySelector('.' + CLS_NAVARROW).classList;
      }

      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }

      var scrlLeft = element.scrollLeft;

      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, 'add', isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, '', isContinuous);
        }
      } else {
        if (classList.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, 'add', isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, '', isContinuous);
        }
      }
    };

    HScroll.prototype.clickEventHandler = function (e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };

    HScroll.prototype.swipeHandler = function (e) {
      var swipeEle = this.scrollEle;
      var distance;

      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }

      var start = 0.5;

      var animate = function () {
        var step = Math.sin(start);

        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === 'Left') {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === 'Right') {
            swipeEle.scrollLeft -= distance * step;
          }

          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    HScroll.prototype.scrollUpdating = function (scrollVal, action) {
      if (action === 'add') {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
    };

    HScroll.prototype.frameScrollRequest = function (scrollVal, action, isContinuous) {
      var _this = this;

      var step = 10;

      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }

      if (!this.customStep) {
        [].slice.call((0, _ej2Base.selectAll)('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
          scrollVal -= el.offsetWidth;
        });
      }

      var animate = function () {
        var scrollValue;
        var scrollStep;

        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }

        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);

          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    HScroll.prototype.touchHandler = function (e) {
      var ele = this.scrollEle;
      var distance;
      distance = e.distanceX;

      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }

      if (e.scrollDirection === 'Left') {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === 'Right') {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };

    HScroll.prototype.arrowDisabling = function (addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = (0, _ej2Base.isNullOrUndefined)(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

        if ((0, _ej2Base.isNullOrUndefined)(addDisable)) {
          (0, _ej2Base.classList)(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          (0, _ej2Base.classList)(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute('aria-disabled', 'true');
        addDisable.removeAttribute('tabindex');
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute('aria-disabled', 'false');
        removeDisable.setAttribute('tabindex', '0');
      }

      this.repeatScroll();
    };

    HScroll.prototype.scrollHandler = function (e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;

      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }

      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);
        }

        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + 'px';
        } else {
          leftOverlay.style.width = '40px';
        }

        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';
        } else {
          rightOverlay.style.width = '40px';
        }
      }

      if (scrollLeft === 0) {
        if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
          this.arrowDisabling(navLeftEle, navRightEle);
        } else {
          this.arrowDisabling(navRightEle, navLeftEle);
        }
      } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {
        if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
          this.arrowDisabling(navRightEle, navLeftEle);
        } else {
          this.arrowDisabling(navLeftEle, navRightEle);
        }
      } else {
        var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);

        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute('aria-disabled', 'false');
          disEle.setAttribute('tabindex', '0');
        }
      }
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     * @param  {HScrollModel} newProp
     * @param  {HScrollModel} oldProp
     * @returns void
     * @private
     */


    HScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'scrollStep':
            this.setScrollState();
            break;

          case 'enableRtl':
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };

    __decorate([(0, _ej2Base.Property)(null)], HScroll.prototype, "scrollStep", void 0);

    HScroll = __decorate([_ej2Base.NotifyPropertyChanges], HScroll);
    return HScroll;
  }(_ej2Base.Component);

  _exports.HScroll = HScroll;
});;
define('@syncfusion/ej2-navigations/src/common/index',["exports", "./h-scroll", "./v-scroll", "./menu-base"], function (_exports, _hScroll, _vScroll, _menuBase) {
  "use strict";

  _exports.__esModule = true;
  var _exportNames = {
    MenuAnimationSettings: true,
    MenuItem: true
  };
  _exports.MenuItem = _exports.MenuAnimationSettings = void 0;
  Object.keys(_hScroll).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    _exports[key] = _hScroll[key];
  });
  Object.keys(_vScroll).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    _exports[key] = _vScroll[key];
  });
  _exports.MenuAnimationSettings = _menuBase.MenuAnimationSettings;
  _exports.MenuItem = _menuBase.MenuItem;
});;
define('@syncfusion/ej2-navigations/src/common/menu-base',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-lists", "@syncfusion/ej2-popups", "../common/h-scroll", "../common/v-scroll"], function (_exports, _ej2Base, _ej2Lists, _ej2Popups, _hScroll, _vScroll) {
  "use strict";

  _exports.__esModule = true;
  _exports.MenuBase = _exports.MenuAnimationSettings = _exports.MenuItem = _exports.FieldSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ENTER = 'enter';
  var ESCAPE = 'escape';
  var FOCUSED = 'e-focused';
  var HEADER = 'e-menu-header';
  var SELECTED = 'e-selected';
  var SEPARATOR = 'e-separator';
  var UPARROW = 'uparrow';
  var DOWNARROW = 'downarrow';
  var LEFTARROW = 'leftarrow';
  var RIGHTARROW = 'rightarrow';
  var HOME = 'home';
  var END = 'end';
  var CARET = 'e-caret';
  var ITEM = 'e-menu-item';
  var DISABLED = 'e-disabled';
  var HIDE = 'e-menu-hide';
  var ICONS = 'e-icons';
  var RTL = 'e-rtl';
  var POPUP = 'e-menu-popup';
  var TEMPLATE_PROPERTY = 'Template';
  /**
   * Configures the field options of the Menu.
   */

  var FieldSettings =
  /** @class */
  function (_super) {
    __extends(FieldSettings, _super);

    function FieldSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('id')], FieldSettings.prototype, "itemId", void 0);

    __decorate([(0, _ej2Base.Property)('parentId')], FieldSettings.prototype, "parentId", void 0);

    __decorate([(0, _ej2Base.Property)('text')], FieldSettings.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('iconCss')], FieldSettings.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('url')], FieldSettings.prototype, "url", void 0);

    __decorate([(0, _ej2Base.Property)('separator')], FieldSettings.prototype, "separator", void 0);

    __decorate([(0, _ej2Base.Property)('items')], FieldSettings.prototype, "children", void 0);

    return FieldSettings;
  }(_ej2Base.ChildProperty);

  _exports.FieldSettings = FieldSettings;

  /**
   * Specifies menu items.
   */
  var MenuItem =
  /** @class */
  function (_super) {
    __extends(MenuItem, _super);

    function MenuItem() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(null)], MenuItem.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuItem.prototype, "id", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MenuItem.prototype, "separator", void 0);

    __decorate([(0, _ej2Base.Collection)([], MenuItem)], MenuItem.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuItem.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuItem.prototype, "url", void 0);

    return MenuItem;
  }(_ej2Base.ChildProperty);

  _exports.MenuItem = MenuItem;

  /**
   * Animation configuration settings.
   */
  var MenuAnimationSettings =
  /** @class */
  function (_super) {
    __extends(MenuAnimationSettings, _super);

    function MenuAnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('SlideDown')], MenuAnimationSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)(400)], MenuAnimationSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('ease')], MenuAnimationSettings.prototype, "easing", void 0);

    return MenuAnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.MenuAnimationSettings = MenuAnimationSettings;

  /**
   * @private
   * Base class for Menu and ContextMenu components.
   */
  var MenuBase =
  /** @class */
  function (_super) {
    __extends(MenuBase, _super);
    /**
     * Constructor for creating the widget.
     * @private
     */


    function MenuBase(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.navIdx = [];
      _this.animation = new _ej2Base.Animation({});
      _this.isTapHold = false;
      _this.tempItem = [];
      return _this;
    }
    /**
     * Initialized third party configuration settings.
     * @private
     */


    MenuBase.prototype.preRender = function () {
      if (!this.isMenu) {
        var ul = void 0;

        if (this.element.tagName === 'EJS-CONTEXTMENU') {
          ul = this.createElement('ul', {
            id: (0, _ej2Base.getUniqueID)(this.getModuleName()),
            className: 'e-control e-lib e-' + this.getModuleName()
          });
          var ejInst = (0, _ej2Base.getValue)('ej2_instances', this.element);
          (0, _ej2Base.removeClass)([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
          this.clonedElement = this.element;
          this.element = ul;
          (0, _ej2Base.setValue)('ej2_instances', ejInst, this.element);
        } else {
          ul = this.createElement('ul', {
            id: (0, _ej2Base.getUniqueID)(this.getModuleName())
          });
          (0, _ej2Base.append)([].slice.call(this.element.cloneNode(true).children), ul);
          var refEle = this.element.nextElementSibling;
          refEle ? this.element.parentElement.insertBefore(ul, refEle) : this.element.parentElement.appendChild(ul);
          this.clonedElement = ul;
        }

        this.clonedElement.style.display = 'none';
      }

      if (this.element.tagName === 'EJS-MENU') {
        var ele = this.element;
        var ejInstance = (0, _ej2Base.getValue)('ej2_instances', ele);
        var ul = this.createElement('ul');
        var wrapper = this.createElement('EJS-MENU', {
          className: 'e-' + this.getModuleName() + '-wrapper'
        });

        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }

        ele.parentNode.insertBefore(wrapper, ele);
        (0, _ej2Base.detach)(ele);
        ele = ul;
        wrapper.appendChild(ele);
        (0, _ej2Base.setValue)('ej2_instances', ejInstance, ele);
        this.clonedElement = wrapper;
        this.element = ele;

        if (!this.element.id) {
          this.element.id = (0, _ej2Base.getUniqueID)(this.getModuleName());
        }
      }
    };
    /**
     * Initialize the control rendering
     * @private
     */


    MenuBase.prototype.render = function () {
      this.initialize();
      this.renderItems();

      if (this.isMenu && this.template && (0, _ej2Base.isBlazor)()) {
        var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;
        (0, _ej2Base.resetBlazorTemplate)(menuTemplateId, TEMPLATE_PROPERTY);

        if (Object.keys(_ej2Base.blazorTemplates).length) {
          (0, _ej2Base.extend)(this.tempItem, _ej2Base.blazorTemplates[menuTemplateId], [], true);
        }

        (0, _ej2Base.updateBlazorTemplate)(menuTemplateId, TEMPLATE_PROPERTY, this);
      }

      this.wireEvents();
      this.renderComplete();
    };

    MenuBase.prototype.initialize = function () {
      var wrapper = this.getWrapper();

      if (!wrapper) {
        wrapper = this.createElement('div', {
          className: 'e-' + this.getModuleName() + '-wrapper'
        });

        if (this.isMenu) {
          this.element.parentElement.insertBefore(wrapper, this.element);
        } else {
          document.body.appendChild(wrapper);
        }
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([wrapper], this.cssClass.split(' '));
      }

      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }

      wrapper.appendChild(this.element);

      if (this.isMenu && this.hamburgerMode) {
        if (!this.target) {
          this.createHeaderContainer(wrapper);
        }
      }
    };

    MenuBase.prototype.renderItems = function () {
      if (!this.items.length) {
        var items = _ej2Lists.ListBase.createJsonFromElement(this.element, {
          fields: {
            child: 'items'
          }
        });

        this.setProperties({
          items: items
        }, true);

        if ((0, _ej2Base.isBlazor)()) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = '';
        }
      }

      var ul = this.createItems(this.items);
      (0, _ej2Base.append)(Array.prototype.slice.call(ul.children), this.element);
      this.element.classList.add('e-menu-parent');

      if (this.isMenu) {
        var wrapper = this.getWrapper();
        this.element.classList.contains('e-vertical') ? this.addScrolling(wrapper, this.element, 'vscroll', wrapper.offsetHeight, this.element.offsetHeight) : this.addScrolling(wrapper, this.element, 'hscroll', wrapper.offsetWidth, this.element.offsetWidth);
      }
    };

    MenuBase.prototype.wireEvents = function () {
      var wrapper = this.getWrapper();

      if (this.target) {
        var target = void 0;
        var targetElems = (0, _ej2Base.selectAll)(this.target);

        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];

          if (this.isMenu) {
            _ej2Base.EventHandler.add(target, 'click', this.menuHeaderClickHandler, this);
          } else {
            if (_ej2Base.Browser.isIos) {
              new _ej2Base.Touch(target, {
                tapHold: this.touchHandler.bind(this)
              });
            } else {
              _ej2Base.EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);
            }
          }
        }

        this.targetElement = target;

        if (!this.isMenu) {
          _ej2Base.EventHandler.add(this.targetElement, 'scroll', this.scrollHandler, this);

          for (var _i = 0, _a = (0, _ej2Popups.getScrollableParent)(this.targetElement); _i < _a.length; _i++) {
            var parent_1 = _a[_i];

            _ej2Base.EventHandler.add(parent_1, 'scroll', this.scrollHandler, this);
          }
        }
      }

      if (!_ej2Base.Browser.isDevice) {
        this.delegateMoverHandler = this.moverHandler.bind(this);
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);

        _ej2Base.EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);

        _ej2Base.EventHandler.add(document, 'mousedown', this.delegateMouseDownHandler, this);
      }

      this.delegateClickHandler = this.clickHandler.bind(this);

      _ej2Base.EventHandler.add(document, 'click', this.delegateClickHandler, this);

      this.wireKeyboardEvent(wrapper);
      this.rippleFn = (0, _ej2Base.rippleEffect)(wrapper, {
        selector: '.' + ITEM
      });
    };

    MenuBase.prototype.wireKeyboardEvent = function (element) {
      var keyConfigs = {
        downarrow: DOWNARROW,
        uparrow: UPARROW,
        enter: ENTER,
        leftarrow: LEFTARROW,
        rightarrow: RIGHTARROW,
        escape: ESCAPE
      };

      if (this.isMenu) {
        keyConfigs.home = HOME;
        keyConfigs.end = END;
      }

      new _ej2Base.KeyboardEvents(element, {
        keyAction: this.keyBoardHandler.bind(this),
        keyConfigs: keyConfigs
      });
    };

    MenuBase.prototype.mouseDownHandler = function (e) {
      if ((0, _ej2Base.closest)(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !(0, _ej2Base.closest)(e.target, '.e-' + this.getModuleName() + '-popup')) {
        this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
      }
    };

    MenuBase.prototype.keyBoardHandler = function (e) {
      var actionName = '';
      var trgt = e.target;
      var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;
      e.preventDefault();

      if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [(0, _ej2Base.closest)(trgt, '.e-' + this.getModuleName() + '-wrapper')]);
      }

      if (actionNeeded) {
        switch (e.action) {
          case RIGHTARROW:
            actionName = RIGHTARROW;
            e.action = DOWNARROW;
            break;

          case LEFTARROW:
            actionName = LEFTARROW;
            e.action = UPARROW;
            break;

          case DOWNARROW:
            actionName = DOWNARROW;
            e.action = RIGHTARROW;
            break;

          case UPARROW:
            actionName = UPARROW;
            e.action = '';
            break;
        }
      } else if (this.enableRtl) {
        switch (e.action) {
          case LEFTARROW:
            actionNeeded = true;
            actionName = LEFTARROW;
            e.action = RIGHTARROW;
            break;

          case RIGHTARROW:
            actionNeeded = true;
            actionName = RIGHTARROW;
            e.action = LEFTARROW;
            break;
        }
      }

      switch (e.action) {
        case DOWNARROW:
        case UPARROW:
        case END:
        case HOME:
          this.upDownKeyHandler(e);
          break;

        case RIGHTARROW:
          this.rightEnterKeyHandler(e);
          break;

        case LEFTARROW:
          this.leftEscKeyHandler(e);
          break;

        case ENTER:
          if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
            this.menuHeaderClickHandler(e);
          } else {
            this.rightEnterKeyHandler(e);
          }

          break;

        case ESCAPE:
          this.leftEscKeyHandler(e);
          break;
      }

      if (actionNeeded) {
        e.action = actionName;
      }
    };

    MenuBase.prototype.upDownKeyHandler = function (e) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = e.action === DOWNARROW || e.action === HOME ? 0 : cul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = this.getLIByClass(cul, FOCUSED);

      if (fli) {
        if (e.action !== END && e.action !== HOME) {
          fliIdx = this.getIdx(cul, fli);
        }

        fli.classList.remove(FOCUSED);

        if (e.action !== END && e.action !== HOME) {
          e.action === DOWNARROW ? fliIdx++ : fliIdx--;

          if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
            fliIdx = defaultIdx;
          }
        }
      }

      var cli = cul.children[fliIdx];
      fliIdx = this.isValidLI(cli, fliIdx, e.action);
      cul.children[fliIdx].classList.add(FOCUSED);
      cul.children[fliIdx].focus();
    };

    MenuBase.prototype.isValidLI = function (cli, index, action) {
      var wrapper = this.getWrapper();
      var cul = this.getUlByNavIdx();

      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
        action === DOWNARROW || action === RIGHTARROW ? index++ : index--;
      }

      cli = cul.children[index];

      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {
        index = this.isValidLI(cli, index, action);
      }

      return index;
    };

    MenuBase.prototype.getUlByNavIdx = function (navIdxLen) {
      if (navIdxLen === void 0) {
        navIdxLen = this.navIdx.length;
      }

      if (this.isMenu) {
        var popup = [this.getWrapper()].concat([].slice.call((0, _ej2Base.selectAll)('.' + POPUP)))[navIdxLen];
        return (0, _ej2Base.isNullOrUndefined)(popup) ? null : (0, _ej2Base.select)('.e-menu-parent', popup);
      } else {
        return this.getWrapper().children[navIdxLen];
      }
    };

    MenuBase.prototype.rightEnterKeyHandler = function (e) {
      var eventArgs;
      var cul = this.getUlByNavIdx();
      var fli = this.getLIByClass(cul, FOCUSED);

      if (fli) {
        var fliIdx = this.getIdx(cul, fli);
        var navIdx = this.navIdx.concat(fliIdx);
        var index = void 0;
        var item = this.getItem(navIdx);

        if (item.items.length) {
          this.navIdx.push(fliIdx);
          this.keyType = 'right';
          this.action = e.action;
          this.openMenu(fli, item, null, null, e);
        } else {
          if (e.action === ENTER) {
            if (this.isMenu && this.navIdx.length === 0) {
              this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
            } else {
              fli.classList.remove(FOCUSED);
            }

            fli.classList.add(SELECTED);
            eventArgs = {
              element: fli,
              item: item,
              event: e
            };
            this.trigger('select', eventArgs);
            this.closeMenu(null, e);
          }
        }
      }
    };

    MenuBase.prototype.leftEscKeyHandler = function (e) {
      if (this.navIdx.length) {
        this.keyType = 'left';
        this.closeMenu(this.navIdx.length, e);
      } else {
        if (e.action === ESCAPE) {
          this.closeMenu(null, e);
        }
      }
    };

    MenuBase.prototype.scrollHandler = function (e) {
      this.closeMenu(null, e);
    };

    MenuBase.prototype.touchHandler = function (e) {
      this.isTapHold = true;
      this.cmenuHandler(e.originalEvent);
    };

    MenuBase.prototype.cmenuHandler = function (e) {
      e.preventDefault();
      this.isCMenu = true;
      this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
      this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
      this.closeMenu(null, e);

      if (this.isCMenu) {
        if (this.canOpen(e.target)) {
          this.openMenu(null, null, this.pageY, this.pageX, e);
        }

        this.isCMenu = false;
      }
    };

    MenuBase.prototype.closeMenu = function (ulIndex, e) {
      var _this = this;

      if (ulIndex === void 0) {
        ulIndex = 0;
      }

      if (e === void 0) {
        e = null;
      }

      if (this.isMenuVisible()) {
        var sli = void 0;
        var ul_1;
        var item_1;
        var items_1;
        var beforeCloseArgs = void 0;
        var wrapper = this.getWrapper();
        var popups = this.getPopups();
        var isClose = false;
        var cnt = this.isMenu ? popups.length + 1 : wrapper.childElementCount;
        ul_1 = this.isMenu && cnt !== 1 ? (0, _ej2Base.select)('.e-ul', popups[cnt - 2]) : (0, _ej2Base.selectAll)('.e-menu-parent', wrapper)[cnt - 1];

        if (this.isMenu && ul_1.classList.contains('e-menu')) {
          sli = this.getLIByClass(ul_1, SELECTED);

          if (sli) {
            sli.classList.remove(SELECTED);
          }

          isClose = true;
        }

        if (!isClose) {
          item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
          items_1 = item_1 ? item_1.items : this.items;
          beforeCloseArgs = {
            element: ul_1,
            parentItem: item_1,
            items: items_1,
            event: e,
            cancel: false
          };
          this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {
            var popupEle;
            var closeArgs;
            var popupId = '';
            var popupObj;
            var isOpen = !observedCloseArgs.cancel;

            if (isOpen || _this.isCMenu) {
              if (_this.isMenu) {
                popupEle = (0, _ej2Base.closest)(ul_1, '.' + POPUP);

                if (_this.hamburgerMode) {
                  popupEle.parentElement.style.minHeight = '';
                }

                _this.unWireKeyboardEvent(popupEle);

                _this.destroyScrollObj((0, _ej2Base.getInstance)(popupEle.children[0], _vScroll.VScroll), popupEle.children[0]);

                popupObj = (0, _ej2Base.getInstance)(popupEle, _ej2Popups.Popup);
                popupObj.hide();
                popupId = popupEle.id;
                popupObj.destroy();
                (0, _ej2Base.detach)(popupEle);
              } else {
                _this.toggleAnimation(ul_1, false);
              }

              closeArgs = {
                element: ul_1,
                parentItem: item_1,
                items: items_1
              };

              _this.trigger('onClose', closeArgs);

              _this.navIdx.pop();
            }

            var trgtliId;
            var closedLi;
            var trgtLi;

            var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();

            var liElem = e && e.target && _this.getLI(e.target);

            if (_this.isCMenu) {
              if (_this.canOpen(e.target)) {
                _this.openMenu(null, null, _this.pageY, _this.pageX, e);
              }

              _this.isCMenu = false;
            }

            if (_this.isMenu && trgtpopUp && popupId.length) {
              trgtliId = new RegExp('(.*)-ej2menu-' + _this.element.id + '-popup').exec(popupId)[1];
              closedLi = trgtpopUp.querySelector('#' + trgtliId);
              trgtLi = liElem && trgtpopUp.querySelector('#' + liElem.id);
            }

            if (isOpen && _this.hamburgerMode && ulIndex) {
              _this.afterCloseMenu(e);
            } else if (isOpen && !_this.hamburgerMode && _this.navIdx.length && closedLi && !trgtLi) {
              _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
            } else if (isOpen && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1)) {
              _this.closeMenu(null, e);
            } else if (isOpen && (0, _ej2Base.isNullOrUndefined)(ulIndex) && _this.navIdx.length) {
              _this.closeMenu(null, e);
            } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {
              _this.isMenusClosed = true;

              _this.closeMenu(0, e);
            } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && (0, _ej2Base.closest)(e.target, '.e-menu-parent.e-control')) {
              _this.closeMenu(0, e);
            } else {
              if (isOpen && (_this.keyType === 'right' || _this.keyType === 'click')) {
                _this.afterCloseMenu(e);
              } else {
                var cul = _this.getUlByNavIdx();

                var sli_1 = _this.getLIByClass(cul, SELECTED);

                if (sli_1) {
                  sli_1.setAttribute('aria-expanded', 'false');
                  sli_1.classList.remove(SELECTED);
                  sli_1.classList.add(FOCUSED);
                  sli_1.focus();
                }
              }
            }

            _this.removeStateWrapper();
          });
        }
      }
    };

    MenuBase.prototype.destroyScrollObj = function (scrollObj, scrollEle) {
      if (scrollObj) {
        scrollObj.destroy();
        scrollEle.parentElement.appendChild((0, _ej2Base.select)('.e-menu-parent', scrollEle));
        (0, _ej2Base.detach)(scrollEle);
      }
    };

    MenuBase.prototype.getPopups = function () {
      var _this = this;

      var popups = [];
      [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(function (elem) {
        if (_this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {
          popups.push(elem);
        }
      });
      return popups;
    };

    MenuBase.prototype.isMenuVisible = function () {
      return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && (0, _ej2Base.isVisible)(this.element).valueOf();
    };

    MenuBase.prototype.canOpen = function (target) {
      var canOpen = true;

      if (this.filter) {
        canOpen = false;
        var filter = this.filter.split(' ');

        for (var i = 0, len = filter.length; i < len; i++) {
          if ((0, _ej2Base.closest)(target, '.' + filter[i])) {
            canOpen = true;
            break;
          }
        }
      }

      return canOpen;
    };

    MenuBase.prototype.openMenu = function (li, item, top, left, e, target) {
      if (top === void 0) {
        top = 0;
      }

      if (left === void 0) {
        left = 0;
      }

      if (e === void 0) {
        e = null;
      }

      if (target === void 0) {
        target = this.targetElement;
      }

      var eventArgs;
      var wrapper = this.getWrapper();
      this.lItem = li;
      var elemId = this.element.id !== '' ? this.element.id : 'menu';
      this.isMenusClosed = false;

      if (li) {
        this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);

        if (!this.isMenu && _ej2Base.Browser.isDevice) {
          wrapper.lastChild.style.display = 'none';
          var data = {
            text: item[this.getField('text')].toString(),
            iconCss: ICONS + ' e-previous'
          };
          var hdata = new MenuItem(this.items[0], 'items', data, true);
          var hli = this.createItems([hdata]).children[0];
          hli.classList.add(HEADER);
          this.uList.insertBefore(hli, this.uList.children[0]);
        }

        if (this.isMenu) {
          this.popupWrapper = this.createElement('div', {
            className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,
            id: li.id + '-ej2menu-' + elemId + '-popup'
          });

          if (this.hamburgerMode) {
            top = li.offsetHeight;
            li.appendChild(this.popupWrapper);
          } else {
            document.body.appendChild(this.popupWrapper);
          }

          this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;
          this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);

          if (this.hamburgerMode) {
            this.calculateIndentSize(this.uList, li);
          } else {
            if (this.cssClass) {
              (0, _ej2Base.addClass)([this.popupWrapper], this.cssClass.split(' '));
            }

            this.popupObj.hide();
          }

          this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');
        } else {
          this.uList.style.zIndex = this.element.style.zIndex;
          wrapper.appendChild(this.uList);
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
        }
      } else {
        this.uList = this.element;
        this.uList.style.zIndex = (0, _ej2Popups.getZindexPartial)(target ? target : this.element).toString();
        this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');
      }

      if (this.isMenu && this.template && (0, _ej2Base.isBlazor)()) {
        var menuTemplateId = this.element.id + TEMPLATE_PROPERTY;

        if (Object.keys(_ej2Base.blazorTemplates).length) {
          var itemFromBlazorTemplate = _ej2Base.blazorTemplates[menuTemplateId];
          this.tempItem = this.tempItem.concat(itemFromBlazorTemplate);
          _ej2Base.blazorTemplates[menuTemplateId] = this.tempItem;
        }

        (0, _ej2Base.updateBlazorTemplate)(menuTemplateId, TEMPLATE_PROPERTY, this);
      }
    };

    MenuBase.prototype.calculateIndentSize = function (ul, li) {
      var liStyle = getComputedStyle(li);
      var liIndent = parseInt(liStyle.textIndent, 10);

      if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {
        liIndent *= 2;
      } else {
        liIndent += liIndent / 4;
      }

      ul.style.textIndent = liIndent + 'px';
      var blankIconElem = ul.querySelectorAll('.e-blankicon');

      if (blankIconElem && blankIconElem.length) {
        var menuIconElem = ul.querySelector('.e-menu-icon');
        var menuIconElemStyle = getComputedStyle(menuIconElem);
        var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;

        for (var i = 0; i < blankIconElem.length; i++) {
          blankIconElem[i].style.textIndent = blankIconIndent + 'px';
        }
      }
    };

    MenuBase.prototype.generatePopup = function (popupWrapper, ul, li, isNestedOrVertical) {
      var _this = this;

      var popupObj = new _ej2Popups.Popup(popupWrapper, {
        actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',
        relateTo: li,
        collision: this.hamburgerMode ? {
          X: 'none',
          Y: 'none'
        } : {
          X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',
          Y: 'fit'
        },
        position: isNestedOrVertical && !this.hamburgerMode ? {
          X: 'right',
          Y: 'top'
        } : {
          X: 'left',
          Y: 'bottom'
        },
        targetType: 'relative',
        enableRtl: this.enableRtl,
        content: ul,
        open: function () {
          var scrollEle = (0, _ej2Base.select)('.e-menu-vscroll', popupObj.element);

          if (scrollEle) {
            scrollEle.style.height = 'inherit';
            scrollEle.style.maxHeight = '';
          }

          var ul = (0, _ej2Base.select)('.e-ul', popupObj.element);
          popupObj.element.style.maxHeight = '';
          ul.focus();

          _this.triggerOpen(ul);
        }
      });
      return popupObj;
    };

    MenuBase.prototype.createHeaderContainer = function (wrapper) {
      wrapper = wrapper || this.getWrapper();
      var spanElem = this.createElement('span', {
        className: 'e-' + this.getModuleName() + '-header'
      });
      var tempTitle = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(this.title) : this.title;
      var spanTitle = this.createElement('span', {
        className: 'e-' + this.getModuleName() + '-title',
        innerHTML: tempTitle
      });
      var spanIcon = this.createElement('span', {
        className: 'e-icons e-' + this.getModuleName() + '-icon',
        attrs: {
          'tabindex': '0'
        }
      });
      spanElem.appendChild(spanTitle);
      spanElem.appendChild(spanIcon);
      wrapper.insertBefore(spanElem, this.element);
    };

    MenuBase.prototype.openHamburgerMenu = function (e) {
      if (this.hamburgerMode) {
        var eventArgs = void 0;
        this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');
      }
    };

    MenuBase.prototype.closeHamburgerMenu = function (e) {
      var _this = this;

      if (this.hamburgerMode) {
        var beforeCloseArgs = void 0;
        beforeCloseArgs = {
          element: this.element,
          parentItem: null,
          event: e,
          items: this.items,
          cancel: false
        };
        this.trigger('beforeClose', beforeCloseArgs, function (observedHamburgerCloseArgs) {
          if (!observedHamburgerCloseArgs.cancel) {
            _this.closeMenu(null, e);

            _this.element.classList.add('e-hide-menu');

            _this.trigger('onClose', {
              element: _this.element,
              parentItem: null,
              items: _this.items
            });
          }
        });
      }
    };

    MenuBase.prototype.callFit = function (element, x, y, top, left) {
      return (0, _ej2Popups.fit)(element, null, {
        X: x,
        Y: y
      }, {
        top: top,
        left: left
      });
    };

    MenuBase.prototype.triggerBeforeOpen = function (li, ul, item, e, top, left, type) {
      var _this = this;

      var navIdx = this.getIndex(li ? li.id : null, true);
      var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;
      var eventArgs = {
        element: ul,
        items: items,
        parentItem: item,
        event: e,
        cancel: false,
        top: top,
        left: left
      };
      var menuType = type;
      this.trigger('beforeOpen', eventArgs, function (observedOpenArgs) {
        switch (menuType) {
          case 'menu':
            if (!_this.hamburgerMode) {
              _this.top = observedOpenArgs.top;
              _this.left = observedOpenArgs.left;
            }

            _this.popupWrapper.style.display = 'block';

            if (!_this.hamburgerMode) {
              _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + 'px';

              _this.addScrolling(_this.popupWrapper, _this.uList, 'vscroll', _this.popupWrapper.offsetHeight, _this.uList.offsetHeight);

              _this.checkScrollOffset(e);
            }

            var collide = void 0;

            if (!_this.hamburgerMode && !_this.left && !_this.top) {
              _this.popupObj.refreshPosition(_this.lItem, true);

              _this.left = parseInt(_this.popupWrapper.style.left, 10);
              _this.top = parseInt(_this.popupWrapper.style.top, 10);

              if (_this.enableRtl) {
                _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
              }

              collide = (0, _ej2Popups.isCollide)(_this.popupWrapper, null, _this.left, _this.top);

              if ((_this.isNestedOrVertical || _this.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {
                _this.popupObj.collision.X = 'none';
                var offWidth = (0, _ej2Base.closest)(_this.lItem, '.e-' + _this.getModuleName() + '-wrapper').offsetWidth;
                _this.left = _this.enableRtl ? (0, _ej2Popups.calculatePosition)(_this.lItem, _this.isNestedOrVertical ? 'right' : 'left', 'top').left : _this.left - _this.popupWrapper.offsetWidth - offWidth;
              }

              collide = (0, _ej2Popups.isCollide)(_this.popupWrapper, null, _this.left, _this.top);

              if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {
                _this.left = _this.callFit(_this.popupWrapper, true, false, _this.top, _this.left).left;
              }

              _this.popupWrapper.style.left = _this.left + 'px';
            } else {
              _this.popupObj.collision = {
                X: 'none',
                Y: 'none'
              };
            }

            _this.popupWrapper.style.display = '';
            break;

          case 'none':
            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
            break;

          case 'hamburger':
            if (!observedOpenArgs.cancel) {
              _this.element.classList.remove('e-hide-menu');

              _this.triggerOpen(_this.element);
            }

            break;
        }

        if (menuType !== 'hamburger') {
          if (observedOpenArgs.cancel) {
            if (_this.isMenu) {
              _this.popupObj.destroy();

              (0, _ej2Base.detach)(_this.popupWrapper);
            }

            _this.navIdx.pop();
          } else {
            if (_this.isMenu) {
              if (_this.hamburgerMode) {
                _this.popupWrapper.style.top = _this.top + 'px';
                _this.popupWrapper.style.left = 0 + 'px';

                _this.toggleAnimation(_this.popupWrapper);
              } else {
                _this.wireKeyboardEvent(_this.popupWrapper);

                (0, _ej2Base.rippleEffect)(_this.popupWrapper, {
                  selector: '.' + ITEM
                });
                _this.popupWrapper.style.left = _this.left + 'px';
                _this.popupWrapper.style.top = _this.top + 'px';
                var animationOptions = _this.animationSettings.effect !== 'None' ? {
                  name: _this.animationSettings.effect,
                  duration: _this.animationSettings.duration,
                  timingFunction: _this.animationSettings.easing
                } : null;

                _this.popupObj.show(animationOptions, _this.lItem);
              }
            } else {
              _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);

              _this.toggleAnimation(_this.uList);
            }
          }
        }

        if (_this.keyType === 'right') {
          var cul = _this.getUlByNavIdx();

          li.classList.remove(FOCUSED);

          if (_this.isMenu && _this.navIdx.length === 1) {
            _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);
          }

          li.classList.add(SELECTED);

          if (_this.action === ENTER) {
            var eventArgs_1 = {
              element: li,
              item: item,
              event: e
            };

            _this.trigger('select', eventArgs_1);
          }

          li.focus();
          cul = _this.getUlByNavIdx();

          var index = _this.isValidLI(cul.children[0], 0, _this.action);

          cul.children[index].classList.add(FOCUSED);
          cul.children[index].focus();
        }
      });
    };

    MenuBase.prototype.checkScrollOffset = function (e) {
      var wrapper = this.getWrapper();

      if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {
        var trgt = (0, _ej2Base.isNullOrUndefined)(e) ? this.element : (0, _ej2Base.closest)(e.target, '.' + ITEM);
        var offsetEle = (0, _ej2Base.select)('.e-hscroll-bar', wrapper);
        var offsetLeft = void 0;
        var offsetRight = void 0;

        if (offsetEle.scrollLeft > trgt.offsetLeft) {
          offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
        }

        offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
        offsetRight = trgt.offsetLeft + trgt.offsetWidth;

        if (offsetLeft < offsetRight) {
          offsetEle.scrollLeft += offsetRight - offsetLeft;
        }
      }
    };

    MenuBase.prototype.addScrolling = function (wrapper, ul, scrollType, wrapperOffset, contentOffset) {
      if (this.enableScrolling && wrapperOffset < contentOffset) {
        var scrollEle = this.createElement('div', {
          className: 'e-menu-' + scrollType
        });
        wrapper.appendChild(scrollEle);
        scrollEle.appendChild(ul);
        scrollEle.style.maxHeight = wrapper.style.maxHeight;
        var scrollObj = void 0;
        wrapper.style.overflow = 'hidden';

        if (scrollType === 'vscroll') {
          scrollObj = new _vScroll.VScroll({
            enableRtl: this.enableRtl
          }, scrollEle);
          scrollObj.scrollStep = (0, _ej2Base.select)('.e-' + scrollType + '-bar', wrapper).offsetHeight / 2;
        } else {
          scrollObj = new _hScroll.HScroll({
            enableRtl: this.enableRtl
          }, scrollEle);
          scrollObj.scrollStep = (0, _ej2Base.select)('.e-' + scrollType + '-bar', wrapper).offsetWidth;
        }
      }
    };

    MenuBase.prototype.setPosition = function (li, ul, top, left) {
      var px = 'px';
      this.toggleVisiblity(ul);

      if (ul === this.element || !(0, _ej2Base.isNullOrUndefined)(left) && !(0, _ej2Base.isNullOrUndefined)(top)) {
        var collide = (0, _ej2Popups.isCollide)(ul, null, left, top);

        if (collide.indexOf('right') > -1) {
          left = left - ul.offsetWidth;
        }

        if (collide.indexOf('bottom') > -1) {
          var offset = this.callFit(ul, false, true, top, left);
          top = offset.top - 20;
        }

        collide = (0, _ej2Popups.isCollide)(ul, null, left, top);

        if (collide.indexOf('left') > -1) {
          var offset = this.callFit(ul, true, false, top, left);
          left = offset.left;
        }
      } else {
        if (_ej2Base.Browser.isDevice) {
          top = Number(this.element.style.top.replace(px, ''));
          left = Number(this.element.style.left.replace(px, ''));
        } else {
          var x = this.enableRtl ? 'left' : 'right';
          var offset = (0, _ej2Popups.calculatePosition)(li, x, 'top');
          top = offset.top;
          left = offset.left;
          var collide = (0, _ej2Popups.isCollide)(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
          var xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;

          if (xCollision) {
            offset = (0, _ej2Popups.calculatePosition)(li, this.enableRtl ? 'right' : 'left', 'top');
            left = offset.left;
          }

          if (this.enableRtl || xCollision) {
            left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
          }

          if (collide.indexOf('bottom') > -1) {
            offset = this.callFit(ul, false, true, top, left);
            top = offset.top;
          }
        }
      }

      this.toggleVisiblity(ul, false);
      ul.style.top = top + px;
      ul.style.left = left + px;
    };

    MenuBase.prototype.toggleVisiblity = function (ul, isVisible) {
      if (isVisible === void 0) {
        isVisible = true;
      }

      ul.style.visibility = isVisible ? 'hidden' : '';
      ul.style.display = isVisible ? 'block' : 'none';
    };

    MenuBase.prototype.createItems = function (items) {
      var _this = this;

      var level = this.navIdx ? this.navIdx.length : 0;
      var fields = this.getFields(level); // tslint:disable-next-line:no-any

      if ((0, _ej2Base.isBlazor)() && this.template && items.length && items[0].properties) {
        var itemsObj_1 = [];
        items.forEach(function (item, index) {
          itemsObj_1.push({});
          itemsObj_1[index][fields.text] = item[fields.text];

          if (!item[fields.id]) {
            item[fields.id] = (0, _ej2Base.getUniqueID)('menuitem');
          }

          itemsObj_1[index][fields.id] = item[fields.id];
          itemsObj_1[index][fields.iconCss] = item[fields.iconCss];
          itemsObj_1[index][fields.url] = item[fields.url];
          itemsObj_1[index][fields.child] = item[fields.child];
          itemsObj_1[index][fields.separator] = item[fields.separator];
        });
        items = itemsObj_1;
      }

      var showIcon = this.hasField(items, this.getField('iconCss', level));
      var listBaseOptions = {
        showIcon: showIcon,
        moduleName: 'menu',
        fields: fields,
        template: this.template,
        itemNavigable: true,
        itemCreating: function (args) {
          if (!args.curData[args.fields[fields.id]]) {
            args.curData[args.fields[fields.id]] = (0, _ej2Base.getUniqueID)('menuitem');
          }

          args.curData.htmlAttributes = {
            role: 'menuitem',
            tabindex: '-1'
          };

          if (_this.isMenu && !args.curData[_this.getField('separator', level)]) {
            args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];
          }

          if (args.curData[args.fields[fields.iconCss]] === '') {
            args.curData[args.fields[fields.iconCss]] = null;
          }
        },
        itemCreated: function (args) {
          if (args.curData[_this.getField('separator', level)]) {
            args.item.classList.add(SEPARATOR);
            args.item.removeAttribute('role');
          }

          if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField('separator', level)]) {
            args.item.classList.add('e-blankicon');
          }

          if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
            var span = _this.createElement('span', {
              className: ICONS + ' ' + CARET
            });

            args.item.appendChild(span);
            args.item.setAttribute('aria-haspopup', 'true');
            args.item.setAttribute('aria-expanded', 'false');

            if (!_this.isMenu) {
              args.item.removeAttribute('role');
            }

            args.item.classList.add('e-menu-caret-icon');
          }

          if (_this.isMenu && _this.template) {
            args.item.setAttribute('id', args.curData[args.fields.id].toString());
            args.item.removeAttribute('data-uid');

            if (args.item.classList.contains('e-level-1')) {
              args.item.classList.remove('e-level-1');
            }

            if (args.item.classList.contains('e-has-child')) {
              args.item.classList.remove('e-has-child');
            }
          }

          var eventArgs = {
            item: args.curData,
            element: args.item
          };

          _this.trigger('beforeItemRender', eventArgs);
        }
      };
      this.setProperties({
        'items': this.items
      }, true);

      if (this.isMenu) {
        listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
      }

      var ul = _ej2Lists.ListBase.createList(this.createElement, items, listBaseOptions, !this.template);

      ul.setAttribute('tabindex', '0');

      if (this.isMenu) {
        ul.setAttribute('role', 'menu');
      }

      return ul;
    };

    MenuBase.prototype.moverHandler = function (e) {
      var trgt = e.target;
      this.liTrgt = trgt;
      var cli = this.getLI(trgt);
      var wrapper = cli ? (0, _ej2Base.closest)(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();
      var hdrWrapper = this.getWrapper();
      var regex = new RegExp('-ej2menu-(.*)-popup');
      var ulId;
      var isDifferentElem = false;

      if (!wrapper) {
        return;
      }

      if (wrapper.id !== '') {
        ulId = regex.exec(wrapper.id)[1];
      } else {
        ulId = wrapper.querySelector('ul').id;
      }

      if (ulId !== this.element.id) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);

        if (this.navIdx.length) {
          isDifferentElem = true;
        } else {
          return;
        }
      }

      if (cli && (0, _ej2Base.closest)(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
        cli.classList.add(FOCUSED);

        if (!this.showItemOnClick) {
          this.clickHandler(e);
        }
      } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
      }

      if (this.isMenu) {
        if (!this.showItemOnClick && trgt.parentElement !== wrapper && !(0, _ej2Base.closest)(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length)) {
          this.removeLIStateByClass([FOCUSED], [wrapper]);

          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        } else if (isDifferentElem && !this.showItemOnClick) {
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        }

        if (!this.isClosed) {
          this.removeStateWrapper();
        }

        this.isClosed = false;
      }
    };

    MenuBase.prototype.removeStateWrapper = function () {
      if (this.liTrgt) {
        var wrapper = (0, _ej2Base.closest)(this.liTrgt, '.e-menu-vscroll');

        if (this.liTrgt.tagName === 'DIV' && wrapper) {
          this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
        }
      }
    };

    MenuBase.prototype.removeLIStateByClass = function (classList, element) {
      var li;

      var _loop_1 = function (i) {
        classList.forEach(function (className) {
          li = (0, _ej2Base.select)('.' + className, element[i]);

          if (li) {
            li.classList.remove(className);
          }
        });
      };

      for (var i = 0; i < element.length; i++) {
        _loop_1(i);
      }
    };

    MenuBase.prototype.getField = function (propName, level) {
      if (level === void 0) {
        level = 0;
      }

      var fieldName = this.fields[propName];
      return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
    };

    MenuBase.prototype.getFields = function (level) {
      if (level === void 0) {
        level = 0;
      }

      return {
        id: this.getField('itemId', level),
        iconCss: this.getField('iconCss', level),
        text: this.getField('text', level),
        url: this.getField('url', level),
        child: this.getField('children', level),
        separator: this.getField('separator', level)
      };
    };

    MenuBase.prototype.hasField = function (items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i][field]) {
          return true;
        }
      }

      return false;
    };

    MenuBase.prototype.menuHeaderClickHandler = function (e) {
      if ((0, _ej2Base.closest)(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {
        return;
      }

      this.element.classList.contains('e-hide-menu') ? this.openHamburgerMenu(e) : this.closeHamburgerMenu(e);
    };

    MenuBase.prototype.clickHandler = function (e) {
      if (this.isTapHold) {
        this.isTapHold = false;
      } else {
        var wrapper = this.getWrapper();
        var trgt = e.target;
        var cli = this.cli = this.getLI(trgt);
        var regex = new RegExp('-ej2menu-(.*)-popup');
        var cliWrapper = cli ? (0, _ej2Base.closest)(cli, '.e-' + this.getModuleName() + '-wrapper') : null;
        var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);

        if (_ej2Base.Browser.isDevice && this.isMenu) {
          this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
          this.mouseDownHandler(e);
        }

        if (cli && cliWrapper && this.isMenu) {
          var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;

          if (this.element.id !== cliWrapperId) {
            return;
          }
        }

        if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {
          this.setLISelected(cli);
          var navIdx = this.getIndex(cli.id, true);
          var item = this.getItem(navIdx);
          var eventArgs = {
            element: cli,
            item: item,
            event: e
          };
          this.trigger('select', eventArgs);
        }

        if (isInstLI && (e.type === 'mouseover' || _ej2Base.Browser.isDevice || this.showItemOnClick)) {
          var ul = void 0;

          if (cli.classList.contains(HEADER)) {
            ul = wrapper.children[this.navIdx.length - 1];
            this.toggleAnimation(ul);
            var sli = this.getLIByClass(ul, SELECTED);

            if (sli) {
              sli.classList.remove(SELECTED);
            }

            (0, _ej2Base.detach)(cli.parentNode);
            this.navIdx.pop();
          } else {
            if (!cli.classList.contains(SEPARATOR)) {
              this.showSubMenu = true;
              var cul = cli.parentNode;
              this.cliIdx = this.getIdx(cul, cli);

              if (this.isMenu || !_ej2Base.Browser.isDevice) {
                var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), (0, _ej2Base.closest)(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);

                if (this.navIdx[culIdx] === this.cliIdx) {
                  this.showSubMenu = false;
                }

                if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {
                  var sli = this.getLIByClass(cul, SELECTED);

                  if (sli) {
                    sli.classList.remove(SELECTED);
                  }

                  this.isClosed = true;
                  this.keyType = 'click';
                  this.closeMenu(culIdx + 1, e);
                }
              }

              if (!this.isClosed) {
                this.afterCloseMenu(e);
              }

              this.isClosed = false;
            }
          }
        } else {
          if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && (0, _ej2Base.closest)(trgt, '.e-menu-vscroll')) {
            var popupEle = (0, _ej2Base.closest)(trgt, '.' + POPUP);
            var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;

            if (cIdx < this.navIdx.length) {
              this.closeMenu(cIdx + 1, e);
              this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
            }
          } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {
            this.menuHeaderClickHandler(e);
          } else {
            if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
              if (!cli) {
                this.removeLIStateByClass([SELECTED], [wrapper]);
              }

              if (!cli || !cli.querySelector('.' + CARET)) {
                this.closeMenu(null, e);
              }
            }
          }
        }
      }
    };

    MenuBase.prototype.afterCloseMenu = function (e) {
      if (this.showSubMenu) {
        var idx = this.navIdx.concat(this.cliIdx);
        var item = this.getItem(idx);

        if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {
          if (e.type === 'mouseover' || _ej2Base.Browser.isDevice && this.isMenu) {
            this.setLISelected(this.cli);
          }

          this.cli.setAttribute('aria-expanded', 'true');
          this.navIdx.push(this.cliIdx);
          this.openMenu(this.cli, item, null, null, e);
        } else {
          if (e.type !== 'mouseover') {
            this.closeMenu(null, e);
          }
        }
      }

      this.keyType = '';
    };

    MenuBase.prototype.setLISelected = function (li) {
      var sli = this.getLIByClass(li.parentElement, SELECTED);

      if (sli) {
        sli.classList.remove(SELECTED);
      }

      if (!this.isMenu) {
        li.classList.remove(FOCUSED);
      }

      li.classList.add(SELECTED);
    };

    MenuBase.prototype.getLIByClass = function (ul, classname) {
      for (var i = 0, len = ul.children.length; i < len; i++) {
        if (ul.children[i].classList.contains(classname)) {
          return ul.children[i];
        }
      }

      return null;
    };

    MenuBase.prototype.getItem = function (navIdx) {
      navIdx = navIdx.slice();
      var idx = navIdx.pop();
      var items = this.getItems(navIdx);
      return items[idx];
    };

    MenuBase.prototype.getItems = function (navIdx) {
      var items = this.items;

      for (var i = 0; i < navIdx.length; i++) {
        items = items[navIdx[i]][this.getField('children', i)];
      }

      return items;
    };

    MenuBase.prototype.setItems = function (newItems, navIdx) {
      var items = this.getItems(navIdx);
      items.splice(0, items.length);

      for (var i = 0; i < newItems.length; i++) {
        items.splice(i, 0, newItems[i]);
      }
    };

    MenuBase.prototype.getIdx = function (ul, li, skipHdr) {
      if (skipHdr === void 0) {
        skipHdr = true;
      }

      var idx = Array.prototype.indexOf.call(ul.querySelectorAll('li'), li);

      if (this.isMenu && this.template && (0, _ej2Base.isBlazor)()) {
        idx = Array.prototype.indexOf.call(ul.querySelectorAll(li.tagName), li);
      } else {
        idx = Array.prototype.indexOf.call(ul.children, li);
      }

      if (skipHdr && ul.children[0].classList.contains(HEADER)) {
        idx--;
      }

      return idx;
    };

    MenuBase.prototype.getLI = function (elem) {
      if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {
        return elem;
      }

      return (0, _ej2Base.closest)(elem, 'li.e-menu-item');
    };

    MenuBase.prototype.removeChildElement = function (elem) {
      while (elem.firstElementChild) {
        elem.removeChild(elem.firstElementChild);
      }

      return elem;
    };
    /**
     * Called internally if any of the property value changed
     * @private
     * @param {MenuBaseModel} newProp
     * @param {MenuBaseModel} oldProp
     * @returns void
     */


    MenuBase.prototype.onPropertyChanged = function (newProp, oldProp) {
      var _this = this;

      var wrapper = this.getWrapper();

      var _loop_2 = function (prop) {
        switch (prop) {
          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([wrapper], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([wrapper], newProp.cssClass.split(' '));
            }

            break;

          case 'enableRtl':
            wrapper.classList.toggle(RTL);
            break;

          case 'showItemOnClick':
            this_1.unWireEvents();
            this_1.showItemOnClick = newProp.showItemOnClick;
            this_1.wireEvents();
            break;

          case 'enableScrolling':
            if (newProp.enableScrolling) {
              var ul_2;
              this_1.element.classList.contains('e-vertical') ? this_1.addScrolling(wrapper, this_1.element, 'vscroll', wrapper.offsetHeight, this_1.element.offsetHeight) : this_1.addScrolling(wrapper, this_1.element, 'hscroll', wrapper.offsetWidth, this_1.element.offsetWidth);
              this_1.getPopups().forEach(function (wrapper) {
                ul_2 = (0, _ej2Base.select)('.e-ul', wrapper);

                _this.addScrolling(wrapper, ul_2, 'vscroll', wrapper.offsetHeight, ul_2.offsetHeight);
              });
            } else {
              var ul_3 = wrapper.children[0];
              this_1.element.classList.contains('e-vertical') ? this_1.destroyScrollObj((0, _ej2Base.getInstance)(ul_3, _vScroll.VScroll), ul_3) : this_1.destroyScrollObj((0, _ej2Base.getInstance)(ul_3, _hScroll.HScroll), ul_3);
              wrapper.style.overflow = '';
              wrapper.appendChild(this_1.element);
              this_1.getPopups().forEach(function (wrapper) {
                ul_3 = wrapper.children[0];

                _this.destroyScrollObj((0, _ej2Base.getInstance)(ul_3, _vScroll.VScroll), ul_3);

                wrapper.style.overflow = '';
              });
            }

            break;

          case 'items':
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0;

            if (!Object.keys(oldProp.items).length) {
              var ul_4 = this_1.element;

              if ((0, _ej2Base.isBlazor)()) {
                ul_4 = this_1.removeChildElement(this_1.element);
              } else {
                ul_4.innerHTML = '';
              }

              var lis = [].slice.call(this_1.createItems(this_1.items).children);
              lis.forEach(function (li) {
                ul_4.appendChild(li);
              });

              for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                (0, _ej2Base.detach)(wrapper.lastElementChild);
              }

              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);

              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));

                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }

                navIdx.length = 0;
              }
            }

            break;
        }
      };

      var this_1 = this;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        _loop_2(prop);
      }
    };

    MenuBase.prototype.getChangedItemIndex = function (newProp, index, idx) {
      index.push(idx);
      var key = Object.keys(newProp.items[idx]).pop();

      if (key === 'items') {
        var item = newProp.items[idx];
        this.getChangedItemIndex(item, index, Number(Object.keys(item.items).pop()));
      } else {
        if (key === 'isParentArray' && index.length > 1) {
          index.pop();
        }
      }

      return index;
    };

    MenuBase.prototype.removeItem = function (item, navIdx, idx) {
      item.splice(idx, 1);
      var uls = this.getWrapper().children;

      if (navIdx.length < uls.length) {
        (0, _ej2Base.detach)(uls[navIdx.length].children[idx]);
      }
    };
    /**
     * Used to unwire the bind events.
     * @private
     */


    MenuBase.prototype.unWireEvents = function (targetSelctor) {
      if (targetSelctor === void 0) {
        targetSelctor = this.target;
      }

      var wrapper = this.getWrapper();

      if (targetSelctor) {
        var target = void 0;
        var touchModule = void 0;
        var targetElems = (0, _ej2Base.selectAll)(targetSelctor);

        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];

          if (this.isMenu) {
            _ej2Base.EventHandler.remove(target, 'click', this.menuHeaderClickHandler);
          } else {
            if (_ej2Base.Browser.isIos) {
              touchModule = (0, _ej2Base.getInstance)(target, _ej2Base.Touch);

              if (touchModule) {
                touchModule.destroy();
              }
            } else {
              _ej2Base.EventHandler.remove(target, 'contextmenu', this.cmenuHandler);
            }
          }
        }

        if (!this.isMenu) {
          _ej2Base.EventHandler.remove(this.targetElement, 'scroll', this.scrollHandler);

          for (var _i = 0, _a = (0, _ej2Popups.getScrollableParent)(this.targetElement); _i < _a.length; _i++) {
            var parent_2 = _a[_i];

            _ej2Base.EventHandler.remove(parent_2, 'scroll', this.scrollHandler);
          }
        }
      }

      if (!_ej2Base.Browser.isDevice) {
        _ej2Base.EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);

        _ej2Base.EventHandler.remove(document, 'mousedown', this.delegateMouseDownHandler);
      }

      _ej2Base.EventHandler.remove(document, 'click', this.delegateClickHandler);

      this.unWireKeyboardEvent(wrapper);
      this.rippleFn();
    };

    MenuBase.prototype.unWireKeyboardEvent = function (element) {
      var keyboardModule = (0, _ej2Base.getInstance)(element, _ej2Base.KeyboardEvents);

      if (keyboardModule) {
        keyboardModule.destroy();
      }
    };

    MenuBase.prototype.toggleAnimation = function (ul, isMenuOpen) {
      var _this = this;

      if (isMenuOpen === void 0) {
        isMenuOpen = true;
      }

      var pUlHeight;
      var pElement;

      if (this.animationSettings.effect === 'None' || !isMenuOpen) {
        this.end(ul, isMenuOpen);
      } else {
        this.animation.animate(ul, {
          name: this.animationSettings.effect,
          duration: this.animationSettings.duration,
          timingFunction: this.animationSettings.easing,
          begin: function (options) {
            if (_this.hamburgerMode) {
              pElement = options.element.parentElement;
              options.element.style.position = 'absolute';
              pUlHeight = pElement.offsetHeight;
              options.element.style.maxHeight = options.element.offsetHeight + 'px';
              pElement.style.maxHeight = '';
            } else {
              options.element.style.display = 'block';
              options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';
            }
          },
          progress: function (options) {
            if (_this.hamburgerMode) {
              pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';
            }
          },
          end: function (options) {
            if (_this.hamburgerMode) {
              options.element.style.position = '';
              options.element.style.maxHeight = '';
              pElement.style.minHeight = '';
              options.element.style.top = 0 + 'px';
              options.element.children[0].focus();

              _this.triggerOpen(options.element.children[0]);
            } else {
              _this.end(options.element, isMenuOpen);
            }
          }
        });
      }
    };

    MenuBase.prototype.triggerOpen = function (ul) {
      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
      var eventArgs = {
        element: ul,
        parentItem: item,
        items: item ? item.items : this.items
      };
      this.trigger('onOpen', eventArgs);
    };

    MenuBase.prototype.end = function (ul, isMenuOpen) {
      if (isMenuOpen) {
        ul.style.display = 'block';
        ul.style.maxHeight = '';
        this.triggerOpen(ul);

        if (ul.querySelector('.' + FOCUSED)) {
          ul.querySelector('.' + FOCUSED).focus();
        } else {
          var ele = void 0;
          ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];

          if (ele) {
            ele.querySelector('.' + SELECTED).focus();
          } else {
            this.element.focus();
          }
        }
      } else {
        if (ul === this.element) {
          var fli = this.getLIByClass(this.element, FOCUSED);

          if (fli) {
            fli.classList.remove(FOCUSED);
          }

          var sli = this.getLIByClass(this.element, SELECTED);

          if (sli) {
            sli.classList.remove(SELECTED);
          }

          ul.style.display = 'none';
        } else {
          (0, _ej2Base.detach)(ul);
        }
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     */


    MenuBase.prototype.getPersistData = function () {
      return '';
    };
    /**
     * Get wrapper element.
     * @returns Element
     * @private
     */


    MenuBase.prototype.getWrapper = function () {
      return (0, _ej2Base.closest)(this.element, '.e-' + this.getModuleName() + '-wrapper');
    };

    MenuBase.prototype.getIndex = function (data, isUniqueId, items, nIndex, isCallBack, level) {
      if (items === void 0) {
        items = this.items;
      }

      if (nIndex === void 0) {
        nIndex = [];
      }

      if (isCallBack === void 0) {
        isCallBack = false;
      }

      if (level === void 0) {
        level = 0;
      }

      var item;
      level = isCallBack ? level + 1 : 0;

      for (var i = 0, len = items.length; i < len; i++) {
        item = items[i];

        if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {
          nIndex.push(i);
          break;
        } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {
          nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);

          if (nIndex[nIndex.length - 1] === -1) {
            if (i !== len - 1) {
              nIndex.pop();
            }
          } else {
            nIndex.unshift(i);
            break;
          }
        } else {
          if (i === len - 1) {
            nIndex.push(-1);
          }
        }
      }

      return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
    };
    /**
     * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.
     * @param items Text items that needs to be enabled/disabled.
     * @param enable Set `true`/`false` to enable/disable the list items.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */


    MenuBase.prototype.enableItems = function (items, enable, isUniqueId) {
      if (enable === void 0) {
        enable = true;
      }

      var ul;
      var idx;
      var navIdx;
      var disabled = DISABLED;
      var skipItem;

      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);

        if (this.navIdx.length) {
          if (navIdx.length !== 1) {
            skipItem = false;

            for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
              if (navIdx[i_1] !== this.navIdx[i_1]) {
                skipItem = true;
                break;
              }
            }

            if (skipItem) {
              continue;
            }
          }
        } else {
          if (navIdx.length !== 1) {
            continue;
          }
        }

        idx = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);

        if (ul) {
          if (enable) {
            if (this.isMenu) {
              ul.children[idx].classList.remove(disabled);
              ul.children[idx].removeAttribute('aria-disabled');
            } else {
              if (_ej2Base.Browser.isDevice && !ul.classList.contains('e-contextmenu')) {
                ul.children[idx + 1].classList.remove(disabled);
              } else {
                ul.children[idx].classList.remove(disabled);
              }
            }
          } else {
            if (this.isMenu) {
              ul.children[idx].classList.add(disabled);
              ul.children[idx].setAttribute('aria-disabled', 'true');
            } else {
              if (_ej2Base.Browser.isDevice && !ul.classList.contains('e-contextmenu')) {
                ul.children[idx + 1].classList.add(disabled);
              } else {
                ul.children[idx].classList.add(disabled);
              }
            }
          }
        }
      }
    };
    /**
     * This method is used to show the menu items in the Menu based on the items text.
     * @param items Text items that needs to be shown.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */


    MenuBase.prototype.showItems = function (items, isUniqueId) {
      this.showHideItems(items, false, isUniqueId);
    };
    /**
     * This method is used to hide the menu items in the Menu based on the items text.
     * @param items Text items that needs to be hidden.
     * @returns void
     */


    MenuBase.prototype.hideItems = function (items, isUniqueId) {
      this.showHideItems(items, true, isUniqueId);
    };

    MenuBase.prototype.showHideItems = function (items, ishide, isUniqueId) {
      var ul;
      var index;
      var navIdx;

      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        index = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);

        if (ul) {
          if (ishide) {
            if (_ej2Base.Browser.isDevice && !ul.classList.contains('e-contextmenu')) {
              ul.children[index + 1].classList.add(HIDE);
            } else {
              ul.children[index].classList.add(HIDE);
            }
          } else {
            if (_ej2Base.Browser.isDevice && !ul.classList.contains('e-contextmenu')) {
              ul.children[index + 1].classList.remove(HIDE);
            } else {
              ul.children[index].classList.remove(HIDE);
            }
          }
        }
      }
    };
    /**
     * It is used to remove the menu items from the Menu based on the items text.
     * @param items Text items that needs to be removed.
     * @returns void
     */


    MenuBase.prototype.removeItems = function (items, isUniqueId) {
      var idx;
      var navIdx;
      var iitems;

      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        this.removeItem(iitems, navIdx, idx);
      }
    };
    /**
     * It is used to insert the menu items after the specified menu item text.
     * @param items Items that needs to be inserted.
     * @param text Text item after that the element to be inserted.
     * @returns void
     */


    MenuBase.prototype.insertAfter = function (items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId);
    };
    /**
     * It is used to insert the menu items before the specified menu item text.
     * @param items Items that needs to be inserted.
     * @param text Text item before that the element to be inserted.
     * @param isUniqueId - Set `true` if it is a unique id.
     * @returns void
     */


    MenuBase.prototype.insertBefore = function (items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId, false);
    };

    MenuBase.prototype.insertItems = function (items, text, isUniqueId, isAfter) {
      if (isAfter === void 0) {
        isAfter = true;
      }

      var li;
      var idx;
      var navIdx;
      var iitems;
      var menuitem;
      var showIcon;

      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(text, isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        menuitem = new MenuItem(iitems[0], 'items', items[i], true);
        iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
        var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);

        if (navIdx.length < uls.length) {
          idx = isAfter ? idx + 1 : idx;
          showIcon = this.hasField(iitems, this.getField('iconCss', navIdx.length - 1));
          li = this.createItems(iitems).children[idx];
          var ul = this.isMenu ? (0, _ej2Base.select)('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];
          ul.insertBefore(li, ul.children[idx]);
        }
      }
    };

    MenuBase.prototype.removeAttributes = function () {
      var _this = this;

      ['top', 'left', 'display', 'z-index'].forEach(function (key) {
        _this.element.style.removeProperty(key);
      });
      ['role', 'tabindex', 'class', 'style'].forEach(function (key) {
        if (key === 'class' && _this.element.classList.contains('e-menu-parent')) {
          _this.element.classList.remove('e-menu-parent');
        }

        if (['class', 'style'].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
          _this.element.removeAttribute(key);
        }

        if (_this.isMenu && key === 'class' && _this.element.classList.contains('e-vertical')) {
          _this.element.classList.remove('e-vertical');
        }
      });
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    MenuBase.prototype.destroy = function () {
      var wrapper = this.getWrapper();

      if (wrapper) {
        this.unWireEvents();

        if (!this.isMenu) {
          this.clonedElement.style.display = '';

          if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {
            (0, _ej2Base.addClass)([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);
            this.element = this.clonedElement;
          } else {
            if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {
              this.setProperties({
                'items': []
              }, true);
            }

            if (document.getElementById(this.clonedElement.id)) {
              var refEle = this.clonedElement.nextElementSibling;
              refEle && refEle !== wrapper ? this.clonedElement.parentElement.insertBefore(this.element, refEle) : this.clonedElement.parentElement.appendChild(this.element);

              if ((0, _ej2Base.isBlazor)()) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = '';
              }

              (0, _ej2Base.append)([].slice.call(this.clonedElement.children), this.element);
              (0, _ej2Base.detach)(this.clonedElement);
              this.removeAttributes();
            }
          }

          this.clonedElement = null;
        } else {
          this.closeMenu();

          if ((0, _ej2Base.isBlazor)()) {
            this.element = this.removeChildElement(this.element);
          } else {
            this.element.innerHTML = '';
          }

          this.removeAttributes();
          wrapper.parentNode.insertBefore(this.element, wrapper);
        }

        if (this.isMenu && this.clonedElement) {
          (0, _ej2Base.detach)(this.element);
          wrapper.style.display = '';
          wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');
          wrapper.removeAttribute('data-ripple');
        } else {
          (0, _ej2Base.detach)(wrapper);
        }

        _super.prototype.destroy.call(this);
      }
    };

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "beforeItemRender", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "onOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "onClose", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], MenuBase.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuBase.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MenuBase.prototype, "showItemOnClick", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuBase.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)('')], MenuBase.prototype, "filter", void 0);

    __decorate([(0, _ej2Base.Property)(null)], MenuBase.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MenuBase.prototype, "enableScrolling", void 0);

    __decorate([(0, _ej2Base.Property)(false)], MenuBase.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Complex)({}, FieldSettings)], MenuBase.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Collection)([], MenuItem)], MenuBase.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Complex)({}, MenuAnimationSettings)], MenuBase.prototype, "animationSettings", void 0);

    MenuBase = __decorate([_ej2Base.NotifyPropertyChanges], MenuBase);
    return MenuBase;
  }(_ej2Base.Component);

  _exports.MenuBase = MenuBase;
});;
define('@syncfusion/ej2-navigations/src/common/v-scroll',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.VScroll = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_ROOT = 'e-vscroll';
  var CLS_RTL = 'e-rtl';
  var CLS_DISABLE = 'e-overlay';
  var CLS_VSCROLLBAR = 'e-vscroll-bar';
  var CLS_VSCROLLCON = 'e-vscroll-content';
  var CLS_NAVARROW = 'e-nav-arrow';
  var CLS_NAVUPARROW = 'e-nav-up-arrow';
  var CLS_NAVDOWNARROW = 'e-nav-down-arrow';
  var CLS_VSCROLLNAV = 'e-scroll-nav';
  var CLS_VSCROLLNAVUP = 'e-scroll-up-nav';
  var CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';
  var CLS_DEVICE = 'e-scroll-device';
  var CLS_OVERLAY = 'e-scroll-overlay';
  var CLS_UPOVERLAY = 'e-scroll-up-overlay';
  var CLS_DOWNOVERLAY = 'e-scroll-down-overlay';
  var OVERLAY_MAXWID = 40;
  /**
   * VScroll module is introduces vertical scroller when content exceeds the current viewing area.
   * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.
   * Hidden content can be view by touch moving or icon click.
   * ```html
   * <div id="scroll"/>
   * <script>
   *   var scrollObj = new VScroll();
   *   scrollObj.appendTo("#scroll");
   * </script>
   * ```
   */

  var VScroll =
  /** @class */
  function (_super) {
    __extends(VScroll, _super);
    /**
     * Initializes a new instance of the VScroll class.
     * @param options  - Specifies VScroll model properties as options.
     * @param element  - Specifies the element for which vertical scrolling applies.
     */


    function VScroll(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the event handler
     * @private
     */


    VScroll.prototype.preRender = function () {
      this.browser = _ej2Base.Browser.info.name;
      this.browserCheck = this.browser === 'mozilla';
      this.isDevice = _ej2Base.Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
      this.initialize();

      if (ele.id === '') {
        ele.id = (0, _ej2Base.getUniqueID)('vscroll');
        this.uniqueId = true;
      }

      ele.style.display = 'block';

      if (this.enableRtl) {
        ele.classList.add(CLS_RTL);
      }
    };
    /**
     * To Initialize the vertical scroll rendering
     * @private
     */


    VScroll.prototype.render = function () {
      this.touchModule = new _ej2Base.Touch(this.element, {
        scroll: this.touchHandler.bind(this),
        swipe: this.swipeHandler.bind(this)
      });

      _ej2Base.EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);

      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlayElement(this.element);
      }

      this.setScrollState();

      _ej2Base.EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);
    };

    VScroll.prototype.setScrollState = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };

    VScroll.prototype.initialize = function () {
      var scrollCnt = (0, _ej2Base.createElement)('div', {
        className: CLS_VSCROLLCON
      });
      var scrollBar = (0, _ej2Base.createElement)('div', {
        className: CLS_VSCROLLBAR
      });
      scrollBar.setAttribute('tabindex', '-1');
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);

      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }

      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflowY = 'hidden';
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };

    VScroll.prototype.getPersistData = function () {
      var keyEntity = ['scrollStep'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    VScroll.prototype.getModuleName = function () {
      return 'vScroll';
    };
    /**
     * Removes the control from the DOM and also removes all its related events.
     * @returns void
     */


    VScroll.prototype.destroy = function () {
      var el = this.element;
      el.style.display = '';
      (0, _ej2Base.removeClass)([this.element], [CLS_ROOT, CLS_DEVICE]);
      var navs = (0, _ej2Base.selectAll)('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);
      var overlays = (0, _ej2Base.selectAll)('.' + CLS_OVERLAY, el);
      [].slice.call(overlays).forEach(function (ele) {
        (0, _ej2Base.detach)(ele);
      });

      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }

      if (this.uniqueId) {
        this.element.removeAttribute('id');
      }

      (0, _ej2Base.detach)(this.scrollEle);

      if (navs.length > 0) {
        (0, _ej2Base.detach)(navs[0]);

        if (!(0, _ej2Base.isNullOrUndefined)(navs[1])) {
          (0, _ej2Base.detach)(navs[1]);
        }
      }

      _ej2Base.EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);

      this.touchModule.destroy();
      this.touchModule = null;

      _super.prototype.destroy.call(this);
    };
    /**
     * Specifies the value to disable/enable the VScroll component.
     * When set to `true` , the component will be disabled.
     * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).
     * @returns void.
     */


    VScroll.prototype.disable = function (value) {
      var navEle = (0, _ej2Base.selectAll)('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);
      value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE);
      [].slice.call(navEle).forEach(function (el) {
        el.setAttribute('tabindex', !value ? '0' : '-1');
      });
    };

    VScroll.prototype.createOverlayElement = function (element) {
      var id = element.id.concat('_nav');
      var downOverlayEle = (0, _ej2Base.createElement)('div', {
        className: CLS_OVERLAY + ' ' + CLS_DOWNOVERLAY
      });
      var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
      var downEle = (0, _ej2Base.createElement)('div', {
        id: id.concat('down'),
        className: clsDown
      });
      var navItem = (0, _ej2Base.createElement)('div', {
        className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      downEle.appendChild(navItem);
      var upEle = (0, _ej2Base.createElement)('div', {
        className: CLS_OVERLAY + ' ' + CLS_UPOVERLAY
      });

      if (this.ieCheck) {
        downEle.classList.add('e-ie-align');
      }

      element.appendChild(downOverlayEle);
      element.appendChild(downEle);
      element.insertBefore(upEle, element.firstChild);
      this.eventBinding([downEle]);
    };

    VScroll.prototype.createNavIcon = function (element) {
      var id = element.id.concat('_nav');
      var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);
      var nav = (0, _ej2Base.createElement)('div', {
        id: id.concat('_down'),
        className: clsDown
      });
      nav.setAttribute('aria-disabled', 'false');
      var navItem = (0, _ej2Base.createElement)('div', {
        className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);
      var navElement = (0, _ej2Base.createElement)('div', {
        id: id.concat('_up'),
        className: clsUp + ' ' + CLS_DISABLE
      });
      navElement.setAttribute('aria-disabled', 'true');
      var navUpItem = (0, _ej2Base.createElement)('div', {
        className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW + ' e-icons'
      });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute('tabindex', '0');
      element.appendChild(nav);
      element.insertBefore(navElement, element.firstChild);

      if (this.ieCheck) {
        nav.classList.add('e-ie-align');
        navElement.classList.add('e-ie-align');
      }

      this.eventBinding([nav, navElement]);
    };

    VScroll.prototype.onKeyPress = function (ev) {
      var _this = this;

      if (ev.key === 'Enter') {
        var timeoutFun_1 = function () {
          _this.keyTimeout = true;

          _this.eleScrolling(10, ev.target, true);
        };

        this.keyTimer = window.setTimeout(function () {
          timeoutFun_1();
        }, 100);
      }
    };

    VScroll.prototype.onKeyUp = function (ev) {
      if (ev.key !== 'Enter') {
        return;
      }

      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }

      clearTimeout(this.keyTimer);
    };

    VScroll.prototype.eventBinding = function (element) {
      var _this = this;

      [].slice.call(element).forEach(function (ele) {
        new _ej2Base.Touch(ele, {
          tapHold: _this.tabHoldHandler.bind(_this),
          tapHoldThreshold: 500
        });
        ele.addEventListener('keydown', _this.onKeyPress.bind(_this));
        ele.addEventListener('keyup', _this.onKeyUp.bind(_this));
        ele.addEventListener('mouseup', _this.repeatScroll.bind(_this));
        ele.addEventListener('touchend', _this.repeatScroll.bind(_this));
        ele.addEventListener('contextmenu', function (e) {
          e.preventDefault();
        });

        _ej2Base.EventHandler.add(ele, 'click', _this.clickEventHandler, _this);
      });
    };

    VScroll.prototype.repeatScroll = function () {
      clearInterval(this.timeout);
    };

    VScroll.prototype.tabHoldHandler = function (ev) {
      var _this = this;

      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;

      var timeoutFun = function () {
        _this.eleScrolling(scrollDistance, trgt, true);
      };

      this.timeout = window.setInterval(function () {
        timeoutFun();
      }, 50);
    };

    VScroll.prototype.contains = function (element, className) {
      return element.classList.contains(className);
    };

    VScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {
      var rootElement = this.element;
      var classList = trgt.classList;

      if (classList.contains(CLS_VSCROLLNAV)) {
        classList = trgt.querySelector('.' + CLS_NAVARROW).classList;
      }

      if (classList.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, 'add', isContinuous);
      } else if (classList.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, '', isContinuous);
      }
    };

    VScroll.prototype.clickEventHandler = function (event) {
      this.eleScrolling(this.scrollStep, event.target, false);
    };

    VScroll.prototype.wheelEventHandler = function (e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);
    };

    VScroll.prototype.swipeHandler = function (e) {
      var swipeElement = this.scrollEle;
      var distance;

      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }

      var start = 0.5;

      var animate = function () {
        var step = Math.sin(start);

        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === 'Up') {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === 'Down') {
            swipeElement.scrollTop -= distance * step;
          }

          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    VScroll.prototype.scrollUpdating = function (scrollVal, action) {
      if (action === 'add') {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };

    VScroll.prototype.frameScrollRequest = function (scrollValue, action, isContinuous) {
      var _this = this;

      var step = 10;

      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }

      if (!this.customStep) {
        [].slice.call((0, _ej2Base.selectAll)('.' + CLS_OVERLAY, this.element)).forEach(function (el) {
          scrollValue -= el.offsetHeight;
        });
      }

      var animate = function () {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);

          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };

      animate();
    };

    VScroll.prototype.touchHandler = function (e) {
      var el = this.scrollEle;
      var distance;
      distance = e.distanceY;

      if (e.scrollDirection === 'Up') {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === 'Down') {
        el.scrollTop = el.scrollTop - distance;
      }
    };

    VScroll.prototype.arrowDisabling = function (addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = (0, _ej2Base.isNullOrUndefined)(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);

        if ((0, _ej2Base.isNullOrUndefined)(addDisableCls)) {
          (0, _ej2Base.classList)(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          (0, _ej2Base.classList)(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE);
        addDisableCls.setAttribute('aria-disabled', 'true');
        addDisableCls.removeAttribute('tabindex');
        removeDisableCls.classList.remove(CLS_DISABLE);
        removeDisableCls.setAttribute('aria-disabled', 'false');
        removeDisableCls.setAttribute('tabindex', '0');
      }

      this.repeatScroll();
    };

    VScroll.prototype.scrollEventHandler = function (e) {
      var target = e.target;
      var height = target.offsetHeight;
      var rootEle = this.element;
      var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;

      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }

      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID) {
          upOverlay.style.height = scrollTop + 'px';
        } else {
          upOverlay.style.height = '40px';
        }

        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';
        } else {
          downOverlay.style.height = '40px';
        }
      }

      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE);

        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute('aria-disabled', 'false');
          disEle.setAttribute('tabindex', '0');
        }
      }
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     * @param  {VScrollModel} newProp
     * @param  {VScrollModel} oldProp
     * @returns void
     * @private
     */


    VScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'scrollStep':
            this.setScrollState();
            break;

          case 'enableRtl':
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };

    __decorate([(0, _ej2Base.Property)(null)], VScroll.prototype, "scrollStep", void 0);

    VScroll = __decorate([_ej2Base.NotifyPropertyChanges], VScroll);
    return VScroll;
  }(_ej2Base.Component);

  _exports.VScroll = VScroll;
});;
define('@syncfusion/ej2-navigations/src/context-menu/context-menu',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-popups", "../common/menu-base"], function (_exports, _ej2Base, _ej2Popups, _menuBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.ContextMenu = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../common/menu-base-model.d.ts'/>


  /**
   * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
   * ```html
   * <div id = 'target'></div>
   * <ul id = 'contextmenu'></ul>
   * ```
   * ```typescript
   * <script>
   * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});
   * </script>
   * ```
   */
  var ContextMenu =
  /** @class */
  function (_super) {
    __extends(ContextMenu, _super);
    /**
     * Constructor for creating the widget.
     * @private
     */


    function ContextMenu(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * For internal use only - prerender processing.
     * @private
     */


    ContextMenu.prototype.preRender = function () {
      this.isMenu = false;
      this.element.id = this.element.id || (0, _ej2Base.getUniqueID)('ej2-contextmenu');

      _super.prototype.preRender.call(this);
    };

    ContextMenu.prototype.initialize = function () {
      _super.prototype.initialize.call(this);

      (0, _ej2Base.attributes)(this.element, {
        'role': 'context menu',
        'tabindex': '0'
      });
      this.element.style.zIndex = (0, _ej2Popups.getZindexPartial)(this.element).toString();
    };
    /**
     * This method is used to open the ContextMenu in specified position.
     * @param top - To specify ContextMenu vertical positioning.
     * @param left - To specify ContextMenu horizontal positioning.
     * @param target - To calculate z-index for ContextMenu based upon the specified target.
     * @method open
     * @returns void
     */


    ContextMenu.prototype.open = function (top, left, target) {
      _super.prototype.openMenu.call(this, null, null, top, left, null, target);
    };
    /**
     * Closes the ContextMenu if it is opened.
     */


    ContextMenu.prototype.close = function () {
      _super.prototype.closeMenu.call(this);
    };
    /**
     * Called internally if any of the property value changed
     * @private
     * @param {ContextMenuModel} newProp
     * @param {ContextMenuModel} oldProp
     * @returns void
     */


    ContextMenu.prototype.onPropertyChanged = function (newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'filter':
            this.close();
            this.filter = newProp.filter;
            break;

          case 'target':
            this.unWireEvents(oldProp.target);
            this.wireEvents();
            break;
        }
      }
    };
    /**
     * Get module name.
     * @returns string
     * @private
     */


    ContextMenu.prototype.getModuleName = function () {
      return 'contextmenu';
    };

    __decorate([(0, _ej2Base.Property)('')], ContextMenu.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)('')], ContextMenu.prototype, "filter", void 0);

    __decorate([(0, _ej2Base.Collection)([], _menuBase.MenuItem)], ContextMenu.prototype, "items", void 0);

    ContextMenu = __decorate([_ej2Base.NotifyPropertyChanges], ContextMenu);
    return ContextMenu;
  }(_menuBase.MenuBase);

  _exports.ContextMenu = ContextMenu;
});;
define('@syncfusion/ej2-navigations/src/context-menu/index',["exports", "./context-menu"], function (_exports, _contextMenu) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_contextMenu).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _contextMenu[key];
  });
});;
define('@syncfusion/ej2-navigations/src/index',["exports", "./common/index", "./toolbar/index", "./accordion/index", "./context-menu/index", "./menu/index", "./tab/index", "./treeview/index", "./sidebar/index"], function (_exports, _index, _index2, _index3, _index4, _index5, _index6, _index7, _index8) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
  Object.keys(_index6).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index6[key];
  });
  Object.keys(_index7).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index7[key];
  });
  Object.keys(_index8).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index8[key];
  });
});;
define('@syncfusion/ej2-navigations/src/menu/index',["exports", "./menu"], function (_exports, _menu) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_menu).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _menu[key];
  });
});;
define('@syncfusion/ej2-navigations/src/menu/menu',["exports", "@syncfusion/ej2-base", "../common/menu-base"], function (_exports, _ej2Base, _menuBase) {
  "use strict";

  _exports.__esModule = true;
  _exports.Menu = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../common/menu-base-model.d.ts'/>


  var VMENU = 'e-vertical';
  var SCROLLABLE = 'e-scrollable';
  var HAMBURGER = 'e-hamburger';
  /**
   * The Menu is a graphical user interface that serve as navigation headers for your application or site.
   * ```html
   * <ul id = 'menu'></ul>
   * ```
   * ```typescript
   * <script>
   * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});
   * menuObj.appendTo("#menu");
   * </script>
   * ```
   */

  var Menu =
  /** @class */
  function (_super) {
    __extends(Menu, _super);
    /**
     * Constructor for creating the component.
     * @private
     */


    function Menu(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.tempItems = [];
      return _this;
    }
    /**
     * Get module name.
     * @returns string
     * @private
     */


    Menu.prototype.getModuleName = function () {
      return 'menu';
    };
    /**
     * For internal use only - prerender processing.
     * @private
     */


    Menu.prototype.preRender = function () {
      this.isMenu = true;
      this.element.id = this.element.id || (0, _ej2Base.getUniqueID)('ej2-menu');

      if (this.template) {
        try {
          if (document.querySelectorAll(this.template).length) {
            this.template = document.querySelector(this.template).innerHTML.trim();
            this.clearChanges();
          }
        } catch (e) {
          /* action on catch */
        }
      } else {
        this.updateMenuItems(this.items);
      }

      _super.prototype.preRender.call(this);
    };

    Menu.prototype.initialize = function () {
      _super.prototype.initialize.call(this);

      (0, _ej2Base.attributes)(this.element, {
        'role': 'menubar',
        'tabindex': '0'
      });

      if (this.orientation === 'Vertical') {
        this.element.classList.add(VMENU);

        if (this.hamburgerMode && !this.target) {
          this.element.previousElementSibling.classList.add(VMENU);
        }

        this.element.setAttribute('aria-orientation', 'vertical');
      } else {
        if (_ej2Base.Browser.isDevice && !this.enableScrolling) {
          this.element.parentElement.classList.add(SCROLLABLE);
        }
      }

      if (this.hamburgerMode) {
        this.element.parentElement.classList.add(HAMBURGER);

        if (this.orientation === 'Horizontal') {
          this.element.classList.add('e-hide-menu');
        }
      }
    };

    Menu.prototype.updateMenuItems = function (items) {
      this.tempItems = items;
      this.items = [];
      this.tempItems.map(this.createMenuItems, this);
      this.setProperties({
        items: this.items
      }, true);
      this.tempItems = [];
    };
    /**
     * Called internally if any of the property value changed
     * @private
     * @param {MenuModel} newProp
     * @param {MenuModel} oldProp
     * @returns void
     */


    Menu.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'orientation':
            if (newProp.orientation === 'Vertical') {
              this.element.classList.add(VMENU);

              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.add(VMENU);
                }

                this.element.classList.remove('e-hide-menu');
              }

              this.element.setAttribute('aria-orientation', 'vertical');
            } else {
              this.element.classList.remove(VMENU);

              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.remove(VMENU);
                }

                this.element.classList.add('e-hide-menu');
              }

              this.element.removeAttribute('aria-orientation');
            }

            break;

          case 'items':
            if (!Object.keys(oldProp.items).length) {
              this.updateMenuItems(newProp.items);
            }

            break;

          case 'hamburgerMode':
            if (!this.element.previousElementSibling) {
              _super.prototype.createHeaderContainer.call(this);
            }

            if (newProp.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);
            } else {
              this.element.parentElement.classList.remove(HAMBURGER);
            }

            if (this.orientation === 'Vertical') {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }

              this.element.classList.remove('e-hide-menu');
            } else {
              if (this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              } else {
                this.element.previousElementSibling.classList.remove(VMENU);
              }

              this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');
            }

            break;

          case 'title':
            if (this.hamburgerMode && this.element.previousElementSibling) {
              newProp.title = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;
              this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;
            }

            break;

          case 'target':
            if (this.hamburgerMode) {
              this.unWireEvents(oldProp.target);
              this.wireEvents();

              if (this.orientation === 'Horizontal') {
                if (!newProp.target) {
                  if (!this.element.previousElementSibling) {
                    _super.prototype.createHeaderContainer.call(this);
                  }

                  this.element.previousElementSibling.classList.remove(VMENU);
                } else {
                  this.element.previousElementSibling.classList.add(VMENU);
                }

                this.element.classList.add('e-hide-menu');
              }
            }

            break;
        }
      }

      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
    };

    Menu.prototype.createMenuItems = function (item) {
      var pIdField;
      var idx;
      var i;
      var items = this.items;
      pIdField = this.getField('parentId');

      if (item[pIdField]) {
        idx = this.getIndex(item[pIdField].toString(), true);

        for (i = 0; i < idx.length; i++) {
          if (!items[idx[i]].items) {
            items[idx[i]].items = [];
          }

          items = items[idx[i]].items;
        }

        items.push(item);
      } else {
        this.items.push(item);
      }
    };
    /**
     * This method is used to open the Menu in hamburger mode.
     * @method open
     * @returns void
     */


    Menu.prototype.open = function () {
      _super.prototype.openHamburgerMenu.call(this);
    };
    /**
     * Closes the Menu if it is opened in hamburger mode.
     */


    Menu.prototype.close = function () {
      _super.prototype.closeHamburgerMenu.call(this);
    };

    __decorate([(0, _ej2Base.Property)('Horizontal')], Menu.prototype, "orientation", void 0);

    __decorate([(0, _ej2Base.Property)('')], Menu.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Menu.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Menu.prototype, "enableScrolling", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Menu.prototype, "hamburgerMode", void 0);

    __decorate([(0, _ej2Base.Property)('Menu')], Menu.prototype, "title", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Menu.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Complex)({}, _menuBase.FieldSettings)], Menu.prototype, "fields", void 0);

    Menu = __decorate([_ej2Base.NotifyPropertyChanges], Menu);
    return Menu;
  }(_menuBase.MenuBase);

  _exports.Menu = Menu;
});;
define('@syncfusion/ej2-navigations/src/sidebar/index',["exports", "./sidebar"], function (_exports, _sidebar) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_sidebar).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _sidebar[key];
  });
});;
define('@syncfusion/ej2-navigations/src/sidebar/sidebar',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.Sidebar = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CONTROL = 'e-control';
  var ROOT = 'e-sidebar';
  var DOCKER = 'e-dock';
  var CLOSE = 'e-close';
  var OPEN = 'e-open';
  var TRASITION = 'e-transition';
  var DEFAULTBACKDROP = 'e-sidebar-overlay';
  var CONTEXTBACKDROP = 'e-backdrop';
  var RTL = 'e-rtl';
  var RIGHT = 'e-right';
  var LEFT = 'e-left';
  var OVER = 'e-over';
  var PUSH = 'e-push';
  var SLIDE = 'e-slide';
  var VISIBILITY = 'e-visibility';
  var MAINCONTENTANIMATION = 'e-content-animation';
  var DISABLEANIMATION = 'e-disable-animation';
  var CONTEXT = 'e-sidebar-context';
  var SIDEBARABSOLUTE = 'e-sidebar-absolute';
  /**
   * Sidebar is an expandable or collapsible
   * component that typically act as a side container to place the primary or secondary content alongside of the main content.
   * ```html
   * <aside id="sidebar">
   * </aside>
   * ```
   * ```typescript
   * <script>
   *   let sidebarObject: Sidebar = new Sidebar();
   *   sidebarObject.appendTo("#sidebar");
   * </script>
   * ```
   */

  var Sidebar =
  /** @class */
  function (_super) {
    __extends(Sidebar, _super);

    function Sidebar(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isBlazor = false;
      return _this;
    }

    Sidebar.prototype.preRender = function () {
      this.isBlazor = (0, _ej2Base.isBlazor)() && this.isServerRendered;

      if (!this.isBlazor) {
        this.setWidth();
      }
    };

    Sidebar.prototype.render = function () {
      this.initialize();
      this.wireEvents();
      this.renderComplete();
    };

    Sidebar.prototype.initialize = function () {
      this.setTarget();
      this.addClass();

      if (!this.isBlazor) {
        this.setZindex();
      }

      if (this.enableDock) {
        this.setDock();
      }

      if (this.isOpen) {
        this.show();
      } else {
        this.setMediaQuery();
      }

      this.checkType(true);
      this.setType(this.type);
      this.setCloseOnDocumentClick();

      if (!this.isBlazor) {
        this.setEnableRTL();
      }

      if (_ej2Base.Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };

    Sidebar.prototype.setEnableRTL = function () {
      this.enableRtl ? (0, _ej2Base.addClass)([this.element], RTL) : (0, _ej2Base.removeClass)([this.element], RTL);
    };

    Sidebar.prototype.setTarget = function () {
      this.sidebarEleCopy = this.element.cloneNode(true);

      if (typeof this.target === 'string') {
        this.setProperties({
          target: document.querySelector(this.target)
        }, true);
      }

      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        (0, _ej2Base.addClass)([this.element], SIDEBARABSOLUTE);
        (0, _ej2Base.addClass)([this.target], CONTEXT);
      }
    };

    Sidebar.prototype.setCloseOnDocumentClick = function () {
      if (this.closeOnDocumentClick) {
        _ej2Base.EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);
      } else {
        _ej2Base.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);
      }
    };

    Sidebar.prototype.setWidth = function () {
      if (this.enableDock && this.position === 'Left') {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'width': this.setDimension(this.dockSize)
        });
      } else if (this.enableDock && this.position === 'Right') {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'width': this.setDimension(this.dockSize)
        });
      } else if (!this.enableDock) {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'width': this.setDimension(this.width)
        });
      }
    };

    Sidebar.prototype.setDimension = function (width) {
      if (typeof width === 'number') {
        width = (0, _ej2Base.formatUnit)(width);
      } else if (typeof width === 'string') {
        width = width.match(/px|%|em/) ? width : (0, _ej2Base.formatUnit)(width);
      } else {
        width = '100%';
      }

      return width;
    };

    Sidebar.prototype.setZindex = function () {
      (0, _ej2Base.setStyleAttribute)(this.element, {
        'z-index': '' + this.zIndex
      });
    };

    Sidebar.prototype.addClass = function () {
      var classELement = document.querySelector('.e-main-content');

      if (!(0, _ej2Base.isNullOrUndefined)(classELement || this.element.nextElementSibling)) {
        (0, _ej2Base.addClass)([classELement || this.element.nextElementSibling], [MAINCONTENTANIMATION]);
      }

      this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';

      if (!this.isBlazor) {
        if (!this.enableDock && this.type !== 'Auto') {
          (0, _ej2Base.addClass)([this.element], [VISIBILITY]);
        }

        (0, _ej2Base.removeClass)([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
        this.element.classList.add(ROOT);
        (0, _ej2Base.addClass)([this.element], this.position === 'Right' ? RIGHT : LEFT);

        if (this.enableDock) {
          (0, _ej2Base.addClass)([this.element], DOCKER);
        }

        this.element.setAttribute('tabindex', this.tabIndex);
      }

      if (this.type === 'Auto' && !_ej2Base.Browser.isDevice) {
        this.show();
      } else if (!this.isOpen) {
        (0, _ej2Base.addClass)([this.element], CLOSE);
      }
    };

    Sidebar.prototype.checkType = function (val) {
      if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {
        this.type = 'Auto';
      } else {
        if (!this.element.classList.contains(CLOSE) && !val) {
          this.hide();
        }
      }
    };

    Sidebar.prototype.transitionEnd = function (e) {
      this.setDock();

      if (!(0, _ej2Base.isNullOrUndefined)(e) && e.target === this.element) {
        this.triggerChange();
      }

      _ej2Base.EventHandler.remove(this.element, 'transitionend', this.transitionEnd);
    };

    Sidebar.prototype.destroyBackDrop = function () {
      var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;

      if (this.target && this.showBackdrop && sibling) {
        (0, _ej2Base.removeClass)([sibling], CONTEXTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = 'none';
        this.modal.outerHTML = '';
        this.modal = null;
      }
    };
    /**
     * Hide the Sidebar component, if it is in an open state.
     * @returns void
     */


    Sidebar.prototype.hide = function (e) {
      var _this = this;

      var closeArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !(0, _ej2Base.isNullOrUndefined)(e),
        event: e || null
      };

      if ((0, _ej2Base.isBlazor)()) {
        delete closeArguments.model;
      }

      this.trigger('close', closeArguments, function (observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          if (_this.element.classList.contains(CLOSE)) {
            return;
          }

          if (_this.element.classList.contains(OPEN) && !_this.animate) {
            _this.triggerChange();
          }

          (0, _ej2Base.addClass)([_this.element], CLOSE);
          (0, _ej2Base.removeClass)([_this.element], OPEN);
          _this.enableDock ? (0, _ej2Base.setStyleAttribute)(_this.element, {
            'width': (0, _ej2Base.formatUnit)(_this.dockSize)
          }) : (0, _ej2Base.setStyleAttribute)(_this.element, {
            'width': (0, _ej2Base.formatUnit)(_this.width)
          });

          _this.setType(_this.type);

          var sibling = document.querySelector('.e-main-content') || _this.element.nextElementSibling;

          if (!_this.enableDock && sibling) {
            sibling.style.transform = 'translateX(' + 0 + 'px)';
            _this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
          }

          _this.destroyBackDrop();

          _this.setAnimation();

          if (_this.type === 'Slide') {
            document.body.classList.remove('e-sidebar-overflow');
          }

          _this.setProperties({
            isOpen: false
          }, true);

          if (_this.enableDock) {
            setTimeout(function () {
              return _this.setTimeOut();
            }, 50);
          }

          _ej2Base.EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);
        }
      });
    };

    Sidebar.prototype.setTimeOut = function () {
      var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;

      if (this.element.classList.contains(OPEN) && sibling) {
        if (this.position === 'Left') {
          this.width === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.width);
        } else {
          this.width === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.width);
        }
      } else if (this.element.classList.contains(CLOSE) && sibling) {
        if (this.position === 'Left') {
          this.dockSize === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginLeft = this.setDimension(this.dockSize);
        } else {
          this.dockSize === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width) : sibling.style.marginRight = this.setDimension(this.dockSize);
        }
      }
    };

    ;
    /**
     * Shows the Sidebar component, if it is in closed state.
     * @returns void
     */

    Sidebar.prototype.show = function (e) {
      var _this = this;

      var openArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !(0, _ej2Base.isNullOrUndefined)(e),
        event: e || null
      };

      if ((0, _ej2Base.isBlazor)()) {
        delete openArguments.model;
      }

      this.trigger('open', openArguments, function (observedopenArgs) {
        if (!observedopenArgs.cancel) {
          (0, _ej2Base.removeClass)([_this.element], VISIBILITY);

          if (_this.element.classList.contains(OPEN)) {
            return;
          }

          if (_this.element.classList.contains(CLOSE) && !_this.animate) {
            _this.triggerChange();
          }

          (0, _ej2Base.addClass)([_this.element], [OPEN, TRASITION]);
          (0, _ej2Base.setStyleAttribute)(_this.element, {
            'transform': ''
          });
          (0, _ej2Base.removeClass)([_this.element], CLOSE);
          (0, _ej2Base.setStyleAttribute)(_this.element, {
            'width': (0, _ej2Base.formatUnit)(_this.width)
          });

          _this.setType(_this.type);

          _this.createBackDrop();

          _this.setAnimation();

          if (_this.type === 'Slide') {
            document.body.classList.add('e-sidebar-overflow');
          }

          _this.setProperties({
            isOpen: true
          }, true);

          _ej2Base.EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);
        }
      });
    };

    Sidebar.prototype.setAnimation = function () {
      if (this.animate) {
        (0, _ej2Base.removeClass)([this.element], DISABLEANIMATION);
      } else {
        (0, _ej2Base.addClass)([this.element], DISABLEANIMATION);
      }
    };

    Sidebar.prototype.triggerChange = function () {
      var changeArguments = {
        name: 'change',
        element: this.element
      };
      this.trigger('change', changeArguments);
    };

    Sidebar.prototype.setDock = function () {
      if (this.enableDock && this.position === 'Left' && !this.getState()) {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'
        });
      } else if (this.enableDock && this.position === 'Right' && !this.getState()) {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'
        });
      }

      if (this.element.classList.contains(CLOSE) && this.enableDock) {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'width': this.setDimension(this.dockSize)
        });
      }
    };

    Sidebar.prototype.createBackDrop = function () {
      if (this.target && this.showBackdrop && this.getState()) {
        var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;
        (0, _ej2Base.addClass)([sibling], CONTEXTBACKDROP);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = this.createElement('div');
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = 'block';
        document.body.appendChild(this.modal);
      }
    };

    Sidebar.prototype.getPersistData = function () {
      return this.addOnPersist(['type', 'position', 'isOpen']);
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    Sidebar.prototype.getModuleName = function () {
      return 'sidebar';
    };
    /**
     * Shows or hides the Sidebar based on the current state.
     * @returns void
     */


    Sidebar.prototype.toggle = function (e) {
      this.element.classList.contains(OPEN) ? this.hide() : this.show();
    };

    Sidebar.prototype.getState = function () {
      return this.element.classList.contains(OPEN) ? true : false;
    };

    Sidebar.prototype.setMediaQuery = function () {
      if (this.mediaQuery) {
        var media = false;

        if (typeof this.mediaQuery === 'string') {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }

        if (media && this.windowWidth !== window.innerWidth) {
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.hide();
        }
      }
    };

    Sidebar.prototype.resize = function (e) {
      if (this.type === 'Auto') {
        if (_ej2Base.Browser.isDevice) {
          (0, _ej2Base.addClass)([this.element], OVER);
        } else {
          (0, _ej2Base.addClass)([this.element], PUSH);
        }
      }

      this.setMediaQuery();

      if (_ej2Base.Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };

    Sidebar.prototype.documentclickHandler = function (e) {
      if ((0, _ej2Base.closest)(e.target, '.' + CONTROL + '' + '.' + ROOT)) {
        return;
      }

      this.hide(e);
    };

    Sidebar.prototype.enableGestureHandler = function (args) {
      if (this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.show();
      } else if (this.position === 'Left' && args.swipeDirection === 'Left') {
        this.hide();
      } else if (this.position === 'Right' && args.swipeDirection === 'Right') {
        this.hide();
      } else if (this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {
        this.show();
      }
    };

    Sidebar.prototype.setEnableGestures = function () {
      if (this.enableGestures) {
        this.mainContentEle = new _ej2Base.Touch(document.body, {
          swipe: this.enableGestureHandler.bind(this)
        });
        this.sidebarEle = new _ej2Base.Touch(this.element, {
          swipe: this.enableGestureHandler.bind(this)
        });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };

    Sidebar.prototype.wireEvents = function () {
      this.setEnableGestures();
      window.addEventListener('resize', this.resize.bind(this));
    };

    Sidebar.prototype.unWireEvents = function () {
      window.removeEventListener('resize', this.resize.bind(this));

      _ej2Base.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);

      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }

      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };

    Sidebar.prototype.onPropertyChanged = function (newProp, oldProp) {
      var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'isOpen':
            this.isOpen ? this.show() : this.hide();
            break;

          case 'width':
            this.setWidth();

            if (!this.getState()) {
              this.setDock();
            }

            break;

          case 'animate':
            this.setAnimation();
            break;

          case 'type':
            this.checkType(false);
            (0, _ej2Base.removeClass)([this.element], [VISIBILITY]);
            this.addClass();
            (0, _ej2Base.addClass)([this.element], this.type === 'Auto' ? _ej2Base.Browser.isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);
            break;

          case 'position':
            this.element.style.transform = '';
            this.setDock();

            if (sibling) {
              this.position === 'Left' ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';
            }

            if (this.position === 'Right') {
              (0, _ej2Base.removeClass)([this.element], LEFT);
              (0, _ej2Base.addClass)([this.element], RIGHT);
            } else {
              (0, _ej2Base.removeClass)([this.element], RIGHT);
              (0, _ej2Base.addClass)([this.element], LEFT);
            }

            this.setType(this.type);
            break;

          case 'showBackdrop':
            if (this.showBackdrop) {
              this.createBackDrop();
            } else {
              if (this.modal) {
                this.modal.style.display = 'none';
                this.modal.outerHTML = '';
                this.modal = null;
              }
            }

            break;

          case 'target':
            if (typeof this.target === 'string') {
              this.setProperties({
                target: document.querySelector(this.target)
              }, true);
            }

            if ((0, _ej2Base.isNullOrUndefined)(this.target)) {
              (0, _ej2Base.removeClass)([this.element], SIDEBARABSOLUTE);
              (0, _ej2Base.removeClass)([oldProp.target], CONTEXT);
              (0, _ej2Base.setStyleAttribute)(sibling, {
                'margin-left': 0,
                'margin-right': 0
              });
              document.body.insertAdjacentElement('afterbegin', this.element);
            } else {
              var isRendered = this.isServerRendered;
              this.isServerRendered = false;

              _super.prototype.refresh.call(this);

              this.isServerRendered = isRendered;
            }

            break;

          case 'closeOnDocumentClick':
            this.setCloseOnDocumentClick();
            break;

          case 'enableDock':
            if (!this.getState()) {
              this.setDock();
            }

            break;

          case 'zIndex':
            this.setZindex();
            break;

          case 'mediaQuery':
            this.setMediaQuery();
            break;

          case 'enableGestures':
            this.setEnableGestures();
            break;

          case 'enableRtl':
            this.setEnableRTL();
            break;
        }
      }
    };

    Sidebar.prototype.setType = function (type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      this.setZindex();
      var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;

      if (sibling) {
        sibling.style.transform = 'translateX(' + 0 + 'px)';

        if (!_ej2Base.Browser.isDevice && this.type !== 'Auto') {
          this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
        }
      }

      var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';
      var eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;
      (0, _ej2Base.removeClass)([this.element], [PUSH, OVER, SLIDE]);

      switch (type) {
        case 'Push':
          (0, _ej2Base.addClass)([this.element], [PUSH]);

          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
          }

          break;

        case 'Slide':
          (0, _ej2Base.addClass)([this.element], [SLIDE]);

          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style.transform = 'translateX(' + eleWidth + 'px)';
          }

          break;

        case 'Over':
          (0, _ej2Base.addClass)([this.element], [OVER]);

          if (this.enableDock && this.element.classList.contains(CLOSE)) {
            if (sibling) {
              this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
            }
          }

          break;

        case 'Auto':
          (0, _ej2Base.addClass)([this.element], [TRASITION]);

          if (_ej2Base.Browser.isDevice) {
            if (sibling && this.enableDock && !this.getState()) {
              this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
              (0, _ej2Base.addClass)([this.element], PUSH);
            } else {
              (0, _ej2Base.addClass)([this.element], OVER);
            }
          } else {
            (0, _ej2Base.addClass)([this.element], PUSH);

            if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
              this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
            }
          }

          this.createBackDrop();
      }
    };
    /**
     * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @returns void
     */


    Sidebar.prototype.destroy = function () {
      _super.prototype.destroy.call(this);

      (0, _ej2Base.removeClass)([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);

      if (this.target) {
        (0, _ej2Base.removeClass)([this.element], SIDEBARABSOLUTE);
        (0, _ej2Base.removeClass)([this.target], CONTEXT);
      }

      this.destroyBackDrop();
      this.element.style.width = '';
      this.element.style.zIndex = '';
      this.element.style.transform = '';
      this.windowWidth = null;
      !(0, _ej2Base.isNullOrUndefined)(this.sidebarEleCopy.getAttribute('tabindex')) ? this.element.setAttribute('tabindex', this.tabIndex) : this.element.removeAttribute('tabindex');
      var sibling = document.querySelector('.e-main-content') || this.element.nextElementSibling;

      if (!(0, _ej2Base.isNullOrUndefined)(sibling)) {
        sibling.style.margin = '';
        sibling.style.transform = '';
      }

      this.unWireEvents();
    };

    __decorate([(0, _ej2Base.Property)('auto')], Sidebar.prototype, "dockSize", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Sidebar.prototype, "mediaQuery", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "enableDock", void 0);

    __decorate([(0, _ej2Base.Property)('en-US')], Sidebar.prototype, "locale", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Sidebar.prototype, "enableGestures", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "isOpen", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "enableRtl", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Sidebar.prototype, "animate", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Sidebar.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "closeOnDocumentClick", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], Sidebar.prototype, "position", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Sidebar.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Sidebar.prototype, "showBackdrop", void 0);

    __decorate([(0, _ej2Base.Property)('Auto')], Sidebar.prototype, "type", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Sidebar.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], Sidebar.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Event)()], Sidebar.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Sidebar.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], Sidebar.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], Sidebar.prototype, "change", void 0);

    __decorate([(0, _ej2Base.Event)()], Sidebar.prototype, "destroyed", void 0);

    Sidebar = __decorate([_ej2Base.NotifyPropertyChanges], Sidebar);
    return Sidebar;
  }(_ej2Base.Component);

  _exports.Sidebar = Sidebar;
});;
define('@syncfusion/ej2-navigations/src/tab/index',["exports", "./tab"], function (_exports, _tab) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_tab).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _tab[key];
  });
});;
define('@syncfusion/ej2-navigations/src/tab/tab',["exports", "@syncfusion/ej2-base", "../toolbar/toolbar"], function (_exports, _ej2Base, _toolbar) {
  "use strict";

  _exports.__esModule = true;
  _exports.Tab = _exports.TabItem = _exports.Header = _exports.TabAnimationSettings = _exports.TabActionSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_TAB = 'e-tab';
  var CLS_HEADER = 'e-tab-header';
  var CLS_BLA_TEM = 'blazor-template';
  var CLS_CONTENT = 'e-content';
  var CLS_NEST = 'e-nested';
  var CLS_ITEMS = 'e-items';
  var CLS_ITEM = 'e-item';
  var CLS_TEMPLATE = 'e-template';
  var CLS_RTL = 'e-rtl';
  var CLS_ACTIVE = 'e-active';
  var CLS_DISABLE = 'e-disable';
  var CLS_HIDDEN = 'e-hidden';
  var CLS_FOCUS = 'e-focused';
  var CLS_ICONS = 'e-icons';
  var CLS_ICON = 'e-icon';
  var CLS_ICON_TAB = 'e-icon-tab';
  var CLS_ICON_CLOSE = 'e-close-icon';
  var CLS_CLOSE_SHOW = 'e-close-show';
  var CLS_TEXT = 'e-tab-text';
  var CLS_INDICATOR = 'e-indicator';
  var CLS_WRAP = 'e-tab-wrap';
  var CLS_TEXT_WRAP = 'e-text-wrap';
  var CLS_TAB_ICON = 'e-tab-icon';
  var CLS_TB_ITEMS = 'e-toolbar-items';
  var CLS_TB_ITEM = 'e-toolbar-item';
  var CLS_TB_POP = 'e-toolbar-pop';
  var CLS_TB_POPUP = 'e-toolbar-popup';
  var CLS_HOR_NAV = 'e-hor-nav';
  var CLS_POPUP_OPEN = 'e-popup-open';
  var CLS_POPUP_CLOSE = 'e-popup-close';
  var CLS_PROGRESS = 'e-progress';
  var CLS_IGNORE = 'e-ignore';
  var CLS_OVERLAY = 'e-overlay';
  var CLS_HSCRCNT = 'e-hscroll-content';
  var CLS_VSCRCNT = 'e-vscroll-content';
  var CLS_HORIZONTAL = 'e-horizontal';
  var CLS_VTAB = 'e-vertical-tab';
  var CLS_VERTICAL = 'e-vertical';
  var CLS_VLEFT = 'e-vertical-left';
  var CLS_VRIGHT = 'e-vertical-right';
  var CLS_HBOTTOM = 'e-horizontal-bottom';
  var CLS_FILL = 'e-fill-mode';

  var TabActionSettings =
  /** @class */
  function (_super) {
    __extends(TabActionSettings, _super);

    function TabActionSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('SlideLeftIn')], TabActionSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)(600)], TabActionSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('ease')], TabActionSettings.prototype, "easing", void 0);

    return TabActionSettings;
  }(_ej2Base.ChildProperty);

  _exports.TabActionSettings = TabActionSettings;

  var TabAnimationSettings =
  /** @class */
  function (_super) {
    __extends(TabAnimationSettings, _super);

    function TabAnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideLeftIn',
      duration: 600,
      easing: 'ease'
    }, TabActionSettings)], TabAnimationSettings.prototype, "previous", void 0);

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideRightIn',
      duration: 600,
      easing: 'ease'
    }, TabActionSettings)], TabAnimationSettings.prototype, "next", void 0);

    return TabAnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.TabAnimationSettings = TabAnimationSettings;

  /**
   * Objects used for configuring the Tab item header properties.
   */
  var Header =
  /** @class */
  function (_super) {
    __extends(Header, _super);

    function Header() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], Header.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('')], Header.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('left')], Header.prototype, "iconPosition", void 0);

    return Header;
  }(_ej2Base.ChildProperty);

  _exports.Header = Header;

  /**
   * An array of object that is used to configure the Tab.
   */
  var TabItem =
  /** @class */
  function (_super) {
    __extends(TabItem, _super);

    function TabItem() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Complex)({}, Header)], TabItem.prototype, "header", void 0);

    __decorate([(0, _ej2Base.Property)(null)], TabItem.prototype, "headerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)('')], TabItem.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)('')], TabItem.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TabItem.prototype, "disabled", void 0);

    return TabItem;
  }(_ej2Base.ChildProperty);

  _exports.TabItem = TabItem;

  /**
   * Tab is a content panel to show multiple contents in a single space, one at a time.
   * Each Tab item has an associated content, that will be displayed based on the active Tab header item.
   * ```html
   * <div id="tab"></div>
   * <script>
   *   var tabObj = new Tab();
   *   tab.appendTo("#tab");
   * </script>
   * ```
   */
  var Tab =
  /** @class */
  function (_super) {
    __extends(Tab, _super);
    /**
     * Initializes a new instance of the Tab class.
     * @param options  - Specifies Tab model properties as options.
     * @param element  - Specifies the element that is rendered as a Tab.
     */


    function Tab(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.show = {};
      _this.hide = {};
      _this.maxHeight = 0;
      _this.title = 'Close';
      _this.lastIndex = 0;
      _this.isAdd = false;
      _this.isIconAlone = false;
      _this.resizeContext = _this.refreshActElePosition.bind(_this);
      /**
       * Contains the keyboard configuration of the Tab.
       */

      _this.keyConfigs = {
        tab: 'tab',
        home: 'home',
        end: 'end',
        enter: 'enter',
        space: 'space',
        delete: 'delete',
        moveLeft: 'leftarrow',
        moveRight: 'rightarrow',
        moveUp: 'uparrow',
        moveDown: 'downarrow'
      };
      return _this;
    }
    /**
     * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.
     * @returns void
     */


    Tab.prototype.destroy = function () {
      var _this = this;

      if (!(0, _ej2Base.isNullOrUndefined)(this.tbObj)) {
        this.tbObj.destroy();
      }

      this.unWireEvents();
      ['role', 'aria-disabled', 'aria-activedescendant', 'tabindex', 'aria-orientation'].forEach(function (val) {
        _this.element.removeAttribute(val);
      });
      this.expTemplateContent();

      if (!this.isTemplate) {
        while (this.element.firstElementChild) {
          (0, _ej2Base.remove)(this.element.firstElementChild);
        }
      } else {
        var cntEle = (0, _ej2Base.select)('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
        this.element.classList.remove(CLS_TEMPLATE);

        if (!(0, _ej2Base.isNullOrUndefined)(cntEle)) {
          cntEle.innerHTML = this.cnt;
        }
      }

      _super.prototype.destroy.call(this);

      this.trigger('destroyed');
    };
    /**
     * Refresh the tab component
     */


    Tab.prototype.refresh = function () {
      if (!this.isServerRendered) {
        _super.prototype.refresh.call(this);
      }
    };
    /**
     * Initialize component
     * @private
     */


    Tab.prototype.preRender = function () {
      var nested = (0, _ej2Base.closest)(this.element, '.' + CLS_CONTENT);
      this.prevIndex = 0;
      this.isNested = false;
      this.isPopup = false;
      this.initRender = true;
      this.isSwipeed = false;
      this.itemIndexArray = [];
      this.templateEle = [];

      if (!(0, _ej2Base.isNullOrUndefined)(nested)) {
        nested.parentElement.classList.add(CLS_NEST);
        this.isNested = true;
      }

      var name = _ej2Base.Browser.info.name;
      var css = name === 'msie' ? 'e-ie' : name === 'edge' ? 'e-edge' : name === 'safari' ? 'e-safari' : '';
      (0, _ej2Base.setStyleAttribute)(this.element, {
        'width': (0, _ej2Base.formatUnit)(this.width),
        'height': (0, _ej2Base.formatUnit)(this.height)
      });
      this.setCssClass(this.element, this.cssClass, true);
      (0, _ej2Base.attributes)(this.element, {
        role: 'tablist',
        'aria-disabled': 'false',
        'aria-activedescendant': ''
      });
      this.setCssClass(this.element, css, true);
      this.updatePopAnimationConfig();
    };
    /**
     * Initialize the component rendering
     * @private
     */


    Tab.prototype.render = function () {
      this.btnCls = this.createElement('span', {
        className: CLS_ICONS + ' ' + CLS_ICON_CLOSE,
        attrs: {
          title: this.title
        }
      });
      this.tabId = this.element.id.length > 0 ? '-' + this.element.id : (0, _ej2Base.getRandomId)();
      this.renderContainer();
      this.wireEvents();
      this.initRender = false;
    };

    Tab.prototype.renderContainer = function () {
      if (this.isServerRendered) {
        this.isTemplate = false;
        return;
      }

      var ele = this.element;

      if (this.items.length > 0 && ele.children.length === 0) {
        ele.appendChild(this.createElement('div', {
          className: CLS_CONTENT
        }));
        this.setOrientation(this.headerPlacement, this.createElement('div', {
          className: CLS_HEADER
        }));
        this.isTemplate = false;
      } else if (this.element.children.length > 0) {
        this.isTemplate = true;
        ele.classList.add(CLS_TEMPLATE);
        var header = ele.querySelector('.' + CLS_HEADER);

        if (header && this.headerPlacement === 'Bottom') {
          this.setOrientation(this.headerPlacement, header);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_HEADER, this.element)) && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('.' + CLS_CONTENT, this.element))) {
        this.renderHeader();
        this.tbItems = (0, _ej2Base.select)('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);

        if (!(0, _ej2Base.isNullOrUndefined)(this.tbItems)) {
          (0, _ej2Base.rippleEffect)(this.tbItems, {
            selector: '.e-tab-wrap'
          });
        }

        this.renderContent();

        if ((0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element).length > 0) {
          var scrCnt = void 0;
          this.tbItems = (0, _ej2Base.select)('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
          this.bdrLine = this.createElement('div', {
            className: CLS_INDICATOR + ' ' + CLS_HIDDEN + ' ' + CLS_IGNORE
          });
          scrCnt = (0, _ej2Base.select)('.' + this.scrCntClass, this.tbItems);

          if (!(0, _ej2Base.isNullOrUndefined)(scrCnt)) {
            scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
          } else {
            this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
          }

          this.setContentHeight(true);
          this.select(this.selectedItem);
        }

        this.setRTL(this.enableRtl);
      }
    };

    Tab.prototype.headerReady = function () {
      this.initRender = true;
      this.hdrEle = this.getTabHeader();
      this.setOrientation(this.headerPlacement, this.hdrEle);

      if (!(0, _ej2Base.isNullOrUndefined)(this.hdrEle)) {
        this.tbObj = this.hdrEle && this.hdrEle.ej2_instances[0];
      }

      this.tbObj.clicked = this.clickHandler.bind(this);
      this.tbObj.on('onItemsChanged', this.setActiveBorder.bind(this));
      this.tbItems = (0, _ej2Base.select)('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(this.tbItems)) {
        (0, _ej2Base.rippleEffect)(this.tbItems, {
          selector: '.e-tab-wrap'
        });
      }

      if ((0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element).length > 0) {
        var scrollCnt = void 0;
        this.bdrLine = (0, _ej2Base.select)('.' + CLS_INDICATOR + '.' + CLS_IGNORE, this.element);
        scrollCnt = (0, _ej2Base.select)('.' + this.scrCntClass, this.tbItems);

        if (!(0, _ej2Base.isNullOrUndefined)(scrollCnt)) {
          scrollCnt.insertBefore(this.bdrLine, scrollCnt.firstElementChild);
        } else {
          this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstElementChild);
        }

        this.select(this.selectedItem);
      }

      this.cntEle = (0, _ej2Base.select)('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(this.cntEle)) {
        this.touchModule = new _ej2Base.Touch(this.cntEle, {
          swipe: this.swipeHandler.bind(this)
        });
      }

      this.initRender = false;
      this.renderComplete();
    };

    Tab.prototype.renderHeader = function () {
      var _this = this;

      var hdrPlace = this.headerPlacement;
      var tabItems = [];
      this.hdrEle = this.getTabHeader();
      this.addVerticalClass();

      if (!this.isTemplate) {
        tabItems = this.parseObject(this.items, 0);
      } else {
        if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER)) {
          this.setProperties({
            headerPlacement: 'Bottom'
          }, true);
        }

        var count = this.hdrEle.children.length;
        var hdrItems = [];

        for (var i = 0; i < count; i++) {
          hdrItems.push(this.hdrEle.children.item(i).innerHTML);
        }

        if (count > 0) {
          while (this.hdrEle.firstElementChild) {
            (0, _ej2Base.detach)(this.hdrEle.firstElementChild);
          }

          var tabItems_1 = this.createElement('div', {
            className: CLS_ITEMS
          });
          this.hdrEle.appendChild(tabItems_1);
          hdrItems.forEach(function (item, index) {
            _this.lastIndex = index;
            var attr = {
              className: CLS_ITEM,
              id: CLS_ITEM + _this.tabId + '_' + index,
              attrs: {
                role: 'tab',
                'aria-controls': CLS_CONTENT + _this.tabId + '_' + index,
                'aria-selected': 'false'
              }
            };

            var txt = _this.createElement('span', {
              className: CLS_TEXT,
              innerHTML: item,
              attrs: {
                'role': 'presentation'
              }
            }).outerHTML;

            var cont = _this.createElement('div', {
              className: CLS_TEXT_WRAP,
              innerHTML: txt + _this.btnCls.outerHTML
            }).outerHTML;

            var wrap = _this.createElement('div', {
              className: CLS_WRAP,
              innerHTML: cont,
              attrs: {
                tabIndex: '-1'
              }
            });

            tabItems_1.appendChild(_this.createElement('div', attr));
            (0, _ej2Base.selectAll)('.' + CLS_ITEM, tabItems_1)[index].appendChild(wrap);
          });
        }
      }

      this.tbObj = new _toolbar.Toolbar({
        width: hdrPlace === 'Left' || hdrPlace === 'Right' ? 'auto' : '100%',
        height: hdrPlace === 'Left' || hdrPlace === 'Right' ? '100%' : 'auto',
        overflowMode: this.overflowMode,
        items: tabItems.length !== 0 ? tabItems : [],
        clicked: this.clickHandler.bind(this),
        scrollStep: this.scrollStep
      });
      this.tbObj.isStringTemplate = true;
      this.tbObj.createElement = this.createElement;
      this.tbObj.appendTo(this.hdrEle);
      (0, _ej2Base.attributes)(this.hdrEle, {
        'aria-label': 'tab-header'
      });
      this.updateOrientationAttribute();
      this.setCloseButton(this.showCloseButton);
    };

    Tab.prototype.renderContent = function () {
      this.cntEle = (0, _ej2Base.select)('.' + CLS_CONTENT, this.element);
      var hdrItem = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element);

      if (this.isTemplate) {
        this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : '';
        var contents = this.cntEle.children;

        for (var i = 0; i < hdrItem.length; i++) {
          if (contents.length - 1 >= i) {
            contents.item(i).className += CLS_ITEM;
            (0, _ej2Base.attributes)(contents.item(i), {
              'role': 'tabpanel',
              'aria-labelledby': CLS_ITEM + this.tabId + '_' + i
            });
            contents.item(i).id = CLS_CONTENT + this.tabId + '_' + i;
          }
        }
      }
    };

    Tab.prototype.reRenderItems = function () {
      this.renderContainer();

      if (!(0, _ej2Base.isNullOrUndefined)(this.cntEle)) {
        this.touchModule = new _ej2Base.Touch(this.cntEle, {
          swipe: this.swipeHandler.bind(this)
        });
      }
    };

    Tab.prototype.parseObject = function (items, index) {
      var _this = this;

      var tbCount = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element).length;
      var tItems = [];
      var txtWrapEle;
      var spliceArray = [];
      var i = 0;
      items.forEach(function (item, i) {
        var pos = (0, _ej2Base.isNullOrUndefined)(item.header) || (0, _ej2Base.isNullOrUndefined)(item.header.iconPosition) ? '' : item.header.iconPosition;
        var css = (0, _ej2Base.isNullOrUndefined)(item.header) || (0, _ej2Base.isNullOrUndefined)(item.header.iconCss) ? '' : item.header.iconCss;

        if ((0, _ej2Base.isNullOrUndefined)(item.headerTemplate) && ((0, _ej2Base.isNullOrUndefined)(item.header) || (0, _ej2Base.isNullOrUndefined)(item.header.text) || item.header.text.length === 0 && css === '')) {
          spliceArray.push(i);
          return;
        }

        var txt = item.headerTemplate || item.header.text;
        _this.lastIndex = tbCount === 0 ? i : _this.isReplace ? index + i : _this.lastIndex + 1;
        var disabled = item.disabled ? ' ' + CLS_DISABLE + ' ' + CLS_OVERLAY : '';
        txtWrapEle = _this.createElement('div', {
          className: CLS_TEXT,
          attrs: {
            'role': 'presentation'
          }
        });
        var tHtml = txt instanceof Object ? txt.outerHTML : txt;
        var txtEmpty = !(0, _ej2Base.isNullOrUndefined)(tHtml) && tHtml !== '';

        if (!(0, _ej2Base.isNullOrUndefined)(txt.tagName)) {
          txtWrapEle.appendChild(txt);
        } else {
          _this.headerTextCompile(txtWrapEle, txt, i);
        }

        var tEle;

        var icon = _this.createElement('span', {
          className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css
        });

        var tCont = _this.createElement('div', {
          className: CLS_TEXT_WRAP
        });

        tCont.appendChild(txtWrapEle);

        if (txt !== '' && txt !== undefined && css !== '') {
          if (pos === 'left' || pos === 'top') {
            tCont.insertBefore(icon, tCont.firstElementChild);
          } else {
            tCont.appendChild(icon);
          }

          tEle = txtWrapEle;
          _this.isIconAlone = false;
        } else {
          tEle = css === '' ? txtWrapEle : icon;

          if (tEle === icon) {
            (0, _ej2Base.detach)(txtWrapEle);
            tCont.appendChild(icon);
            _this.isIconAlone = true;
          }
        }

        var wrapAttrs = item.disabled ? {} : {
          tabIndex: '-1'
        };
        tCont.appendChild(_this.btnCls.cloneNode(true));

        var wrap = _this.createElement('div', {
          className: CLS_WRAP,
          attrs: wrapAttrs
        });

        wrap.appendChild(tCont);

        if (_this.itemIndexArray === []) {
          _this.itemIndexArray.push(CLS_ITEM + _this.tabId + '_' + _this.lastIndex);
        } else {
          _this.itemIndexArray.splice(index + i, 0, CLS_ITEM + _this.tabId + '_' + _this.lastIndex);
        }

        var attrObj = {
          id: CLS_ITEM + _this.tabId + '_' + _this.lastIndex,
          role: 'tab',
          'aria-selected': 'false'
        };
        var tItem = {
          htmlAttributes: attrObj,
          template: wrap
        };
        tItem.cssClass = item.cssClass + ' ' + disabled + ' ' + (css !== '' ? 'e-i' + pos : '') + ' ' + (!txtEmpty ? CLS_ICON : '');

        if (pos === 'top' || pos === 'bottom') {
          _this.element.classList.add('e-vertical-icon');
        }

        tItems.push(tItem);
        i++;
      });

      if (!this.isAdd) {
        spliceArray.forEach(function (spliceItemIndex) {
          _this.items.splice(spliceItemIndex, 1);
        });
      }

      this.isIconAlone ? this.element.classList.add(CLS_ICON_TAB) : this.element.classList.remove(CLS_ICON_TAB);
      return tItems;
    };

    Tab.prototype.removeActiveClass = function () {
      var tabHeader = this.getTabHeader();

      if (tabHeader) {
        var tabItems = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, tabHeader);
        [].slice.call(tabItems).forEach(function (node) {
          return node.classList.remove(CLS_ACTIVE);
        });
      }
    };

    Tab.prototype.checkPopupOverflow = function (ele) {
      this.tbPop = (0, _ej2Base.select)('.' + CLS_TB_POP, this.element);
      var popIcon = (0, _ej2Base.select)('.e-hor-nav', this.element);
      var tbrItems = (0, _ej2Base.select)('.' + CLS_TB_ITEMS, this.element);
      var lastChild = tbrItems.lastChild;
      var isOverflow = false;

      if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
        isOverflow = true;
      } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
        isOverflow = true;
      }

      if (isOverflow) {
        ele.classList.add(CLS_TB_POPUP);
        this.tbPop.insertBefore(ele.cloneNode(true), (0, _ej2Base.selectAll)('.' + CLS_TB_POPUP, this.tbPop)[0]);
        ele.outerHTML = '';
      }

      return true;
    };

    Tab.prototype.popupHandler = function (target) {
      var ripEle = target.querySelector('.e-ripple-element');

      if (!(0, _ej2Base.isNullOrUndefined)(ripEle)) {
        ripEle.outerHTML = '';
        target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');
      }

      this.tbItem = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
      var lastChild = this.tbItem[this.tbItem.length - 1];

      if (this.tbItem.length !== 0) {
        target.classList.remove(CLS_TB_POPUP);
        target.removeAttribute('style');
        this.tbItems.appendChild(target.cloneNode(true));
        this.actEleId = target.id;
        target.outerHTML = '';

        if (this.checkPopupOverflow(lastChild)) {
          var prevEle = this.tbItems.lastChild.previousElementSibling;
          this.checkPopupOverflow(prevEle);
        }

        this.isPopup = true;
      }

      return (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.tbItems).length - 1;
    };

    Tab.prototype.updateOrientationAttribute = function () {
      (0, _ej2Base.attributes)(this.element, {
        'aria-orientation': this.isVertical() ? 'vertical' : 'horizontal'
      });
    };

    Tab.prototype.setCloseButton = function (val) {
      var trg = (0, _ej2Base.select)('.' + CLS_HEADER, this.element);
      val === true ? trg.classList.add(CLS_CLOSE_SHOW) : trg.classList.remove(CLS_CLOSE_SHOW);
      this.tbObj.refreshOverflow();
      this.refreshActElePosition();
    };

    Tab.prototype.prevCtnAnimation = function (prev, current) {
      var animation;
      var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL);

      if (this.isPopup || prev <= current) {
        if (this.animation.previous.effect === 'SlideLeftIn') {
          animation = {
            name: 'SlideLeftOut',
            duration: this.animation.previous.duration,
            timingFunction: this.animation.previous.easing
          };
        } else {
          animation = null;
        }
      } else {
        if (this.animation.next.effect === 'SlideRightIn') {
          animation = {
            name: 'SlideRightOut',
            duration: this.animation.next.duration,
            timingFunction: this.animation.next.easing
          };
        } else {
          animation = null;
        }
      }

      return animation;
    };

    Tab.prototype.triggerPrevAnimation = function (oldCnt, prevIndex) {
      var _this = this;

      var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);

      if (!(0, _ej2Base.isNullOrUndefined)(animateObj)) {
        animateObj.begin = function () {
          (0, _ej2Base.setStyleAttribute)(oldCnt, {
            'position': 'absolute'
          });
          oldCnt.classList.add(CLS_PROGRESS);
          oldCnt.classList.add('e-view');
        };

        animateObj.end = function () {
          oldCnt.style.display = 'none';
          oldCnt.classList.remove(CLS_ACTIVE);
          oldCnt.classList.remove(CLS_PROGRESS);
          oldCnt.classList.remove('e-view');
          (0, _ej2Base.setStyleAttribute)(oldCnt, {
            'display': '',
            'position': ''
          });

          if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
            (0, _ej2Base.detach)(oldCnt);
          }
        };

        new _ej2Base.Animation(animateObj).animate(oldCnt);
      } else {
        oldCnt.classList.remove(CLS_ACTIVE);
      }
    };

    Tab.prototype.triggerAnimation = function (id, value) {
      var _this = this;

      var prevIndex = this.prevIndex;
      var oldCnt;
      var newCnt;

      if (!this.isServerRendered) {
        var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT).children);
        itemCollection.forEach(function (item) {
          if (item.id === _this.prevActiveEle) {
            oldCnt = item;
          }
        });
        var prevEle = this.tbItem[prevIndex];
        var no = this.extIndex(this.tbItem[this.selectedItem].id);
        newCnt = this.getTrgContent(this.cntEle, no);

        if ((0, _ej2Base.isNullOrUndefined)(oldCnt) && !(0, _ej2Base.isNullOrUndefined)(prevEle)) {
          var idNo = this.extIndex(prevEle.id);
          oldCnt = this.getTrgContent(this.cntEle, idNo);
        }
      } else {
        newCnt = this.cntEle.firstElementChild;
      }

      this.prevActiveEle = newCnt.id;

      if (this.initRender || value === false || this.animation === {} || (0, _ej2Base.isNullOrUndefined)(this.animation)) {
        if (oldCnt && oldCnt !== newCnt) {
          oldCnt.classList.remove(CLS_ACTIVE);
        }

        return;
      }

      var cnt = (0, _ej2Base.select)('.' + CLS_CONTENT, this.element);
      var animateObj;

      if (this.prevIndex > this.selectedItem && !this.isPopup) {
        var openEff = this.animation.previous.effect;
        animateObj = {
          name: openEff === 'None' ? '' : openEff !== 'SlideLeftIn' ? openEff : 'SlideLeftIn',
          duration: this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
        var clsEff = this.animation.next.effect;
        animateObj = {
          name: clsEff === 'None' ? '' : clsEff !== 'SlideRightIn' ? clsEff : 'SlideRightIn',
          duration: this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      }

      animateObj.progress = function () {
        cnt.classList.add(CLS_PROGRESS);

        _this.setActiveBorder();
      };

      animateObj.end = function () {
        cnt.classList.remove(CLS_PROGRESS);
        newCnt.classList.add(CLS_ACTIVE);
      };

      if (!this.initRender && !(0, _ej2Base.isNullOrUndefined)(oldCnt)) {
        this.triggerPrevAnimation(oldCnt, prevIndex);
      }

      this.isPopup = false;

      if (animateObj.name === '') {
        newCnt.classList.add(CLS_ACTIVE);
      } else {
        new _ej2Base.Animation(animateObj).animate(newCnt);
      }
    };

    Tab.prototype.keyPressed = function (trg) {
      var trgParent = (0, _ej2Base.closest)(trg, '.' + CLS_HEADER + ' .' + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);

      if (!(0, _ej2Base.isNullOrUndefined)(this.popEle) && trg.classList.contains('e-hor-nav')) {
        this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
      } else if (trg.classList.contains('e-scroll-nav')) {
        trg.click();
      } else {
        if (!(0, _ej2Base.isNullOrUndefined)(trgParent) && trgParent.classList.contains(CLS_ACTIVE) === false) {
          this.select(trgIndex);

          if (!(0, _ej2Base.isNullOrUndefined)(this.popEle)) {
            this.popObj.hide(this.hide);
          }
        }
      }
    };

    Tab.prototype.getTabHeader = function () {
      var headers = [].slice.call(this.element.children).filter(function (e) {
        return e.classList.contains(CLS_HEADER);
      });

      if (headers.length > 0) {
        return headers[0];
      } else {
        var wrap = [].slice.call(this.element.children).filter(function (e) {
          return !e.classList.contains(CLS_BLA_TEM);
        })[0];

        if (!wrap) {
          return undefined;
        }

        return [].slice.call(wrap.children).filter(function (e) {
          return e.classList.contains(CLS_HEADER);
        })[0];
      }
    };

    Tab.prototype.getEleIndex = function (item) {
      return Array.prototype.indexOf.call((0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.getTabHeader()), item);
    };

    Tab.prototype.extIndex = function (id) {
      return id.replace(CLS_ITEM + this.tabId + '_', '');
    };

    Tab.prototype.expTemplateContent = function () {
      var _this = this;

      this.templateEle.forEach(function (eleStr) {
        if (!(0, _ej2Base.isNullOrUndefined)(_this.element.querySelector(eleStr))) {
          document.body.appendChild(_this.element.querySelector(eleStr)).style.display = 'none';
        }
      });
    };

    Tab.prototype.templateCompile = function (ele, cnt, index) {
      var tempEle = this.createElement('div');
      this.compileElement(tempEle, cnt, 'content', index);

      if (tempEle.childNodes.length !== 0) {
        ele.appendChild(tempEle);
      }
    };

    Tab.prototype.compileElement = function (ele, val, prop, index) {
      var templateFn;

      if (typeof val === 'string' && (0, _ej2Base.isBlazor)() && val.indexOf('<div>Blazor') !== 0) {
        val = val.trim();
        ele.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(val);
      } else {
        templateFn = (0, _ej2Base.compile)(val);
      }

      var templateFUN;

      if (!(0, _ej2Base.isNullOrUndefined)(templateFn)) {
        if ((0, _ej2Base.isBlazor)() && !this.isStringTemplate && val.indexOf('<div>Blazor') === 0) {
          templateFUN = templateFn({}, this, prop, this.element.id + index + '_' + prop, this.isStringTemplate);
        } else {
          templateFUN = templateFn({}, this, prop);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(templateFn) && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function (el) {
          ele.appendChild(el);
        });
      }
    };

    Tab.prototype.headerTextCompile = function (element, text, index) {
      this.compileElement(element, text, 'headerTemplate', index);
    };

    Tab.prototype.getContent = function (ele, cnt, callType, index) {
      var eleStr;

      if (typeof cnt === 'string' || (0, _ej2Base.isNullOrUndefined)(cnt.innerHTML)) {
        if (cnt[0] === '.' || cnt[0] === '#') {
          if (document.querySelectorAll(cnt).length) {
            var eleVal = document.querySelector(cnt);
            eleStr = eleVal.outerHTML.trim();

            if (callType === 'clone') {
              ele.appendChild(eleVal.cloneNode(true));
            } else {
              ele.appendChild(eleVal);
              eleVal.style.display = '';
            }
          } else {
            this.templateCompile(ele, cnt, index);
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        ele.appendChild(cnt);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(eleStr)) {
        if (this.templateEle.indexOf(cnt.toString()) === -1) {
          this.templateEle.push(cnt.toString());
        }
      }
    };

    Tab.prototype.getTrgContent = function (cntEle, no) {
      var ele;

      if (this.element.classList.contains(CLS_NEST)) {
        ele = (0, _ej2Base.select)('.' + CLS_NEST + '> .' + CLS_CONTENT + ' > #' + CLS_CONTENT + this.tabId + '_' + no, this.element);
      } else {
        ele = this.findEle(cntEle.children, CLS_CONTENT + this.tabId + '_' + no);
      }

      return ele;
    };

    Tab.prototype.findEle = function (items, key) {
      var ele;

      for (var i = 0; i < items.length; i++) {
        if (items[i].id === key) {
          ele = items[i];
          break;
        }
      }

      return ele;
    };

    Tab.prototype.isVertical = function () {
      var isVertical = this.headerPlacement === 'Left' || this.headerPlacement === 'Right' ? true : false;
      this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
      return isVertical;
    };

    Tab.prototype.addVerticalClass = function () {
      if (this.isVertical()) {
        var tbPos = this.headerPlacement === 'Left' ? CLS_VLEFT : CLS_VRIGHT;
        (0, _ej2Base.addClass)([this.hdrEle], [CLS_VERTICAL, tbPos]);

        if (!this.element.classList.contains(CLS_NEST)) {
          (0, _ej2Base.addClass)([this.element], [CLS_VTAB, tbPos]);
        } else {
          (0, _ej2Base.addClass)([this.hdrEle], [CLS_VTAB, tbPos]);
        }
      }

      if (this.headerPlacement === 'Bottom') {
        (0, _ej2Base.addClass)([this.hdrEle], [CLS_HBOTTOM]);
      }
    };

    Tab.prototype.updatePopAnimationConfig = function () {
      this.show = {
        name: this.isVertical() ? 'FadeIn' : 'SlideDown',
        duration: 100
      };
      this.hide = {
        name: this.isVertical() ? 'FadeOut' : 'SlideUp',
        duration: 100
      };
    };

    Tab.prototype.changeOrientation = function (place) {
      this.setOrientation(place, this.hdrEle);
      var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL) ? true : false;
      (0, _ej2Base.removeClass)([this.element], [CLS_VTAB]);
      (0, _ej2Base.removeClass)([this.hdrEle], [CLS_VERTICAL, CLS_VLEFT, CLS_VRIGHT]);

      if (isVertical !== this.isVertical()) {
        this.changeToolbarOrientation();
      }

      this.addVerticalClass();
      this.updateOrientationAttribute();
      this.select(this.selectedItem);
    };

    Tab.prototype.serverChangeOrientation = function (newProp, oldProp) {
      this.setOrientation(newProp, this.hdrEle);
      (0, _ej2Base.removeClass)([this.element], [CLS_VTAB]);
      var newValue = newProp === 'Left' || newProp === 'Right';
      var oldValue = oldProp === 'Left' || oldProp === 'Right';

      if (newValue !== oldValue) {
        this.changeToolbarOrientation();
      }

      if (this.isVertical()) {
        (0, _ej2Base.addClass)([this.element], [CLS_VTAB]);
      }

      this.updateOrientationAttribute();
      this.select(this.selectedItem);
    };

    Tab.prototype.changeToolbarOrientation = function () {
      this.tbObj.setProperties({
        height: this.isVertical() ? '100%' : 'auto',
        width: this.isVertical() ? 'auto' : '100%'
      }, true);
      this.tbObj.changeOrientation();
      this.updatePopAnimationConfig();
    };

    Tab.prototype.setOrientation = function (place, ele) {
      var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
      var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT));

      if (place === 'Bottom' && contentPos > headerPos) {
        this.element.appendChild(ele);
      } else {
        (0, _ej2Base.removeClass)([ele], [CLS_HBOTTOM]);
        this.element.insertBefore(ele, (0, _ej2Base.select)('.' + CLS_CONTENT, this.element));
      }
    };

    Tab.prototype.setCssClass = function (ele, cls, val) {
      if (cls === '') {
        return;
      }

      var list = cls.split(' ');

      for (var i = 0; i < list.length; i++) {
        if (val) {
          ele.classList.add(list[i]);
        } else {
          ele.classList.remove(list[i]);
        }
      }
    };

    Tab.prototype.setContentHeight = function (val) {
      if (this.element.classList.contains(CLS_FILL)) {
        (0, _ej2Base.removeClass)([this.element], [CLS_FILL]);
      }

      if ((0, _ej2Base.isNullOrUndefined)(this.cntEle)) {
        return;
      }

      var hdrEle = this.getTabHeader();

      if (this.heightAdjustMode === 'None') {
        if (this.height === 'auto') {
          return;
        } else {
          if (!this.isVertical()) {
            (0, _ej2Base.setStyleAttribute)(this.cntEle, {
              'height': this.element.offsetHeight - hdrEle.offsetHeight + 'px'
            });
          }
        }
      } else if (this.heightAdjustMode === 'Fill') {
        (0, _ej2Base.addClass)([this.element], [CLS_FILL]);
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'height': '100%'
        });
        (0, _ej2Base.setStyleAttribute)(this.cntEle, {
          'height': '100%'
        });
      } else if (this.heightAdjustMode === 'Auto') {
        if (this.isTemplate === true) {
          var cnt = (0, _ej2Base.selectAll)('.' + CLS_CONTENT + ' > .' + CLS_ITEM, this.element);

          for (var i = 0; i < cnt.length; i++) {
            cnt[i].setAttribute('style', 'display:block; visibility: visible');
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
            cnt[i].style.removeProperty('display');
            cnt[i].style.removeProperty('visibility');
          }
        } else {
          this.cntEle = (0, _ej2Base.select)('.' + CLS_CONTENT, this.element);

          if (val === true) {
            this.cntEle.appendChild(this.createElement('div', {
              id: CLS_CONTENT + this.tabId + '_' + 0,
              className: CLS_ITEM + ' ' + CLS_ACTIVE,
              attrs: {
                'role': 'tabpanel',
                'aria-labelledby': CLS_ITEM + this.tabId + '_' + 0
              }
            }));
          }

          var ele = this.cntEle.children.item(0);

          for (var i = 0; i < this.items.length; i++) {
            this.getContent(ele, this.items[i].content, 'clone', i);
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));

            while (ele.firstChild) {
              ele.removeChild(ele.firstChild);
            }
          }

          this.clearTemplate(['content']);
          this.templateEle = [];
          this.getContent(ele, this.items[0].content, 'render', 0);
          ele.classList.remove(CLS_ACTIVE);
        }

        (0, _ej2Base.setStyleAttribute)(this.cntEle, {
          'height': this.maxHeight + 'px'
        });
      } else {
        (0, _ej2Base.setStyleAttribute)(this.cntEle, {
          'height': 'auto'
        });
      }
    };

    Tab.prototype.getHeight = function (ele) {
      var cs = window.getComputedStyle(ele);
      return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) + parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));
    };

    Tab.prototype.setActiveBorder = function () {
      var bar;
      var scrollCnt;
      var trgHdrEle = this.getTabHeader();
      var trg = (0, _ej2Base.select)('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, trgHdrEle);

      if (trg === null) {
        return;
      }

      if (this.isServerRendered && trg.classList.contains(CLS_TB_POPUP)) {
        this.popupHandler(trg);
      }

      var root = (0, _ej2Base.closest)(trg, '.' + CLS_TAB);

      if (this.element !== root) {
        return;
      }

      this.tbItems = (0, _ej2Base.select)('.' + CLS_TB_ITEMS, trgHdrEle);
      bar = (0, _ej2Base.select)('.' + CLS_INDICATOR, trgHdrEle);
      scrollCnt = (0, _ej2Base.select)('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);

      if (this.isVertical()) {
        (0, _ej2Base.setStyleAttribute)(bar, {
          'left': '',
          'right': ''
        });
        var tbHeight = (0, _ej2Base.isNullOrUndefined)(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;

        if (tbHeight !== 0) {
          (0, _ej2Base.setStyleAttribute)(bar, {
            'top': trg.offsetTop + 'px',
            'height': trg.offsetHeight + 'px'
          });
        } else {
          (0, _ej2Base.setStyleAttribute)(bar, {
            'top': 0,
            'height': 0
          });
        }
      } else {
        (0, _ej2Base.setStyleAttribute)(bar, {
          'top': '',
          'height': ''
        });
        var tbWidth = (0, _ej2Base.isNullOrUndefined)(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;

        if (tbWidth !== 0) {
          (0, _ej2Base.setStyleAttribute)(bar, {
            'left': trg.offsetLeft + 'px',
            'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px'
          });
        } else {
          (0, _ej2Base.setStyleAttribute)(bar, {
            'left': 'auto',
            'right': 'auto'
          });
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.bdrLine)) {
        this.bdrLine.classList.remove(CLS_HIDDEN);
      }
    };

    Tab.prototype.setActive = function (value) {
      this.tbItem = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.getTabHeader());
      var trg = this.tbItem[value];

      if (this.isServerRendered) {
        value = parseInt(trg.getAttribute('data-index'), 10);
      }

      if (value < 0 || isNaN(value) || this.tbItem.length === 0) {
        return;
      }

      if (value >= 0) {
        this.allowServerDataBinding = false;
        this.setProperties({
          selectedItem: value
        }, true);
        this.allowServerDataBinding = true;

        if (!this.initRender) {
          this.serverDataBind();
        }
      }

      if (trg.classList.contains(CLS_ACTIVE)) {
        this.setActiveBorder();
        return;
      }

      if (!this.isTemplate) {
        var prev = this.tbItem[this.prevIndex];

        if (!(0, _ej2Base.isNullOrUndefined)(prev)) {
          prev.removeAttribute('aria-controls');
        }

        (0, _ej2Base.attributes)(trg, {
          'aria-controls': CLS_CONTENT + this.tabId + '_' + value
        });
      }

      var id = trg.id;
      this.removeActiveClass();
      trg.classList.add(CLS_ACTIVE);
      trg.setAttribute('aria-selected', 'true');
      var no = Number(this.extIndex(id));

      if ((0, _ej2Base.isNullOrUndefined)(this.prevActiveEle)) {
        this.prevActiveEle = CLS_CONTENT + this.tabId + '_' + no;
      }

      (0, _ej2Base.attributes)(this.element, {
        'aria-activedescendant': id
      });

      if (this.isTemplate) {
        if ((0, _ej2Base.select)('.' + CLS_CONTENT, this.element).children.length > 0) {
          var trg_1 = this.findEle((0, _ej2Base.select)('.' + CLS_CONTENT, this.element).children, CLS_CONTENT + this.tabId + '_' + no);

          if (!(0, _ej2Base.isNullOrUndefined)(trg_1)) {
            trg_1.classList.add(CLS_ACTIVE);
          }

          this.triggerAnimation(id, this.enableAnimation);
        }
      } else if (!this.isServerRendered) {
        this.cntEle = (0, _ej2Base.select)('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));

        if ((0, _ej2Base.isNullOrUndefined)(item)) {
          this.cntEle.appendChild(this.createElement('div', {
            id: CLS_CONTENT + this.tabId + '_' + this.extIndex(id),
            className: CLS_ITEM + ' ' + CLS_ACTIVE,
            attrs: {
              role: 'tabpanel',
              'aria-labelledby': CLS_ITEM + this.tabId + '_' + this.extIndex(id)
            }
          }));
          var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
          var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
          this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);
        } else {
          item.classList.add(CLS_ACTIVE);
        }

        this.triggerAnimation(id, this.enableAnimation);
      }

      this.setActiveBorder();
      var curActItem = (0, _ej2Base.select)('.' + CLS_HEADER + ' #' + id, this.element);
      this.refreshItemVisibility(curActItem);

      if (!this.initRender) {
        curActItem.firstElementChild.focus();
      }

      if (!this.initRender) {
        var eventArg = {
          previousItem: this.prevItem,
          previousIndex: this.prevIndex,
          selectedItem: trg,
          selectedIndex: value,
          selectedContent: (0, _ej2Base.select)('#' + CLS_CONTENT + this.tabId + '_' + this.selectingID, this.content),
          isSwiped: this.isSwipeed
        };
        this.trigger('selected', eventArg);
      }
    };

    Tab.prototype.contentReady = function () {
      var id = CLS_ITEM + this.tabId + '_' + this.selectedItem;
      this.triggerAnimation(id, this.enableAnimation);
    };

    Tab.prototype.setItems = function (items) {
      this.isReplace = true;
      this.tbItems = (0, _ej2Base.select)('.' + CLS_TB_ITEMS, this.getTabHeader());
      this.tbObj.items = this.parseObject(items, 0);
      this.tbObj.dataBind();
      this.isReplace = false;
    };

    Tab.prototype.setRTL = function (value) {
      this.tbObj.enableRtl = value;
      this.tbObj.dataBind();
      this.setCssClass(this.element, CLS_RTL, value);
      this.refreshActiveBorder();
    };

    Tab.prototype.refreshActiveBorder = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN);
      }

      this.setActiveBorder();
    };

    Tab.prototype.showPopup = function (config) {
      var tbPop = (0, _ej2Base.select)('.e-popup.e-toolbar-pop', this.hdrEle);

      if (tbPop.classList.contains('e-popup-close')) {
        var tbPopObj = tbPop && tbPop.ej2_instances[0];
        tbPopObj.position.X = this.headerPlacement === 'Left' ? 'left' : 'right';
        tbPopObj.dataBind();
        tbPopObj.show(config);
      }
    };

    Tab.prototype.wireEvents = function () {
      window.addEventListener('resize', this.resizeContext);

      _ej2Base.EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);

      if (!(0, _ej2Base.isNullOrUndefined)(this.cntEle)) {
        this.touchModule = new _ej2Base.Touch(this.cntEle, {
          swipe: this.swipeHandler.bind(this)
        });
      }

      this.keyModule = new _ej2Base.KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      this.tabKeyModule = new _ej2Base.KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: {
          openPopup: 'shift+f10',
          tab: 'tab',
          shiftTab: 'shift+tab'
        },
        eventName: 'keydown'
      });
    };

    Tab.prototype.unWireEvents = function () {
      this.keyModule.destroy();
      this.tabKeyModule.destroy();

      if (!(0, _ej2Base.isNullOrUndefined)(this.cntEle)) {
        this.touchModule.destroy();
      }

      window.removeEventListener('resize', this.resizeContext);

      _ej2Base.EventHandler.remove(this.element, 'mouseover', this.hoverHandler);

      _ej2Base.EventHandler.remove(this.element, 'keydown', this.spaceKeyDown);

      this.element.classList.remove(CLS_RTL);
      this.element.classList.remove(CLS_FOCUS);
    };

    Tab.prototype.clickHandler = function (args) {
      this.element.classList.remove(CLS_FOCUS);
      var trg = args.originalEvent.target;
      var trgParent = (0, _ej2Base.closest)(trg, '.' + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);

      if (trg.classList.contains(CLS_ICON_CLOSE)) {
        this.removeTab(trgIndex);
      } else if (this.isVertical() && (0, _ej2Base.closest)(trg, '.' + CLS_HOR_NAV)) {
        this.showPopup(this.show);
      } else {
        this.isPopup = false;

        if (this.isServerRendered && !(0, _ej2Base.isNullOrUndefined)(trgParent)) {
          if (parseInt(trgParent.getAttribute('data-index'), 10) !== this.selectedItem) {
            this.select(trgIndex);
          }
        } else if (!(0, _ej2Base.isNullOrUndefined)(trgParent) && trgIndex !== this.selectedItem) {
          this.select(trgIndex);
        }
      }
    };

    Tab.prototype.swipeHandler = function (e) {
      if (e.velocity < 3 && (0, _ej2Base.isNullOrUndefined)(e.originalEvent.changedTouches)) {
        return;
      }

      this.isSwipeed = true;

      if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {
        for (var k = this.selectedItem - 1; k >= 0; k--) {
          if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
            this.select(k);
            break;
          }
        }
      } else if (e.swipeDirection === 'Left' && this.selectedItem !== (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element).length - 1) {
        for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
          if (!this.tbItem[i].classList.contains(CLS_HIDDEN)) {
            this.select(i);
            break;
          }
        }
      }

      this.isSwipeed = false;
    };

    Tab.prototype.spaceKeyDown = function (e) {
      if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
        var clstHead = (0, _ej2Base.closest)(e.target, '.' + CLS_HEADER);

        if (!(0, _ej2Base.isNullOrUndefined)(clstHead)) {
          e.preventDefault();
        }
      }
    };

    Tab.prototype.keyHandler = function (e) {
      if (this.element.classList.contains(CLS_DISABLE)) {
        return;
      }

      this.element.classList.add(CLS_FOCUS);
      var trg = e.target;
      var tabHeader = this.getTabHeader();
      var actEle = (0, _ej2Base.select)('.' + CLS_ACTIVE, tabHeader);
      this.popEle = (0, _ej2Base.select)('.' + CLS_TB_POP, tabHeader);

      if (!(0, _ej2Base.isNullOrUndefined)(this.popEle)) {
        this.popObj = this.popEle.ej2_instances[0];
      }

      switch (e.action) {
        case 'space':
        case 'enter':
          if (trg.parentElement.classList.contains(CLS_DISABLE)) {
            return;
          }

          if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {
            this.showPopup(this.show);
            break;
          }

          this.keyPressed(trg);
          break;

        case 'tab':
        case 'shiftTab':
          if (trg.classList.contains(CLS_WRAP) && (0, _ej2Base.closest)(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE) === false) {
            trg.setAttribute('tabindex', '-1');
          }

          if (this.popObj && (0, _ej2Base.isVisible)(this.popObj.element)) {
            this.popObj.hide(this.hide);
          }

          actEle.children.item(0).setAttribute('tabindex', '0');
          break;

        case 'moveLeft':
        case 'moveRight':
          var item = (0, _ej2Base.closest)(document.activeElement, '.' + CLS_TB_ITEM);

          if (!(0, _ej2Base.isNullOrUndefined)(item)) {
            this.refreshItemVisibility(item);
          }

          break;

        case 'openPopup':
          e.preventDefault();

          if (!(0, _ej2Base.isNullOrUndefined)(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
            this.popObj.show(this.show);
          }

          break;

        case 'delete':
          var trgParent = (0, _ej2Base.closest)(trg, '.' + CLS_TB_ITEM);

          if (this.showCloseButton === true && !(0, _ej2Base.isNullOrUndefined)(trgParent)) {
            var nxtSib = trgParent.nextSibling;

            if (!(0, _ej2Base.isNullOrUndefined)(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
              nxtSib.firstElementChild.focus();
            }

            this.removeTab(this.getEleIndex(trgParent));
          }

          this.setActiveBorder();
          break;
      }
    };

    Tab.prototype.refreshActElePosition = function () {
      var activeEle = (0, _ej2Base.select)('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE, this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(activeEle)) {
        this.select(this.getEleIndex(activeEle));
      }

      this.refreshActiveBorder();
    };

    Tab.prototype.refreshItemVisibility = function (target) {
      var scrCnt = (0, _ej2Base.select)('.' + this.scrCntClass, this.tbItems);

      if (!this.isVertical() && !(0, _ej2Base.isNullOrUndefined)(scrCnt)) {
        var scrBar = (0, _ej2Base.select)('.e-hscroll-bar', this.tbItems);
        var scrStart = scrBar.scrollLeft;
        var scrEnd = scrStart + scrBar.offsetWidth;
        var eleStart = target.offsetLeft;
        var eleWidth = target.offsetWidth;
        var eleEnd = target.offsetLeft + target.offsetWidth;

        if (scrStart < eleStart && scrEnd < eleEnd) {
          var eleViewRange = scrEnd - eleStart;
          scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
        } else {
          if (scrStart > eleStart && scrEnd > eleEnd) {
            var eleViewRange = eleEnd - scrStart;
            scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
          }
        }
      } else {
        return;
      }
    };

    Tab.prototype.hoverHandler = function (e) {
      var trg = e.target;

      if (!(0, _ej2Base.isNullOrUndefined)(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
        trg.setAttribute('title', new _ej2Base.L10n('tab', {
          closeButtonTitle: this.title
        }, this.locale).getConstant('closeButtonTitle'));
      }
    };

    Tab.prototype.evalOnPropertyChangeItems = function (newProp, oldProp) {
      if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
        var changedProp = Object.keys(newProp.items);

        for (var i = 0; i < changedProp.length; i++) {
          var index = parseInt(Object.keys(newProp.items)[i], 10);
          var property = Object.keys(newProp.items[index])[0];
          var oldVal = Object(oldProp.items[index])[property];
          var newVal = Object(newProp.items[index])[property];
          var hdrItem = (0, _ej2Base.select)('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM + this.tabId + '_' + index, this.element);
          var cntItem = (0, _ej2Base.select)('.' + CLS_CONTENT + ' #' + CLS_CONTENT + this.tabId + '_' + index, this.element);

          if (property === 'header' || property === 'headerTemplate') {
            var icon = (0, _ej2Base.isNullOrUndefined)(this.items[index].header) || (0, _ej2Base.isNullOrUndefined)(this.items[index].header.iconCss) ? '' : this.items[index].header.iconCss;
            var textVal = this.items[index].headerTemplate || this.items[index].header.text;

            if (textVal === '' && icon === '') {
              this.removeTab(index);
            } else {
              var arr = [];
              arr.push(this.items[index]);
              this.items.splice(index, 1);
              this.itemIndexArray.splice(index, 1);
              this.tbObj.items.splice(index, 1);
              var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN);
              (0, _ej2Base.detach)(hdrItem);
              this.isReplace = true;
              this.addTab(arr, index);

              if (isHiddenEle) {
                this.hideTab(index);
              }

              this.isReplace = false;
            }
          }

          if (property === 'content' && !(0, _ej2Base.isNullOrUndefined)(cntItem)) {
            var strVal = typeof newVal === 'string' || (0, _ej2Base.isNullOrUndefined)(newVal.innerHTML);

            if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {
              var eleVal = document.querySelector(newVal);
              cntItem.appendChild(eleVal);
              eleVal.style.display = '';
            } else if (newVal === '' && oldVal[0] === '#') {
              document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';
              cntItem.innerHTML = newVal;
            } else {
              cntItem.innerHTML = newVal;
            }
          }

          if (property === 'cssClass') {
            if (!(0, _ej2Base.isNullOrUndefined)(hdrItem)) {
              hdrItem.classList.remove(oldVal);
              hdrItem.classList.add(newVal);
            }

            if (!(0, _ej2Base.isNullOrUndefined)(cntItem)) {
              cntItem.classList.remove(oldVal);
              cntItem.classList.add(newVal);
            }
          }

          if (property === 'disabled') {
            this.enableTab(index, newVal === true ? false : true);
          }
        }
      } else {
        this.lastIndex = 0;

        if ((0, _ej2Base.isNullOrUndefined)(this.tbObj)) {
          this.reRenderItems();
        } else {
          this.setItems(newProp.items);

          if (this.templateEle.length > 0) {
            this.expTemplateContent();
          }

          this.templateEle = [];
          var selectElement = (0, _ej2Base.select)('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);

          while (selectElement.firstElementChild && !(0, _ej2Base.isBlazor)()) {
            (0, _ej2Base.detach)(selectElement.firstElementChild);
          }

          this.select(this.selectedItem);
        }
      }
    };
    /**
     * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.
     * @param  {number} index - Index value of target Tab item.
     * @param  {boolean} value - Boolean value that determines whether the command should be enabled or disabled.
     * By default, isEnable is true.
     * @returns void.
     */


    Tab.prototype.enableTab = function (index, value) {
      var tbItems = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element)[index];

      if ((0, _ej2Base.isNullOrUndefined)(tbItems)) {
        return;
      }

      if (value === true) {
        tbItems.classList.remove(CLS_DISABLE, CLS_OVERLAY);
        tbItems.firstElementChild.setAttribute('tabindex', '-1');
      } else {
        tbItems.classList.add(CLS_DISABLE, CLS_OVERLAY);
        tbItems.firstElementChild.removeAttribute('tabindex');

        if (tbItems.classList.contains(CLS_ACTIVE)) {
          this.select(index + 1);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.items[index])) {
        this.items[index].disabled = !value;
        this.dataBind();
      }

      tbItems.setAttribute('aria-disabled', value === true ? 'false' : 'true');
    };
    /**
     * Adds new items to the Tab that accepts an array as Tab items.
     * @param  {TabItemsModel[]} items - An array of item that is added to the Tab.
     * @param  {number} index - Number value that determines where the items to be added. By default, index is 0.
     * @returns void.
     * @deprecated
     */


    Tab.prototype.addTab = function (items, index) {
      var _this = this;

      var addArgs = {
        addedItems: items,
        cancel: false
      };

      if (!this.isReplace) {
        this.trigger('adding', addArgs, function (tabAddingArgs) {
          if (!tabAddingArgs.cancel) {
            _this.addingTabContent(items, index);
          }
        });
      } else {
        this.addingTabContent(items, index);
      }
    };

    Tab.prototype.addingTabContent = function (items, index) {
      var _this = this;

      var lastEleIndex = 0;
      this.hdrEle = (0, _ej2Base.select)('.' + CLS_HEADER, this.element);

      if ((0, _ej2Base.isNullOrUndefined)(this.hdrEle)) {
        this.items = items;
        this.reRenderItems();
      } else {
        var itemsCount = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element).length;

        if (itemsCount !== 0) {
          lastEleIndex = this.lastIndex + 1;
        }

        if ((0, _ej2Base.isNullOrUndefined)(index)) {
          index = itemsCount - 1;
        }

        if (itemsCount < index || index < 0 || isNaN(index)) {
          return;
        }

        if (itemsCount === 0 && !(0, _ej2Base.isNullOrUndefined)(this.hdrEle)) {
          this.hdrEle.style.display = '';
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.bdrLine)) {
          this.bdrLine.classList.add(CLS_HIDDEN);
        }

        this.tbItems = (0, _ej2Base.select)('.' + CLS_TB_ITEMS, this.getTabHeader());
        this.isAdd = true;
        var tabItems = this.parseObject(items, index);
        this.isAdd = false;
        var i_1 = 0;
        var textValue_1;
        items.forEach(function (item, place) {
          textValue_1 = item.headerTemplate || item.header.text;

          if (!((0, _ej2Base.isNullOrUndefined)(item.headerTemplate || item.header) || (0, _ej2Base.isNullOrUndefined)(textValue_1) || textValue_1.length === 0 && (0, _ej2Base.isNullOrUndefined)(item.header.iconCss))) {
            _this.items.splice(index + i_1, 0, item);

            i_1++;
          }

          if (_this.isTemplate && !(0, _ej2Base.isNullOrUndefined)(item.header) && !(0, _ej2Base.isNullOrUndefined)(item.header.text)) {
            var no = lastEleIndex + place;

            var ele = _this.createElement('div', {
              id: CLS_CONTENT + _this.tabId + '_' + no,
              className: CLS_ITEM,
              attrs: {
                role: 'tabpanel',
                'aria-labelledby': CLS_ITEM + '_' + no
              }
            });

            _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);

            var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());

            _this.getContent(eleTrg, item.content, 'render', index);
          }
        });
        this.tbObj.addItems(tabItems, index);

        if (!this.isReplace) {
          this.trigger('added', {
            addedItems: items
          });
        }

        if (this.selectedItem === index) {
          this.select(index);
        } else {
          this.setActiveBorder();
        }
      }
    };
    /**
     * Removes the items in the Tab from the specified index.
     * @param  {number} index - Index of target item that is going to be removed.
     * @returns void.
     * @deprecated
     */


    Tab.prototype.removeTab = function (index) {
      var _this = this;

      var trg = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element)[index];

      if ((0, _ej2Base.isNullOrUndefined)(trg)) {
        return;
      }

      var removeArgs = {
        removedItem: trg,
        removedIndex: index,
        cancel: false
      };
      this.trigger('removing', removeArgs, function (tabRemovingArgs) {
        if (!tabRemovingArgs.cancel) {
          if ((0, _ej2Base.isBlazor)() && _this.isServerRendered) {
            // tslint:disable-next-line:no-any
            _this.interopAdaptor.invokeMethodAsync('OnRemoveItem', index);

            return;
          }

          _this.tbObj.removeItems(index);

          _this.items.splice(index, 1);

          _this.itemIndexArray.splice(index, 1);

          _this.refreshActiveBorder();

          var cntTrg = (0, _ej2Base.select)('#' + CLS_CONTENT + _this.tabId + '_' + _this.extIndex(trg.id), (0, _ej2Base.select)('.' + CLS_CONTENT, _this.element));

          if (!(0, _ej2Base.isNullOrUndefined)(cntTrg)) {
            (0, _ej2Base.detach)(cntTrg);
          }

          _this.trigger('removed', tabRemovingArgs);

          if (trg.classList.contains(CLS_ACTIVE)) {
            // tslint:disable-next-line:max-line-length
            index = index > (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', _this.element).length - 1 ? index - 1 : index;
            _this.enableAnimation = false;
            _this.selectedItem = index;

            _this.select(index);
          }

          if ((0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, _this.element).length === 0) {
            _this.hdrEle.style.display = 'none';
          }

          _this.enableAnimation = true;
        }
      });
    };
    /**
     * Shows or hides the Tab that is in the specified index.
     * @param  {number} index - Index value of target item.
     * @param  {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.
     * @returns void.
     */


    Tab.prototype.hideTab = function (index, value) {
      var items;
      var item = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, this.element)[index];

      if ((0, _ej2Base.isNullOrUndefined)(item)) {
        return;
      }

      if ((0, _ej2Base.isNullOrUndefined)(value)) {
        value = true;
      }

      this.bdrLine.classList.add(CLS_HIDDEN);

      if (value === true) {
        item.classList.add(CLS_HIDDEN);
        items = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);

        if (items.length !== 0 && item.classList.contains(CLS_ACTIVE)) {
          if (index !== 0) {
            for (var i = index - 1; i >= 0; i--) {
              if (!this.tbItem[i].classList.contains(CLS_HIDDEN)) {
                this.select(i);
                break;
              } else if (i === 0) {
                for (var k = index + 1; k < this.tbItem.length; k++) {
                  if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
                    this.select(k);
                    break;
                  }
                }
              }
            }
          } else {
            for (var k = index + 1; k < this.tbItem.length; k++) {
              if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
                this.select(k);
                break;
              }
            }
          }
        } else if (items.length === 0) {
          this.element.classList.add(CLS_HIDDEN);
        }
      } else {
        this.element.classList.remove(CLS_HIDDEN);
        items = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);

        if (items.length === 0) {
          this.select(index);
        }

        item.classList.remove(CLS_HIDDEN);
      }

      this.setActiveBorder();
      item.setAttribute('aria-hidden', '' + value);
    };
    /**
     * Specifies the index or HTMLElement to select an item from the Tab.
     * @param  {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.
     * @returns void.
     */


    Tab.prototype.select = function (args) {
      var _this = this;

      var tabHeader = this.getTabHeader();
      this.tbItems = (0, _ej2Base.select)('.' + CLS_TB_ITEMS, tabHeader);
      this.tbItem = (0, _ej2Base.selectAll)('.' + CLS_TB_ITEM, tabHeader);
      this.content = (0, _ej2Base.select)('.' + CLS_CONTENT, this.element);
      this.prevItem = this.tbItem[this.prevIndex];

      if ((0, _ej2Base.isNullOrUndefined)(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
        this.selectedItem = 0;
      } else {
        this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
      }

      var trg = this.tbItem[args];

      if ((0, _ej2Base.isNullOrUndefined)(trg)) {
        this.selectedID = '0';
      } else {
        this.selectingID = this.extIndex(trg.id);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE)) {
        this.prevItem.children.item(0).setAttribute('tabindex', '-1');
      }

      var eventArg = {
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: this.tbItem[this.selectedItem],
        selectedIndex: this.selectedItem,
        selectedContent: !(0, _ej2Base.isNullOrUndefined)(this.content) ? (0, _ej2Base.select)('#' + CLS_CONTENT + this.tabId + '_' + this.selectedID, this.content) : null,
        selectingItem: trg,
        selectingIndex: args,
        selectingContent: !(0, _ej2Base.isNullOrUndefined)(this.content) ? (0, _ej2Base.select)('#' + CLS_CONTENT + this.tabId + '_' + this.selectingID, this.content) : null,
        isSwiped: this.isSwipeed,
        cancel: false
      };

      if (!this.initRender) {
        this.trigger('selecting', eventArg, function (selectArgs) {
          if (!selectArgs.cancel) {
            _this.selectingContent(args);
          }
        });
      } else {
        this.selectingContent(args);
      }
    };

    Tab.prototype.selectingContent = function (args) {
      if (typeof args === 'number') {
        if (!(0, _ej2Base.isNullOrUndefined)(this.tbItem[args]) && this.tbItem[args].classList.contains(CLS_DISABLE)) {
          for (var i = args + 1; i < this.items.length; i++) {
            if (this.items[i].disabled === false) {
              args = i;
              break;
            } else {
              args = 0;
            }
          }
        }

        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
          this.prevIndex = this.selectedItem;

          if (this.tbItem[args].classList.contains(CLS_TB_POPUP)) {
            this.setActive(this.popupHandler(this.tbItem[args]));
          } else {
            this.setActive(args);
          }
        } else {
          this.setActive(0);
        }
      } else if (args instanceof HTMLElement) {
        this.setActive(this.getEleIndex(args));
      }
    };
    /**
     * Specifies the value to disable/enable the Tab component.
     * When set to `true`, the component will be disabled.
     * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).
     * @returns void.
     */


    Tab.prototype.disable = function (value) {
      this.setCssClass(this.element, CLS_DISABLE, value);
      this.element.setAttribute('aria-disabled', '' + value);
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     */


    Tab.prototype.getPersistData = function () {
      return this.addOnPersist(['selectedItem', 'actEleId']);
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    Tab.prototype.getModuleName = function () {
      return 'tab';
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
     * @param  {TabModel} newProp
     * @param  {TabModel} oldProp
     * @returns void
     * @private
     */


    Tab.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'width':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              width: (0, _ej2Base.formatUnit)(newProp.width)
            });
            break;

          case 'height':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              height: (0, _ej2Base.formatUnit)(newProp.height)
            });

            if (!this.isServerRendered) {
              this.setContentHeight(false);
            }

            break;

          case 'cssClass':
            if (oldProp.cssClass !== '') {
              this.setCssClass(this.element, oldProp.cssClass, false);
              this.setCssClass(this.element, newProp.cssClass, true);
            } else {
              this.setCssClass(this.element, newProp.cssClass, true);
            }

            break;

          case 'items':
            if (!this.isServerRendered) {
              this.evalOnPropertyChangeItems(newProp, oldProp);
            }

            break;

          case 'showCloseButton':
            this.setCloseButton(newProp.showCloseButton);
            break;

          case 'selectedItem':
            if (!this.isServerRendered) {
              this.selectedItem = oldProp.selectedItem;
              this.select(newProp.selectedItem);
            }

            break;

          case 'headerPlacement':
            if (this.isServerRendered) {
              this.serverChangeOrientation(newProp.headerPlacement, oldProp.headerPlacement);
            } else {
              this.changeOrientation(newProp.headerPlacement);
            }

            break;

          case 'enableRtl':
            this.setRTL(newProp.enableRtl);
            break;

          case 'overflowMode':
            this.tbObj.overflowMode = newProp.overflowMode;
            this.tbObj.dataBind();
            this.refreshActElePosition();
            break;

          case 'heightAdjustMode':
            if (!this.isServerRendered) {
              this.setContentHeight(false);
              this.select(this.selectedItem);
            }

            break;

          case 'scrollStep':
            if (this.tbObj) {
              this.tbObj.scrollStep = this.scrollStep;
            }

            break;
        }
      }
    };

    __decorate([(0, _ej2Base.Collection)([], TabItem)], Tab.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], Tab.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Tab.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('')], Tab.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Tab.prototype, "selectedItem", void 0);

    __decorate([(0, _ej2Base.Property)('Top')], Tab.prototype, "headerPlacement", void 0);

    __decorate([(0, _ej2Base.Property)('Content')], Tab.prototype, "heightAdjustMode", void 0);

    __decorate([(0, _ej2Base.Property)('Scrollable')], Tab.prototype, "overflowMode", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Tab.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Tab.prototype, "showCloseButton", void 0);

    __decorate([(0, _ej2Base.Property)()], Tab.prototype, "scrollStep", void 0);

    __decorate([(0, _ej2Base.Complex)({}, TabAnimationSettings)], Tab.prototype, "animation", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "adding", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "added", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "selecting", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "selected", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "removing", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "removed", void 0);

    __decorate([(0, _ej2Base.Event)()], Tab.prototype, "destroyed", void 0);

    Tab = __decorate([_ej2Base.NotifyPropertyChanges], Tab);
    return Tab;
  }(_ej2Base.Component);

  _exports.Tab = Tab;
});;
define('@syncfusion/ej2-navigations/src/toolbar/index',["exports", "./toolbar"], function (_exports, _toolbar) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_toolbar).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _toolbar[key];
  });
});;
define('@syncfusion/ej2-navigations/src/toolbar/toolbar',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-popups", "@syncfusion/ej2-buttons", "../common/h-scroll", "../common/v-scroll"], function (_exports, _ej2Base, _ej2Popups, _ej2Buttons, _hScroll, _vScroll) {
  "use strict";

  _exports.__esModule = true;
  _exports.Toolbar = _exports.Item = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var CLS_VERTICAL = 'e-vertical';
  var CLS_ITEMS = 'e-toolbar-items';
  var BZ_ITEMS = 'e-blazor-toolbar-items';
  var CLS_ITEM = 'e-toolbar-item';
  var CLS_RTL = 'e-rtl';
  var CLS_SEPARATOR = 'e-separator';
  var CLS_POPUPICON = 'e-popup-up-icon';
  var CLS_POPUPDOWN = 'e-popup-down-icon';
  var CLS_POPUPOPEN = 'e-popup-open';
  var CLS_TEMPLATE = 'e-template';
  var CLS_DISABLE = 'e-overlay';
  var CLS_POPUPTEXT = 'e-toolbar-text';
  var CLS_TBARTEXT = 'e-popup-text';
  var CLS_TBAROVERFLOW = 'e-overflow-show';
  var CLS_POPOVERFLOW = 'e-overflow-hide';
  var CLS_TBARBTN = 'e-tbar-btn';
  var CLS_TBARNAV = 'e-hor-nav';
  var CLS_TBARSCRLNAV = 'e-scroll-nav';
  var CLS_TBARRIGHT = 'e-toolbar-right';
  var CLS_TBARLEFT = 'e-toolbar-left';
  var CLS_TBARCENTER = 'e-toolbar-center';
  var CLS_TBARPOS = 'e-tbar-pos';
  var CLS_HSCROLLCNT = 'e-hscroll-content';
  var CLS_VSCROLLCNT = 'e-vscroll-content';
  var CLS_POPUPNAV = 'e-hor-nav';
  var CLS_POPUPCLASS = 'e-toolbar-pop';
  var CLS_POPUP = 'e-toolbar-popup';
  var CLS_TBARBTNTEXT = 'e-tbar-btn-text';
  var CLS_TBARNAVACT = 'e-nav-active';
  var CLS_TBARIGNORE = 'e-ignore';
  var CLS_POPPRI = 'e-popup-alone';
  var CLS_HIDDEN = 'e-hidden';
  var CLS_MULTIROW = 'e-toolbar-multirow';
  var CLS_MULTIROWPOS = 'e-multirow-pos';
  var CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';
  var CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';
  var CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';
  var CLS_EXTENDABLECLASS = 'e-toolbar-extended';
  var CLS_EXTENDPOPUP = 'e-expended-nav';
  var CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';
  /**
   * An item object that is used to configure Toolbar commands.
   */

  var Item =
  /** @class */
  function (_super) {
    __extends(Item, _super);

    function Item() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "id", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Item.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Item.prototype, "showAlwaysInPopup", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Item.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "prefixIcon", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "suffixIcon", void 0);

    __decorate([(0, _ej2Base.Property)('None')], Item.prototype, "overflow", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)('Button')], Item.prototype, "type", void 0);

    __decorate([(0, _ej2Base.Property)('Both')], Item.prototype, "showTextOn", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Item.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "tooltipText", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], Item.prototype, "align", void 0);

    __decorate([(0, _ej2Base.Event)()], Item.prototype, "click", void 0);

    return Item;
  }(_ej2Base.ChildProperty);

  _exports.Item = Item;

  /**
   * The Toolbar control contains a group of commands that are aligned horizontally.
   * ```html
   * <div id="toolbar"/>
   * <script>
   *   var toolbarObj = new Toolbar();
   *   toolbarObj.appendTo("#toolbar");
   * </script>
   * ```
   */
  var Toolbar =
  /** @class */
  function (_super) {
    __extends(Toolbar, _super);
    /**
     * Initializes a new instance of the Toolbar class.
     * @param options  - Specifies Toolbar model properties as options.
     * @param element  - Specifies the element that is rendered as a Toolbar.
     */


    function Toolbar(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.resizeContext = _this.resize.bind(_this);
      /**
       * Contains the keyboard configuration of the Toolbar.
       */

      _this.keyConfigs = {
        moveLeft: 'leftarrow',
        moveRight: 'rightarrow',
        moveUp: 'uparrow',
        moveDown: 'downarrow',
        popupOpen: 'enter',
        popupClose: 'escape',
        tab: 'tab',
        home: 'home',
        end: 'end'
      };
      return _this;
    }
    /**
     * Removes the control from the DOM and also removes all its related events.
     * @returns void.
     */


    Toolbar.prototype.destroy = function () {
      var _this = this;

      _super.prototype.destroy.call(this);

      this.unwireEvents();
      this.tempId.forEach(function (ele) {
        if (!(0, _ej2Base.isNullOrUndefined)(_this.element.querySelector(ele))) {
          document.body.appendChild(_this.element.querySelector(ele)).style.display = 'none';
        }
      });

      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        this.resetServerItems();
      } else {
        var subControls = this.element.querySelectorAll('.e-control');
        [].slice.call(subControls).forEach(function (node) {
          var instances = node.ej2_instances;

          if (instances) {
            var instance = instances[0];

            if (instance) {
              instance.destroy();
            }
          }
        });
      }

      while (this.element.lastElementChild && !this.element.lastElementChild.classList.contains(BZ_ITEMS)) {
        this.element.removeChild(this.element.lastElementChild);
      }

      if (this.trgtEle) {
        this.element.appendChild(this.ctrlTem);
      }

      this.clearProperty();
      this.popObj = null;
      this.tbarAlign = null;
      this.remove(this.element, 'e-toolpop');

      if (this.cssClass) {
        (0, _ej2Base.removeClass)([this.element], this.cssClass.split(' '));
      }

      this.element.removeAttribute('style');
      ['aria-disabled', 'aria-orientation', 'aria-haspopup', 'role'].forEach(function (attrb) {
        return _this.element.removeAttribute(attrb);
      });
    };
    /**
     * Initialize the event handler
     * @private
     */


    Toolbar.prototype.preRender = function () {
      var eventArgs = {
        enableCollision: this.enableCollision,
        scrollStep: this.scrollStep
      };
      this.trigger('beforeCreate', eventArgs);
      this.enableCollision = eventArgs.enableCollision;
      this.scrollStep = eventArgs.scrollStep;
      this.scrollModule = null;
      this.popObj = null;
      this.tempId = [];
      this.tbarItemsCol = this.items;
      this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
      this.isExtendedOpen = false;
      this.popupPriCount = 0;

      if (this.enableRtl) {
        this.add(this.element, CLS_RTL);
      }
    };

    Toolbar.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

      window.addEventListener('resize', this.resizeContext);
      this.keyModule = new _ej2Base.KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs
      });

      _ej2Base.EventHandler.add(this.element, 'keydown', this.docKeyDown, this);

      this.element.setAttribute('tabIndex', '0');
    };

    Toolbar.prototype.docKeyDown = function (e) {
      if (e.target.tagName === 'INPUT') {
        return;
      }

      var popCheck = !(0, _ej2Base.isNullOrUndefined)(this.popObj) && (0, _ej2Base.isVisible)(this.popObj.element) && this.overflowMode !== 'Extended';

      if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {
        this.popObj.hide({
          name: 'FadeOut',
          duration: 100
        });
      }

      var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;

      if (keyCheck) {
        e.preventDefault();
      }
    };

    Toolbar.prototype.unwireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

      this.destroyScroll();
      this.keyModule.destroy();
      window.removeEventListener('resize', this.resizeContext);

      _ej2Base.EventHandler.remove(document, 'scroll', this.docEvent);

      _ej2Base.EventHandler.remove(this.element, 'keydown', this.docKeyDown);

      _ej2Base.EventHandler.remove(document, 'click', this.docEvent);
    };

    Toolbar.prototype.clearProperty = function () {
      this.tbarEle = [];
      this.tbarAlgEle = {
        lefts: [],
        centers: [],
        rights: []
      };
    };

    Toolbar.prototype.docEvent = function (e) {
      var popEle = (0, _ej2Base.closest)(e.target, '.e-popup');

      if (this.popObj && (0, _ej2Base.isVisible)(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {
        this.popObj.hide({
          name: 'FadeOut',
          duration: 100
        });
      }
    };

    Toolbar.prototype.destroyScroll = function () {
      if (this.scrollModule) {
        if (this.tbarAlign) {
          this.add(this.scrollModule.element, CLS_TBARPOS);
        }

        this.scrollModule.destroy();
        this.scrollModule = null;
      }
    };

    Toolbar.prototype.destroyItems = function () {
      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {
        (0, _ej2Base.detach)(el);
      });
      var tbarItems = this.element.querySelector('.' + CLS_ITEMS);

      if (this.tbarAlign) {
        [].slice.call(tbarItems.children).forEach(function (el) {
          (0, _ej2Base.detach)(el);
        });
        this.tbarAlign = false;
        this.remove(tbarItems, CLS_TBARPOS);
      }

      this.clearProperty();
    };

    Toolbar.prototype.destroyMode = function () {
      if (this.scrollModule) {
        this.remove(this.scrollModule.element, CLS_RTL);
        this.destroyScroll();
      }

      this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
      var tempEle = this.element.querySelector('.e-toolbar-multirow');

      if (tempEle) {
        this.remove(tempEle, CLS_MULTIROW);
      }

      if (this.popObj) {
        this.popupRefresh(this.popObj.element, true);
      }
    };

    Toolbar.prototype.add = function (ele, val) {
      ele.classList.add(val);
    };

    Toolbar.prototype.remove = function (ele, val) {
      ele.classList.remove(val);
    };

    Toolbar.prototype.elementFocus = function (ele) {
      var fChild = ele.firstElementChild;

      if (fChild) {
        fChild.focus();
        this.activeEleSwitch(ele);
      } else {
        ele.focus();
      }
    };

    Toolbar.prototype.clstElement = function (tbrNavChk, trgt) {
      var clst;

      if (tbrNavChk && this.popObj && (0, _ej2Base.isVisible)(this.popObj.element)) {
        clst = this.popObj.element.querySelector('.' + CLS_ITEM);
      } else if (this.element === trgt || tbrNavChk) {
        // tslint:disable-next-line:max-line-length
        clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');
      } else {
        clst = (0, _ej2Base.closest)(trgt, '.' + CLS_ITEM);
      }

      return clst;
    };

    Toolbar.prototype.keyHandling = function (clst, e, trgt, navChk, scrollChk) {
      var popObj = this.popObj;
      var rootEle = this.element;
      var popAnimate = {
        name: 'FadeOut',
        duration: 100
      };

      switch (e.action) {
        case 'moveRight':
          if (this.isVertical) {
            return;
          }

          if (rootEle === trgt) {
            this.elementFocus(clst);
          } else if (!navChk) {
            this.eleFocus(clst, 'next');
          }

          break;

        case 'moveLeft':
          if (this.isVertical) {
            return;
          }

          if (!navChk) {
            this.eleFocus(clst, 'previous');
          }

          break;

        case 'home':
        case 'end':
          var ele = void 0;
          var nodes = void 0;

          if (clst) {
            var popupCheck = (0, _ej2Base.closest)(clst, '.e-popup');

            if (popupCheck) {
              if ((0, _ej2Base.isVisible)(this.popObj.element)) {
                nodes = [].slice.call(popupCheck.children);

                if (e.action === 'home') {
                  ele = nodes[0];
                } else {
                  ele = nodes[nodes.length - 1];
                }
              }
            } else {
              nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM);

              if (e.action === 'home') {
                ele = nodes[0];
              } else {
                ele = nodes[nodes.length - 1];
              }
            }

            if (ele) {
              this.elementFocus(ele);
            }
          }

          break;

        case 'moveUp':
        case 'moveDown':
          var value = e.action === 'moveUp' ? 'previous' : 'next';

          if (!this.isVertical) {
            if (popObj && (0, _ej2Base.closest)(trgt, '.e-popup')) {
              var popEle = popObj.element;
              var popFrstEle = popEle.firstElementChild;

              if (value === 'previous' && popFrstEle === clst || value === 'next' && popEle.lastElementChild === clst) {
                return;
              } else {
                this.eleFocus(clst, value);
              }
            } else if (e.action === 'moveDown' && popObj && (0, _ej2Base.isVisible)(popObj.element)) {
              this.elementFocus(clst);
            }
          } else {
            if (e.action === 'moveUp') {
              this.eleFocus(clst, 'previous');
            } else {
              this.eleFocus(clst, 'next');
            }
          }

          break;

        case 'tab':
          if (!scrollChk && !navChk) {
            var ele_1 = clst.firstElementChild;

            if (rootEle === trgt) {
              if (this.activeEle) {
                this.activeEle.focus();
              } else {
                this.activeEleRemove(ele_1);
                ele_1.focus();
              }

              this.element.removeAttribute('tabindex');
            }
          }

          break;

        case 'popupClose':
          if (popObj && this.overflowMode !== 'Extended') {
            popObj.hide(popAnimate);
          }

          break;

        case 'popupOpen':
          if (!navChk) {
            return;
          }

          if (popObj && !(0, _ej2Base.isVisible)(popObj.element)) {
            popObj.element.style.top = rootEle.offsetHeight + 'px';
            popObj.show({
              name: 'FadeIn',
              duration: 100
            });
          } else {
            popObj.hide(popAnimate);
          }

          break;
      }
    };

    Toolbar.prototype.keyActionHandler = function (e) {
      var trgt = e.target;

      if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE)) {
        return;
      }

      e.preventDefault();
      var clst;
      var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
      var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
      clst = this.clstElement(tbrNavChk, trgt);

      if (clst || tbarScrollChk) {
        this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
      }
    };
    /**
     * Specifies the value to disable/enable the Toolbar component.
     * When set to `true`, the component will be disabled.
     * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).
     * @returns void.
     */


    Toolbar.prototype.disable = function (value) {
      var rootEle = this.element;
      value ? rootEle.classList.add(CLS_DISABLE) : rootEle.classList.remove(CLS_DISABLE);
      rootEle.setAttribute('tabindex', !value ? '0' : '-1');

      if (this.activeEle) {
        this.activeEle.setAttribute('tabindex', !value ? '0' : '-1');
      }

      if (this.scrollModule) {
        this.scrollModule.disable(value);
      }

      if (this.popObj) {
        if ((0, _ej2Base.isVisible)(this.popObj.element) && this.overflowMode !== 'Extended') {
          this.popObj.hide();
        }

        rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');
      }
    };

    Toolbar.prototype.eleContains = function (el) {
      // tslint:disable-next-line:max-line-length
      return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !(0, _ej2Base.isVisible)(el); // tslint:enable-next-line:max-line-length
    };

    Toolbar.prototype.eleFocus = function (closest, pos) {
      var sib = Object(closest)[pos + 'ElementSibling'];

      if (sib) {
        var skipEle = this.eleContains(sib);

        if (skipEle) {
          this.eleFocus(sib, pos);
          return;
        }

        this.elementFocus(sib);
      } else if (this.tbarAlign) {
        var elem = Object(closest.parentElement)[pos + 'ElementSibling'];

        if (!(0, _ej2Base.isNullOrUndefined)(elem) && elem.children.length === 0) {
          elem = Object(elem)[pos + 'ElementSibling'];
        }

        if (!(0, _ej2Base.isNullOrUndefined)(elem) && elem.children.length > 0) {
          if (pos === 'next') {
            var el = elem.querySelector('.' + CLS_ITEM);

            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              el.firstElementChild.focus();
              this.activeEleSwitch(el);
            }
          } else {
            var el = elem.lastElementChild;

            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              this.elementFocus(el);
            }
          }
        }
      }
    };

    Toolbar.prototype.clickHandler = function (e) {
      var _this = this;

      var trgt = e.target;
      var clsList = trgt.classList;
      var ele = this.element;
      var isPopupElement = !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.closest)(trgt, '.' + CLS_POPUPCLASS));
      var popupNav = (0, _ej2Base.closest)(trgt, '.' + CLS_TBARNAV);

      if (!popupNav) {
        popupNav = trgt;
      }

      if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {
        clsList = trgt.querySelector('.e-icons').classList;
      }

      if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
        this.popupClickHandler(ele, popupNav, CLS_RTL);
      }

      var itemObj;
      var clst = (0, _ej2Base.closest)(e.target, '.' + CLS_ITEM);

      if (((0, _ej2Base.isNullOrUndefined)(clst) || clst.classList.contains(CLS_DISABLE)) && !popupNav.classList.contains(CLS_TBARNAV)) {
        return;
      }

      if (clst) {
        itemObj = this.items[this.tbarEle.indexOf(clst)];
      }

      var eventArgs = {
        originalEvent: e,
        item: itemObj
      };

      if (itemObj && !(0, _ej2Base.isNullOrUndefined)(itemObj.click)) {
        this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);
      }

      if (!eventArgs.cancel) {
        this.trigger('clicked', eventArgs, function (clickedArgs) {
          if (!(0, _ej2Base.isNullOrUndefined)(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {
            _this.popObj.hide({
              name: 'FadeOut',
              duration: 100
            });
          }
        });
      }
    };

    ;

    Toolbar.prototype.popupClickHandler = function (ele, popupNav, CLS_RTL) {
      var popObj = this.popObj;

      if ((0, _ej2Base.isVisible)(popObj.element)) {
        popupNav.classList.remove(CLS_TBARNAVACT);
        popObj.hide({
          name: 'FadeOut',
          duration: 100
        });
      } else {
        if (ele.classList.contains(CLS_RTL)) {
          popObj.enableRtl = true;
          popObj.position = {
            X: 'left',
            Y: 'top'
          };
        }

        if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {
          popObj.enableRtl = false;
          popObj.position = {
            X: 'right',
            Y: 'top'
          };
        }

        popObj.dataBind();
        popObj.refreshPosition();
        popObj.element.style.top = this.getElementOffsetY() + 'px';

        if (this.overflowMode === 'Extended') {
          popObj.element.style.minHeight = '0px';
        }

        popupNav.classList.add(CLS_TBARNAVACT);
        popObj.show({
          name: 'FadeIn',
          duration: 100
        });
      }
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    Toolbar.prototype.render = function () {
      this.initialize();
      this.renderControl();
      this.separator();
      this.wireEvents();
      this.renderComplete();
    };

    Toolbar.prototype.initialize = function () {
      var width = (0, _ej2Base.formatUnit)(this.width);
      var height = (0, _ej2Base.formatUnit)(this.height);

      if (_ej2Base.Browser.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'height': height
        });
      }

      (0, _ej2Base.setStyleAttribute)(this.element, {
        'width': width
      });
      var ariaAttr = {
        'role': 'toolbar',
        'aria-disabled': 'false',
        'aria-haspopup': 'false',
        'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'
      };
      (0, _ej2Base.attributes)(this.element, ariaAttr);

      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.element], this.cssClass.split(' '));
      }
    };

    Toolbar.prototype.renderControl = function () {
      var ele = this.element;
      this.trgtEle = ele.children.length > 0 && !(0, _ej2Base.isBlazor)() && !this.isServerRendered ? ele.querySelector('div') : null;
      this.tbarAlgEle = {
        lefts: [],
        centers: [],
        rights: []
      };
      this.renderItems();
      this.renderOverflowMode();

      if (this.tbarAlign) {
        this.itemPositioning();
      }

      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(ele, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }
    };

    Toolbar.prototype.itemsAlign = function (items, itemEleDom) {
      var innerItem;
      var innerPos;

      if (!this.tbarEle) {
        this.tbarEle = [];
      }

      for (var i = 0; i < items.length; i++) {
        if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
          var itemEleBlaDom = this.element.querySelector('.' + BZ_ITEMS);
          innerItem = itemEleBlaDom.querySelector('.' + CLS_ITEM + '[data-index="' + i + '"]');

          if (items[i].overflow !== 'Show' && items[i].showAlwaysInPopup && !innerItem.classList.contains(CLS_SEPARATOR)) {
            this.popupPriCount++;
          }

          if (items[i].htmlAttributes) {
            this.setAttr(items[i].htmlAttributes, innerItem);
          }

          if (items[i].type === 'Button') {
            _ej2Base.EventHandler.clearEvents(innerItem);

            _ej2Base.EventHandler.add(innerItem, 'click', this.itemClick, this);
          }
        } else {
          innerItem = this.renderSubComponent(items[i], i);
        }

        if (this.tbarEle.indexOf(innerItem) === -1) {
          this.tbarEle.push(innerItem);
        }

        if (!this.tbarAlign) {
          this.tbarItemAlign(items[i], itemEleDom, i);
        }

        innerPos = itemEleDom.querySelector('.e-toolbar-' + items[i].align.toLowerCase());

        if (innerPos) {
          if (!(items[i].showAlwaysInPopup && items[i].overflow !== 'Show')) {
            this.tbarAlgEle[(items[i].align + 's').toLowerCase()].push(innerItem);
          }

          innerPos.appendChild(innerItem);
        } else {
          itemEleDom.appendChild(innerItem);
        }
      }
    };

    Toolbar.prototype.serverItemsRerender = function () {
      this.destroyMode();
      this.resetServerItems();
      this.itemsAlign(this.items, this.element.querySelector('.' + CLS_ITEMS));
      this.renderOverflowMode();

      if (this.tbarAlign) {
        this.itemPositioning();
      }

      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }

      this.separator();
      this.refreshOverflow();
    };

    Toolbar.prototype.resetServerItems = function () {
      var wrapBlaEleDom = this.element.querySelector('.' + BZ_ITEMS);
      var itemEles = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEMS + ' .' + CLS_ITEM, this.element));
      (0, _ej2Base.append)(itemEles, wrapBlaEleDom);
      this.clearProperty();
    };
    /** @hidden */


    Toolbar.prototype.changeOrientation = function () {
      var ele = this.element;

      if (this.isVertical) {
        ele.classList.remove(CLS_VERTICAL);
        this.isVertical = false;

        if (this.height === 'auto' || this.height === '100%') {
          ele.style.height = this.height;
        }

        ele.setAttribute('aria-orientation', 'horizontal');
      } else {
        ele.classList.add(CLS_VERTICAL);
        this.isVertical = true;
        ele.setAttribute('aria-orientation', 'vertical');
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'height': (0, _ej2Base.formatUnit)(this.height),
          'width': (0, _ej2Base.formatUnit)(this.width)
        });
      }

      this.destroyMode();
      this.refreshOverflow();
    };

    Toolbar.prototype.initScroll = function (element, innerItems) {
      if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {
        if (this.tbarAlign) {
          this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');
        }

        if (this.isVertical) {
          this.scrollModule = new _vScroll.VScroll({
            scrollStep: this.scrollStep,
            enableRtl: this.enableRtl
          }, innerItems[0]);
        } else {
          this.scrollModule = new _hScroll.HScroll({
            scrollStep: this.scrollStep,
            enableRtl: this.enableRtl
          }, innerItems[0]);
        }

        this.remove(this.scrollModule.element, CLS_TBARPOS);
        (0, _ej2Base.setStyleAttribute)(this.element, {
          overflow: 'hidden'
        });
      }
    };

    Toolbar.prototype.itemWidthCal = function (items) {
      var _this = this;

      var width = 0;
      var style;
      [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEM, items)).forEach(function (el) {
        if ((0, _ej2Base.isVisible)(el)) {
          style = window.getComputedStyle(el);
          width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
          width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
          width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
        }
      });
      return width;
    };

    Toolbar.prototype.getScrollCntEle = function (innerItem) {
      var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';
      return innerItem.querySelector(trgClass);
    };

    Toolbar.prototype.checkOverflow = function (element, innerItem) {
      if ((0, _ej2Base.isNullOrUndefined)(element) || (0, _ej2Base.isNullOrUndefined)(innerItem) || !(0, _ej2Base.isVisible)(element)) {
        return false;
      }

      var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;
      var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;

      if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
        itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
      }

      var popNav = element.querySelector('.' + CLS_TBARNAV);
      var scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);
      var navEleWidth = 0;

      if (popNav) {
        navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
      } else if (scrollNav) {
        navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
      }

      if (itemWidth > eleWidth - navEleWidth) {
        return true;
      } else {
        return false;
      }
    };
    /**
     * Refresh the whole Toolbar component without re-rendering.
     * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
     * - It will refresh the Toolbar component after loading items dynamically.
     * @returns void.
     */


    Toolbar.prototype.refreshOverflow = function () {
      this.resize();
    };

    Toolbar.prototype.toolbarAlign = function (innerItems) {
      if (this.tbarAlign) {
        this.add(innerItems, CLS_TBARPOS);
        this.itemPositioning();
      }
    };

    Toolbar.prototype.renderOverflowMode = function () {
      var ele = this.element;
      var innerItems = ele.querySelector('.' + CLS_ITEMS);
      var priorityCheck = this.popupPriCount > 0;

      if (ele && ele.children.length > 0) {
        this.offsetWid = ele.offsetWidth;
        this.remove(this.element, 'e-toolpop');

        if (_ej2Base.Browser.info.name === 'msie' && this.height === 'auto') {
          ele.style.height = '';
        }

        switch (this.overflowMode) {
          case 'Scrollable':
            if ((0, _ej2Base.isNullOrUndefined)(this.scrollModule)) {
              this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
            }

            break;

          case 'Popup':
            this.add(this.element, 'e-toolpop');

            if (this.tbarAlign) {
              this.removePositioning();
            }

            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              this.setOverflowAttributes(ele);
            }

            this.toolbarAlign(innerItems);
            break;

          case 'MultiRow':
            this.add(innerItems, CLS_MULTIROW);

            if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
              this.removePositioning();
              this.add(innerItems, CLS_MULTIROWPOS);
            }

            if (ele.style.overflow === 'hidden') {
              ele.style.overflow = '';
            }

            if (_ej2Base.Browser.info.name === 'msie' || ele.style.height !== 'auto') {
              ele.style.height = 'auto';
            }

            break;

          case 'Extended':
            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);

            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              if (this.tbarAlign) {
                this.removePositioning();
              }

              this.setOverflowAttributes(ele);
            }

            this.toolbarAlign(innerItems);
        }
      }
    };

    Toolbar.prototype.setOverflowAttributes = function (ele) {
      this.createPopupEle(ele, [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));
      this.element.querySelector('.' + CLS_TBARNAV).setAttribute('tabIndex', '0');
      this.element.querySelector('.' + CLS_TBARNAV).setAttribute('role', 'list');
    };

    Toolbar.prototype.separator = function () {
      var element = this.element;
      var eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));
      var eleInlineItem;
      var multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);
      var extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);
      eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;

      if (eleInlineItem !== null) {
        if (this.overflowMode === 'MultiRow') {
          eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === 'Extended') {
          eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
        }
      }

      for (var i = 0; i <= eleItem.length - 1; i++) {
        if (eleItem[i].offsetLeft < 30 && eleItem[i].offsetLeft !== 0) {
          if (this.overflowMode === 'MultiRow') {
            eleItem[i].classList.add(CLS_MULTIROW_SEPARATOR);
          } else if (this.overflowMode === 'Extended') {
            eleItem[i].classList.add(CLS_EXTENDABLE_SEPARATOR);
          }
        }
      }
    };

    Toolbar.prototype.createPopupEle = function (ele, innerEle) {
      var innerNav = ele.querySelector('.' + CLS_TBARNAV);
      var vertical = this.isVertical;

      if (!innerNav) {
        this.createPopupIcon(ele);
      }

      innerNav = ele.querySelector('.' + CLS_TBARNAV);
      var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
      var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
      this.element.classList.remove('e-rtl');
      (0, _ej2Base.setStyleAttribute)(this.element, {
        direction: 'initial'
      });
      this.checkPriority(ele, innerEle, eleWidth, true);

      if (this.enableRtl) {
        this.element.classList.add('e-rtl');
      }

      this.element.style.removeProperty('direction');
      this.createPopup();
    };

    Toolbar.prototype.pushingPoppedEle = function (tbarObj, popupPri, ele, eleHeight, sepHeight) {
      var element = tbarObj.element;
      var nodes = (0, _ej2Base.selectAll)('.' + CLS_TBAROVERFLOW, ele);
      var nodeIndex = 0;
      var poppedEle = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));
      var nodePri = 0;
      poppedEle.forEach(function (el, index) {
        nodes = (0, _ej2Base.selectAll)('.' + CLS_TBAROVERFLOW, ele);

        if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
          if (tbarObj.tbResize && nodes.length > index) {
            ele.insertBefore(el, nodes[index]);
            ++nodePri;
          } else {
            ele.insertBefore(el, ele.children[nodes.length]);
            ++nodePri;
          }
        } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (el.classList.contains(CLS_POPOVERFLOW)) {
          popupPri.push(el);
        } else if (tbarObj.tbResize) {
          ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
          ++nodeIndex;
        } else {
          ele.appendChild(el);
        }

        if (el.classList.contains(CLS_SEPARATOR)) {
          (0, _ej2Base.setStyleAttribute)(el, {
            display: '',
            height: sepHeight + 'px'
          });
        } else {
          (0, _ej2Base.setStyleAttribute)(el, {
            display: '',
            height: eleHeight + 'px'
          });
        }
      });
      popupPri.forEach(function (el) {
        ele.appendChild(el);
      });
      var tbarEle = (0, _ej2Base.selectAll)('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));

      for (var i = tbarEle.length - 1; i >= 0; i--) {
        var tbarElement = tbarEle[i];

        if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {
          (0, _ej2Base.setStyleAttribute)(tbarElement, {
            display: 'none'
          });
        } else {
          break;
        }
      }
    };

    Toolbar.prototype.createPopup = function () {
      var element = this.element;
      var eleHeight;
      var eleItem;
      var sepHeight;
      var sepItem;

      if (this.overflowMode === 'Extended') {
        sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')');
        sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem.offsetHeight;
      }

      eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');
      eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;
      var ele;
      var popupPri = [];

      if (element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS)) {
        ele = element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS);
      } else {
        var extendEle = this.createElement('div', {
          id: element.id + '_popup',
          className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS
        });
        var popupEle = this.createElement('div', {
          id: element.id + '_popup',
          className: CLS_POPUPCLASS
        });
        ele = this.overflowMode === 'Extended' ? extendEle : popupEle;
      }

      this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
      this.popupInit(element, ele);
    };

    Toolbar.prototype.getElementOffsetY = function () {
      return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;
    };

    Toolbar.prototype.popupInit = function (element, ele) {
      if (!this.popObj) {
        element.appendChild(ele);
        (0, _ej2Base.setStyleAttribute)(this.element, {
          overflow: ''
        });
        var eleStyles = window.getComputedStyle(this.element);
        var popup = new _ej2Popups.Popup(null, {
          relateTo: this.element,
          offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
          enableRtl: this.enableRtl,
          open: this.popupOpen.bind(this),
          close: this.popupClose.bind(this),
          collision: {
            Y: this.enableCollision ? 'flip' : 'none'
          },
          position: this.enableRtl ? {
            X: 'left',
            Y: 'top'
          } : {
            X: 'right',
            Y: 'top'
          }
        });
        popup.appendTo(ele);

        if (this.overflowMode === 'Extended') {
          popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
          popup.offsetX = 0;
        }

        _ej2Base.EventHandler.add(document, 'scroll', this.docEvent.bind(this));

        _ej2Base.EventHandler.add(document, 'click ', this.docEvent.bind(this));

        popup.element.style.maxHeight = popup.element.offsetHeight + 'px';

        if (this.isVertical) {
          popup.element.style.visibility = 'hidden';
        }

        if (this.isExtendedOpen) {
          var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
          popupNav.classList.add(CLS_TBARNAVACT);
          (0, _ej2Base.classList)(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
          this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
        } else {
          popup.hide();
        }

        this.popObj = popup;
        this.element.setAttribute('aria-haspopup', 'true');
      } else {
        var popupEle = this.popObj.element;
        (0, _ej2Base.setStyleAttribute)(popupEle, {
          maxHeight: '',
          display: 'block'
        });
        (0, _ej2Base.setStyleAttribute)(popupEle, {
          maxHeight: popupEle.offsetHeight + 'px',
          display: ''
        });
      }
    };

    Toolbar.prototype.tbarPopupHandler = function (isOpen) {
      if (this.overflowMode === 'Extended') {
        isOpen ? this.add(this.element, CLS_EXTENDEDPOPOPEN) : this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      }
    };

    Toolbar.prototype.popupOpen = function (e) {
      var popObj = this.popObj;

      if (!this.isVertical) {
        popObj.offsetY = this.getElementOffsetY();
        popObj.dataBind();
      }

      var popupEle = this.popObj.element;
      var toolEle = this.popObj.element.parentElement;
      var popupNav = toolEle.querySelector('.' + CLS_TBARNAV);
      (0, _ej2Base.setStyleAttribute)(popObj.element, {
        height: 'auto',
        maxHeight: ''
      });
      popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';

      if (this.overflowMode === 'Extended') {
        popObj.element.style.minHeight = '';
      }

      var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + (0, _ej2Popups.calculatePosition)(toolEle).top;
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.add(CLS_TBARNAVACT);
      (0, _ej2Base.classList)(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
      this.tbarPopupHandler(true);
      var scrollVal = (0, _ej2Base.isNullOrUndefined)(window.scrollY) ? 0 : window.scrollY;

      if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
        popObj.height = overflowHeight + 'px';

        for (var i = 0; i <= popupEle.childElementCount; i++) {
          var ele = popupEle.children[i];

          if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
            overflowHeight = ele.offsetTop;
            break;
          }
        }

        (0, _ej2Base.setStyleAttribute)(popObj.element, {
          maxHeight: overflowHeight + 'px'
        });
      } else if (this.isVertical) {
        var tbEleData = this.element.getBoundingClientRect();
        (0, _ej2Base.setStyleAttribute)(popObj.element, {
          maxHeight: tbEleData.top + this.element.offsetHeight + 'px',
          bottom: 0,
          visibility: ''
        });
      }
    };

    Toolbar.prototype.popupClose = function (e) {
      var element = this.element;
      var popupNav = element.querySelector('.' + CLS_TBARNAV);
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.remove(CLS_TBARNAVACT);
      (0, _ej2Base.classList)(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
      this.tbarPopupHandler(false);
    };

    Toolbar.prototype.checkPriority = function (ele, inEle, eleWidth, pre) {
      var popPriority = this.popupPriCount > 0;
      var len = inEle.length;
      var eleWid = eleWidth;
      var eleOffset;
      var checkoffset;
      var sepCheck = 0;
      var itemCount = 0;
      var itemPopCount = 0;

      var checkClass = function (ele, val) {
        var rVal = false;
        val.forEach(function (cls) {
          if (ele.classList.contains(cls)) {
            rVal = true;
          }
        });
        return rVal;
      };

      for (var i = len - 1; i >= 0; i--) {
        var mrgn = void 0;
        var compuStyle = window.getComputedStyle(inEle[i]);

        if (this.isVertical) {
          mrgn = parseFloat(compuStyle.marginTop);
          mrgn += parseFloat(compuStyle.marginBottom);
        } else {
          mrgn = parseFloat(compuStyle.marginRight);
          mrgn += parseFloat(compuStyle.marginLeft);
        }

        var fstEleCheck = inEle[i] === this.tbarEle[0];

        if (fstEleCheck) {
          this.tbarEleMrgn = mrgn;
        }

        eleOffset = this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth;
        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;

        if (checkClass(inEle[i], [CLS_POPPRI]) && popPriority) {
          inEle[i].classList.add(CLS_POPUP);

          if (this.isVertical) {
            (0, _ej2Base.setStyleAttribute)(inEle[i], {
              display: 'none',
              minHeight: eleWid_1 + 'px'
            });
          } else {
            (0, _ej2Base.setStyleAttribute)(inEle[i], {
              display: 'none',
              minWidth: eleWid_1 + 'px'
            });
          }

          itemPopCount++;
        }

        if (this.isVertical) {
          checkoffset = inEle[i].offsetTop + inEle[i].offsetHeight + mrgn > eleWidth;
        } else {
          checkoffset = inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth;
        }

        if (checkoffset) {
          if (inEle[i].classList.contains(CLS_SEPARATOR)) {
            if (this.overflowMode === 'Extended') {
              if (itemCount === itemPopCount) {
                var sepEle = inEle[i];

                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  inEle[i].classList.add(CLS_POPUP);
                  itemPopCount++;
                }
              }

              itemCount++;
            } else if (this.overflowMode === 'Popup') {
              if (sepCheck > 0 && itemCount === itemPopCount) {
                var sepEle = inEle[i + itemCount + (sepCheck - 1)];

                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  (0, _ej2Base.setStyleAttribute)(sepEle, {
                    display: 'none'
                  });
                }
              }

              sepCheck++;
              itemCount = 0;
              itemPopCount = 0;
            }
          } else {
            itemCount++;
          }

          if (inEle[i].classList.contains(CLS_TBAROVERFLOW) && pre) {
            eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;
          } else if (!checkClass(inEle[i], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
            inEle[i].classList.add(CLS_POPUP);

            if (this.isVertical) {
              (0, _ej2Base.setStyleAttribute)(inEle[i], {
                display: 'none',
                minHeight: eleWid_1 + 'px'
              });
            } else {
              (0, _ej2Base.setStyleAttribute)(inEle[i], {
                display: 'none',
                minWidth: eleWid_1 + 'px'
              });
            }

            itemPopCount++;
          } else {
            eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;
          }
        }
      }

      if (pre) {
        var popedEle = (0, _ej2Base.selectAll)('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);
        this.checkPriority(ele, popedEle, eleWid, false);
      }
    };

    Toolbar.prototype.createPopupIcon = function (element) {
      var id = element.id.concat('_nav');
      var className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);
      className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;
      var nav = this.createElement('div', {
        id: id,
        className: className
      });

      if (_ej2Base.Browser.info.name === 'msie' || _ej2Base.Browser.info.name === 'edge') {
        nav.classList.add('e-ie-align');
      }

      var navItem = this.createElement('div', {
        className: CLS_POPUPDOWN + ' e-icons'
      });
      nav.appendChild(navItem);
      nav.setAttribute('tabindex', '0');
      nav.setAttribute('role', 'list');
      element.appendChild(nav);
    };

    Toolbar.prototype.tbarPriRef = function (inEle, indx, sepPri, el, des, elWid, wid, ig) {
      var ignoreCount = ig;
      var popEle = this.popObj.element;
      var query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';
      var priEleCnt = (0, _ej2Base.selectAll)('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;

      var checkClass = function (ele, val) {
        return ele.classList.contains(val);
      };

      if ((0, _ej2Base.selectAll)(query, inEle).length === 0) {
        var eleSep = inEle.children[indx - (indx - sepPri) - 1];
        var ignoreCheck = !(0, _ej2Base.isNullOrUndefined)(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);

        if (!(0, _ej2Base.isNullOrUndefined)(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !(0, _ej2Base.isVisible)(eleSep) || ignoreCheck) {
          var sepDisplay = 'none';
          eleSep.style.display = 'inherit';
          var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
          var prevSep = eleSep.previousElementSibling;

          if (elWid + eleSepWidth < wid || des) {
            inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);

            if (!(0, _ej2Base.isNullOrUndefined)(prevSep)) {
              prevSep.style.display = '';
            }
          } else {
            if (prevSep.classList.contains(CLS_SEPARATOR)) {
              prevSep.style.display = sepDisplay;
            }
          }

          eleSep.style.display = '';
        } else {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
        }
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
      }
    };

    Toolbar.prototype.popupRefresh = function (popupEle, destroy) {
      var _this = this;

      var ele = this.element;
      var isVer = this.isVertical;
      var popNav = ele.querySelector('.' + CLS_TBARNAV);
      var innerEle = ele.querySelector('.' + CLS_ITEMS);

      if ((0, _ej2Base.isNullOrUndefined)(popNav)) {
        return;
      }

      innerEle.removeAttribute('style');
      popupEle.style.display = 'block';
      var dimension;

      if (isVer) {
        dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
      } else {
        dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
      }

      var popupEleWidth = 0;
      [].slice.call(popupEle.children).forEach(function (el) {
        popupEleWidth += _this.popupEleWidth(el);
        (0, _ej2Base.setStyleAttribute)(el, {
          'position': ''
        });
      });

      if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
        destroy = true;
      }

      this.popupEleRefresh(dimension, popupEle, destroy);
      popupEle.style.display = '';

      if (popupEle.children.length === 0 && popNav && this.popObj) {
        (0, _ej2Base.detach)(popNav);
        popNav = null;
        this.popObj.destroy();
        (0, _ej2Base.detach)(this.popObj.element);
        this.popObj = null;
        ele.setAttribute('aria-haspopup', 'false');
      }
    };

    Toolbar.prototype.ignoreEleFetch = function (index, innerEle) {
      var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));
      var ignoreInx = [];
      var count = 0;

      if (ignoreEle.length > 0) {
        ignoreEle.forEach(function (ele) {
          ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
        });
      } else {
        return 0;
      }

      ignoreInx.forEach(function (val) {
        if (val <= index) {
          count++;
        }
      });
      return count;
    };

    Toolbar.prototype.checkPopupRefresh = function (root, popEle) {
      popEle.style.display = 'block';
      var elWid = this.popupEleWidth(popEle.firstElementChild);
      popEle.firstElementChild.style.removeProperty('Position');
      var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;
      var tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;
      popEle.style.removeProperty('display');

      if (tbarWidth > elWid + tbarItemsWid) {
        return true;
      }

      return false;
    };

    Toolbar.prototype.popupEleWidth = function (el) {
      el.style.position = 'absolute';
      var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
      var btnText = el.querySelector('.' + CLS_TBARBTNTEXT);

      if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {
        var btn = el.children[0];

        if (!(0, _ej2Base.isNullOrUndefined)(btnText) && el.classList.contains(CLS_TBARTEXT)) {
          btnText.style.display = 'none';
        } else if (!(0, _ej2Base.isNullOrUndefined)(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
          btnText.style.display = 'block';
        }

        btn.style.minWidth = '0%';
        elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
        btn.style.minWidth = '';
        btn.style.minHeight = '';

        if (!(0, _ej2Base.isNullOrUndefined)(btnText)) {
          btnText.style.display = '';
        }
      }

      return elWidth;
    };

    Toolbar.prototype.popupEleRefresh = function (width, popupEle, destroy) {
      var popPriority = this.popupPriCount > 0;
      var eleSplice = this.tbarEle;
      var priEleCnt;
      var index;
      var checkOverflow;
      var innerEle = this.element.querySelector('.' + CLS_ITEMS);
      var ignoreCount = 0;

      var _loop_1 = function (el) {
        if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {
          return "continue";
        }

        var elWidth = this_1.popupEleWidth(el);

        if (el === this_1.tbarEle[0]) {
          elWidth += this_1.tbarEleMrgn;
        }

        el.style.position = '';

        if (elWidth < width || destroy) {
          (0, _ej2Base.setStyleAttribute)(el, {
            minWidth: '',
            height: '',
            minHeight: ''
          });

          if (!el.classList.contains(CLS_POPOVERFLOW)) {
            el.classList.remove(CLS_POPUP);
          }

          index = this_1.tbarEle.indexOf(el);

          if (this_1.tbarAlign) {
            var pos = this_1.items[index].align;
            index = this_1.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);
            eleSplice = this_1.tbarAlgEle[(pos + 's').toLowerCase()];
            innerEle = this_1.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());
          }

          var sepBeforePri_1 = 0;

          if (this_1.overflowMode !== 'Extended') {
            eleSplice.slice(0, index).forEach(function (el) {
              if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {
                if (el.classList.contains(CLS_SEPARATOR)) {
                  el.style.display = '';
                  width -= el.offsetWidth;
                }

                sepBeforePri_1++;
              }
            });
          }

          ignoreCount = this_1.ignoreEleFetch(index, innerEle);

          if (el.classList.contains(CLS_TBAROVERFLOW)) {
            this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount);
            width -= el.offsetWidth;
          } else if (index === 0) {
            innerEle.insertBefore(el, innerEle.firstChild);
            width -= el.offsetWidth;
          } else {
            priEleCnt = (0, _ej2Base.selectAll)('.' + CLS_TBAROVERFLOW, this_1.popObj.element).length;
            innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);
            width -= el.offsetWidth;
          }

          el.style.height = '';
        } else {
          return "break";
        }
      };

      var this_1 = this;

      for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
        var el = _a[_i];

        var state_1 = _loop_1(el);

        if (state_1 === "break") break;
      }

      checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);

      if (checkOverflow && !destroy) {
        this.renderOverflowMode();
      }
    };

    Toolbar.prototype.removePositioning = function () {
      var item = this.element.querySelector('.' + CLS_ITEMS);

      if ((0, _ej2Base.isNullOrUndefined)(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }

      this.remove(item, CLS_TBARPOS);
      var innerItem = [].slice.call(item.childNodes);
      innerItem[1].removeAttribute('style');
      innerItem[2].removeAttribute('style');
    };

    Toolbar.prototype.refreshPositioning = function () {
      var item = this.element.querySelector('.' + CLS_ITEMS);
      this.add(item, CLS_TBARPOS);
      this.itemPositioning();
    };

    Toolbar.prototype.itemPositioning = function () {
      var item = this.element.querySelector('.' + CLS_ITEMS);
      var margin;

      if ((0, _ej2Base.isNullOrUndefined)(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }

      var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
      var innerItem;

      if (this.scrollModule) {
        var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
        innerItem = [].slice.call(item.querySelector('.' + trgClass).children);
      } else {
        innerItem = [].slice.call(item.childNodes);
      }

      if (this.isVertical) {
        margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
      } else {
        margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
      }

      var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;

      if (popupNav) {
        tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
        var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';
        innerItem[2].removeAttribute('style');

        if (this.isVertical) {
          this.enableRtl ? innerItem[2].style.top = popWid : innerItem[2].style.bottom = popWid;
        } else {
          this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;
        }
      }

      if (tbarWid <= margin) {
        return;
      }

      var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
      innerItem[1].removeAttribute('style');
      var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';

      if (this.isVertical) {
        this.enableRtl ? innerItem[1].style.marginBottom = mrgn : innerItem[1].style.marginTop = mrgn;
      } else {
        this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;
      }
    };

    Toolbar.prototype.tbarItemAlign = function (item, itemEle, pos) {
      var _this = this;

      if (item.showAlwaysInPopup && item.overflow !== 'Show') {
        return;
      }

      var alignDiv = [];
      alignDiv.push(this.createElement('div', {
        className: CLS_TBARLEFT
      }));
      alignDiv.push(this.createElement('div', {
        className: CLS_TBARCENTER
      }));
      alignDiv.push(this.createElement('div', {
        className: CLS_TBARRIGHT
      }));

      if (pos === 0 && item.align !== 'Left') {
        alignDiv.forEach(function (ele) {
          itemEle.appendChild(ele);
        });
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      } else if (item.align !== 'Left') {
        var alignEle = itemEle.childNodes;
        var leftAlign_1 = alignDiv[0];
        [].slice.call(alignEle).forEach(function (el) {
          _this.tbarAlgEle.lefts.push(el);

          leftAlign_1.appendChild(el);
        });
        itemEle.appendChild(leftAlign_1);
        itemEle.appendChild(alignDiv[1]);
        itemEle.appendChild(alignDiv[2]);
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      }
    };

    Toolbar.prototype.ctrlTemplate = function () {
      var _this = this;

      this.ctrlTem = this.trgtEle.cloneNode(true);
      this.add(this.trgtEle, CLS_ITEMS);
      this.tbarEle = [];
      var innerEle = [].slice.call(this.trgtEle.children);
      innerEle.forEach(function (ele) {
        if (ele.tagName === 'DIV') {
          _this.tbarEle.push(ele);

          ele.setAttribute('aria-disabled', 'false');

          _this.add(ele, CLS_ITEM);
        }
      });
    };

    Toolbar.prototype.renderItems = function () {
      var ele = this.element;
      var itemEleDom;
      var items = this.items;

      if (ele && ele.children.length > 0) {
        itemEleDom = ele.querySelector('.' + CLS_ITEMS);
      }

      if (this.trgtEle != null) {
        this.ctrlTemplate();
      } else if (ele && items.length > 0) {
        if (!itemEleDom) {
          itemEleDom = this.createElement('div', {
            className: CLS_ITEMS
          });
        }

        this.itemsAlign(items, itemEleDom);
        ele.appendChild(itemEleDom);
      }
    };

    Toolbar.prototype.setAttr = function (attr, element) {
      var key = Object.keys(attr);
      var keyVal;

      for (var i = 0; i < key.length; i++) {
        keyVal = key[i];
        keyVal === 'class' ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);
      }
    };
    /**
     * Enables or disables the specified Toolbar item.
     * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.
     * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.
     * By default, `isEnable` is set to true.
     * @returns void.
     */


    Toolbar.prototype.enableItems = function (items, isEnable) {
      var elements = items;
      var len = elements.length;
      var ele;

      if ((0, _ej2Base.isNullOrUndefined)(isEnable)) {
        isEnable = true;
      }

      var enable = function (isEnable, ele) {
        if (isEnable) {
          ele.classList.remove(CLS_DISABLE);
          ele.setAttribute('aria-disabled', 'false');
        } else {
          ele.classList.add(CLS_DISABLE);
          ele.setAttribute('aria-disabled', 'true');
        }
      };

      if (!(0, _ej2Base.isNullOrUndefined)(len) && len >= 1) {
        for (var a = 0, element = [].slice.call(elements); a < len; a++) {
          var itemElement = element[a];

          if (typeof itemElement === 'number') {
            ele = this.getElementByIndex(itemElement);

            if ((0, _ej2Base.isNullOrUndefined)(ele)) {
              return;
            } else {
              elements[a] = ele;
            }
          } else {
            ele = itemElement;
          }

          enable(isEnable, ele);
        }

        isEnable ? (0, _ej2Base.removeClass)(elements, CLS_DISABLE) : (0, _ej2Base.addClass)(elements, CLS_DISABLE);
      } else {
        if (typeof elements === 'number') {
          ele = this.getElementByIndex(elements);

          if ((0, _ej2Base.isNullOrUndefined)(ele)) {
            return;
          }
        } else {
          ele = items;
        }

        enable(isEnable, ele);
      }
    };

    Toolbar.prototype.getElementByIndex = function (index) {
      if (this.tbarEle[index]) {
        return this.tbarEle[index];
      }

      return null;
    };
    /**
     * Adds new items to the Toolbar that accepts an array as Toolbar items.
     * @param  {ItemsModel[]} items - DOM element or an array of items to be added to the Toolbar.
     * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.
     * @returns void.
     * @deprecated
     */


    Toolbar.prototype.addItems = function (items, index) {
      var innerItems;
      this.extendedOpen();
      var itemsDiv = this.element.querySelector('.' + CLS_ITEMS);

      if ((0, _ej2Base.isNullOrUndefined)(itemsDiv)) {
        this.itemsRerender(items);
        return;
      }

      var innerEle;
      var itemAgn = 'Left';

      if ((0, _ej2Base.isNullOrUndefined)(index)) {
        index = 0;
      }

      items.forEach(function (e) {
        if (!(0, _ej2Base.isNullOrUndefined)(e.align) && e.align !== 'Left' && itemAgn === 'Left') {
          itemAgn = e.align;
        }
      });

      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];

        if ((0, _ej2Base.isNullOrUndefined)(item.type)) {
          item.type = 'Button';
        }

        innerItems = (0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element);
        item.align = itemAgn;
        innerEle = this.renderSubComponent(item, index);

        if (this.tbarEle.length >= index && innerItems.length >= 0) {
          if ((0, _ej2Base.isNullOrUndefined)(this.scrollModule)) {
            this.destroyMode();
          }

          var algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;
          var ele = void 0;

          if (!this.tbarAlign && itemAgn !== 'Left') {
            this.tbarItemAlign(item, itemsDiv, 1);
            this.tbarAlign = true;
            ele = (0, _ej2Base.closest)(innerItems[0], '.' + CLS_ITEMS).children[algIndex];
            ele.appendChild(innerEle);
            this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);
            this.refreshPositioning();
          } else if (this.tbarAlign) {
            ele = (0, _ej2Base.closest)(innerItems[0], '.' + CLS_ITEMS).children[algIndex];
            ele.insertBefore(innerEle, ele.children[index]);
            this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);
            this.refreshPositioning();
          } else if (innerItems.length === 0) {
            innerItems = (0, _ej2Base.selectAll)('.' + CLS_ITEMS, this.element);
            innerItems[0].appendChild(innerEle);
          } else {
            innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]);
          }

          this.items.splice(index, 0, item);
          this.tbarEle.splice(index, 0, innerEle);
          index++;
          this.offsetWid = itemsDiv.offsetWidth;
        }
      }

      itemsDiv.style.width = '';
      this.renderOverflowMode();
    };
    /**
     * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.
     * @param  {number|HTMLElement|NodeList|HTMLElement[]} args
     * Index or DOM element or an Array of item which is to be removed from the Toolbar.
     * @returns void.
     * @deprecated
     */


    Toolbar.prototype.removeItems = function (args) {
      var elements = args;
      var index;
      var innerItems = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element));

      if (typeof elements === 'number') {
        index = parseInt(args.toString(), 10);
        this.removeItemByIndex(index, innerItems);
      } else {
        if (elements && elements.length > 1) {
          for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
            var ele = _a[_i];
            index = this.tbarEle.indexOf(ele);
            this.removeItemByIndex(index, innerItems);
            innerItems = (0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element);
          }
        } else {
          var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
          index = innerItems.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
        }
      }

      this.resize();
    };

    Toolbar.prototype.removeItemByIndex = function (index, innerItems) {
      if (this.tbarEle[index] && innerItems[index]) {
        var eleIdx = this.tbarEle.indexOf(innerItems[index]);

        if (this.tbarAlign) {
          var indexAgn = void 0;
          indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].indexOf(this.tbarEle[eleIdx]);
          this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].splice(indexAgn, 1);
        }

        (0, _ej2Base.detach)(innerItems[index]);
        this.items.splice(eleIdx, 1);
        this.tbarEle.splice(eleIdx, 1);
      }
    };

    Toolbar.prototype.templateRender = function (templateProp, innerEle, item, index) {
      var itemType = item.type;
      var eleObj = templateProp;
      var isComponent;

      if (typeof templateProp === 'object') {
        isComponent = typeof eleObj.appendTo === 'function';
      }

      if (typeof templateProp === 'string' || !isComponent) {
        var templateFn = void 0;
        var val = templateProp;
        val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;
        var e = void 0;

        try {
          if (typeof templateProp === 'object' && !(0, _ej2Base.isNullOrUndefined)(templateProp.tagName)) {
            innerEle.appendChild(templateProp);
          } else if (document.querySelectorAll(val).length) {
            var ele = document.querySelector(val);
            var tempStr = ele.outerHTML.trim();
            innerEle.appendChild(ele);
            ele.style.display = '';

            if (!(0, _ej2Base.isNullOrUndefined)(tempStr)) {
              this.tempId.push(val);
            }
          }
        } catch (e) {
          templateFn = (0, _ej2Base.compile)(val);
        }

        var tempArray = void 0;

        if (!(0, _ej2Base.isNullOrUndefined)(templateFn)) {
          var toolbarTemplateID = this.element.id + index + '_template';
          tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(tempArray) && tempArray.length > 0) {
          [].slice.call(tempArray).forEach(function (ele) {
            if (!(0, _ej2Base.isNullOrUndefined)(ele.tagName)) {
              ele.style.display = '';
            }

            innerEle.appendChild(ele);
          });
        }
      } else if (itemType === 'Input') {
        var ele = this.createElement('input');
        item.id ? ele.id = item.id : ele.id = (0, _ej2Base.getUniqueID)('tbr-ipt');
        innerEle.appendChild(ele);
        eleObj.appendTo(ele);
      }

      this.add(innerEle, CLS_TEMPLATE);
      this.tbarEle.push(innerEle);
    };

    Toolbar.prototype.buttonRendering = function (item, innerEle) {
      var dom = this.createElement('button', {
        className: CLS_TBARBTN
      });
      dom.setAttribute('type', 'button');
      var textStr = item.text;
      var iconCss;
      var iconPos;
      item.id ? dom.id = item.id : dom.id = (0, _ej2Base.getUniqueID)('e-tbr-btn');
      var btnTxt = this.createElement('span', {
        className: 'e-tbar-btn-text'
      });

      if (textStr) {
        btnTxt.innerHTML = _ej2Base.SanitizeHtmlHelper.sanitize(textStr);
        dom.appendChild(btnTxt);
        dom.classList.add('e-tbtn-txt');
      } else {
        this.add(innerEle, 'e-tbtn-align');
      }

      if (item.prefixIcon || item.suffixIcon) {
        if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
          iconCss = item.prefixIcon + ' e-icons';
          iconPos = 'Left';
        } else {
          iconCss = item.suffixIcon + ' e-icons';
          iconPos = 'Right';
        }
      }

      var btnObj = new _ej2Buttons.Button({
        iconCss: iconCss,
        iconPosition: iconPos
      });
      btnObj.createElement = this.createElement;
      btnObj.appendTo(dom);

      if (item.width) {
        (0, _ej2Base.setStyleAttribute)(dom, {
          'width': (0, _ej2Base.formatUnit)(item.width)
        });
      }

      return dom;
    };

    Toolbar.prototype.renderSubComponent = function (item, index) {
      var innerEle;
      var dom;
      innerEle = this.createElement('div', {
        className: CLS_ITEM
      });
      innerEle.setAttribute('aria-disabled', 'false');
      var tempDom = this.createElement('div', {
        innerHTML: _ej2Base.SanitizeHtmlHelper.sanitize(item.tooltipText)
      });

      if (!this.tbarEle) {
        this.tbarEle = [];
      }

      if (item.htmlAttributes) {
        this.setAttr(item.htmlAttributes, innerEle);
      }

      if (item.tooltipText) {
        innerEle.setAttribute('title', tempDom.textContent);
      }

      if (item.cssClass) {
        innerEle.className = innerEle.className + ' ' + item.cssClass;
      }

      if (item.template) {
        this.templateRender(item.template, innerEle, item, index);
      } else {
        switch (item.type) {
          case 'Button':
            dom = this.buttonRendering(item, innerEle);
            dom.setAttribute('tabindex', '-1');
            dom.setAttribute('aria-label', item.text || item.tooltipText);
            innerEle.appendChild(dom);
            innerEle.addEventListener('click', this.itemClick.bind(this));
            break;

          case 'Separator':
            this.add(innerEle, CLS_SEPARATOR);
            break;
        }
      }

      if (item.showTextOn) {
        var sTxt = item.showTextOn;

        if (sTxt === 'Toolbar') {
          this.add(innerEle, CLS_POPUPTEXT);
          this.add(innerEle, 'e-tbtn-align');
        } else if (sTxt === 'Overflow') {
          this.add(innerEle, CLS_TBARTEXT);
        }
      }

      if (item.overflow) {
        var overflow = item.overflow;

        if (overflow === 'Show') {
          this.add(innerEle, CLS_TBAROVERFLOW);
        } else if (overflow === 'Hide') {
          if (!innerEle.classList.contains(CLS_SEPARATOR)) {
            this.add(innerEle, CLS_POPOVERFLOW);
          }
        }
      }

      if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
        this.add(innerEle, CLS_POPPRI);
        this.popupPriCount++;
      }

      if (item.disabled) {
        this.add(innerEle, CLS_DISABLE);
      }

      return innerEle;
    };

    Toolbar.prototype.itemClick = function (e) {
      this.activeEleSwitch(e.currentTarget);
    };

    Toolbar.prototype.activeEleSwitch = function (ele) {
      this.activeEleRemove(ele.firstElementChild);
      this.activeEle.focus();
    };

    Toolbar.prototype.activeEleRemove = function (curEle) {
      if (!(0, _ej2Base.isNullOrUndefined)(this.activeEle)) {
        this.activeEle.setAttribute('tabindex', '-1');
      }

      this.activeEle = curEle;

      if ((0, _ej2Base.isNullOrUndefined)(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
        curEle.removeAttribute('tabindex');
      } else {
        this.activeEle.setAttribute('tabindex', '0');
      }
    };

    Toolbar.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * Returns the current module name.
     * @returns string
     * @private
     */


    Toolbar.prototype.getModuleName = function () {
      return 'toolbar';
    };

    Toolbar.prototype.itemsRerender = function (newProp) {
      this.items = this.tbarItemsCol;
      this.destroyMode();
      this.destroyItems();
      this.items = newProp;
      this.tbarItemsCol = this.items;
      this.renderItems();
      this.renderOverflowMode();
    };

    Toolbar.prototype.resize = function () {
      var ele = this.element;
      this.tbResize = true;

      if (this.tbarAlign) {
        this.itemPositioning();
      }

      if (this.popObj && this.overflowMode === 'Popup') {
        this.popObj.hide();
      }

      var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);

      if (!checkOverflow) {
        this.destroyScroll();
        var multirowele = ele.querySelector('.' + CLS_ITEMS);

        if (!(0, _ej2Base.isNullOrUndefined)(multirowele)) {
          this.remove(multirowele, CLS_MULTIROWPOS);

          if (this.tbarAlign) {
            this.add(multirowele, CLS_TBARPOS);
          }
        }
      }

      if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
        return;
      }

      if (this.offsetWid > ele.offsetWidth || checkOverflow) {
        this.renderOverflowMode();
      }

      if (this.popObj) {
        if (this.overflowMode === 'Extended') {
          var eleStyles = window.getComputedStyle(this.element);
          this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
        }

        if (this.tbarAlign) {
          this.removePositioning();
        }

        this.popupRefresh(this.popObj.element, false);

        if (this.tbarAlign) {
          this.refreshPositioning();
        }
      }

      this.offsetWid = ele.offsetWidth;
      this.tbResize = false;
      this.separator();
    };

    Toolbar.prototype.extendedOpen = function () {
      var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);

      if (this.overflowMode === 'Extended' && sib) {
        this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
      }
    };
    /**
     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
     * @param  {ToolbarModel} newProp
     * @param  {ToolbarModel} oldProp
     * @returns void
     * @private
     */


    Toolbar.prototype.onPropertyChanged = function (newProp, oldProp) {
      var tEle = this.element;
      this.extendedOpen();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'items':
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array) && !this.isServerRendered) {
              var changedProb = Object.keys(newProp.items);

              for (var i = 0; i < changedProb.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[i], 10);
                var property = Object.keys(newProp.items[index])[0];
                var newProperty = Object(newProp.items[index])[property];

                if (this.tbarAlign || property === 'align') {
                  this.refresh();
                  this.trigger('created');
                  break;
                }

                var popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;
                var booleanCheck = property === 'overflow' && this.popupPriCount !== 0;

                if (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) {
                  --this.popupPriCount;
                }

                if ((0, _ej2Base.isNullOrUndefined)(this.scrollModule)) {
                  this.destroyMode();
                }

                var itemCol = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));
                (0, _ej2Base.detach)(itemCol[index]);
                this.tbarEle.splice(index, 1);
                this.addItems([this.items[index]], index);
                this.items.splice(index, 1);

                if (this.items[index].template) {
                  this.tbarEle.splice(this.items.length, 1);
                }
              }
            } else if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
              this.serverItemsRerender();
              this.notify('onItemsChanged', {});
            } else {
              this.itemsRerender(newProp.items);
            }

            break;

          case 'width':
            var wid = tEle.offsetWidth;
            (0, _ej2Base.setStyleAttribute)(tEle, {
              'width': (0, _ej2Base.formatUnit)(newProp.width)
            });
            this.renderOverflowMode();

            if (this.popObj && wid < tEle.offsetWidth) {
              this.popupRefresh(this.popObj.element, false);
            }

            break;

          case 'height':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'height': (0, _ej2Base.formatUnit)(newProp.height)
            });
            break;

          case 'overflowMode':
            this.destroyMode();
            this.renderOverflowMode();

            if (this.enableRtl) {
              this.add(tEle, CLS_RTL);
            }

            this.refreshOverflow();
            break;

          case 'enableRtl':
            newProp.enableRtl ? this.add(tEle, CLS_RTL) : this.remove(tEle, CLS_RTL);

            if (!(0, _ej2Base.isNullOrUndefined)(this.scrollModule)) {
              newProp.enableRtl ? this.add(this.scrollModule.element, CLS_RTL) : this.remove(this.scrollModule.element, CLS_RTL);
            }

            if (!(0, _ej2Base.isNullOrUndefined)(this.popObj)) {
              newProp.enableRtl ? this.add(this.popObj.element, CLS_RTL) : this.remove(this.popObj.element, CLS_RTL);
            }

            if (this.tbarAlign) {
              this.itemPositioning();
            }

            break;

          case 'scrollStep':
            if (this.scrollModule) {
              this.scrollModule.scrollStep = this.scrollStep;
            }

            break;

          case 'enableCollision':
            if (this.popObj) {
              this.popObj.collision = {
                Y: this.enableCollision ? 'flip' : 'none'
              };
            }

            break;

          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([this.element], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([this.element], newProp.cssClass.split(' '));
            }

            break;
        }
      }
    };
    /**
     * Shows or hides the Toolbar item that is in the specified index.
     * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.
     * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.
     * @returns void.
     */


    Toolbar.prototype.hideItem = function (index, value) {
      var isElement = typeof index === 'object' ? true : false;
      var eleIndex = index;
      var initIndex;
      var ele;
      var innerItems = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element));

      if (isElement) {
        ele = index;
      } else if (this.tbarEle[eleIndex]) {
        var innerItems_1 = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element));
        ele = innerItems_1[eleIndex];
      }

      if (ele) {
        value ? ele.classList.add(CLS_HIDDEN) : ele.classList.remove(CLS_HIDDEN);

        if (value && (0, _ej2Base.isNullOrUndefined)(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {
          if ((0, _ej2Base.isNullOrUndefined)(ele.firstElementChild.getAttribute('tabindex'))) {
            ele.firstElementChild.setAttribute('tabindex', '-1');
            var innerItems_2 = [].slice.call((0, _ej2Base.selectAll)('.' + CLS_ITEM, this.element));

            if (isElement) {
              eleIndex = innerItems_2.indexOf(ele);
            }

            var nextEle = innerItems_2[++eleIndex];

            while (nextEle) {
              var skipEle = this.eleContains(nextEle);

              if (!skipEle) {
                nextEle.firstElementChild.removeAttribute('tabindex');
                break;
              }

              nextEle = innerItems_2[++eleIndex];
            }
          }
        } else if ((0, _ej2Base.isNullOrUndefined)(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {
          initIndex = 0;
          var setFlag = false;
          var removeFlag = false;
          var initELe = innerItems[initIndex];

          while (initELe) {
            if (!initELe.classList.contains(CLS_SEPARATOR)) {
              if ((0, _ej2Base.isNullOrUndefined)(initELe.firstElementChild.getAttribute('tabindex'))) {
                initELe.firstElementChild.setAttribute('tabindex', '-1');
                setFlag = true;
              } else {
                if (setFlag && removeFlag) {
                  break;
                }

                var skipEle = this.eleContains(initELe);

                if (!skipEle) {
                  initELe.firstElementChild.removeAttribute('tabindex');
                  removeFlag = true;
                }

                initELe = innerItems[++initIndex];
              }
            } else {
              initELe = innerItems[++initIndex];
            }
          }
        }

        this.refreshOverflow();
      }
    };

    __decorate([(0, _ej2Base.Collection)([], Item)], Toolbar.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Toolbar.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Toolbar.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('')], Toolbar.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('Scrollable')], Toolbar.prototype, "overflowMode", void 0);

    __decorate([(0, _ej2Base.Property)()], Toolbar.prototype, "scrollStep", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Toolbar.prototype, "enableCollision", void 0);

    __decorate([(0, _ej2Base.Event)()], Toolbar.prototype, "clicked", void 0);

    __decorate([(0, _ej2Base.Event)()], Toolbar.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Toolbar.prototype, "destroyed", void 0);

    __decorate([(0, _ej2Base.Event)()], Toolbar.prototype, "beforeCreate", void 0);

    Toolbar = __decorate([_ej2Base.NotifyPropertyChanges], Toolbar);
    return Toolbar;
  }(_ej2Base.Component);

  _exports.Toolbar = Toolbar;
});;
define('@syncfusion/ej2-navigations/src/treeview/index',["exports", "./treeview"], function (_exports, _treeview) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_treeview).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _treeview[key];
  });
});;
define('@syncfusion/ej2-navigations/src/treeview/treeview',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-lists", "@syncfusion/ej2-buttons", "@syncfusion/ej2-inputs", "@syncfusion/ej2-popups"], function (_exports, _ej2Base, _ej2Data, _ej2Lists, _ej2Buttons, _ej2Inputs, _ej2Popups) {
  "use strict";

  _exports.__esModule = true;
  _exports.TreeView = _exports.NodeAnimationSettings = _exports.ActionSettings = _exports.FieldsSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ROOT = 'e-treeview';
  var CONTROL = 'e-control';
  var COLLAPSIBLE = 'e-icon-collapsible';
  var EXPANDABLE = 'e-icon-expandable';
  var LISTITEM = 'e-list-item';
  var LISTTEXT = 'e-list-text';
  var LISTICON = 'e-list-icon';
  var LISTIMG = 'e-list-img';
  var LISTURL = 'e-list-url';
  var PARENTITEM = 'e-list-parent';
  var HOVER = 'e-hover';
  var ACTIVE = 'e-active';
  var LOAD = 'e-icons-spinner';
  var PROCESS = 'e-process';
  var ICON = 'e-icons';
  var TEXTWRAP = 'e-text-content';
  var INPUT = 'e-input';
  var INPUTGROUP = 'e-input-group';
  var TREEINPUT = 'e-tree-input';
  var EDITING = 'e-editing';
  var RTL = 'e-rtl';
  var DRAGITEM = 'e-drag-item';
  var DROPPABLE = 'e-droppable';
  var DRAGGING = 'e-dragging';
  var SIBLING = 'e-sibling';
  var DROPIN = 'e-drop-in';
  var DROPNEXT = 'e-drop-next';
  var DROPOUT = 'e-drop-out';
  var NODROP = 'e-no-drop';
  var FULLROWWRAP = 'e-fullrow-wrap';
  var FULLROW = 'e-fullrow';
  var SELECTED = 'e-selected';
  var EXPANDED = 'e-expanded';
  var NODECOLLAPSED = 'e-node-collapsed';
  var DISABLE = 'e-disable';
  var CONTENT = 'e-content';
  var DOWNTAIL = 'e-downtail';
  var DROPCOUNT = 'e-drop-count';
  var CHECK = 'e-check';
  var INDETERMINATE = 'e-stop';
  var CHECKBOXWRAP = 'e-checkbox-wrapper';
  var CHECKBOXFRAME = 'e-frame';
  var CHECKBOXRIPPLE = 'e-ripple-container';
  var RIPPLE = 'e-ripple';
  var RIPPLEELMENT = 'e-ripple-element';
  var FOCUS = 'e-node-focus';
  var IMAGE = 'e-list-img';
  var BIGGER = 'e-bigger';
  var SMALL = 'e-small';
  var CHILD = 'e-has-child';
  var ITEM_ANIMATION_ACTIVE = 'e-animation-active';
  var treeAriaAttr = {
    treeRole: 'tree',
    itemRole: 'treeitem',
    listRole: 'group',
    itemText: '',
    wrapperRole: ''
  };
  /**
   * Configures the fields to bind to the properties of node in the TreeView component.
   */

  var FieldsSettings =
  /** @class */
  function (_super) {
    __extends(FieldsSettings, _super);

    function FieldsSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('child')], FieldsSettings.prototype, "child", void 0);

    __decorate([(0, _ej2Base.Property)([])], FieldsSettings.prototype, "dataSource", void 0);

    __decorate([(0, _ej2Base.Property)('expanded')], FieldsSettings.prototype, "expanded", void 0);

    __decorate([(0, _ej2Base.Property)('hasChildren')], FieldsSettings.prototype, "hasChildren", void 0);

    __decorate([(0, _ej2Base.Property)('htmlAttributes')], FieldsSettings.prototype, "htmlAttributes", void 0);

    __decorate([(0, _ej2Base.Property)('iconCss')], FieldsSettings.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('id')], FieldsSettings.prototype, "id", void 0);

    __decorate([(0, _ej2Base.Property)('imageUrl')], FieldsSettings.prototype, "imageUrl", void 0);

    __decorate([(0, _ej2Base.Property)('isChecked')], FieldsSettings.prototype, "isChecked", void 0);

    __decorate([(0, _ej2Base.Property)('parentID')], FieldsSettings.prototype, "parentID", void 0);

    __decorate([(0, _ej2Base.Property)(null)], FieldsSettings.prototype, "query", void 0);

    __decorate([(0, _ej2Base.Property)('selected')], FieldsSettings.prototype, "selected", void 0);

    __decorate([(0, _ej2Base.Property)(null)], FieldsSettings.prototype, "tableName", void 0);

    __decorate([(0, _ej2Base.Property)('text')], FieldsSettings.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('tooltip')], FieldsSettings.prototype, "tooltip", void 0);

    __decorate([(0, _ej2Base.Property)('navigateUrl')], FieldsSettings.prototype, "navigateUrl", void 0);

    return FieldsSettings;
  }(_ej2Base.ChildProperty);

  _exports.FieldsSettings = FieldsSettings;

  /**
   * Configures animation settings for the TreeView component.
   */
  var ActionSettings =
  /** @class */
  function (_super) {
    __extends(ActionSettings, _super);

    function ActionSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('SlideDown')], ActionSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)(400)], ActionSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('linear')], ActionSettings.prototype, "easing", void 0);

    return ActionSettings;
  }(_ej2Base.ChildProperty);

  _exports.ActionSettings = ActionSettings;

  /**
   * Configures the animation settings for expanding and collapsing nodes in TreeView.
   */
  var NodeAnimationSettings =
  /** @class */
  function (_super) {
    __extends(NodeAnimationSettings, _super);

    function NodeAnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideUp',
      duration: 400,
      easing: 'linear'
    }, ActionSettings)], NodeAnimationSettings.prototype, "collapse", void 0);

    __decorate([(0, _ej2Base.Complex)({
      effect: 'SlideDown',
      duration: 400,
      easing: 'linear'
    }, ActionSettings)], NodeAnimationSettings.prototype, "expand", void 0);

    return NodeAnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.NodeAnimationSettings = NodeAnimationSettings;

  /**
   * The TreeView component is used to represent hierarchical data in a tree like structure with advanced
   * functions to perform edit, drag and drop, selection with check-box, and more.
   * ```html
   *  <div id="tree"></div>
   * ```
   * ```typescript
   *  let treeObj: TreeView = new TreeView();
   *  treeObj.appendTo('#tree');
   * ```
   */
  var TreeView =
  /** @class */
  function (_super) {
    __extends(TreeView, _super);

    function TreeView(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isRefreshed = false;
      _this.preventExpand = false;
      _this.checkedElement = [];
      _this.disableNode = [];
      _this.parentNodeCheck = [];
      _this.validArr = [];
      _this.expandChildren = [];
      _this.isFieldChange = false;
      _this.mouseDownStatus = false;
      return _this;
    }

    TreeView_1 = TreeView;
    /**
     * Get component name.
     * @returns string
     * @private
     */

    TreeView.prototype.getModuleName = function () {
      return 'treeview';
    };
    /**
     * Initialize the event handler
     */


    TreeView.prototype.preRender = function () {
      var _this = this;

      this.checkActionNodes = [];
      this.dragStartAction = false;
      this.isAnimate = false;
      this.keyConfigs = {
        escape: 'escape',
        end: 'end',
        enter: 'enter',
        f2: 'f2',
        home: 'home',
        moveDown: 'downarrow',
        moveLeft: 'leftarrow',
        moveRight: 'rightarrow',
        moveUp: 'uparrow',
        ctrlDown: 'ctrl+downarrow',
        ctrlUp: 'ctrl+uparrow',
        ctrlEnter: 'ctrl+enter',
        ctrlHome: 'ctrl+home',
        ctrlEnd: 'ctrl+end',
        ctrlA: 'ctrl+A',
        shiftDown: 'shift+downarrow',
        shiftUp: 'shift+uparrow',
        shiftEnter: 'shift+enter',
        shiftHome: 'shift+home',
        shiftEnd: 'shift+end',
        csDown: 'ctrl+shift+downarrow',
        csUp: 'ctrl+shift+uparrow',
        csEnter: 'ctrl+shift+enter',
        csHome: 'ctrl+shift+home',
        csEnd: 'ctrl+shift+end',
        space: 'space'
      };
      this.listBaseOption = {
        expandCollapse: true,
        showIcon: true,
        expandIconClass: EXPANDABLE,
        ariaAttributes: treeAriaAttr,
        expandIconPosition: 'Left',
        itemCreated: function (e) {
          _this.beforeNodeCreate(e);
        },
        enableHtmlSanitizer: this.enableHtmlSanitizer
      };
      this.updateListProp(this.fields);
      this.aniObj = new _ej2Base.Animation({});
      this.treeList = [];
      this.isLoaded = false;
      this.isInitalExpand = false;
      this.expandChildren = [];
      this.index = 0;
      this.setTouchClass();

      if ((0, _ej2Base.isNullOrUndefined)(this.selectedNodes)) {
        this.setProperties({
          selectedNodes: []
        }, true);
      }

      if ((0, _ej2Base.isNullOrUndefined)(this.checkedNodes)) {
        this.setProperties({
          checkedNodes: []
        }, true);
      }

      if ((0, _ej2Base.isNullOrUndefined)(this.expandedNodes)) {
        this.setProperties({
          expandedNodes: []
        }, true);
      } else {
        this.isInitalExpand = true;
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     * @hidden
     */


    TreeView.prototype.getPersistData = function () {
      var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];
      return this.addOnPersist(keyEntity);
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    TreeView.prototype.render = function () {
      this.initialRender = true;
      this.initialize();
      this.setDataBinding();
      this.setExpandOnType();
      this.setRipple();
      this.wireEditingEvents(this.allowEditing);
      this.setDragAndDrop(this.allowDragAndDrop);
      this.wireEvents();
      this.initialRender = false;
      this.renderComplete();
    };

    TreeView.prototype.initialize = function () {
      this.element.setAttribute('role', 'tree');
      this.element.setAttribute('tabindex', '0');
      this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
      this.isBlazorPlatform = (0, _ej2Base.isBlazor)();
      this.setCssClass(null, this.cssClass);
      this.setEnableRtl();
      this.setFullRow(this.fullRowSelect);
      this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
    };

    TreeView.prototype.setEnableRtl = function () {
      this.enableRtl ? (0, _ej2Base.addClass)([this.element], RTL) : (0, _ej2Base.removeClass)([this.element], RTL);
    };

    TreeView.prototype.setRipple = function () {
      var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;
      var rippleModel = {
        selector: tempStr,
        ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP
      };
      this.rippleFn = (0, _ej2Base.rippleEffect)(this.element, rippleModel);
      var iconModel = {
        selector: '.' + TEXTWRAP + ' > .' + ICON,
        isCenterRipple: true
      };
      this.rippleIconFn = (0, _ej2Base.rippleEffect)(this.element, iconModel);
    };

    TreeView.prototype.setFullRow = function (isEnabled) {
      isEnabled ? (0, _ej2Base.addClass)([this.element], FULLROWWRAP) : (0, _ej2Base.removeClass)([this.element], FULLROWWRAP);
    };

    TreeView.prototype.setMultiSelect = function (isEnabled) {
      var firstUl = (0, _ej2Base.select)('.' + PARENTITEM, this.element);

      if (isEnabled) {
        firstUl.setAttribute('aria-multiselectable', 'true');
      } else {
        firstUl.removeAttribute('aria-multiselectable');
      }
    };

    TreeView.prototype.templateComplier = function (template) {
      if (template) {
        var e = void 0;

        try {
          if (document.querySelectorAll(template).length) {
            return (0, _ej2Base.compile)(document.querySelector(template).innerHTML.trim());
          }
        } catch (e) {
          return (0, _ej2Base.compile)(template);
        }
      }

      return undefined;
    };

    TreeView.prototype.setDataBinding = function () {
      var _this = this;

      this.treeList.push('false');

      if (this.fields.dataSource instanceof _ej2Data.DataManager) {
        if (this.fields.dataSource.ready) {
          this.fields.dataSource.ready.then(function (e) {
            if (_this.fields.dataSource instanceof _ej2Data.DataManager && _this.fields.dataSource.dataSource.offline) {
              _this.treeList.pop();

              _this.treeData = e.result;
              _this.isNumberTypeId = _this.getType();

              _this.setRootData();

              _this.renderItems(true);

              if (_this.treeList.length === 0 && !_this.isLoaded) {
                _this.finalize();
              }
            }
          }).catch(function (e) {
            _this.trigger('actionFailure', {
              error: e
            });
          });
        } else {
          this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {
            _this.treeList.pop();

            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();

            _this.setRootData();

            _this.renderItems(true);

            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }).catch(function (e) {
            _this.trigger('actionFailure', {
              error: e
            });
          });
        }
      } else {
        this.treeList.pop();

        if ((0, _ej2Base.isNullOrUndefined)(this.fields.dataSource)) {
          this.rootData = this.treeData = [];
        } else {
          this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
          this.setRootData();
        }

        this.isNumberTypeId = this.getType();
        this.renderItems(false);
      }

      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };

    TreeView.prototype.getQuery = function (mapper, value) {
      if (value === void 0) {
        value = null;
      }

      var columns = [];
      var query;

      if (!mapper.query) {
        query = new _ej2Data.Query();
        var prop = this.getActualProperties(mapper);

        for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
          var col = _a[_i];

          if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && columns.indexOf(mapper[col]) === -1) {
            columns.push(mapper[col]);
          }
        }

        query.select(columns);

        if (prop.hasOwnProperty('tableName')) {
          query.from(mapper.tableName);
        }
      } else {
        query = mapper.query.clone();
      }

      _ej2Lists.ListBase.addSorting(this.sortOrder, mapper.text, query);

      if (!(0, _ej2Base.isNullOrUndefined)(value) && !(0, _ej2Base.isNullOrUndefined)(mapper.parentID)) {
        query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);
      }

      return query;
    };

    TreeView.prototype.getType = function () {
      return this.treeData[0] ? typeof (0, _ej2Base.getValue)(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;
    };

    TreeView.prototype.setRootData = function () {
      this.dataType = this.getDataType(this.treeData, this.fields);

      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        var rootItems = this.getChildNodes(this.treeData, undefined, true);

        if ((0, _ej2Base.isNullOrUndefined)(rootItems)) {
          this.rootData = [];
        } else {
          this.rootData = rootItems;
        }
      } else {
        this.rootData = this.treeData;
      }
    };

    TreeView.prototype.renderItems = function (isSorted) {
      this.listBaseOption.ariaAttributes.level = 1;
      this.ulElement = _ej2Lists.ListBase.createList(this.createElement, isSorted ? this.rootData : this.getSortedData(this.rootData), this.listBaseOption);
      this.element.appendChild(this.ulElement);

      if (this.loadOnDemand === false) {
        var rootNodes = this.ulElement.querySelectorAll('.e-list-item');
        var i = 0;

        while (i < rootNodes.length) {
          this.renderChildNodes(rootNodes[i], true, null, true);
          i++;
        }
      } else {
        this.finalizeNode(this.element);
      }

      if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
        this.updateBlazorTemplate();
      }

      this.parentNodeCheck = [];
      this.parentCheckData = [];
      this.updateCheckedStateFromDS();

      if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
        this.updateParentCheckState();
      }
    };
    /**
     * Update the checkedNodes from datasource at initial rendering
     */


    TreeView.prototype.updateCheckedStateFromDS = function (id) {
      if (this.treeData && this.showCheckBox) {
        if (this.dataType === 1) {
          var mapper = this.fields;
          var resultData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.isChecked, 'equal', true, false));

          for (var i = 0; i < resultData.length; i++) {
            var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
            var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;

            if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
              this.checkedNodes.push(resultId);
            }

            if (resultData[i][this.fields.hasChildren]) {
              var id_1 = resultData[i][this.fields.id];
              var childData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.parentID, 'equal', id_1, false));

              for (var child = 0; child < childData.length; child++) {
                var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;

                if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                  this.checkedNodes.push(childId);
                }
              }
            }
          }

          for (var i = 0; i < this.checkedNodes.length; i++) {
            var mapper_1 = this.fields;
            var checkState = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));

            if (checkState[0] && this.autoCheck) {
              this.getCheckedNodeDetails(mapper_1, checkState);
              this.checkIndeterminateState(checkState[0]);
            }

            var checkedData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));

            for (var index = 0; index < checkedData.length; index++) {
              var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;

              if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                this.checkedNodes.push(checkedId);
              }
            }
          }
        } else if (this.dataType === 2 || this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof _ej2Data.DataManager && !this.loadOnDemand) {
          for (var index = 0; index < this.treeData.length; index++) {
            var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';

            if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
              this.checkedNodes.push(fieldId);
            }

            var childItems = (0, _ej2Base.getValue)(this.fields.child.toString(), this.treeData[index]);

            if (childItems) {
              this.updateChildCheckState(childItems, this.treeData[index]);
            }
          }
        }
      }
    };
    /**
     * To check whether the list data has sub child and to change the parent check state accordingly
     */


    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {
      var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
      var count = 0;
      var element = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
      var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');

      if (!element && !parentEle) {
        var len = this.parentNodeCheck.length;

        if (this.parentNodeCheck.indexOf(id) === -1) {
          this.parentNodeCheck.push(id);
        }

        var childNodes = this.getChildNodes(this.treeData, id);

        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }

          if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
            this.checkedNodes.push(id);
          }
        }

        var preElement = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.id, 'equal', id, true));
        this.getCheckedNodeDetails(mapper, preElement);
      } else if (parentEle) {
        var check = (0, _ej2Base.select)('.' + CHECK, parentEle);

        if (!check) {
          this.changeState(parentEle, 'indeterminate', null, true, true);
        }
      }
    };
    /**
     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering
     */


    TreeView.prototype.updateParentCheckState = function () {
      var indeterminate = (0, _ej2Base.selectAll)('.' + INDETERMINATE, this.element);
      var childCheckedElement;

      for (var i = 0; i < indeterminate.length; i++) {
        var node = (0, _ej2Base.closest)(indeterminate[i], '.' + LISTITEM);
        var nodeId = node.getAttribute('data-uid').toString();

        if (this.dataType === 1) {
          childCheckedElement = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(this.fields.parentID, 'equal', nodeId, true));
        } else {
          childCheckedElement = this.getChildNodes(this.treeData, nodeId);
        }

        var count = 0;

        if (childCheckedElement) {
          for (var j = 0; j < childCheckedElement.length; j++) {
            var childId = childCheckedElement[j][this.fields.id].toString();

            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }

          if (count === childCheckedElement.length) {
            var nodeCheck = node.getAttribute('data-uid');

            if (this.checkedNodes.indexOf(nodeCheck) === -1) {
              this.checkedNodes.push(nodeCheck);
            }

            this.changeState(node, 'check', null, true, true);
          } else if (count === 0 && this.checkedNodes.length === 0) {
            this.changeState(node, 'uncheck', null, true, true);
          }
        }
      }
    };
    /**
     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM
     */


    TreeView.prototype.checkIndeterminateState = function (data) {
      var element;

      if (this.dataType === 1) {
        element = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
      } else {
        element = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
      }

      if (element) {
        var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');

        if (ariaChecked !== 'true') {
          this.changeState(element, 'indeterminate', null, true, true);
        }
      } else if (this.dataType === 2) {
        var len = this.parentNodeCheck.length;

        if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
          this.parentNodeCheck.push(data[this.fields.id].toString());
        }
      }
    };
    /**
     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering
     */


    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {
      var count = 0;
      var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';

      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';

        if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkedNodes.push(checkedChild);
        }

        if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
          this.checkedNodes.push(checkedChild);
        }

        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }

        var subChildItems = (0, _ej2Base.getValue)(this.fields.child.toString(), childItems[index]);

        if (subChildItems) {
          this.parentCheckData.push(treeData);
          this.updateChildCheckState(subChildItems, childItems[index]);
        }

        if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
          this.checkedNodes.push(checkedParent);
        }
      }

      if (count !== 0 && this.autoCheck) {
        this.checkIndeterminateState(treeData);

        for (var len = 0; len < this.parentCheckData.length; len++) {
          if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {
            this.checkIndeterminateState(this.parentCheckData[len]);
          }
        }
      }

      this.parentCheckData = [];
    };

    TreeView.prototype.beforeNodeCreate = function (e) {
      if (this.showCheckBox) {
        var checkboxEle = (0, _ej2Buttons.createCheckBox)(this.createElement, true, {
          cssClass: this.touchClass
        });
        checkboxEle.setAttribute('role', 'checkbox');
        var icon = (0, _ej2Base.select)('div.' + ICON, e.item);
        var id = e.item.getAttribute('data-uid');
        e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[(0, _ej2Base.isNullOrUndefined)(icon) ? 0 : 1]);
        var checkValue = (0, _ej2Base.getValue)(e.fields.isChecked, e.curData);

        if (this.checkedNodes.indexOf(id) > -1) {
          (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          checkboxEle.setAttribute('aria-checked', 'true');
          this.addCheck(e.item);
        } else if (!(0, _ej2Base.isNullOrUndefined)(checkValue) && checkValue.toString() === 'true') {
          (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          checkboxEle.setAttribute('aria-checked', 'true');
          this.addCheck(e.item);
        } else {
          checkboxEle.setAttribute('aria-checked', 'false');
        }

        var frame = (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkboxEle);

        _ej2Base.EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);

        _ej2Base.EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);
      }

      if (this.fullRowSelect) {
        this.createFullRow(e.item);
      }

      if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {
        e.item.setAttribute('aria-selected', 'false');
      }

      var fields = e.fields;
      this.addActionClass(e, fields.selected, SELECTED);
      this.addActionClass(e, fields.expanded, EXPANDED);

      if (!(0, _ej2Base.isNullOrUndefined)(this.nodeTemplateFn)) {
        var textEle = e.item.querySelector('.' + LISTTEXT);
        textEle.innerHTML = '';
        var tempArr = this.nodeTemplateFn(e.curData, undefined, undefined, this.element.id + 'nodeTemplate', this.isStringTemplate);
        tempArr = Array.prototype.slice.call(tempArr);
        (0, _ej2Base.append)(tempArr, textEle);
      }

      var eventArgs = {
        node: e.item,
        nodeData: e.curData,
        text: e.text
      };

      if (!this.isRefreshed) {
        this.trigger('drawNode', eventArgs);
      }
    };

    TreeView.prototype.frameMouseHandler = function (e) {
      var rippleSpan = (0, _ej2Base.select)('.' + CHECKBOXRIPPLE, e.target.parentElement);
      (0, _ej2Buttons.rippleMouseHandler)(e, rippleSpan);
    };

    TreeView.prototype.addActionClass = function (e, action, cssClass) {
      var data = e.curData;
      var actionValue = (0, _ej2Base.getValue)(action, data);

      if (!(0, _ej2Base.isNullOrUndefined)(actionValue) && actionValue.toString() !== 'false') {
        e.item.classList.add(cssClass);
      }
    };

    TreeView.prototype.getDataType = function (ds, mapper) {
      if (this.fields.dataSource instanceof _ej2Data.DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (typeof mapper.child === 'string' && (0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, ds[i]))) {
            return 1;
          }
        }

        return 2;
      }

      for (var i = 0, len = ds.length; i < len; i++) {
        if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, ds[i]))) {
          return 2;
        }

        if (!(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.parentID, ds[i])) || !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.hasChildren, ds[i]))) {
          return 1;
        }
      }

      return 1;
    };

    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {
      var cusQuery = new _ej2Data.Query().group(groupBy);

      var ds = _ej2Lists.ListBase.getDataSource(dataSource, cusQuery);

      var grpItem = [];

      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[j].items;
        grpItem.push(itemObj);
      }

      return grpItem;
    };

    TreeView.prototype.getSortedData = function (list) {
      if (list && this.sortOrder !== 'None') {
        list = _ej2Lists.ListBase.getDataSource(list, _ej2Lists.ListBase.addSorting(this.sortOrder, this.fields.text));
      }

      return list;
    };

    TreeView.prototype.finalizeNode = function (element) {
      var iNodes = (0, _ej2Base.selectAll)('.' + IMAGE, element);

      for (var k = 0; k < iNodes.length; k++) {
        iNodes[k].setAttribute('alt', IMAGE);
      }

      if (this.isLoaded) {
        var sNodes = (0, _ej2Base.selectAll)('.' + SELECTED, element);

        for (var i = 0; i < sNodes.length; i++) {
          this.selectNode(sNodes[i], null);
          break;
        }

        (0, _ej2Base.removeClass)(sNodes, SELECTED);
      }

      var cNodes = (0, _ej2Base.selectAll)('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);

      for (var j = 0; j < cNodes.length; j++) {
        var icon = (0, _ej2Base.select)('div.' + ICON, cNodes[j]);

        if (icon && icon.classList.contains(EXPANDABLE)) {
          this.disableExpandAttr(cNodes[j]);
        }
      }

      var eNodes = (0, _ej2Base.selectAll)('.' + EXPANDED, element);

      if (!this.isInitalExpand) {
        for (var i = 0; i < eNodes.length; i++) {
          this.renderChildNodes(eNodes[i]);
        }
      }

      (0, _ej2Base.removeClass)(eNodes, EXPANDED);
      this.updateList();

      if (this.isLoaded) {
        this.updateCheckedProp();
      }
    };

    TreeView.prototype.updateCheckedProp = function () {
      if (this.showCheckBox) {
        var nodes = [].concat([], this.checkedNodes);
        this.setProperties({
          checkedNodes: nodes
        }, true);
      }
    };

    TreeView.prototype.ensureIndeterminate = function () {
      if (this.autoCheck) {
        var liElement = (0, _ej2Base.selectAll)('li', this.element);
        var ulElement = void 0;

        for (var i = 0; i < liElement.length; i++) {
          if (liElement[i].classList.contains(LISTITEM)) {
            ulElement = (0, _ej2Base.select)('.' + PARENTITEM, liElement[i]);

            if (ulElement) {
              this.ensureParentCheckState(liElement[i]);
            } else {
              this.ensureChildCheckState(liElement[i]);
            }
          }
        }
      } else {
        var indeterminate = (0, _ej2Base.selectAll)('.' + INDETERMINATE, this.element);

        for (var i = 0; i < indeterminate.length; i++) {
          indeterminate[i].classList.remove(INDETERMINATE);
        }
      }
    };

    TreeView.prototype.ensureParentCheckState = function (element) {
      if (!(0, _ej2Base.isNullOrUndefined)(element)) {
        if (element.classList.contains(ROOT)) {
          return;
        }

        var ulElement = element;

        if (element.classList.contains(LISTITEM)) {
          ulElement = (0, _ej2Base.select)('.' + PARENTITEM, element);
        }

        var checkedNodes = (0, _ej2Base.selectAll)('.' + CHECK, ulElement);
        var indeterminateNodes = (0, _ej2Base.selectAll)('.' + INDETERMINATE, ulElement);
        var nodes = (0, _ej2Base.selectAll)('.' + LISTITEM, ulElement);
        var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];

        if (nodes.length === checkedNodes.length) {
          this.changeState(checkBoxEle, 'check', null, true, true);
        } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
          this.changeState(checkBoxEle, 'indeterminate', null, true, true);
        } else if (checkedNodes.length === 0) {
          this.changeState(checkBoxEle, 'uncheck', null, true, true);
        }

        var parentUL = (0, _ej2Base.closest)(element, '.' + PARENTITEM);

        if (!(0, _ej2Base.isNullOrUndefined)(parentUL)) {
          var currentParent = (0, _ej2Base.closest)(parentUL, '.' + LISTITEM);
          this.ensureParentCheckState(currentParent);
        }
      }
    };

    TreeView.prototype.ensureChildCheckState = function (element, e) {
      if (!(0, _ej2Base.isNullOrUndefined)(element)) {
        var childElement = (0, _ej2Base.select)('.' + PARENTITEM, element);
        var checkBoxes = void 0;

        if (!(0, _ej2Base.isNullOrUndefined)(childElement)) {
          checkBoxes = (0, _ej2Base.selectAll)('.' + CHECKBOXWRAP, childElement);
          var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
          var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);
          var childCheck = childElement.querySelectorAll('li');
          var expandState = childElement.parentElement.getAttribute('aria-expanded');
          var checkedState = void 0;

          for (var index = 0; index < checkBoxes.length; index++) {
            if (!(0, _ej2Base.isNullOrUndefined)(this.currentLoadData) && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(this.fields.isChecked, this.currentLoadData[index]))) {
              checkedState = (0, _ej2Base.getValue)(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';

              if (this.ele !== -1) {
                checkedState = isChecked ? 'check' : 'uncheck';
              }
            } else {
              var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
              var childId = childCheck[index].getAttribute('data-uid');

              if (isChecked) {
                checkedState = 'check';
              } else if (isNodeChecked && !this.isLoaded) {
                checkedState = 'check';
              } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                checkedState = 'check';
              } else if (childCheck[index].classList.contains(CHILD) && !(0, _ej2Base.isUndefined)(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                checkedState = 'indeterminate';
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else if (this.dataType === 1 && !(0, _ej2Base.isUndefined)(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {
                checkedState = 'indeterminate';
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else {
                checkedState = 'uncheck';
              }
            }

            this.changeState(checkBoxes[index], checkedState, e, true, true);
          }
        }

        if (this.autoCheck && this.isLoaded) {
          this.updateParentCheckState();
        }
      }
    };

    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {
      var li = (0, _ej2Base.selectAll)('.' + LISTITEM, this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        for (var len = nodes.length; len >= 0; len--) {
          var liEle = void 0;

          if (nodes.length === 1) {
            liEle = this.getElement(nodes[len - 1]);
          } else {
            liEle = this.getElement(nodes[len]);
          }

          if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
            var node = void 0;
            node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;

            if (node !== '' && doCheck && node) {
              this.setValidCheckedNode(node);
              this.dynamicCheckState(node, doCheck);
            } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
              var childItems = this.getChildNodes(this.treeData, node);

              if (childItems) {
                for (var i = 0; i < childItems.length; i++) {
                  var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                  }
                }

                if (this.parentNodeCheck.indexOf(node) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                }
              }

              if (node) {
                this.dynamicCheckState(node, doCheck);
              }

              this.updateField(this.treeData, this.fields, node, 'isChecked', null);
            }

            continue;
          }

          var checkBox = (0, _ej2Base.select)('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);
          this.validateCheckNode(checkBox, !doCheck, liEle, null);
        }
      } else {
        var checkBoxes = (0, _ej2Base.selectAll)('.' + CHECKBOXWRAP, this.element);

        if (this.loadOnDemand) {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);
          }
        } else {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');
          }
        }
      }

      if (nodes) {
        for (var j = 0; j < nodes.length; j++) {
          var node = nodes[j] ? nodes[j].toString() : '';

          if (!doCheck) {
            this.updateField(this.treeData, this.fields, node, 'isChecked', null);
          }
        }
      }

      if (this.autoCheck) {
        this.updateParentCheckState();
      }
    };

    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {
      var currLi = (0, _ej2Base.closest)(checkbox, '.' + LISTITEM);
      var id = currLi.getAttribute('data-uid');
      var nodeDetails = this.getNodeData(currLi);

      if (nodeDetails.isChecked === 'true' && !doCheck) {
        this.updateField(this.treeData, this.fields, id, 'isChecked', null);
      }
    };
    /**
     * Changes the parent and child  check state while changing the checkedNodes via setmodel
     */


    TreeView.prototype.dynamicCheckState = function (node, doCheck) {
      if (this.dataType === 1) {
        var count = 0;
        var resultId = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(this.fields.id, 'equal', node, true));

        if (resultId[0]) {
          var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
          var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
          var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
          var indeterminate = parentElement ? (0, _ej2Base.select)('.' + INDETERMINATE, parentElement) : null;
          var check = parentElement ? (0, _ej2Base.select)('.' + CHECK, parentElement) : null;
          var element = this.element.querySelector('[data-uid="' + id + '"]');
          var childNodes = this.getChildNodes(this.treeData, parent_1);

          if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
              var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
          }

          if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
            this.changeState(parentElement, 'indeterminate', null);
          } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {
            this.changeState(element, 'uncheck', null);
          } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {
            this.changeState(element, 'check', null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {
            this.changeState(parentElement, 'indeterminate', null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {
            this.changeState(parentElement, 'uncheck', null);
          } else if (!element && !parentElement && id === node && this.autoCheck) {
            this.updateIndeterminate(node, doCheck);
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof _ej2Data.DataManager && !this.loadOnDemand) {
        var id = void 0;
        var parentElement = void 0;
        var check = void 0;

        for (var i = 0; i < this.treeData.length; i++) {
          id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';
          parentElement = this.element.querySelector('[data-uid="' + id + '"]');
          check = parentElement ? (0, _ej2Base.select)('.' + CHECK, parentElement) : null;

          if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
            this.changeState(parentElement, 'uncheck', null);
          }

          var subChild = (0, _ej2Base.getValue)(this.fields.child.toString(), this.treeData[i]);

          if (subChild) {
            this.updateChildIndeterminate(subChild, id, node, doCheck, id);
          }
        }
      }
    };
    /**
     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData
     */


    TreeView.prototype.updateIndeterminate = function (node, doCheck) {
      var indeterminateData = this.getTreeData(node);
      var count = 0;
      var parent;

      if (this.dataType === 1) {
        parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
      }

      var childNodes = this.getChildNodes(this.treeData, parent);

      if (childNodes) {
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;

          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }
      }

      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');

      if (parentElement && doCheck) {
        this.changeState(parentElement, 'indeterminate', null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.changeState(parentElement, 'indeterminate', null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
        this.changeState(parentElement, 'uncheck', null);
      } else if (!parentElement) {
        if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
        } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
          this.parentNodeCheck.push(parent);
        }

        this.updateIndeterminate(parent, doCheck);

        if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
        }
      }
    };
    /**
     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data
     */


    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {
      var count = 0;

      for (var j = 0; j < subChild.length; j++) {
        var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';

        if (this.checkedNodes.indexOf(subId) !== -1) {
          count++;
        }

        var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
        var indeterminate = parentElement ? (0, _ej2Base.select)('.' + INDETERMINATE, parentElement) : null;
        var check = parentElement ? (0, _ej2Base.select)('.' + CHECK, parentElement) : null;
        var element = this.element.querySelector('[data-uid="' + subId + '"]');
        var childElementCheck = element ? (0, _ej2Base.select)('.' + CHECK, element) : null;

        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
          this.changeState(parentElement, 'indeterminate', null);
        } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {
          if (this.autoCheck) {
            this.changeState(parentElement, 'uncheck', null);
          } else {
            if (count !== 0) {
              this.changeState(parentElement, 'indeterminate', null);
            } else {
              this.changeState(parentElement, 'uncheck', null);
            }
          }
        } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {
          this.changeState(element, 'uncheck', null);
        } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
          indeterminate.classList.remove(INDETERMINATE);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {
          this.changeState(parentElement, 'uncheck', null);
        } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {
          this.changeState(element, 'uncheck', null);
        } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
          var childElement = this.element.querySelector('[data-uid="' + child + '"]');

          if (doCheck && count !== 0) {
            this.changeState(childElement, 'indeterminate', null);
          } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
            this.checkedNodes.push(parent);
          } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
          }

          if (this.parentNodeCheck.indexOf(parent) === -1) {
            this.parentNodeCheck.push(parent);
          }
        }

        var innerChild = (0, _ej2Base.getValue)(this.fields.child.toString(), subChild[j]);

        if (innerChild) {
          this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
        }
      }
    };

    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {
      var _this = this;

      var eventArgs;
      var currLi = (0, _ej2Base.closest)(wrapper, '.' + LISTITEM);

      if (!isPrevent) {
        this.checkActionNodes = [];
        eventArgs = this.getCheckEvent(currLi, state, e);
        this.trigger('nodeChecking', eventArgs, function (observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
          }
        });
      } else {
        this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
      }
    };

    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];

      if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        this.addCheck(currLi);
        ariaState = 'true';
      } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
        (0, _ej2Base.removeClass)([frameSpan], [CHECK, INDETERMINATE]);
        this.removeCheck(currLi);
        ariaState = 'false';
      } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE) && this.autoCheck) {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);
        this.removeCheck(currLi);
        ariaState = 'mixed';
      }

      ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;

      if (!(0, _ej2Base.isNullOrUndefined)(ariaState)) {
        wrapper.setAttribute('aria-checked', ariaState);
      }

      if (isAdd) {
        var data = [].concat([], this.checkActionNodes);
        eventArgs = this.getCheckEvent(currLi, state, e);

        if ((0, _ej2Base.isUndefined)(isPrevent)) {
          eventArgs.data = data;
        }
      }

      if (doCheck !== undefined) {
        this.ensureStateChange(currLi, doCheck);
      }

      if (!isPrevent) {
        if (!(0, _ej2Base.isNullOrUndefined)(ariaState)) {
          wrapper.setAttribute('aria-checked', ariaState);
          eventArgs.data[0].checked = ariaState;
          this.trigger('nodeChecked', eventArgs);
          this.checkActionNodes = [];
        }
      }
    };

    TreeView.prototype.addCheck = function (liEle) {
      var id = liEle.getAttribute('data-uid');

      if (!(0, _ej2Base.isNullOrUndefined)(id) && this.checkedNodes.indexOf(id) === -1) {
        this.checkedNodes.push(id);
      }
    };

    TreeView.prototype.removeCheck = function (liEle) {
      var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));

      if (index > -1) {
        this.checkedNodes.splice(index, 1);
      }
    };

    TreeView.prototype.getCheckEvent = function (currLi, action, e) {
      this.checkActionNodes.push(this.getNodeData(currLi));
      var nodeData = this.checkActionNodes;
      return {
        action: action,
        cancel: false,
        isInteracted: (0, _ej2Base.isNullOrUndefined)(e) ? false : true,
        node: currLi,
        data: nodeData
      };
    };

    TreeView.prototype.finalize = function () {
      var firstUl = (0, _ej2Base.select)('.' + PARENTITEM, this.element);
      firstUl.setAttribute('role', treeAriaAttr.treeRole);
      this.setMultiSelect(this.allowMultiSelection);
      var firstNode = (0, _ej2Base.select)('.' + LISTITEM, this.element);

      if (firstNode) {
        (0, _ej2Base.addClass)([firstNode], FOCUS);
        this.updateIdAttr(null, firstNode);
      }

      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;
      this.doExpandAction();
    };

    TreeView.prototype.doExpandAction = function () {
      var eUids = this.expandedNodes;

      if (this.isInitalExpand && eUids.length > 0) {
        this.setProperties({
          expandedNodes: []
        }, true); // tslint:disable

        if (this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
          this.expandGivenNodes(eUids);
        } else {
          for (var i = 0; i < eUids.length; i++) {
            var eNode = (0, _ej2Base.select)('[data-uid="' + eUids[i] + '"]', this.element);

            if (!(0, _ej2Base.isNullOrUndefined)(eNode)) {
              var icon = (0, _ej2Base.select)('.' + EXPANDABLE, (0, _ej2Base.select)('.' + TEXTWRAP, eNode));

              if (!(0, _ej2Base.isNullOrUndefined)(icon)) {
                this.expandAction(eNode, icon, null);
              }
            } else {
              if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {
                this.expandChildren.push(eUids[i].toString());
              }

              continue;
            }
          }

          this.afterFinalized();
        }
      } else {
        this.afterFinalized();
      }
    };

    TreeView.prototype.expandGivenNodes = function (arr) {
      var proxy = this;
      this.expandCallback(arr[this.index], function () {
        proxy.index++;

        if (proxy.index < arr.length) {
          proxy.expandGivenNodes(arr);
        } else {
          proxy.afterFinalized();
        }
      });
    };

    TreeView.prototype.expandCallback = function (eUid, callback) {
      var eNode = (0, _ej2Base.select)('[data-uid="' + eUid + '"]', this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(eNode)) {
        var icon = (0, _ej2Base.select)('.' + EXPANDABLE, (0, _ej2Base.select)('.' + TEXTWRAP, eNode));

        if (!(0, _ej2Base.isNullOrUndefined)(icon)) {
          this.expandAction(eNode, icon, null, false, callback);
        } else {
          callback();
        }
      } else {
        callback();
      }
    };

    TreeView.prototype.afterFinalized = function () {
      this.doSelectionAction();
      this.updateCheckedProp();
      this.isAnimate = true;
      this.isInitalExpand = false;

      if (!this.isLoaded || this.isFieldChange) {
        var eventArgs = {
          data: this.treeData
        };
        this.trigger('dataBound', eventArgs);
      }

      this.isLoaded = true;
    };

    TreeView.prototype.doSelectionAction = function () {
      var sNodes = (0, _ej2Base.selectAll)('.' + SELECTED, this.element);
      var sUids = this.selectedNodes;

      if (sUids.length > 0) {
        this.setProperties({
          selectedNodes: []
        }, true);

        for (var i = 0; i < sUids.length; i++) {
          var sNode = (0, _ej2Base.select)('[data-uid="' + sUids[i] + '"]', this.element);

          if (sNode && !sNode.classList.contains('e-active')) {
            this.selectNode(sNode, null, true);
          } else {
            this.selectedNodes.push(sUids[i]);
          }

          if (!this.allowMultiSelection) {
            break;
          }
        }
      } else {
        this.selectGivenNodes(sNodes);
      }

      (0, _ej2Base.removeClass)(sNodes, SELECTED);
    };

    TreeView.prototype.selectGivenNodes = function (sNodes) {
      for (var i = 0; i < sNodes.length; i++) {
        if (!sNodes[i].classList.contains('e-disable')) {
          this.selectNode(sNodes[i], null, true);
        }

        if (!this.allowMultiSelection) {
          break;
        }
      }
    };

    TreeView.prototype.clickHandler = function (event) {
      var target = event.originalEvent.target;

      _ej2Base.EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);

      if (!target || this.dragStartAction) {
        return;
      } else {
        var classList = target.classList;
        var li = (0, _ej2Base.closest)(target, '.' + LISTITEM);

        if (!li) {
          return;
        } else {
          var rippleElement = (0, _ej2Base.select)('.' + RIPPLEELMENT, li);
          var rippleIcons = (0, _ej2Base.select)('.' + ICON, li);
          this.removeHover();
          this.setFocusElement(li);

          if (this.showCheckBox && !li.classList.contains('e-disable')) {
            var checkWrapper = (0, _ej2Base.closest)(target, '.' + CHECKBOXWRAP);

            if (!(0, _ej2Base.isNullOrUndefined)(checkWrapper)) {
              var checkElement = (0, _ej2Base.select)('.' + CHECKBOXFRAME, checkWrapper);
              this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);
              this.triggerClickEvent(event.originalEvent, li);
              return;
            }
          }

          if (classList.contains(EXPANDABLE)) {
            this.expandAction(li, target, event);
          } else if (classList.contains(COLLAPSIBLE)) {
            this.collapseNode(li, target, event);
          } else if (rippleElement && rippleIcons) {
            if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {
              this.expandAction(li, rippleIcons, event);
            } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {
              this.collapseNode(li, rippleIcons, event);
            } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {
              this.toggleSelect(li, event.originalEvent, false);
            }
          } else {
            if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {
              this.toggleSelect(li, event.originalEvent, false);
            }
          }

          this.triggerClickEvent(event.originalEvent, li);
        }
      }
    };

    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {
      var currLi = (0, _ej2Base.closest)(wrapper, '.' + LISTITEM);
      var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);
      eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
      this.trigger('nodeChecked', eventArgs);
    };

    TreeView.prototype.triggerClickEvent = function (e, li) {
      var eventArgs = {
        event: e,
        node: li
      };
      this.trigger('nodeClicked', eventArgs);
    };

    TreeView.prototype.expandNode = function (currLi, icon, loaded) {
      var _this = this;

      if (icon.classList.contains(LOAD)) {
        this.hideSpinner(icon);
      }

      if (!this.initialRender) {
        icon.classList.add('interaction');
      }

      if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {
        if (this.preventExpand !== true) {
          (0, _ej2Base.removeClass)([icon], EXPANDABLE);
          (0, _ej2Base.addClass)([icon], COLLAPSIBLE);
          var start_1 = 0;
          var end_1 = 0;
          var proxy_1 = this;
          var ul_1 = (0, _ej2Base.select)('.' + PARENTITEM, currLi);
          var liEle_1 = currLi;
          this.setHeight(liEle_1, ul_1);
          var activeElement_1 = (0, _ej2Base.select)('.' + LISTITEM + '.' + ACTIVE, currLi);

          if (this.isAnimate && !this.isRefreshed) {
            this.aniObj.animate(ul_1, {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration,
              timingFunction: this.animation.expand.easing,
              begin: function (args) {
                liEle_1.style.overflow = 'hidden';

                if (!(0, _ej2Base.isNullOrUndefined)(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
                }

                start_1 = liEle_1.offsetHeight;
                end_1 = (0, _ej2Base.select)('.' + TEXTWRAP, currLi).offsetHeight;
              },
              progress: function (args) {
                args.element.style.display = 'block';
                proxy_1.animateHeight(args, start_1, end_1);
              },
              end: function (args) {
                args.element.style.display = 'block';

                if (!(0, _ej2Base.isNullOrUndefined)(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
                }

                _this.expandedNode(liEle_1, ul_1, icon);
              }
            });
          } else {
            this.expandedNode(liEle_1, ul_1, icon);
          }
        }
      } else {
        var ul = (0, _ej2Base.select)('.' + PARENTITEM, currLi);
        ul.style.display = 'none';

        if (this.fields.dataSource instanceof _ej2Data.DataManager === true) {
          this.preventExpand = false;
        }
      }

      if (this.initialRender) {
        icon.classList.add('interaction');
      }
    };

    TreeView.prototype.expandedNode = function (currLi, ul, icon) {
      ul.style.display = 'block';
      currLi.style.display = 'block';
      currLi.style.overflow = '';
      currLi.style.height = '';
      (0, _ej2Base.removeClass)([icon], PROCESS);
      this.addExpand(currLi);

      if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, null);
        this.trigger('nodeExpanded', this.expandArgs);
      }
    };

    TreeView.prototype.addExpand = function (liEle) {
      liEle.setAttribute('aria-expanded', 'true');
      (0, _ej2Base.removeClass)([liEle], NODECOLLAPSED);
      var id = liEle.getAttribute('data-uid');

      if (!(0, _ej2Base.isNullOrUndefined)(id) && this.expandedNodes.indexOf(id) === -1) {
        if (this.isBlazorPlatform) {
          this.setProperties({
            expandedNodes: [].concat([], this.expandedNodes, [id])
          }, true);
        } else {
          this.expandedNodes.push(id);
        }
      }
    };

    TreeView.prototype.collapseNode = function (currLi, icon, e) {
      var _this = this;

      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        (0, _ej2Base.addClass)([icon], PROCESS);
      }

      var colArgs;

      if (this.isLoaded) {
        colArgs = this.getExpandEvent(currLi, e);
        this.trigger('nodeCollapsing', colArgs, function (observedArgs) {
          if (observedArgs.cancel) {
            (0, _ej2Base.removeClass)([icon], PROCESS);
          } else {
            _this.nodeCollapseAction(currLi, icon, observedArgs);
          }
        });
      } else {
        this.nodeCollapseAction(currLi, icon, colArgs);
      }
    };

    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {
      var _this = this;

      (0, _ej2Base.removeClass)([icon], COLLAPSIBLE);
      (0, _ej2Base.addClass)([icon], EXPANDABLE);
      var start = 0;
      var end = 0;
      var proxy = this;
      var ul = (0, _ej2Base.select)('.' + PARENTITEM, currLi);
      var liEle = currLi;
      var activeElement = (0, _ej2Base.select)('.' + LISTITEM + '.' + ACTIVE, currLi);

      if (this.isAnimate) {
        this.aniObj.animate(ul, {
          name: this.animation.collapse.effect,
          duration: this.animation.collapse.duration,
          timingFunction: this.animation.collapse.easing,
          begin: function (args) {
            liEle.style.overflow = 'hidden';

            if (!(0, _ej2Base.isNullOrUndefined)(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
            }

            start = (0, _ej2Base.select)('.' + TEXTWRAP, currLi).offsetHeight;
            end = liEle.offsetHeight;
          },
          progress: function (args) {
            proxy.animateHeight(args, start, end);
          },
          end: function (args) {
            args.element.style.display = 'none';

            if (!(0, _ej2Base.isNullOrUndefined)(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
            }

            _this.collapsedNode(liEle, ul, icon, colArgs);
          }
        });
      } else {
        this.collapsedNode(liEle, ul, icon, colArgs);
      }
    };

    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {
      ul.style.display = 'none';
      liEle.style.overflow = '';
      liEle.style.height = '';
      (0, _ej2Base.removeClass)([icon], PROCESS);
      this.removeExpand(liEle);

      if (this.isLoaded) {
        this.trigger('nodeCollapsed', colArgs);
      }
    };

    TreeView.prototype.removeExpand = function (liEle, toRemove) {
      if (toRemove) {
        liEle.removeAttribute('aria-expanded');
      } else {
        this.disableExpandAttr(liEle);
      }

      var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));

      if (index > -1) {
        if (this.isBlazorPlatform) {
          var removeVal = this.expandedNodes.slice(0);
          removeVal.splice(index, 1);
          this.setProperties({
            expandedNodes: [].concat([], removeVal)
          }, true);
        } else {
          this.expandedNodes.splice(index, 1);
        }
      }
    };

    TreeView.prototype.disableExpandAttr = function (liEle) {
      liEle.setAttribute('aria-expanded', 'false');
      (0, _ej2Base.addClass)([liEle], NODECOLLAPSED);
    };

    TreeView.prototype.setHeight = function (currLi, ul) {
      ul.style.display = 'block';
      ul.style.visibility = 'hidden';
      currLi.style.height = currLi.offsetHeight + 'px';
      ul.style.display = 'none';
      ul.style.visibility = '';
    };

    TreeView.prototype.animateHeight = function (args, start, end) {
      var remaining = (args.duration - args.timeStamp) / args.duration;
      var currentHeight = (end - start) * remaining + start;
      args.element.parentElement.style.height = currentHeight + 'px';
    };

    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {
      var _this = this;

      var eicon = (0, _ej2Base.select)('div.' + ICON, parentLi);

      if ((0, _ej2Base.isNullOrUndefined)(eicon)) {
        return;
      }

      this.showSpinner(eicon);
      var childItems; // tslint:disable

      if (this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
        var level = this.parents(parentLi, '.' + PARENTITEM).length;
        var mapper_2 = this.getChildFields(this.fields, level, 1);

        if ((0, _ej2Base.isNullOrUndefined)(mapper_2) || (0, _ej2Base.isNullOrUndefined)(mapper_2.dataSource)) {
          (0, _ej2Base.detach)(eicon);
          this.removeExpand(parentLi, true);
          return;
        }

        this.treeList.push('false');

        if (this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof _ej2Data.DataManager && !this.loadOnDemand) {
          this.treeList.pop();
          childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
          this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);

          if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
            this.updateBlazorTemplate();
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && this.loadOnDemand) {
          mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {
            _this.treeList.pop();

            childItems = e.result;

            if (_this.dataType === 1) {
              _this.dataType = 2;
            }

            _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);

            if (_this.nodeTemplate && _this.isBlazorPlatform && !_this.isStringTemplate) {
              _this.updateBlazorTemplate();
            }
          }).catch(function (e) {
            _this.trigger('actionFailure', {
              error: e
            });
          });
        }
      } else {
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
        this.currentLoadData = childItems;

        if ((0, _ej2Base.isNullOrUndefined)(childItems) || childItems.length === 0) {
          (0, _ej2Base.detach)(eicon);
          this.removeExpand(parentLi, true);
          return;
        } else {
          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
          parentLi.appendChild(_ej2Lists.ListBase.createList(this.createElement, this.getSortedData(childItems), this.listBaseOption));
          this.expandNode(parentLi, eicon, loaded);
          this.setSelectionForChildNodes(childItems);
          this.ensureCheckNode(parentLi);
          this.finalizeNode(parentLi);

          if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
            this.updateBlazorTemplate();
          }

          this.disableTreeNodes(childItems);
          this.renderSubChild(parentLi, expandChild, loaded);
        }
      }
    };

    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
      this.currentLoadData = childItems;

      if ((0, _ej2Base.isNullOrUndefined)(childItems) || childItems.length === 0) {
        (0, _ej2Base.detach)(eicon);
        this.removeExpand(parentLi, true);
      } else {
        this.updateListProp(mapper);

        if (this.fields.dataSource instanceof _ej2Data.DataManager && !this.fields.dataSource.dataSource.offline) {
          var id = parentLi.getAttribute('data-uid');
          var nodeData = this.getNodeObject(id);
          (0, _ej2Base.setValue)('child', childItems, nodeData);
        }

        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
        parentLi.appendChild(_ej2Lists.ListBase.createList(this.createElement, childItems, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }

      if (callback) {
        callback();
      }

      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };

    TreeView.prototype.disableTreeNodes = function (childItems) {
      var i = 0;

      while (i < childItems.length) {
        var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;

        if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {
          this.doDisableAction([id]);
        }

        i++;
      }
    };
    /**
     * Sets the child Item in selectedState while rendering the child node
     */


    TreeView.prototype.setSelectionForChildNodes = function (nodes) {
      var i;

      for (i = 0; i < nodes.length; i++) {
        var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;

        if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {
          this.doSelectionAction();
        }
      }
    };

    TreeView.prototype.ensureCheckNode = function (element) {
      if (this.showCheckBox) {
        this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;

        if (this.autoCheck) {
          this.ensureChildCheckState(element);
          this.ensureParentCheckState(element);
        }
      }

      this.currentLoadData = null;
    };

    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return mapper;
      } else {
        return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };

    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {
      var childData;

      if (nodeLevel === dataLevel) {
        return this.getChildMapper(mapper);
      } else {
        return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };

    TreeView.prototype.getChildMapper = function (mapper) {
      return typeof mapper.child === 'string' || (0, _ej2Base.isNullOrUndefined)(mapper.child) ? mapper : mapper.child;
    };

    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {
      if (isRoot === void 0) {
        isRoot = false;
      }

      var childNodes;

      if ((0, _ej2Base.isNullOrUndefined)(obj)) {
        return childNodes;
      } else if (this.dataType === 1) {
        return this.getChildGroup(this.groupedData, parentId, isRoot);
      } else {
        if (typeof this.fields.child === 'string') {
          for (var i = 0, objlen = obj.length; i < objlen; i++) {
            var dataId = (0, _ej2Base.getValue)(this.fields.id, obj[i]);

            if (dataId && dataId.toString() === parentId) {
              return (0, _ej2Base.getValue)(this.fields.child, obj[i]);
            } else if (!(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(this.fields.child, obj[i]))) {
              childNodes = this.getChildNodes((0, _ej2Base.getValue)(this.fields.child, obj[i]), parentId);

              if (childNodes !== undefined) {
                break;
              }
            }
          }
        }
      }

      return childNodes;
    };

    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {
      var childNodes;

      if ((0, _ej2Base.isNullOrUndefined)(data)) {
        return childNodes;
      }

      for (var i = 0, objlen = data.length; i < objlen; i++) {
        if (!(0, _ej2Base.isNullOrUndefined)(data[i][0]) && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(this.fields.parentID, data[i][0]))) {
          if ((0, _ej2Base.getValue)(this.fields.parentID, data[i][0]).toString() === parentId) {
            return data[i];
          }
        } else if (isRoot) {
          return data[i];
        } else {
          return [];
        }
      }

      return childNodes;
    };

    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {
      if (expandChild) {
        var cIcons = (0, _ej2Base.selectAll)('.' + EXPANDABLE, element);

        for (var i = 0, len = cIcons.length; i < len; i++) {
          var icon = cIcons[i];

          if (element.querySelector('.e-icons') !== cIcons[i]) {
            var curLi = (0, _ej2Base.closest)(icon, '.' + LISTITEM);
            this.expandArgs = this.getExpandEvent(curLi, null);

            if (loaded !== true) {
              this.trigger('nodeExpanding', this.expandArgs);
            }

            this.renderChildNodes(curLi, expandChild, null, loaded);
          }
        }
      }
    };

    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {
      if (!li.classList.contains('e-disable')) {
        if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
          this.unselectNode(li, e);
        } else {
          this.selectNode(li, e, multiSelect);
        }
      }
    };

    TreeView.prototype.isActive = function (li) {
      return li.classList.contains(ACTIVE) ? true : false;
    };

    TreeView.prototype.selectNode = function (li, e, multiSelect) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(li) || !this.allowMultiSelection && this.isActive(li) && !(0, _ej2Base.isNullOrUndefined)(e)) {
        this.setFocusElement(li);
        return;
      }

      var eventArgs;

      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, 'select', e);
        this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeSelectAction(li, e, observedArgs, multiSelect);
          }
        });
      } else {
        this.nodeSelectAction(li, e, eventArgs, multiSelect);
      }
    };

    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {
      if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {
        this.removeSelectAll();
      }

      if (this.allowMultiSelection && e && e.shiftKey) {
        if (!this.startNode) {
          this.startNode = li;
        }

        var startIndex = this.liList.indexOf(this.startNode);
        var endIndex = this.liList.indexOf(li);

        if (startIndex > endIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }

        for (var i = startIndex; i <= endIndex; i++) {
          var currNode = this.liList[i];

          if ((0, _ej2Base.isVisible)(currNode) && !currNode.classList.contains('e-disable')) {
            this.addSelect(currNode);
          }
        }
      } else {
        this.startNode = li;
        this.addSelect(li);
      }

      this.setFocusElement(li);

      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger('nodeSelected', eventArgs);
      }
    };

    TreeView.prototype.unselectNode = function (li, e) {
      var _this = this;

      var eventArgs;

      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, 'un-select', e);
        this.trigger('nodeSelecting', eventArgs, function (observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeUnselectAction(li, observedArgs);
          }
        });
      } else {
        this.nodeUnselectAction(li, eventArgs);
      }
    };

    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {
      this.removeSelect(li);
      this.setFocusElement(li);

      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger('nodeSelected', eventArgs);
      }
    };

    TreeView.prototype.setFocusElement = function (li) {
      if (!(0, _ej2Base.isNullOrUndefined)(li)) {
        var focusedNode = this.getFocusedNode();

        if (focusedNode) {
          (0, _ej2Base.removeClass)([focusedNode], FOCUS);
        }

        (0, _ej2Base.addClass)([li], FOCUS);
        this.updateIdAttr(focusedNode, li);
      }
    };

    TreeView.prototype.addSelect = function (liEle) {
      liEle.setAttribute('aria-selected', 'true');
      (0, _ej2Base.addClass)([liEle], ACTIVE);
      var id = liEle.getAttribute('data-uid');

      if (!(0, _ej2Base.isNullOrUndefined)(id) && this.selectedNodes.indexOf(id) === -1) {
        this.selectedNodes.push(id);
      }
    };

    TreeView.prototype.removeSelect = function (liEle) {
      if (this.allowMultiSelection) {
        liEle.setAttribute('aria-selected', 'false');
      } else {
        liEle.removeAttribute('aria-selected');
      }

      (0, _ej2Base.removeClass)([liEle], ACTIVE);
      var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));

      if (index > -1) {
        this.selectedNodes.splice(index, 1);
      }
    };

    TreeView.prototype.removeSelectAll = function () {
      var selectedLI = this.element.querySelectorAll('.' + ACTIVE);

      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];

        if (this.allowMultiSelection) {
          ele.setAttribute('aria-selected', 'false');
        } else {
          ele.removeAttribute('aria-selected');
        }
      }

      (0, _ej2Base.removeClass)(selectedLI, ACTIVE);
      this.setProperties({
        selectedNodes: []
      }, true);
    };

    TreeView.prototype.getSelectEvent = function (currLi, action, e) {
      var nodeData = this.getNodeData(currLi);
      return {
        action: action,
        cancel: false,
        isInteracted: (0, _ej2Base.isNullOrUndefined)(e) ? false : true,
        node: currLi,
        nodeData: nodeData
      };
    };

    TreeView.prototype.setExpandOnType = function () {
      this.expandOnType = this.expandOn === 'Auto' ? _ej2Base.Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;
    };

    TreeView.prototype.expandHandler = function (e) {
      var target = e.originalEvent.target;

      if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && (0, _ej2Base.closest)(target, '.' + CHECKBOXWRAP)) {
        return;
      } else {
        this.expandCollapseAction((0, _ej2Base.closest)(target, '.' + LISTITEM), e);
      }
    };

    TreeView.prototype.expandCollapseAction = function (currLi, e) {
      var icon = (0, _ej2Base.select)('div.' + ICON, currLi);

      if (!icon || icon.classList.contains(PROCESS)) {
        return;
      } else {
        var classList = icon.classList;

        if (classList.contains(EXPANDABLE)) {
          this.expandAction(currLi, icon, e);
        } else if (classList.contains(COLLAPSIBLE)) {
          this.collapseNode(currLi, icon, e);
        }
      }
    };

    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {
      var _this = this;

      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        (0, _ej2Base.addClass)([icon], PROCESS);
      }

      if (this.isLoaded && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, e);
        this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {
          if (observedArgs.cancel) {
            (0, _ej2Base.removeClass)([icon], PROCESS);
          } else {
            _this.nodeExpandAction(currLi, icon, expandChild, callback);
          }
        });
      } else {
        this.nodeExpandAction(currLi, icon, expandChild, callback);
      }
    };

    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {
      var ul = (0, _ej2Base.select)('.' + PARENTITEM, currLi);

      if (ul && ul.nodeName === 'UL') {
        this.expandNode(currLi, icon);
      } else {
        this.renderChildNodes(currLi, expandChild, callback);
        var liEles = (0, _ej2Base.selectAll)('.' + LISTITEM, currLi);

        for (var i = 0; i < liEles.length; i++) {
          var id = this.getId(liEles[i]);

          if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {
            var icon_1 = (0, _ej2Base.select)('.' + EXPANDABLE, (0, _ej2Base.select)('.' + TEXTWRAP, liEles[i]));

            if (!(0, _ej2Base.isNullOrUndefined)(icon_1)) {
              this.expandAction(liEles[i], icon_1, null);
            }

            this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
          }
        }
      }
    };

    TreeView.prototype.keyActionHandler = function (e) {
      var _this = this;

      var target = e.target;
      var focusedNode = this.getFocusedNode();

      if (target && target.classList.contains(INPUT)) {
        var inpEle = target;

        if (e.action === 'enter') {
          inpEle.blur();
          this.element.focus();
          (0, _ej2Base.addClass)([focusedNode], HOVER);
        } else if (e.action === 'escape') {
          inpEle.value = this.oldText;
          inpEle.blur();
          this.element.focus();
          (0, _ej2Base.addClass)([focusedNode], HOVER);
        }

        return;
      }

      e.preventDefault();
      var eventArgs = {
        cancel: false,
        event: e,
        node: focusedNode
      };
      this.trigger('keyPress', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case 'space':
              if (_this.showCheckBox) {
                _this.checkNode(e);
              }

              break;

            case 'moveRight':
              _this.openNode(_this.enableRtl ? false : true, e);

              break;

            case 'moveLeft':
              _this.openNode(_this.enableRtl ? true : false, e);

              break;

            case 'shiftDown':
              _this.shiftKeySelect(true, e);

              break;

            case 'moveDown':
            case 'ctrlDown':
            case 'csDown':
              _this.navigateNode(true);

              break;

            case 'shiftUp':
              _this.shiftKeySelect(false, e);

              break;

            case 'moveUp':
            case 'ctrlUp':
            case 'csUp':
              _this.navigateNode(false);

              break;

            case 'home':
            case 'shiftHome':
            case 'ctrlHome':
            case 'csHome':
              _this.navigateRootNode(true);

              break;

            case 'end':
            case 'shiftEnd':
            case 'ctrlEnd':
            case 'csEnd':
              _this.navigateRootNode(false);

              break;

            case 'enter':
            case 'ctrlEnter':
            case 'shiftEnter':
            case 'csEnter':
              _this.toggleSelect(focusedNode, e);

              break;

            case 'f2':
              if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {
                _this.createTextbox(focusedNode, e);
              }

              break;

            case 'ctrlA':
              if (_this.allowMultiSelection) {
                var sNodes = (0, _ej2Base.selectAll)('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);

                _this.selectGivenNodes(sNodes);
              }

              break;
          }
        }
      });
    };

    TreeView.prototype.navigateToFocus = function (isUp) {
      var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);
      var pos = focusNode.getBoundingClientRect();
      var parent = this.getScrollParent(this.element);

      if (!(0, _ej2Base.isNullOrUndefined)(parent)) {
        var parentPos = parent.getBoundingClientRect();

        if (pos.bottom > parentPos.bottom) {
          parent.scrollTop += pos.bottom - parentPos.bottom;
        } else if (pos.top < parentPos.top) {
          parent.scrollTop -= parentPos.top - pos.top;
        }
      }

      var isVisible = this.isVisibleInViewport(focusNode);

      if (!isVisible) {
        focusNode.scrollIntoView(isUp);
      }
    };

    TreeView.prototype.isVisibleInViewport = function (txtWrap) {
      var pos = txtWrap.getBoundingClientRect();
      return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
    };

    TreeView.prototype.getScrollParent = function (node) {
      if ((0, _ej2Base.isNullOrUndefined)(node)) {
        return null;
      }

      return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
    };

    TreeView.prototype.shiftKeySelect = function (isTowards, e) {
      if (this.allowMultiSelection) {
        var focusedNode = this.getFocusedNode();
        var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
        this.removeHover();
        this.setFocusElement(nextNode);
        this.toggleSelect(nextNode, e, false);
        this.navigateToFocus(!isTowards);
      } else {
        this.navigateNode(isTowards);
      }
    };

    TreeView.prototype.checkNode = function (e) {
      var focusedNode = this.getFocusedNode();
      var checkWrap = (0, _ej2Base.select)('.' + CHECKBOXWRAP, focusedNode);
      var isChecked = (0, _ej2Base.select)(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);

      if (!focusedNode.classList.contains('e-disable')) {
        if (focusedNode.getElementsByClassName("e-checkbox-disabled").length == 0) {
          this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }
      }
    };

    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {
      var _this = this;

      var currLi = (0, _ej2Base.closest)(checkWrap, '.' + LISTITEM);
      this.checkActionNodes = [];
      var ariaState = !isCheck ? 'true' : 'false';

      if (!(0, _ej2Base.isNullOrUndefined)(ariaState)) {
        checkWrap.setAttribute('aria-checked', ariaState);
      }

      var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);
      this.trigger('nodeChecking', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
        }
      });
    };

    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {
      if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {
        this.checkedElement.push(li.getAttribute('data-uid'));
        var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));
        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;
      }

      this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);

      if (this.autoCheck) {
        this.ensureChildCheckState(li);
        this.ensureParentCheckState((0, _ej2Base.closest)((0, _ej2Base.closest)(li, '.' + PARENTITEM), '.' + LISTITEM));
        var doCheck = void 0;

        if (eventArgs.action === 'check') {
          doCheck = true;
        } else if (eventArgs.action === 'uncheck') {
          doCheck = false;
        }

        this.ensureStateChange(li, doCheck);
      }

      this.nodeCheckedEvent(checkWrap, isCheck, e);
    };
    /**
     * Update checkedNodes when UI interaction happens before the child node renders in DOM
     */


    TreeView.prototype.ensureStateChange = function (li, doCheck) {
      var childElement = (0, _ej2Base.select)('.' + PARENTITEM, li);
      var parentIndex = li.getAttribute('data-uid');
      var mapper = this.fields;

      if (this.dataType === 1 && this.autoCheck) {
        var resultData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.parentID, 'equal', parentIndex, true));

        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
          var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;

          if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
            this.checkedNodes.push(resultId);
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);

            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);

            if (isCheck === 'true') {
              this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);
            }

            if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
              var childNodes = this.getChildNodes(this.treeData, resultId);
              this.getChildItems(childNodes, doCheck);

              if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
              }
            }
          } else {
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
          }
        }
      } else if (this.dataType === 1 && !this.autoCheck) {
        if (!doCheck) {
          var checkedData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.isChecked, 'equal', true, false));

          for (var i = 0; i < checkedData.length; i++) {
            var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;

            if (this.checkedNodes.indexOf(id) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
            }

            this.updateField(this.treeData, this.fields, id, 'isChecked', null);
          }

          this.checkedNodes = [];
        } else {
          for (var i = 0; i < this.treeData.length; i++) {
            var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;

            if (this.checkedNodes.indexOf(checkedId) === -1) {
              this.checkedNodes.push(checkedId);
            }
          }
        }
      } else {
        var childItems = this.getChildNodes(this.treeData, parentIndex);

        if (childItems) {
          this.childStateChange(childItems, parentIndex, childElement, doCheck);
        }
      }
    };

    TreeView.prototype.getChildItems = function (childItems, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
        var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

        if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
        }

        if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
          this.checkedNodes.push(childId);
        }

        if (childIsCheck === 'true' && !doCheck) {
          this.updateField(this.treeData, this.fields, childId, 'isChecked', null);
        }

        var subChildItems = this.getChildNodes(this.treeData, childId);

        if (subChildItems.length > 0) {
          this.getChildItems(subChildItems, doCheck);
        }
      }
    };
    /**
     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS
     */


    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';
        var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;

        if (this.autoCheck) {
          if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);

            if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
            }
          } else if (this.checkedNodes.indexOf(parent) === -1 && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);

            if (isCheck === 'true') {
              this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
            }
          }
        } else if (!this.autoCheck) {
          if (!doCheck) {
            if (this.checkedNodes.indexOf(checkedChild) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            }

            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);
            this.checkedNodes = [];
          } else {
            if (this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
        }

        var subChild = this.getChildNodes(this.treeData, checkedChild);

        if (subChild) {
          this.childStateChange(subChild, parent, childElement, doCheck);
        }
      }
    }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false


    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {
      if (child) {
        for (var length_1 = 0; length_1 < child.length; length_1++) {
          var childId = (0, _ej2Base.getValue)(this.fields.id, child[length_1]);
          var check = this.element.querySelector('[data-uid="' + childId + '"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent

          if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
            if (check === null && !(0, _ej2Base.isNullOrUndefined)(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
              child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;
              childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
            }
          } //Pushes child checked node done thro' UI interaction


          if (newCheck.indexOf(childId.toString()) === -1 && (0, _ej2Base.isNullOrUndefined)(checked)) {
            newCheck.push(childId.toString());
          } //Gets if any next level children are available for child nodes


          if ((0, _ej2Base.getValue)(this.fields.hasChildren, child[length_1]) === true || (0, _ej2Base.getValue)(this.fields.child.toString(), child[length_1])) {
            var id = (0, _ej2Base.getValue)(this.fields.id, child[length_1]);
            var childId_1 = this.getChildNodes(this.treeData, id.toString());

            if (childId_1) {
              (0, _ej2Base.isNullOrUndefined)(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
              childCheck = null;
            }
          }

          childCheck = null;
        }
      }
    };

    TreeView.prototype.openNode = function (toBeOpened, e) {
      var focusedNode = this.getFocusedNode();
      var icon = (0, _ej2Base.select)('div.' + ICON, focusedNode);

      if (toBeOpened) {
        if (!icon) {
          return;
        } else if (icon.classList.contains(EXPANDABLE)) {
          this.expandAction(focusedNode, icon, e);
        } else {
          this.focusNextNode(focusedNode, true);
        }
      } else {
        if (icon && icon.classList.contains(COLLAPSIBLE)) {
          this.collapseNode(focusedNode, icon, e);
        } else {
          var parentLi = (0, _ej2Base.closest)((0, _ej2Base.closest)(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);

          if (!parentLi) {
            return;
          } else {
            if (!parentLi.classList.contains('e-disable')) {
              this.setFocus(focusedNode, parentLi);
              this.navigateToFocus(true);
            }
          }
        }
      }
    };

    TreeView.prototype.navigateNode = function (isTowards) {
      var focusedNode = this.getFocusedNode();
      this.focusNextNode(focusedNode, isTowards);
    };

    TreeView.prototype.navigateRootNode = function (isBackwards) {
      var focusedNode = this.getFocusedNode();
      var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();

      if (!rootNode.classList.contains('e-disable')) {
        this.setFocus(focusedNode, rootNode);
        this.navigateToFocus(isBackwards);
      }
    };

    TreeView.prototype.getFocusedNode = function () {
      var selectedItem;
      var fNode = (0, _ej2Base.select)('.' + LISTITEM + '.' + FOCUS, this.element);

      if ((0, _ej2Base.isNullOrUndefined)(fNode)) {
        selectedItem = (0, _ej2Base.select)('.' + LISTITEM, this.element);
      }

      return (0, _ej2Base.isNullOrUndefined)(fNode) ? (0, _ej2Base.isNullOrUndefined)(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
    };

    TreeView.prototype.focusNextNode = function (li, isTowards) {
      var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
      this.setFocus(li, nextNode);
      this.navigateToFocus(!isTowards);

      if (nextNode.classList.contains('e-disable')) {
        var lastChild = nextNode.lastChild;

        if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {
          this.focusNextNode(nextNode, true);
        } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {
          this.focusNextNode(nextNode, false);
        } else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {
          this.focusNextNode(nextNode, false);
        } else {
          this.focusNextNode(nextNode, isTowards);
        }
      }
    };

    TreeView.prototype.getNextNode = function (li) {
      var index = this.liList.indexOf(li);
      var nextNode;

      do {
        index++;
        nextNode = this.liList[index];

        if ((0, _ej2Base.isNullOrUndefined)(nextNode)) {
          return li;
        }
      } while (!(0, _ej2Base.isVisible)(nextNode));

      return nextNode;
    };

    TreeView.prototype.getPrevNode = function (li) {
      var index = this.liList.indexOf(li);
      var prevNode;

      do {
        index--;
        prevNode = this.liList[index];

        if ((0, _ej2Base.isNullOrUndefined)(prevNode)) {
          return li;
        }
      } while (!(0, _ej2Base.isVisible)(prevNode));

      return prevNode;
    };

    TreeView.prototype.getRootNode = function () {
      var index = 0;
      var rootNode;

      do {
        rootNode = this.liList[index];
        index++;
      } while (!(0, _ej2Base.isVisible)(rootNode));

      return rootNode;
    };

    TreeView.prototype.getEndNode = function () {
      var index = this.liList.length - 1;
      var endNode;

      do {
        endNode = this.liList[index];
        index--;
      } while (!(0, _ej2Base.isVisible)(endNode));

      return endNode;
    };

    TreeView.prototype.setFocus = function (preNode, nextNode) {
      (0, _ej2Base.removeClass)([preNode], [HOVER, FOCUS]);

      if (!nextNode.classList.contains('e-disable')) {
        (0, _ej2Base.addClass)([nextNode], [HOVER, FOCUS]);
        this.updateIdAttr(preNode, nextNode);
      }
    };

    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {
      this.element.removeAttribute('aria-activedescendant');

      if (preNode) {
        preNode.removeAttribute('id');
      }

      nextNode.setAttribute('id', this.element.id + '_active');
      this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
    };

    TreeView.prototype.focusIn = function () {
      if (!this.mouseDownStatus) {
        (0, _ej2Base.addClass)([this.getFocusedNode()], HOVER);
      }

      this.mouseDownStatus = false;
    };

    TreeView.prototype.focusOut = function () {
      (0, _ej2Base.removeClass)([this.getFocusedNode()], HOVER);
    };

    TreeView.prototype.onMouseOver = function (e) {
      var target = e.target;
      var classList = target.classList;
      var currentLi = (0, _ej2Base.closest)(target, '.' + LISTITEM);

      if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {
        this.removeHover();
        return;
      } else {
        if (currentLi && !currentLi.classList.contains('e-disable')) {
          this.setHover(currentLi);
        }
      }
    };

    TreeView.prototype.setHover = function (li) {
      if (!li.classList.contains(HOVER)) {
        this.removeHover();
        (0, _ej2Base.addClass)([li], HOVER);
      }
    };

    ;

    TreeView.prototype.onMouseLeave = function (e) {
      this.removeHover();
    };

    TreeView.prototype.removeHover = function () {
      var hoveredNode = (0, _ej2Base.selectAll)('.' + HOVER, this.element);

      if (hoveredNode && hoveredNode.length) {
        (0, _ej2Base.removeClass)(hoveredNode, HOVER);
      }
    };

    ;

    TreeView.prototype.getNodeData = function (currLi, fromDS) {
      if (!(0, _ej2Base.isNullOrUndefined)(currLi) && currLi.classList.contains(LISTITEM) && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.closest)(currLi, '.' + CONTROL)) && (0, _ej2Base.closest)(currLi, '.' + CONTROL).classList.contains(ROOT)) {
        var id = currLi.getAttribute('data-uid');
        var text = this.getText(currLi, fromDS);
        var pNode = (0, _ej2Base.closest)(currLi.parentNode, '.' + LISTITEM);
        var pid = pNode ? pNode.getAttribute('data-uid') : null;
        var selected = currLi.classList.contains(ACTIVE);
        var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;
        var hasChildren = currLi.getAttribute('aria-expanded') === null ? false : true;
        var checked = null;

        if (this.showCheckBox) {
          checked = (0, _ej2Base.select)('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');
        }

        return {
          id: id,
          text: text,
          parentID: pid,
          selected: selected,
          expanded: expanded,
          isChecked: checked,
          hasChildren: hasChildren
        };
      }

      return {
        id: '',
        text: '',
        parentID: '',
        selected: false,
        expanded: false,
        isChecked: '',
        hasChildren: false
      };
    };

    TreeView.prototype.getText = function (currLi, fromDS) {
      if (fromDS) {
        var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));
        var level = parseFloat(currLi.getAttribute('aria-level'));
        var nodeFields = this.getFields(this.fields, level, 1);
        return (0, _ej2Base.getValue)(nodeFields.text, nodeData);
      }

      return (0, _ej2Base.select)('.' + LISTTEXT, currLi).textContent;
    };

    TreeView.prototype.getExpandEvent = function (currLi, e) {
      var nodeData = this.getNodeData(currLi);
      return {
        cancel: false,
        isInteracted: (0, _ej2Base.isNullOrUndefined)(e) ? false : true,
        node: currLi,
        nodeData: nodeData,
        event: e
      };
    };

    TreeView.prototype.destroyTemplate = function (nodeTemplate) {
      this.clearTemplate(['nodeTemplate']);
    };

    TreeView.prototype.reRenderNodes = function () {
      (0, _ej2Base.resetBlazorTemplate)(this.element.id + 'nodeTemplate', 'NodeTemplate');

      if (this.isBlazorPlatform && this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      } else {
        this.element.innerHTML = '';
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.nodeTemplateFn)) {
        this.destroyTemplate(this.nodeTemplate);
      }

      this.setTouchClass();
      this.setProperties({
        selectedNodes: [],
        checkedNodes: [],
        expandedNodes: []
      }, true);
      this.checkedElement = [];
      this.isLoaded = false;
      this.setDataBinding();
    };

    TreeView.prototype.setCssClass = function (oldClass, newClass) {
      if (!(0, _ej2Base.isNullOrUndefined)(oldClass) && oldClass !== '') {
        (0, _ej2Base.removeClass)([this.element], oldClass.split(' '));
      }

      if (!(0, _ej2Base.isNullOrUndefined)(newClass) && newClass !== '') {
        (0, _ej2Base.addClass)([this.element], newClass.split(' '));
      }
    };

    TreeView.prototype.editingHandler = function (e) {
      var target = e.target;

      if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
        return;
      } else {
        var liEle = (0, _ej2Base.closest)(target, '.' + LISTITEM);
        this.createTextbox(liEle, e);
      }
    };

    TreeView.prototype.createTextbox = function (liEle, e) {
      var _this = this;

      var oldInpEle = (0, _ej2Base.select)('.' + TREEINPUT, this.element);

      if (oldInpEle) {
        oldInpEle.blur();
      }

      var textEle = (0, _ej2Base.select)('.' + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var innerEle = this.createElement('input', {
        className: TREEINPUT,
        attrs: {
          value: this.oldText
        }
      });
      var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
      this.trigger('nodeEditing', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          var inpWidth = textEle.offsetWidth + 5;
          var style = 'width:' + inpWidth + 'px';
          (0, _ej2Base.addClass)([liEle], EDITING);
          textEle.innerHTML = eventArgs.innerHtml;
          var inpEle = (0, _ej2Base.select)('.' + TREEINPUT, textEle);
          _this.inputObj = _ej2Inputs.Input.createInput({
            element: inpEle,
            properties: {
              enableRtl: _this.enableRtl
            }
          }, _this.createElement);

          _this.inputObj.container.setAttribute('style', style);

          inpEle.focus();
          var inputEle = inpEle;
          inputEle.setSelectionRange(0, inputEle.value.length);

          _this.wireInputEvents(inpEle);
        }
      });
    };

    TreeView.prototype.updateOldText = function (liEle) {
      var id = liEle.getAttribute('data-uid');
      this.editData = this.getNodeObject(id);
      var level = parseFloat(liEle.getAttribute('aria-level'));
      this.editFields = this.getFields(this.fields, level, 1);
      this.oldText = (0, _ej2Base.getValue)(this.editFields.text, this.editData);
    };

    TreeView.prototype.inputFocusOut = function (e) {
      if (!(0, _ej2Base.select)('.' + TREEINPUT, this.element)) {
        return;
      }

      var target = e.target;
      var newText = target.value;
      var txtEle = (0, _ej2Base.closest)(target, '.' + LISTTEXT);
      var liEle = (0, _ej2Base.closest)(target, '.' + LISTITEM);
      (0, _ej2Base.detach)(this.inputObj.container);
      this.appendNewText(liEle, txtEle, newText, true);
    };

    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {
      var _this = this;

      var eventArgs = this.getEditEvent(liEle, newText, null);
      this.trigger('nodeEdited', eventArgs, function (observedArgs) {
        newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;
        var newData = (0, _ej2Base.setValue)(_this.editFields.text, newText, _this.editData);

        if (!(0, _ej2Base.isNullOrUndefined)(_this.nodeTemplateFn)) {
          txtEle.innerText = '';

          var tempArr = _this.nodeTemplateFn(newData, undefined, undefined, _this.element.id + 'nodeTemplate', _this.isStringTemplate);

          tempArr = Array.prototype.slice.call(tempArr);
          (0, _ej2Base.append)(tempArr, txtEle);

          _this.updateBlazorTemplate();
        } else {
          txtEle.innerText = newText;
        }

        if (isInput) {
          (0, _ej2Base.removeClass)([liEle], EDITING);
          txtEle.focus();
        }

        if (observedArgs.oldText !== newText) {
          _this.triggerEvent();
        }
      });
    };

    TreeView.prototype.getElement = function (ele) {
      if ((0, _ej2Base.isNullOrUndefined)(ele)) {
        return null;
      } else if (typeof ele === 'string') {
        return this.element.querySelector('[data-uid="' + ele + '"]');
      } else if (typeof ele === 'object') {
        return (0, _ej2Base.getElement)(ele);
      } else {
        return null;
      }
    };

    TreeView.prototype.getId = function (ele) {
      if ((0, _ej2Base.isNullOrUndefined)(ele)) {
        return null;
      } else if (typeof ele === 'string') {
        return ele;
      } else if (typeof ele === 'object') {
        return (0, _ej2Base.getElement)(ele).getAttribute('data-uid');
      } else {
        return null;
      }
    };

    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {
      var data = this.getNodeData(liEle);
      return {
        cancel: false,
        newText: newText,
        node: liEle,
        nodeData: data,
        oldText: this.oldText,
        innerHtml: inpEle
      };
    };

    TreeView.prototype.getNodeObject = function (id) {
      var childNodes;

      if ((0, _ej2Base.isNullOrUndefined)(id)) {
        return childNodes;
      } else if (this.dataType === 1) {
        for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
          var dataId = (0, _ej2Base.getValue)(this.fields.id, this.treeData[i]);

          if (!(0, _ej2Base.isNullOrUndefined)(this.treeData[i]) && !(0, _ej2Base.isNullOrUndefined)(dataId) && dataId.toString() === id) {
            return this.treeData[i];
          }
        }
      } else {
        return this.getChildNodeObject(this.treeData, this.fields, id);
      }

      return childNodes;
    };

    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {
      var newList;

      if ((0, _ej2Base.isNullOrUndefined)(obj)) {
        return newList;
      }

      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataId = (0, _ej2Base.getValue)(mapper.id, obj[i]);

        if (obj[i] && dataId && dataId.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, obj[i]))) {
          var childData = (0, _ej2Base.getValue)(mapper.child, obj[i]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);

          if (newList !== undefined) {
            break;
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', obj[i]))) {
          var child = 'child';
          newList = this.getChildNodeObject((0, _ej2Base.getValue)(child, obj[i]), this.getChildMapper(mapper), id);

          if (newList !== undefined) {
            break;
          }
        }
      }

      return newList;
    };

    TreeView.prototype.setDragAndDrop = function (toBind) {
      if (toBind) {
        this.initializeDrag();
      } else {
        this.destroyDrag();
      }
    }; // tslint:disable-next-line:max-func-body-length


    TreeView.prototype.initializeDrag = function () {
      var _this = this;

      var virtualEle;
      var proxy = this;
      this.dragObj = new _ej2Base.Draggable(this.element, {
        enableTailMode: true,
        enableAutoScroll: true,
        dragTarget: '.' + TEXTWRAP,
        helper: function (e) {
          _this.dragTarget = e.sender.target;
          var dragRoot = (0, _ej2Base.closest)(_this.dragTarget, '.' + ROOT);
          var dragWrap = (0, _ej2Base.closest)(_this.dragTarget, '.' + TEXTWRAP);
          _this.dragLi = (0, _ej2Base.closest)(_this.dragTarget, '.' + LISTITEM);

          if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
            dragWrap = _this.dragTarget.nextElementSibling;
          }

          if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {
            return false;
          }

          var cloneEle = dragWrap.cloneNode(true);

          if ((0, _ej2Base.isNullOrUndefined)((0, _ej2Base.select)('div.' + ICON, cloneEle))) {
            var icon = proxy.createElement('div', {
              className: ICON + ' ' + EXPANDABLE
            });
            cloneEle.insertBefore(icon, cloneEle.children[0]);
          }

          var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');
          virtualEle = proxy.createElement('div', {
            className: cssClass
          });
          virtualEle.appendChild(cloneEle);
          var nLen = _this.selectedNodes.length;

          if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {
            var cNode = proxy.createElement('span', {
              className: DROPCOUNT,
              innerHTML: '' + nLen
            });
            virtualEle.appendChild(cNode);
          }

          document.body.appendChild(virtualEle);
          document.body.style.cursor = '';
          _this.dragData = _this.getNodeData(_this.dragLi);
          return virtualEle;
        },
        dragStart: function (e) {
          (0, _ej2Base.addClass)([_this.element], DRAGGING);
          var listItem = (0, _ej2Base.closest)(e.target, '.e-list-item');
          var level;

          if (listItem) {
            level = parseInt(listItem.getAttribute('aria-level'), 10);
          }

          var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);

          if (eventArgs.draggedNode.classList.contains(EDITING)) {
            _this.dragObj.intDestroy(e.event);

            _this.dragCancelAction(virtualEle);
          } else {
            _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {
              if (observedArgs.cancel) {
                _this.dragObj.intDestroy(e.event);

                _this.dragCancelAction(virtualEle);
              } else {
                _this.dragStartAction = true;
              }

              if ((0, _ej2Base.isBlazor)()) {
                e.bindEvents((0, _ej2Base.getElement)(e.dragElement));
              }
            });
          }
        },
        drag: function (e) {
          _this.dragObj.setProperties({
            cursorAt: {
              top: !(0, _ej2Base.isNullOrUndefined)(e.event.targetTouches) || _ej2Base.Browser.isDevice ? 60 : -20
            }
          });

          _this.dragAction(e, virtualEle);
        },
        dragStop: function (e) {
          (0, _ej2Base.removeClass)([_this.element], DRAGGING);

          _this.removeVirtualEle();

          var dropTarget = e.target;
          var preventTargetExpand = false;
          var dropRoot = (0, _ej2Base.closest)(dropTarget, '.' + DROPPABLE);

          if (!dropTarget || !dropRoot) {
            (0, _ej2Base.detach)(e.helper);
            document.body.style.cursor = '';
          }

          var listItem = (0, _ej2Base.closest)(dropTarget, '.e-list-item');
          var level;

          if (listItem) {
            level = parseInt(listItem.getAttribute('aria-level'), 10);
          }

          var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);

          eventArgs.preventTargetExpand = preventTargetExpand;

          if (_this.isBlazorPlatform && _this.dragStartAction || !_this.isBlazorPlatform) {
            _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {
              _this.dragParent = observedArgs.draggedParentNode;
              _this.preventExpand = observedArgs.preventTargetExpand;

              if (observedArgs.cancel) {
                if (e.helper.parentNode) {
                  (0, _ej2Base.detach)(e.helper);
                }

                document.body.style.cursor = '';
              }

              _this.dragStartAction = false;

              if (_this.isBlazorPlatform) {
                _this.dropAction(e, true);
              }
            });
          }
        }
      });
      this.dropObj = new _ej2Base.Droppable(this.element, {
        out: function (e) {
          if (!(0, _ej2Base.isNullOrUndefined)(e) && !e.target.classList.contains(SIBLING)) {
            document.body.style.cursor = 'not-allowed';
          }
        },
        over: function (e) {
          document.body.style.cursor = '';
        },
        drop: function (e) {
          if (!_this.isBlazorPlatform) {
            _this.dropAction(e);
          }
        }
      });
    };

    TreeView.prototype.dragCancelAction = function (virtualEle) {
      (0, _ej2Base.detach)(virtualEle);
      (0, _ej2Base.removeClass)([this.element], DRAGGING);
      this.dragStartAction = false;
    };

    TreeView.prototype.dragAction = function (e, virtualEle) {
      var dropRoot = (0, _ej2Base.closest)(e.target, '.' + DROPPABLE);
      var dropWrap = (0, _ej2Base.closest)(e.target, '.' + TEXTWRAP);
      var icon = (0, _ej2Base.select)('div.' + ICON, virtualEle);
      (0, _ej2Base.removeClass)([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
      this.removeVirtualEle();
      document.body.style.cursor = '';
      var classList = e.target.classList;

      if (this.fullRowSelect && !dropWrap && !(0, _ej2Base.isNullOrUndefined)(classList) && classList.contains(FULLROW)) {
        dropWrap = e.target.nextElementSibling;
      }

      if (dropRoot) {
        var dropLi = (0, _ej2Base.closest)(e.target, '.' + LISTITEM);
        var checkWrapper = (0, _ej2Base.closest)(e.target, '.' + CHECKBOXWRAP);
        var collapse = (0, _ej2Base.closest)(e.target, '.' + COLLAPSIBLE);
        var expand = (0, _ej2Base.closest)(e.target, '.' + EXPANDABLE);

        if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {
            (0, _ej2Base.addClass)([icon], DROPNEXT);
            var virEle = this.createElement('div', {
              className: SIBLING
            });
            var index = this.fullRowSelect ? 1 : 0;
            dropLi.insertBefore(virEle, dropLi.children[index]);
          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {
            (0, _ej2Base.addClass)([icon], DROPNEXT);
            var virEle = this.createElement('div', {
              className: SIBLING
            });
            var index = this.fullRowSelect ? 2 : 1;
            dropLi.insertBefore(virEle, dropLi.children[index]);
          } else {
            (0, _ej2Base.addClass)([icon], DROPIN);
          }
        } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {
          (0, _ej2Base.addClass)([icon], DROPNEXT);
          this.renderVirtualEle(e);
        } else if (e.target.classList.contains(SIBLING)) {
          (0, _ej2Base.addClass)([icon], DROPNEXT);
        } else {
          (0, _ej2Base.addClass)([icon], DROPOUT);
        }
      } else {
        (0, _ej2Base.addClass)([icon], NODROP);
        document.body.style.cursor = 'not-allowed';
      }

      var listItem = (0, _ej2Base.closest)(e.target, '.e-list-item');
      var level;

      if (listItem) {
        level = parseInt(listItem.getAttribute('aria-level'), 10);
      }

      var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);

      if (eventArgs.dropIndicator) {
        (0, _ej2Base.removeClass)([icon], eventArgs.dropIndicator);
      }

      this.trigger('nodeDragging', eventArgs);

      if (eventArgs.dropIndicator) {
        (0, _ej2Base.addClass)([icon], eventArgs.dropIndicator);
      }
    }; // tslint:disable


    TreeView.prototype.dropAction = function (e, isBlazorDrop) {
      var offsetY = e.event.offsetY;
      var dropTarget = e.target;
      var dragObj;
      var level;
      var drop = false;
      var dragInstance;

      if (!isBlazorDrop) {
        dragInstance = e.dragData.draggable;
      } else {
        dragInstance = e.element;
      }

      for (var i = 0; i < dragInstance.ej2_instances.length; i++) {
        if (dragInstance.ej2_instances[i] instanceof TreeView_1) {
          dragObj = dragInstance.ej2_instances[i];
          break;
        }
      }

      if (dragObj && dragObj.dragTarget) {
        var dragTarget = dragObj.dragTarget;
        var dragLi = (0, _ej2Base.closest)(dragTarget, '.' + LISTITEM);
        var dropLi = (0, _ej2Base.closest)(dropTarget, '.' + LISTITEM);

        if (dropLi == null && dropTarget.classList.contains(ROOT)) {
          dropLi = dropTarget.firstElementChild;
        }

        if (!isBlazorDrop) {
          (0, _ej2Base.detach)(e.droppedElement);
        } else {
          (0, _ej2Base.detach)(e.helper);
        }

        document.body.style.cursor = '';

        if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          if (this.fields.dataSource instanceof _ej2Data.DataManager === false) {
            this.preventExpand = false;
          }

          return;
        }

        if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {
          var sNodes = (0, _ej2Base.selectAll)('.' + ACTIVE, dragObj.element);

          if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
            for (var i = sNodes.length - 1; i >= 0; i--) {
              if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {
                continue;
              }

              this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);
            }
          } else {
            for (var i = 0; i < sNodes.length; i++) {
              if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {
                continue;
              }

              this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);
            }
          }
        } else {
          this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
        }

        level = parseInt(dragLi.getAttribute('aria-level'), 10);
        drop = true;
      }

      if (this.fields.dataSource instanceof _ej2Data.DataManager === false) {
        this.preventExpand = false;
      }

      if (!isBlazorDrop) {
        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
      } else {
        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));
      }

      this.triggerEvent();
    };

    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
      var checkWrapper = (0, _ej2Base.closest)(dropTarget, '.' + CHECKBOXWRAP);
      var collapse = (0, _ej2Base.closest)(e.target, '.' + COLLAPSIBLE);
      var expand = (0, _ej2Base.closest)(e.target, '.' + EXPANDABLE);

      if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
        if (dropTarget.nodeName === 'LI') {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {
          if (dropTarget.firstElementChild.nodeName === 'UL') {
            this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
          }
        } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else {
          this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
        }
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);
      }
    };

    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {
      var dropUl = (0, _ej2Base.closest)(dropLi, '.' + PARENTITEM);
      var dragParentUl = (0, _ej2Base.closest)(dragLi, '.' + PARENTITEM);
      var dragParentLi = (0, _ej2Base.closest)(dragParentUl, '.' + LISTITEM);
      var pre;

      if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
        if (e.event.offsetY < 5 || e.event.offsetX < 3) {
          pre = true;
        } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
          pre = false;
        }
      }

      if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {
        var target = e.target.closest('li');
        dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
      } else {
        dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
      }

      this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);

      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };

    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {
      var dragParentUl = (0, _ej2Base.closest)(dragLi, '.' + PARENTITEM);
      var dragParentLi = (0, _ej2Base.closest)(dragParentUl, '.' + LISTITEM);
      var dropParentUl = (0, _ej2Base.closest)(dropLi, '.' + PARENTITEM);

      if (e && pos < 7 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi);
        this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
      } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else {
        var dropUl = this.expandParent(dropLi);
        var childLi = dropUl.childNodes[index];
        dropUl.insertBefore(dragLi, childLi);
        this.moveData(dragLi, childLi, dropUl, true, dragObj);
      }

      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);

      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };

    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {
      var dropParentLi = (0, _ej2Base.closest)(dropUl, '.' + LISTITEM);
      var id = this.getId(dragLi);
      var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
      var refId = this.getId(dropLi);
      var index = this.getDataPos(this.treeData, this.fields, refId);
      var parentId = this.getId(dropParentLi);

      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);
        var pos = (0, _ej2Base.isNullOrUndefined)(index) ? this.treeData.length : pre ? index : index + 1;

        if ((0, _ej2Base.isNullOrUndefined)(parentId) && !this.hasPid) {
          delete removedData[0][this.fields.parentID];
        } else {
          var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
          (0, _ej2Base.setValue)(this.fields.parentID, currPid, removedData[0]);
        }

        this.treeData.splice(pos, 0, removedData[0]);

        if (dragObj.element.id !== this.element.id) {
          var childData = dragObj.removeChildNodes(id);
          pos++;

          for (var i = 0, len = childData.length; i < len; i++) {
            this.treeData.splice(pos, 0, childData[i]);
            pos++;
          }

          dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
        }

        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
      }
    };

    TreeView.prototype.expandParent = function (dropLi) {
      var dropIcon = (0, _ej2Base.select)('div.' + ICON, dropLi);

      if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
        this.expandAction(dropLi, dropIcon, null);
      }

      var dropUl = (0, _ej2Base.select)('.' + PARENTITEM, dropLi);

      if (this.preventExpand === true && !dropUl && dropIcon) {
        this.renderChildNodes(dropLi);
      }

      dropUl = (0, _ej2Base.select)('.' + PARENTITEM, dropLi);

      if (!(0, _ej2Base.isNullOrUndefined)(dropUl) && this.preventExpand === true) {
        dropUl.style.display = 'none';
      }

      if (!(0, _ej2Base.isNullOrUndefined)(dropUl) && this.preventExpand === false) {
        dropUl.style.display = 'block';
      }

      if ((0, _ej2Base.isNullOrUndefined)(dropUl) && this.preventExpand === true) {
        if ((0, _ej2Base.isNullOrUndefined)(dropIcon)) {
          _ej2Lists.ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }

        var icon = (0, _ej2Base.select)('div.' + ICON, dropLi);

        if (icon) {
          icon.classList.add('e-icon-expandable');
        }

        dropUl = _ej2Lists.ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);

        if (icon) {
          (0, _ej2Base.removeClass)([icon], COLLAPSIBLE);
        } else {
          _ej2Lists.ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }

        dropLi.setAttribute('aria-expanded', 'false');
        dropUl.style.display = 'none';
      }

      if ((0, _ej2Base.isNullOrUndefined)(dropUl)) {
        this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));

        if ((0, _ej2Base.isNullOrUndefined)(dropIcon)) {
          _ej2Lists.ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        }

        var icon = (0, _ej2Base.select)('div.' + ICON, dropLi);

        if (icon) {
          (0, _ej2Base.removeClass)([icon], EXPANDABLE);
        } else {
          _ej2Lists.ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);

          icon = (0, _ej2Base.select)('div.' + ICON, dropLi);
          (0, _ej2Base.removeClass)([icon], EXPANDABLE);
        }

        dropUl = _ej2Lists.ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        this.addExpand(dropLi);
        this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));
      }

      return dropUl;
    };

    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {
      if (dragParentLi && dragParentUl.childElementCount === 0) {
        var dragIcon = (0, _ej2Base.select)('div.' + ICON, dragParentLi);
        (0, _ej2Base.detach)(dragParentUl);
        (0, _ej2Base.detach)(dragIcon);
        var parentId = this.getId(dragParentLi);
        this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);
        this.removeExpand(dragParentLi, true);
      }
    };

    TreeView.prototype.updateAriaLevel = function (dragLi) {
      var level = this.parents(dragLi, '.' + PARENTITEM).length;
      dragLi.setAttribute('aria-level', '' + level);
      this.updateChildAriaLevel((0, _ej2Base.select)('.' + PARENTITEM, dragLi), level + 1);
    };

    TreeView.prototype.updateChildAriaLevel = function (element, level) {
      if (!(0, _ej2Base.isNullOrUndefined)(element)) {
        var cNodes = element.childNodes;

        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          liEle.setAttribute('aria-level', '' + level);
          this.updateChildAriaLevel((0, _ej2Base.select)('.' + PARENTITEM, liEle), level + 1);
        }
      }
    };

    TreeView.prototype.renderVirtualEle = function (e) {
      var pre;

      if (e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      }

      var virEle = this.createElement('div', {
        className: SIBLING
      });
      var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
      e.target.insertBefore(virEle, e.target.children[index]);
    };

    TreeView.prototype.removeVirtualEle = function () {
      var sibEle = (0, _ej2Base.select)('.' + SIBLING);

      if (sibEle) {
        (0, _ej2Base.detach)(sibEle);
      }
    };

    TreeView.prototype.destroyDrag = function () {
      if (this.dragObj && this.dropObj) {
        this.dragObj.destroy();
        this.dropObj.destroy();
      }
    };

    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
      var dropLi = dropTarget ? (0, _ej2Base.closest)(dropTarget, '.' + LISTITEM) : null;
      var dropData = dropLi ? this.getNodeData(dropLi) : null;
      var draggedNode = obj ? obj.dragLi : dragNode;
      var draggedNodeData = obj ? obj.dragData : null;
      var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;
      var dragLiParent = obj.dragLi.parentElement;
      var dragParent = obj.dragLi ? (0, _ej2Base.closest)(dragLiParent, '.' + LISTITEM) : null;
      var targetParent = null;
      var indexValue = null;
      var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
      var iconClass = null;
      var node = drop === true ? draggedNode : dropLi;
      var index = node ? (0, _ej2Base.closest)(node, '.e-list-parent') : null;
      var i = 0;
      dragParent = obj.dragLi && dragParent === null ? (0, _ej2Base.closest)(dragLiParent, '.' + ROOT) : dragParent;
      dragParent = drop === true ? this.dragParent : dragParent;

      if (cloneEle) {
        while (i < 4) {
          if ((0, _ej2Base.select)('.' + ICON, cloneEle).classList.contains(iconCss[i])) {
            iconClass = iconCss[i];
            break;
          }

          i++;
        }
      }

      if (index) {
        var dropTar = 0;

        for (i = 0; i < index.childElementCount; i++) {
          dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;

          if (drop !== true && index.children[i].classList.contains('e-hover')) {
            indexValue = event.offsetY >= 23 ? i + 1 : i;
            break;
          } else if (index.children[i] === node) {
            indexValue = event.offsetY >= 23 ? i : i;
            break;
          }
        }

        indexValue = dropTar !== 0 ? --indexValue : indexValue;
      }

      if (dropTarget) {
        if (newParent.length === 0) {
          targetParent = null;
        } else if (dropTarget.classList.contains(LISTITEM)) {
          targetParent = newParent[0];
        } else {
          targetParent = newParent[1];
        }
      }

      if (dropLi === draggedNode) {
        targetParent = dropLi;
      }

      if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {
        targetParent = dropLi;

        if (drop !== true) {
          level = ++level;
          var parent_2 = targetParent ? (0, _ej2Base.select)('.e-list-parent', targetParent) : null;
          indexValue = parent_2 ? parent_2.children.length : 0;

          if (!(this.fields.dataSource instanceof _ej2Data.DataManager) && parent_2 === null && targetParent) {
            var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;
            indexValue = parent_3 ? parent_3.length : 0;
          }
        }
      }

      return {
        cancel: false,
        clonedNode: cloneEle,
        event: event,
        draggedNode: draggedNode,
        draggedNodeData: draggedNodeData,
        droppedNode: dropLi,
        droppedNodeData: dropData,
        dropIndex: indexValue,
        dropLevel: level,
        draggedParentNode: dragParent,
        dropTarget: targetParent,
        dropIndicator: iconClass,
        target: target
      };
    };

    TreeView.prototype.addFullRow = function (toAdd) {
      var len = this.liList.length;

      if (toAdd) {
        for (var i = 0; i < len; i++) {
          this.createFullRow(this.liList[i]);
        }
      } else {
        for (var i = 0; i < len; i++) {
          var rowDiv = (0, _ej2Base.select)('.' + FULLROW, this.liList[i]);
          (0, _ej2Base.detach)(rowDiv);
        }
      }
    };

    TreeView.prototype.createFullRow = function (item) {
      var rowDiv = this.createElement('div', {
        className: FULLROW
      });
      item.insertBefore(rowDiv, item.childNodes[0]);
    };

    TreeView.prototype.addMultiSelect = function (toAdd) {
      if (toAdd) {
        var liEles = (0, _ej2Base.selectAll)('.' + LISTITEM + ':not([aria-selected="true"])', this.element);

        for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
          var ele = liEles_1[_i];
          ele.setAttribute('aria-selected', 'false');
        }
      } else {
        var liEles = (0, _ej2Base.selectAll)('.' + LISTITEM + '[aria-selected="false"]', this.element);

        for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
          var ele = liEles_2[_a];
          ele.removeAttribute('aria-selected');
        }
      }
    };

    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {
      if (level > 0 && !(0, _ej2Base.isNullOrUndefined)(element)) {
        var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          var icon = (0, _ej2Base.select)('.' + COLLAPSIBLE, (0, _ej2Base.select)('.' + TEXTWRAP, liEle));

          if (!(0, _ej2Base.isNullOrUndefined)(icon)) {
            this.collapseNode(liEle, icon, null);
          }

          this.collapseByLevel((0, _ej2Base.select)('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };

    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {
      var cIcons = this.getVisibleNodes(excludeHiddenNodes, (0, _ej2Base.selectAll)('.' + COLLAPSIBLE, this.element));

      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[i];
        var liEle = (0, _ej2Base.closest)(icon, '.' + LISTITEM);
        this.collapseNode(liEle, icon, null);
      }
    };

    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {
      if (level > 0 && !(0, _ej2Base.isNullOrUndefined)(element)) {
        var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);

        for (var i = 0, len = eNodes.length; i < len; i++) {
          var liEle = eNodes[i];
          var icon = (0, _ej2Base.select)('.' + EXPANDABLE, (0, _ej2Base.select)('.' + TEXTWRAP, liEle));

          if (!(0, _ej2Base.isNullOrUndefined)(icon)) {
            this.expandAction(liEle, icon, null);
          }

          this.expandByLevel((0, _ej2Base.select)('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };

    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {
      var eIcons = this.getVisibleNodes(excludeHiddenNodes, (0, _ej2Base.selectAll)('.' + EXPANDABLE, this.element));

      for (var i = 0, len = eIcons.length; i < len; i++) {
        var icon = eIcons[i];
        var liEle = (0, _ej2Base.closest)(icon, '.' + LISTITEM);
        this.expandAction(liEle, icon, null, true);
      }
    };

    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {
      var vNodes = Array.prototype.slice.call(nodes);

      if (excludeHiddenNodes) {
        for (var i = 0; i < vNodes.length; i++) {
          if (!(0, _ej2Base.isVisible)(vNodes[i])) {
            vNodes.splice(i, 1);
            i--;
          }
        }
      }

      return vNodes;
    };

    TreeView.prototype.removeNode = function (node) {
      var dragParentUl = (0, _ej2Base.closest)(node, '.' + PARENTITEM);
      var dragParentLi = (0, _ej2Base.closest)(dragParentUl, '.' + LISTITEM);
      (0, _ej2Base.detach)(node);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateInstance();
      this.removeData(node);
    };

    TreeView.prototype.updateInstance = function () {
      this.updateList();
      this.updateSelectedNodes();
      this.updateExpandedNodes();
    };

    TreeView.prototype.updateList = function () {
      this.liList = Array.prototype.slice.call((0, _ej2Base.selectAll)('.' + LISTITEM, this.element));
    };

    TreeView.prototype.updateSelectedNodes = function () {
      this.setProperties({
        selectedNodes: []
      }, true);
      var sNodes = (0, _ej2Base.selectAll)('.' + ACTIVE, this.element);
      this.selectGivenNodes(sNodes);
    };

    TreeView.prototype.updateExpandedNodes = function () {
      this.setProperties({
        expandedNodes: []
      }, true);
      var eNodes = (0, _ej2Base.selectAll)('[aria-expanded="true"]', this.element);

      for (var i = 0, len = eNodes.length; i < len; i++) {
        this.addExpand(eNodes[i]);
      }
    };

    TreeView.prototype.removeData = function (node) {
      if (this.dataType === 1) {
        var dm = new _ej2Data.DataManager(this.treeData);
        var id = this.getId(node);
        var data = {};
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = newId;
        dm.remove(this.fields.id, data);
        this.removeChildNodes(id);
      } else {
        var id = this.getId(node);
        this.updateChildField(this.treeData, this.fields, id, null, null, true);
      }
    };

    TreeView.prototype.removeChildNodes = function (parentId) {
      var cNodes = this.getChildGroup(this.groupedData, parentId, false);
      var childData = [];

      if (cNodes) {
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var dm = new _ej2Data.DataManager(this.treeData);
          var id = (0, _ej2Base.getValue)(this.fields.id, cNodes[i]).toString();
          var data = {};
          var currId = this.isNumberTypeId ? parseFloat(id) : id;
          data[this.fields.id] = currId;
          var nodeData = dm.remove(this.fields.id, data);
          childData.push(nodeData[0]);
          this.removeChildNodes(id);
        }
      }

      return childData;
    };

    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[i]);

        if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
          continue;
        }

        var icon = (0, _ej2Base.select)('.' + selector, (0, _ej2Base.select)('.' + TEXTWRAP, liEle));

        if (!(0, _ej2Base.isNullOrUndefined)(icon)) {
          toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
        }
      }
    };

    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {
      if (nodes.length === 0) {
        return;
      }

      var sNodes = this.getSortedData(nodes);
      var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;

      if (isRemote) {
        this.updateMapper(level);
      }

      var li = _ej2Lists.ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);

      var dropUl;

      if (!dropEle) {
        dropUl = dropLi ? this.expandParent(dropLi) : (0, _ej2Base.select)('.' + PARENTITEM, this.element);
      } else {
        dropUl = dropEle;
      }

      var refNode = dropUl.childNodes[index];

      for (var i = 0; i < li.length; i++) {
        dropUl.insertBefore(li[i], refNode);
      }

      var id = this.getId(dropLi);

      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, id, 'hasChildren', true);
        var refId = this.getId(refNode);
        var pos = (0, _ej2Base.isNullOrUndefined)(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);

        for (var j = 0; j < nodes.length; j++) {
          if (!(0, _ej2Base.isNullOrUndefined)(id)) {
            var currId = this.isNumberTypeId ? parseFloat(id) : id;
            (0, _ej2Base.setValue)(this.fields.parentID, currId, nodes[j]);
          }

          this.treeData.splice(pos, 0, nodes[j]);
          pos++;
        }
      } else {
        this.addChildData(this.treeData, this.fields, id, nodes, index);
      }

      this.finalizeNode(dropUl);
    };

    TreeView.prototype.updateMapper = function (level) {
      var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
      this.updateListProp(mapper);
    };

    TreeView.prototype.updateListProp = function (mapper) {
      var prop = this.getActualProperties(mapper);
      this.listBaseOption.fields = prop;
      this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';
    };

    TreeView.prototype.getDataPos = function (obj, mapper, id) {
      var pos = null;

      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = (0, _ej2Base.getValue)(mapper.id, obj[i]);

        if (obj[i] && nodeId && nodeId.toString() === id) {
          return i;
        } else if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, obj[i]))) {
          var data = (0, _ej2Base.getValue)(mapper.child, obj[i]);
          pos = this.getDataPos(data, this.getChildMapper(mapper), id);

          if (pos !== null) {
            break;
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', obj[i]))) {
          var items = (0, _ej2Base.getValue)('child', obj[i]);
          pos = this.getDataPos(items, this.getChildMapper(mapper), id);

          if (pos !== null) {
            break;
          }
        }
      }

      return pos;
    };

    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {
      var updated;

      if ((0, _ej2Base.isNullOrUndefined)(id)) {
        index = (0, _ej2Base.isNullOrUndefined)(index) ? obj.length : index;

        for (var k = 0, len = data.length; k < len; k++) {
          obj.splice(index, 0, data[k]);
          index++;
        }

        return updated;
      }

      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = (0, _ej2Base.getValue)(mapper.id, obj[i]);

        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) || this.fields.dataSource instanceof _ej2Data.DataManager && obj[i].hasOwnProperty('child')) {
            var key = typeof mapper.child === 'string' ? mapper.child : 'child';
            var childData = (0, _ej2Base.getValue)(key, obj[i]);
            index = (0, _ej2Base.isNullOrUndefined)(index) ? childData.length : index;

            for (var k = 0, len = data.length; k < len; k++) {
              childData.splice(index, 0, data[k]);
              index++;
            }
          } else {
            var key = typeof mapper.child === 'string' ? mapper.child : 'child';
            obj[i][key] = data;
          }

          return true;
        } else if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, obj[i]))) {
          var childObj = (0, _ej2Base.getValue)(mapper.child, obj[i]);
          updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);

          if (updated !== undefined) {
            break;
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', obj[i]))) {
          var childData = (0, _ej2Base.getValue)('child', obj[i]);
          updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);

          if (updated !== undefined) {
            break;
          }
        }
      }

      return updated;
    };

    TreeView.prototype.doDisableAction = function (nodes) {
      var validNodes = this.nodeType(nodes);
      var validID = this.checkValidId(validNodes);
      this.validArr = [];

      for (var i = 0, len = validID.length; i < len; i++) {
        var id = validID[i][this.fields.id].toString();

        if (id && this.disableNode.indexOf(id) === -1) {
          this.disableNode.push(id);
        }

        var liEle = this.getElement(id);

        if (liEle) {
          liEle.setAttribute('aria-disabled', 'true');
          (0, _ej2Base.addClass)([liEle], DISABLE);
        }
      }
    };

    TreeView.prototype.doEnableAction = function (nodes) {
      var strNodes = this.nodeType(nodes);

      for (var i = 0, len = strNodes.length; i < len; i++) {
        var liEle = this.getElement(strNodes[i]);
        var id = strNodes[i];

        if (id && this.disableNode.indexOf(id) !== -1) {
          this.disableNode.splice(this.disableNode.indexOf(id), 1);
        }

        if (liEle) {
          liEle.removeAttribute('aria-disabled');
          (0, _ej2Base.removeClass)([liEle], DISABLE);
        }
      }
    };

    TreeView.prototype.nodeType = function (nodes) {
      var validID = [];

      for (var i = 0, len = nodes.length; i < len; i++) {
        var id = void 0;

        if (typeof nodes[i] == "string") {
          id = nodes[i] ? nodes[i].toString() : null;
        } else if (typeof nodes[i] === "object") {
          id = nodes[i] ? nodes[i].getAttribute("data-uid").toString() : null;
        }

        if (validID.indexOf(id) == -1) {
          validID.push(id);
        }
      }

      return validID;
    };

    TreeView.prototype.checkValidId = function (node) {
      var _this = this;

      if (this.dataType === 1) {
        this.validArr = this.treeData.filter(function (data) {
          return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
        });
      } else if (this.dataType === 2) {
        for (var k = 0; k < this.treeData.length; k++) {
          var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;

          if (node.indexOf(id) !== -1) {
            this.validArr.push(this.treeData[k]);
          }

          var childItems = (0, _ej2Base.getValue)(this.fields.child.toString(), this.treeData[k]);

          if (childItems) {
            this.filterNestedChild(childItems, node);
          }
        }
      }

      return this.validArr;
    };

    TreeView.prototype.filterNestedChild = function (treeData, nodes) {
      for (var k = 0; k < treeData.length; k++) {
        var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;

        if (nodes.indexOf(id) !== -1) {
          this.validArr.push(treeData[k]);
        }

        var childItems = (0, _ej2Base.getValue)(this.fields.child.toString(), treeData[k]);

        if (childItems) {
          this.filterNestedChild(childItems, nodes);
        }
      }
    };

    TreeView.prototype.setTouchClass = function () {
      var ele = (0, _ej2Base.closest)(this.element, '.' + BIGGER);
      this.touchClass = (0, _ej2Base.isNullOrUndefined)(ele) ? '' : SMALL;
    };

    TreeView.prototype.updatePersistProp = function () {
      this.removeField(this.treeData, this.fields, ['selected', 'expanded']);
      var sleNodes = this.selectedNodes;

      for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
        this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);
      }

      var enodes = this.expandedNodes;

      for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
        this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);
      }

      if (this.showCheckBox) {
        this.removeField(this.treeData, this.fields, ['isChecked']);
        var cnodes = this.checkedNodes;

        for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
          this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);
        }
      }
    };

    TreeView.prototype.removeField = function (obj, mapper, names) {
      if ((0, _ej2Base.isNullOrUndefined)(obj) || (0, _ej2Base.isNullOrUndefined)(mapper)) {
        return;
      }

      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        for (var j = 0; j < names.length; j++) {
          var field = this.getMapperProp(mapper, names[j]);

          if (!(0, _ej2Base.isNullOrUndefined)(obj[i][field])) {
            delete obj[i][field];
          }
        }

        if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, obj[i]))) {
          this.removeField((0, _ej2Base.getValue)(mapper.child, obj[i]), this.getChildMapper(mapper), names);
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', obj[i]))) {
          this.removeField((0, _ej2Base.getValue)('child', obj[i]), this.getChildMapper(mapper), names);
        }
      }
    };

    TreeView.prototype.getMapperProp = function (mapper, fieldName) {
      switch (fieldName) {
        case 'selected':
          return !(0, _ej2Base.isNullOrUndefined)(mapper.selected) ? mapper.selected : 'selected';

        case 'expanded':
          return !(0, _ej2Base.isNullOrUndefined)(mapper.expanded) ? mapper.expanded : 'expanded';

        case 'isChecked':
          return !(0, _ej2Base.isNullOrUndefined)(mapper.isChecked) ? mapper.isChecked : 'isChecked';

        case 'hasChildren':
          return !(0, _ej2Base.isNullOrUndefined)(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';

        default:
          return fieldName;
      }
    };

    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {
      var childNodes;

      if ((0, _ej2Base.isNullOrUndefined)(id)) {
        return;
      } else if (this.dataType === 1) {
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        var resultData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.id, 'equal', newId, false));
        (0, _ej2Base.setValue)(this.getMapperProp(mapper, key), value, resultData[0]);
      } else {
        this.updateChildField(obj, mapper, id, key, value);
      }
    };

    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {
      var removedData;

      if ((0, _ej2Base.isNullOrUndefined)(obj)) {
        return removedData;
      }

      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = (0, _ej2Base.getValue)(mapper.id, obj[i]);

        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (remove) {
            removedData = obj.splice(i, 1);
          } else {
            (0, _ej2Base.setValue)(this.getMapperProp(mapper, key), value, obj[i]);
            removedData = [];
          }

          return removedData;
        } else if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, obj[i]))) {
          var childData = (0, _ej2Base.getValue)(mapper.child, obj[i]);
          removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);

          if (removedData !== undefined) {
            break;
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', obj[i]))) {
          var childItems = (0, _ej2Base.getValue)('child', obj[i]);
          removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);

          if (removedData !== undefined) {
            break;
          }
        }
      }

      return removedData;
    };

    TreeView.prototype.triggerEvent = function () {
      if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {
        this.updateBlazorTemplate();
      }

      var eventArgs = {
        data: this.treeData
      };
      this.trigger('dataSourceChanged', eventArgs);
    };

    TreeView.prototype.updateBlazorTemplate = function () {
      (0, _ej2Base.updateBlazorTemplate)(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);
    };

    TreeView.prototype.wireInputEvents = function (inpEle) {
      _ej2Base.EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);
    };

    TreeView.prototype.wireEditingEvents = function (toBind) {
      if (toBind) {
        var proxy_2 = this;
        this.touchEditObj = new _ej2Base.Touch(this.element, {
          tap: function (e) {
            if (e.tapCount === 2) {
              e.originalEvent.preventDefault();
              proxy_2.editingHandler(e.originalEvent);
            }
          }
        });
      } else {
        if (this.touchEditObj) {
          this.touchEditObj.destroy();
        }
      }
    };

    TreeView.prototype.wireClickEvent = function (toBind) {
      if (toBind) {
        var proxy_3 = this;
        this.touchClickObj = new _ej2Base.Touch(this.element, {
          tap: function (e) {
            proxy_3.clickHandler(e);
          }
        });
      } else {
        if (this.touchClickObj) {
          this.touchClickObj.destroy();
        }
      }
    };

    TreeView.prototype.wireExpandOnEvent = function (toBind) {
      var _this = this;

      if (toBind) {
        var proxy_4 = this;
        this.touchExpandObj = new _ej2Base.Touch(this.element, {
          tap: function (e) {
            if (_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && e.tapCount === 2) {
              proxy_4.expandHandler(e);
            }
          }
        });
      } else {
        if (this.touchExpandObj) {
          this.touchExpandObj.destroy();
        }
      }
    };

    TreeView.prototype.mouseDownHandler = function (e) {
      this.mouseDownStatus = true;

      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }

      if (e.ctrlKey && this.allowMultiSelection) {
        _ej2Base.EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);
      }
    };

    ;

    TreeView.prototype.preventContextMenu = function (e) {
      e.preventDefault();
    };

    TreeView.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);

      this.wireClickEvent(true);

      if (this.expandOnType !== 'None') {
        this.wireExpandOnEvent(true);
      }

      _ej2Base.EventHandler.add(this.element, 'focus', this.focusIn, this);

      _ej2Base.EventHandler.add(this.element, 'blur', this.focusOut, this);

      _ej2Base.EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);

      _ej2Base.EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);

      this.keyboardModule = new _ej2Base.KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: 'keydown'
      });
    };

    TreeView.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);

      this.wireClickEvent(false);
      this.wireExpandOnEvent(false);

      _ej2Base.EventHandler.remove(this.element, 'focus', this.focusIn);

      _ej2Base.EventHandler.remove(this.element, 'blur', this.focusOut);

      _ej2Base.EventHandler.remove(this.element, 'mouseover', this.onMouseOver);

      _ej2Base.EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);

      this.keyboardModule.destroy();
    };

    TreeView.prototype.parents = function (element, selector) {
      var matched = [];
      var el = element.parentNode;

      while (!(0, _ej2Base.isNullOrUndefined)(el)) {
        if ((0, _ej2Base.matches)(el, selector)) {
          matched.push(el);
        }

        el = el.parentNode;
      }

      return matched;
    };

    TreeView.prototype.isDescendant = function (parent, child) {
      var node = child.parentNode;

      while (!(0, _ej2Base.isNullOrUndefined)(node)) {
        if (node === parent) {
          return true;
        }

        node = node.parentNode;
      }

      return false;
    };

    TreeView.prototype.showSpinner = function (element) {
      (0, _ej2Base.addClass)([element], LOAD);
      (0, _ej2Popups.createSpinner)({
        target: element,
        width: _ej2Base.Browser.isDevice ? 16 : 14
      }, this.createElement);
      (0, _ej2Popups.showSpinner)(element);
    };

    TreeView.prototype.hideSpinner = function (element) {
      (0, _ej2Popups.hideSpinner)(element);
      element.innerHTML = '';
      (0, _ej2Base.removeClass)([element], LOAD);
    };

    TreeView.prototype.setCheckedNodes = function (nodes) {
      nodes = JSON.parse(JSON.stringify(nodes));
      this.uncheckAll(this.checkedNodes);
      this.setIndeterminate(nodes);

      if (nodes.length > 0) {
        this.checkAll(nodes);
      }
    };
    /**
     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel
     */


    TreeView.prototype.setValidCheckedNode = function (node) {
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new _ej2Data.DataManager(this.treeData).executeLocal(new _ej2Data.Query().where(mapper.id, 'equal', node, true));

        if (resultData[0]) {
          this.setChildCheckState(resultData, node, resultData[0]);

          if (this.autoCheck) {
            var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
            var childNodes = this.getChildNodes(this.treeData, parent_4);
            var count = 0;

            for (var len = 0; len < childNodes.length; len++) {
              var childId = childNodes[len][this.fields.id].toString();

              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }

            if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
              this.checkedNodes.push(parent_4);
            }
          }
        }
      } else if (this.dataType === 2) {
        for (var a = 0; a < this.treeData.length; a++) {
          var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';

          if (index === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
            break;
          }

          var childItems = (0, _ej2Base.getValue)(this.fields.child.toString(), this.treeData[a]);

          if (childItems) {
            this.setChildCheckState(childItems, node, this.treeData[a]);
          }
        }
      }
    };
    /**
     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)
     */


    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {
      var checkedParent;
      var count = 0;

      if (this.dataType === 1) {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
        }

        for (var index = 0; index < childItems.length; index++) {
          var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;

          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
              this.checkedNodes.push(checkNode);
            }
          }

          if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }

          var subChildItems = this.getChildNodes(this.treeData, checkNode);

          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, treeData);
          }
        }
      } else {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';
        }

        for (var index = 0; index < childItems.length; index++) {
          var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';

          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }

          if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }

          var subChildItems = (0, _ej2Base.getValue)(this.fields.child.toString(), childItems[index]);

          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, childItems[index]);
          }

          if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
            count++;
          }

          if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
            this.checkedNodes.push(checkedParent);
          }
        }
      }
    };

    TreeView.prototype.setIndeterminate = function (nodes) {
      for (var i = 0; i < nodes.length; i++) {
        this.setValidCheckedNode(nodes[i]);
      }
    };

    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {
      if (this.dataType === 1) {
        var pos = this.getDataPos(this.treeData, this.fields, id);
        this.treeData.splice(pos, 1, newData);

        if (isRefreshChild) {
          this.removeChildNodes(id);

          for (var j = 0; j < childValue.length; j++) {
            this.treeData.splice(pos, 0, childValue[j]);
            pos++;
          }
        }

        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);
      }
    };

    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {
      var found;

      for (var i = 0, objlen = treeData.length; i < objlen; i++) {
        var nodeId = (0, _ej2Base.getValue)(mapper.id, treeData[i]);

        if (treeData[i] && nodeId && nodeId.toString() === currID) {
          treeData[i] = newData[0];
          return true;
        } else if (typeof mapper.child === 'string' && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)(mapper.child, treeData[i]))) {
          var childObj = (0, _ej2Base.getValue)(mapper.child, treeData[i]);
          found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);

          if (found !== undefined) {
            break;
          }
        } else if (this.fields.dataSource instanceof _ej2Data.DataManager && !(0, _ej2Base.isNullOrUndefined)((0, _ej2Base.getValue)('child', treeData[i]))) {
          var childData = (0, _ej2Base.getValue)('child', treeData[i]);
          found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);

          if (found !== undefined) {
            break;
          }
        }
      }

      return found;
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {TreeView} newProp
     * @param  {TreeView} oldProp
     * @returns void
     * @private
     */
    // tslint:disable-next-line:max-func-body-length


    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'allowDragAndDrop':
            this.setDragAndDrop(this.allowDragAndDrop);
            break;

          case 'allowEditing':
            this.wireEditingEvents(this.allowEditing);
            break;

          case 'allowMultiSelection':
            if (this.selectedNodes.length > 1) {
              var sNode = this.getElement(this.selectedNodes[0]);
              this.isLoaded = false;
              this.removeSelectAll();
              this.selectNode(sNode, null);
              this.isLoaded = true;
            }

            this.setMultiSelect(this.allowMultiSelection);
            this.addMultiSelect(this.allowMultiSelection);
            break;

          case 'checkedNodes':
            if (this.showCheckBox) {
              this.checkedNodes = oldProp.checkedNodes;
              this.setCheckedNodes(newProp.checkedNodes);
            }

            break;

          case 'autoCheck':
            if (this.showCheckBox) {
              this.autoCheck = newProp.autoCheck;
              this.ensureIndeterminate();
            }

            break;

          case 'cssClass':
            this.setCssClass(oldProp.cssClass, newProp.cssClass);
            break;

          case 'enableRtl':
            this.setEnableRtl();
            break;

          case 'expandedNodes':
            this.isAnimate = false;

            if (!this.isBlazorPlatform) {
              this.setProperties({
                expandedNodes: []
              }, true);
            }

            this.collapseAll();
            this.isInitalExpand = true;

            if (!this.isBlazorPlatform) {
              this.setProperties({
                expandedNodes: (0, _ej2Base.isNullOrUndefined)(newProp.expandedNodes) ? [] : newProp.expandedNodes
              }, true);
            }

            this.doExpandAction();
            this.isInitalExpand = false;
            this.isAnimate = true;
            break;

          case 'expandOn':
            this.wireExpandOnEvent(false);
            this.setExpandOnType();

            if (this.expandOnType !== 'None') {
              this.wireExpandOnEvent(true);
            }

            break;

          case 'fields':
            this.isAnimate = false;
            this.isFieldChange = true;
            this.initialRender = true;
            this.updateListProp(this.fields);
            this.reRenderNodes();
            this.initialRender = false;
            this.isAnimate = true;
            this.isFieldChange = false;
            break;

          case 'fullRowSelect':
            this.setFullRow(this.fullRowSelect);
            this.addFullRow(this.fullRowSelect);
            break;

          case 'loadOnDemand':
            if (this.loadOnDemand === false && !this.onLoaded) {
              var nodes = this.element.querySelectorAll('li');
              var i = 0;

              while (i < nodes.length) {
                this.renderChildNodes(nodes[i], true, null, true);
                i++;
              }

              this.onLoaded = true;
            }

            break;

          case 'nodeTemplate':
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
            this.reRenderNodes();
            break;

          case 'selectedNodes':
            this.removeSelectAll();
            this.setProperties({
              selectedNodes: newProp.selectedNodes
            }, true);
            this.doSelectionAction();
            break;

          case 'showCheckBox':
            this.reRenderNodes();
            break;

          case 'sortOrder':
            this.reRenderNodes();
            break;
        }
      }
    };
    /**
     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.
     */


    TreeView.prototype.destroy = function () {
      (0, _ej2Base.resetBlazorTemplate)(this.element.id + 'nodeTemplate', 'NodeTemplate');
      this.element.removeAttribute('aria-activedescendant');
      this.element.removeAttribute('tabindex');
      this.unWireEvents();
      this.wireEditingEvents(false);
      this.rippleFn();
      this.rippleIconFn();
      this.setCssClass(this.cssClass, null);
      this.setDragAndDrop(false);
      this.setFullRow(false);

      if (this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      }

      _super.prototype.destroy.call(this);
    };
    /**
     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,
     * then the nodes are added as children of the given parentID or in the root level of TreeView.
     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.
     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.
     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.
     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
     */


    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {
      if ((0, _ej2Base.isNullOrUndefined)(nodes)) {
        return;
      }

      nodes = JSON.parse(JSON.stringify(nodes));
      var dropLi = this.getElement(target);
      this.preventExpand = preventTargetExpand;

      if (this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {
        var dropUl_1;
        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;
        var proxy_5 = this;

        if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {
          proxy_5.renderChildNodes(dropLi, null, function () {
            dropUl_1 = dropLi.querySelector('.' + PARENTITEM);
            proxy_5.addGivenNodes(nodes, dropLi, index, true, dropUl_1);
            proxy_5.triggerEvent();
          });
        } else {
          this.addGivenNodes(nodes, dropLi, index, true);
          this.triggerEvent();
        }
      } else if (this.dataType === 2) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        if (dropLi) {
          this.addGivenNodes(nodes, dropLi, index);
        } else {
          nodes = this.getSortedData(nodes);

          for (var i = 0; i < nodes.length; i++) {
            var pid = (0, _ej2Base.getValue)(this.fields.parentID, nodes[i]);
            dropLi = pid ? this.getElement(pid.toString()) : pid;
            this.addGivenNodes([nodes[i]], dropLi, index);
          }
        }

        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }

      if (this.showCheckBox && dropLi) {
        this.ensureParentCheckState(dropLi);
      }

      if (this.fields.dataSource instanceof _ej2Data.DataManager === false || this.fields.dataSource instanceof _ej2Data.DataManager && this.fields.dataSource.adaptorName === 'BlazorAdaptor') {
        this.preventExpand = false;
        this.triggerEvent();
      }
    };
    /**
     * Instead of clicking on the TreeView node for editing, we can enable it by using
     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox
     * will be created for the particular node thus allowing us to edit it.
     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
     */


    TreeView.prototype.beginEdit = function (node) {
      var ele = this.getElement(node);

      if (!(0, _ej2Base.isNullOrUndefined)(ele)) {
        this.createTextbox(ele, null);
      }
    };
    /**
     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
     * as argument to this method.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
     */


    TreeView.prototype.checkAll = function (nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, true);
      }
    };
    /**
     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse
     * a specific level of nodes, set **level** as argument to collapseAll method.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.
     * @param  {number} level - TreeView nodes will collapse up to the given level.
     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.
     */


    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {
      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        this.doGivenAction(nodes, COLLAPSIBLE, false);
      } else {
        if (level > 0) {
          this.collapseByLevel((0, _ej2Base.select)('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.collapseAllNodes(excludeHiddenNodes);
        }
      }
    };
    /**
     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
     */


    TreeView.prototype.disableNodes = function (nodes) {
      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        this.doDisableAction(nodes);
      }
    };
    /**
     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
     */


    TreeView.prototype.enableNodes = function (nodes) {
      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        this.doEnableAction(nodes);
      }
    };
    /**
     * Ensures visibility of the TreeView node by using node ID or node element.
     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property
     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.
     */


    TreeView.prototype.ensureVisible = function (node) {
      var liEle = this.getElement(node);

      if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
        return;
      }

      var parents = this.parents(liEle, '.' + LISTITEM);
      this.expandAll(parents);
      setTimeout(function () {
        liEle.scrollIntoView(true);
      }, 450);
    };
    /**
     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes
     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting
     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.
     * @param  {number} level - TreeView nodes will expand up to the given level.
     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.
     */


    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {
      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        this.doGivenAction(nodes, EXPANDABLE, true);
      } else {
        if (level > 0) {
          this.expandByLevel((0, _ej2Base.select)('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.expandAllNodes(excludeHiddenNodes);
        }
      }
    };
    /**
     * Gets all the checked nodes including child, whether it is loaded or not.
     */


    TreeView.prototype.getAllCheckedNodes = function () {
      var checkNodes = this.checkedNodes;
      return checkNodes;
    };
    /**
    * Gets all the disabled nodes including child, whether it is loaded or not.
    */


    TreeView.prototype.getDisabledNodes = function () {
      var disabledNodes = this.disableNode;
      return disabledNodes;
    };
    /**
     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
     * @BlazorType NodeData
     */


    TreeView.prototype.getNode = function (node) {
      var ele = this.getElement(node);
      return this.getNodeData(ele, true);
    };
    /**
     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,
     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.
     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source
     * of the corresponding node otherwise it will return the entire updated data source of TreeView.
     * * The updated data source also contains custom attributes if you specified in data source.
     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.
     * @isGenericType true
     */


    TreeView.prototype.getTreeData = function (node) {
      var id = this.getId(node);
      this.updatePersistProp();

      if ((0, _ej2Base.isNullOrUndefined)(id)) {
        return this.treeData;
      } else {
        var data = this.getNodeObject(id);
        return (0, _ej2Base.isNullOrUndefined)(data) ? [] : [data];
      }
    };
    /**
     * Moves the collection of nodes within the same TreeView based on target or its index position.
     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.
     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
     * @param  {number} index - Specifies the index to place the moved nodes in the target element.
     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.
     */


    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {
      var dropLi = this.getElement(target);

      if ((0, _ej2Base.isNullOrUndefined)(dropLi)) {
        return;
      }

      for (var i = 0; i < sourceNodes.length; i++) {
        var dragLi = this.getElement(sourceNodes[i]);

        if ((0, _ej2Base.isNullOrUndefined)(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          continue;
        }

        this.preventExpand = preventTargetExpand;
        this.dropAsChildNode(dragLi, dropLi, this, index);
      }

      if (this.fields.dataSource instanceof _ej2Data.DataManager === false) {
        this.preventExpand = false;
      }

      this.triggerEvent();
    };
    /**
     * Refreshes a particular node of the TreeView.
     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.
     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.
     */


    TreeView.prototype.refreshNode = function (target, newData) {
      if ((0, _ej2Base.isNullOrUndefined)(target) || (0, _ej2Base.isNullOrUndefined)(newData)) {
        return;
      }

      var id;
      var isRefreshChild = false;

      if (this.dataType == 1 && newData.length > 1) {
        isRefreshChild = true;
      } else if (this.dataType == 2 && newData.length === 1) {
        var updatedChildValue = (0, _ej2Base.getValue)(this.fields.child.toString(), newData[0]);

        if (!(0, _ej2Base.isNullOrUndefined)(updatedChildValue)) {
          isRefreshChild = true;
        }
      }

      var liEle = this.getElement(target);
      id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;
      this.refreshData = this.getNodeObject(id);
      newData = JSON.parse(JSON.stringify(newData)); // tslint:disable

      var newNodeData;
      var parentData;

      if (this.dataType == 1 && isRefreshChild) {
        for (var k = 0; k < newData.length; k++) {
          if ((0, _ej2Base.isNullOrUndefined)(newData[k][this.fields.parentID])) {
            parentData = newData[k];
            newData.splice(k, 1);
            break;
          }
        }

        newNodeData = (0, _ej2Base.extend)({}, this.refreshData, parentData);
      } else {
        newNodeData = (0, _ej2Base.extend)({}, this.refreshData, newData[0]);
      }

      if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        return;
      }

      this.isRefreshed = true;
      var level = parseFloat(liEle.getAttribute('aria-level'));

      var newliEle = _ej2Lists.ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);

      var ul = (0, _ej2Base.select)('.' + PARENTITEM, liEle);
      var childItems = (0, _ej2Base.getValue)(this.fields.child.toString(), newNodeData);

      if (isRefreshChild && ul || isRefreshChild && !(0, _ej2Base.isNullOrUndefined)(childItems)) {
        liEle.innerHTML = newliEle[0].innerHTML;
        this.updatePosition(id, newNodeData, isRefreshChild, newData);

        if (isRefreshChild && ul) {
          this.expandAll([id]);
        }
      } else {
        var txtEle = (0, _ej2Base.select)('.' + TEXTWRAP, liEle);
        var newTextEle = (0, _ej2Base.select)('.' + TEXTWRAP, newliEle[0]);
        var icon = (0, _ej2Base.select)('div.' + ICON, txtEle);
        var newIcon = (0, _ej2Base.select)('div.' + ICON, newTextEle);

        if (icon && newIcon) {
          if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
            (0, _ej2Base.removeClass)([newIcon], EXPANDABLE);
            (0, _ej2Base.addClass)([newIcon], COLLAPSIBLE);
          } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
            (0, _ej2Base.removeClass)([newIcon], COLLAPSIBLE);
            (0, _ej2Base.addClass)([newIcon], EXPANDABLE);
          } else if (icon.classList.contains('interaction')) {
            (0, _ej2Base.addClass)([newIcon], 'interaction');
          }
        }

        txtEle.innerHTML = newTextEle.innerHTML;
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
      }

      if (newNodeData[this.fields.tooltip]) {
        liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
      }

      if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
        var attr = {};
        (0, _ej2Base.merge)(attr, newNodeData[this.fields.htmlAttributes]);

        if (attr.class) {
          (0, _ej2Base.addClass)([liEle], attr.class.split(' '));
          delete attr.class;
        } else {
          (0, _ej2Base.attributes)(liEle, attr);
        }
      }

      this.isRefreshed = false;
      this.triggerEvent();
    };
    /**
     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
     */


    TreeView.prototype.removeNodes = function (nodes) {
      if (!(0, _ej2Base.isNullOrUndefined)(nodes)) {
        for (var i = 0, len = nodes.length; i < len; i++) {
          var liEle = this.getElement(nodes[i]);

          if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
            continue;
          }

          this.removeNode(liEle);
        }

        if (this.dataType === 1) {
          this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        }

        this.triggerEvent();
      }
    };
    /**
     * Replaces the text of the TreeView node with the given text.
     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.
     * @param  {string} newText - Specifies the new text of TreeView node.
     */


    TreeView.prototype.updateNode = function (target, newText) {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(target) || (0, _ej2Base.isNullOrUndefined)(newText) || !this.allowEditing) {
        return;
      }

      var liEle = this.getElement(target);

      if ((0, _ej2Base.isNullOrUndefined)(liEle)) {
        return;
      }

      var txtEle = (0, _ej2Base.select)('.' + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var eventArgs = this.getEditEvent(liEle, null, null);
      this.trigger('nodeEditing', eventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.appendNewText(liEle, txtEle, newText, false);
        }
      });
    };
    /**
     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
     * as argument to this method.
     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.
     */


    TreeView.prototype.uncheckAll = function (nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, false);
      }
    };

    var TreeView_1;

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "allowDragAndDrop", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "allowEditing", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "allowMultiSelection", void 0);

    __decorate([(0, _ej2Base.Complex)({}, NodeAnimationSettings)], TreeView.prototype, "animation", void 0);

    __decorate([(0, _ej2Base.Property)()], TreeView.prototype, "checkedNodes", void 0);

    __decorate([(0, _ej2Base.Property)('')], TreeView.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "enablePersistence", void 0);

    __decorate([(0, _ej2Base.Property)()], TreeView.prototype, "expandedNodes", void 0);

    __decorate([(0, _ej2Base.Property)('Auto')], TreeView.prototype, "expandOn", void 0);

    __decorate([(0, _ej2Base.Complex)({}, FieldsSettings)], TreeView.prototype, "fields", void 0);

    __decorate([(0, _ej2Base.Property)(true)], TreeView.prototype, "fullRowSelect", void 0);

    __decorate([(0, _ej2Base.Property)(true)], TreeView.prototype, "loadOnDemand", void 0);

    __decorate([(0, _ej2Base.Property)()], TreeView.prototype, "nodeTemplate", void 0);

    __decorate([(0, _ej2Base.Property)()], TreeView.prototype, "selectedNodes", void 0);

    __decorate([(0, _ej2Base.Property)('None')], TreeView.prototype, "sortOrder", void 0);

    __decorate([(0, _ej2Base.Property)(false)], TreeView.prototype, "showCheckBox", void 0);

    __decorate([(0, _ej2Base.Property)(true)], TreeView.prototype, "autoCheck", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "actionFailure", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "dataBound", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "dataSourceChanged", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "drawNode", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "destroyed", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "keyPress", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeChecked", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeChecking", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeClicked", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeCollapsed", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeCollapsing", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeDragging", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeDragStart", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeDragStop", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeDropped", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeEdited", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeEditing", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeExpanded", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeExpanding", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeSelected", void 0);

    __decorate([(0, _ej2Base.Event)()], TreeView.prototype, "nodeSelecting", void 0);

    TreeView = TreeView_1 = __decorate([_ej2Base.NotifyPropertyChanges], TreeView);
    return TreeView;
  }(_ej2Base.Component);

  _exports.TreeView = TreeView;
});;
define('@syncfusion/ej2-popups/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-popups/src/common/collision',["exports", "./position", "@syncfusion/ej2-base"], function (_exports, _position, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.fit = fit;
  _exports.isCollide = isCollide;
  _exports.flip = flip;

  /**
   * Collision module.
   */
  var parentDocument;
  var targetContainer;

  function fit(element, viewPortElement, axis, position) {
    if (viewPortElement === void 0) {
      viewPortElement = null;
    }

    if (axis === void 0) {
      axis = {
        X: false,
        Y: false
      };
    }

    if (!axis.Y && !axis.X) {
      return {
        left: 0,
        top: 0
      };
    }

    var elemData = element.getBoundingClientRect();
    targetContainer = viewPortElement;
    parentDocument = element.ownerDocument;

    if (!position) {
      position = (0, _position.calculatePosition)(element, 'left', 'top');
    }

    if (axis.X) {
      var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
      var containerLeft = ContainerLeft();
      var containerRight = ContainerRight();
      var overLeft = containerLeft - position.left;
      var overRight = position.left + elemData.width - containerRight;

      if (elemData.width > containerWidth) {
        if (overLeft > 0 && overRight <= 0) {
          position.left = containerRight - elemData.width;
        } else if (overRight > 0 && overLeft <= 0) {
          position.left = containerLeft;
        } else {
          position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
        }
      } else if (overLeft > 0) {
        position.left += overLeft;
      } else if (overRight > 0) {
        position.left -= overRight;
      }
    }

    if (axis.Y) {
      var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
      var containerTop = ContainerTop();
      var containerBottom = ContainerBottom();
      var overTop = containerTop - position.top;
      var overBottom = position.top + elemData.height - containerBottom;

      if (elemData.height > containerHeight) {
        if (overTop > 0 && overBottom <= 0) {
          position.top = containerBottom - elemData.height;
        } else if (overBottom > 0 && overTop <= 0) {
          position.top = containerTop;
        } else {
          position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
        }
      } else if (overTop > 0) {
        position.top += overTop;
      } else if (overBottom > 0) {
        position.top -= overBottom;
      }
    }

    return position;
  }

  function isCollide(element, viewPortElement, x, y) {
    if (viewPortElement === void 0) {
      viewPortElement = null;
    }

    var elemOffset = (0, _position.calculatePosition)(element, 'left', 'top');

    if (x) {
      elemOffset.left = x;
    }

    if (y) {
      elemOffset.top = y;
    }

    var data = [];
    targetContainer = viewPortElement;
    parentDocument = element.ownerDocument;
    var elementRect = element.getBoundingClientRect();
    var top = elemOffset.top;
    var left = elemOffset.left;
    var right = elemOffset.left + elementRect.width;
    var bottom = elemOffset.top + elementRect.height;
    var topData = '';
    var leftData = '';
    var yAxis = topCollideCheck(top, bottom);
    var xAxis = leftCollideCheck(left, right);

    if (yAxis.topSide) {
      data.push('top');
    }

    if (xAxis.rightSide) {
      data.push('right');
    }

    if (xAxis.leftSide) {
      data.push('left');
    }

    if (yAxis.bottomSide) {
      data.push('bottom');
    }

    return data;
  }

  function flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent) {
    if (viewPortElement === void 0) {
      viewPortElement = null;
    }

    if (axis === void 0) {
      axis = {
        X: true,
        Y: true
      };
    }

    if (!target || !element || !positionX || !positionY || !axis.X && !axis.Y) {
      return;
    }

    var tEdge = {
      TL: null,
      TR: null,
      BL: null,
      BR: null
    };
    var eEdge = {
      TL: null,
      TR: null,
      BL: null,
      BR: null
    };
    var elementRect = element.getBoundingClientRect();
    var pos = {
      posX: positionX,
      posY: positionY,
      offsetX: offsetX,
      offsetY: offsetY,
      position: {
        left: 0,
        top: 0
      }
    };
    targetContainer = viewPortElement;
    parentDocument = target.ownerDocument;
    updateElementData(target, tEdge, pos, fixedParent, elementRect);
    setPosition(eEdge, pos, elementRect);

    if (axis.X) {
      leftFlip(target, eEdge, tEdge, pos, elementRect, true);
    }

    if (axis.Y && tEdge.TL.top > -1) {
      topFlip(target, eEdge, tEdge, pos, elementRect, true);
    }

    setPopup(element, pos, elementRect);
  }

  function setPopup(element, pos, elementRect) {
    var left = 0;
    var top = 0;

    if (element.offsetParent != null && (getComputedStyle(element.offsetParent).position === 'absolute' || getComputedStyle(element.offsetParent).position === 'relative')) {
      var data = (0, _position.calculatePosition)(element.offsetParent, 'left', 'top', false, elementRect);
      left = data.left;
      top = data.top;
    }

    element.style.top = pos.position.top + pos.offsetY - top + 'px';
    element.style.left = pos.position.left + pos.offsetX - left + 'px';
  }

  function updateElementData(target, edge, pos, fixedParent, elementRect) {
    pos.position = (0, _position.calculatePosition)(target, pos.posX, pos.posY, fixedParent, elementRect);
    edge.TL = (0, _position.calculatePosition)(target, 'left', 'top', fixedParent, elementRect);
    edge.TR = (0, _position.calculatePosition)(target, 'right', 'top', fixedParent, elementRect);
    edge.BR = (0, _position.calculatePosition)(target, 'left', 'bottom', fixedParent, elementRect);
    edge.BL = (0, _position.calculatePosition)(target, 'right', 'bottom', fixedParent, elementRect);
  }

  function setPosition(eStatus, pos, elementRect) {
    eStatus.TL = {
      top: pos.position.top + pos.offsetY,
      left: pos.position.left + pos.offsetX
    };
    eStatus.TR = {
      top: eStatus.TL.top,
      left: eStatus.TL.left + elementRect.width
    };
    eStatus.BL = {
      top: eStatus.TL.top + elementRect.height,
      left: eStatus.TL.left
    };
    eStatus.BR = {
      top: eStatus.TL.top + elementRect.height,
      left: eStatus.TL.left + elementRect.width
    };
  }

  function leftCollideCheck(left, right) {
    var leftSide = false;
    var rightSide = false;

    if (left - getBodyScrollLeft() < ContainerLeft()) {
      leftSide = true;
    }

    if (right > ContainerRight()) {
      rightSide = true;
    }

    return {
      leftSide: leftSide,
      rightSide: rightSide
    };
  }

  function leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
    var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);

    if (tEdge.TL.left - getBodyScrollLeft() <= ContainerLeft()) {
      collideSide.leftSide = false;
    }

    if (tEdge.TR.left >= ContainerRight()) {
      collideSide.rightSide = false;
    }

    if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
      if (pos.posX === 'right') {
        pos.posX = 'left';
      } else {
        pos.posX = 'right';
      }

      pos.offsetX = pos.offsetX + elementRect.width;
      pos.offsetX = -1 * pos.offsetX;
      pos.position = (0, _position.calculatePosition)(target, pos.posX, pos.posY, false);
      setPosition(edge, pos, elementRect);

      if (deepCheck) {
        leftFlip(target, edge, tEdge, pos, elementRect, false);
      }
    }
  }

  function topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
    var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);

    if (tEdge.TL.top - getBodyScrollTop() <= ContainerTop()) {
      collideSide.topSide = false;
    }

    if (tEdge.BL.top >= ContainerBottom()) {
      collideSide.bottomSide = false;
    }

    if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
      if (pos.posY === 'top') {
        pos.posY = 'bottom';
      } else {
        pos.posY = 'top';
      }

      pos.offsetY = pos.offsetY + elementRect.height;
      pos.offsetY = -1 * pos.offsetY;
      pos.position = (0, _position.calculatePosition)(target, pos.posX, pos.posY, false, elementRect);
      setPosition(edge, pos, elementRect);

      if (deepCheck) {
        topFlip(target, edge, tEdge, pos, elementRect, false);
      }
    }
  }

  function topCollideCheck(top, bottom) {
    var topSide = false;
    var bottomSide = false;

    if (top - getBodyScrollTop() < ContainerTop()) {
      topSide = true;
    }

    if (bottom > ContainerBottom()) {
      bottomSide = true;
    }

    return {
      topSide: topSide,
      bottomSide: bottomSide
    };
  }

  function getTargetContainerWidth() {
    return targetContainer.getBoundingClientRect().width;
  }

  function getTargetContainerHeight() {
    return targetContainer.getBoundingClientRect().height;
  }

  function getTargetContainerLeft() {
    return targetContainer.getBoundingClientRect().left;
  }

  function getTargetContainerTop() {
    return targetContainer.getBoundingClientRect().top;
  }

  function ContainerTop() {
    if (targetContainer) {
      return getTargetContainerTop();
    }

    return 0;
  }

  function ContainerLeft() {
    if (targetContainer) {
      return getTargetContainerLeft();
    }

    return 0;
  }

  function ContainerRight() {
    if (targetContainer) {
      return getBodyScrollLeft() + getTargetContainerLeft() + getTargetContainerWidth();
    }

    return getBodyScrollLeft() + getViewPortWidth();
  }

  function ContainerBottom() {
    if (targetContainer) {
      return getBodyScrollTop() + getTargetContainerTop() + getTargetContainerHeight();
    }

    return getBodyScrollTop() + getViewPortHeight();
  }

  function getBodyScrollTop() {
    // if(targetContainer)
    //     return targetContainer.scrollTop;
    return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
  }

  function getBodyScrollLeft() {
    // if(targetContainer)
    //     return targetContainer.scrollLeft;
    return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
  }

  function getViewPortHeight() {
    return window.innerHeight;
  }

  function getViewPortWidth() {
    var windowWidth = window.innerWidth;
    var offsetWidth = (0, _ej2Base.isNullOrUndefined)(document.documentElement) ? 0 : document.documentElement.offsetWidth;
    return windowWidth - (windowWidth - offsetWidth);
  }
});;
define('@syncfusion/ej2-popups/src/common/index',["exports", "./position", "./collision"], function (_exports, _position, _collision) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_position).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _position[key];
  });
  Object.keys(_collision).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _collision[key];
  });
});;
define('@syncfusion/ej2-popups/src/common/position',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.calculateRelativeBasedPosition = calculateRelativeBasedPosition;
  _exports.calculatePosition = calculatePosition;

  /**
   * Position library
   */
  var elementRect;
  var popupRect;
  var element;
  var parentDocument;
  var fixedParent = false;

  function calculateRelativeBasedPosition(anchor, element) {
    var fixedElement = false;
    var anchorPos = {
      left: 0,
      top: 0
    };
    var tempAnchor = anchor;

    if (!anchor || !element) {
      return anchorPos;
    }

    if ((0, _ej2Base.isNullOrUndefined)(element.offsetParent) && element.style.position === 'fixed') {
      fixedElement = true;
    }

    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
      anchorPos.left += anchor.offsetLeft;
      anchorPos.top += anchor.offsetTop;
      anchor = anchor.offsetParent;
    }

    anchor = tempAnchor;

    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {
      anchorPos.left -= anchor.scrollLeft;
      anchorPos.top -= anchor.scrollTop;
      anchor = anchor.parentElement;
    }

    return anchorPos;
  }

  function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
    positionY + positionX === 'topright' ? popupRect = undefined : popupRect = targetValues;
    popupRect = targetValues;
    fixedParent = parentElement ? true : false;

    if (!currentElement) {
      return {
        left: 0,
        top: 0
      };
    }

    if (!positionX) {
      positionX = 'left';
    }

    if (!positionY) {
      positionY = 'top';
    }

    parentDocument = currentElement.ownerDocument;
    element = currentElement;
    var pos = {
      left: 0,
      top: 0
    };
    return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
  }

  function setPosx(value, pos) {
    pos.left = value;
  }

  function setPosy(value, pos) {
    pos.top = value;
  }

  function updatePosition(posX, posY, pos) {
    elementRect = element.getBoundingClientRect();

    switch (posY + posX) {
      case 'topcenter':
        setPosx(getElementHCenter(), pos);
        setPosy(getElementTop(), pos);
        break;

      case 'topright':
        setPosx(getElementRight(), pos);
        setPosy(getElementTop(), pos);
        break;

      case 'centercenter':
        setPosx(getElementHCenter(), pos);
        setPosy(getElementVCenter(), pos);
        break;

      case 'centerright':
        setPosx(getElementRight(), pos);
        setPosy(getElementVCenter(), pos);
        break;

      case 'centerleft':
        setPosx(getElementLeft(), pos);
        setPosy(getElementVCenter(), pos);
        break;

      case 'bottomcenter':
        setPosx(getElementHCenter(), pos);
        setPosy(getElementBottom(), pos);
        break;

      case 'bottomright':
        setPosx(getElementRight(), pos);
        setPosy(getElementBottom(), pos);
        break;

      case 'bottomleft':
        setPosx(getElementLeft(), pos);
        setPosy(getElementBottom(), pos);
        break;

      default:
      case 'topleft':
        setPosx(getElementLeft(), pos);
        setPosy(getElementTop(), pos);
        break;
    }

    return pos;
  }

  function getBodyScrollTop() {
    return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
  }

  function getBodyScrollLeft() {
    return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
  }

  function getElementBottom() {
    return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
  }

  function getElementVCenter() {
    return getElementTop() + elementRect.height / 2;
  }

  function getElementTop() {
    return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
  }

  function getElementLeft() {
    return elementRect.left + getBodyScrollLeft();
  }

  function getElementRight() {
    return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);
  }

  function getElementHCenter() {
    return getElementLeft() + elementRect.width / 2;
  }
});;
define('@syncfusion/ej2-popups/src/common/resize',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.createResize = createResize;
  _exports.setMinHeight = setMinHeight;
  _exports.removeResize = removeResize;

  /**
   * Resize library
   */
  var elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];
  var targetElement;
  var selectedHandler;
  var originalWidth = 0;
  var originalHeight = 0;
  var originalX = 0;
  var originalY = 0;
  var originalMouseX = 0;
  var originalMouseY = 0;
  var RESIZE_HANDLER = 'e-resize-handle';
  var FOCUSED_HANDLER = 'e-focused-handle';
  var RESTRICT_LEFT = ['e-restrict-left'];
  var RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';
  var minHeight;
  var maxHeight;
  var minWidth;
  var maxWidth;
  var containerElement;
  var resizeStart = null;
  var resize = null;
  var resizeEnd = null;
  var resizeWestWidth;
  var setLeft = true;
  var previousWidth = 0;
  var setWidth = true;

  function createResize(args) {
    resizeStart = args.resizeBegin;
    resize = args.resizing;
    resizeEnd = args.resizeComplete;
    targetElement = getDOMElement(args.element);
    containerElement = getDOMElement(args.boundary);
    var directions = args.direction.split(' ');

    for (var i = 0; i < directions.length; i++) {
      var resizeHandler = (0, _ej2Base.createElement)('div', {
        className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i]
      });
      targetElement.appendChild(resizeHandler);
    }

    minHeight = args.minHeight;
    minWidth = args.minWidth;
    maxWidth = args.maxWidth;
    maxHeight = args.maxHeight;
    wireEvents();
  }

  function getDOMElement(element) {
    var domElement;

    if (!(0, _ej2Base.isNullOrUndefined)(element)) {
      if (typeof element === 'string') {
        domElement = document.querySelector(element);
      } else {
        domElement = element;
      }
    }

    return domElement;
  }

  function wireEvents() {
    var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

    for (var i = 0; i < resizers.length; i++) {
      selectedHandler = resizers[i];

      _ej2Base.EventHandler.add(selectedHandler, 'mousedown', onMouseDown, this);

      var eventName = _ej2Base.Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';

      _ej2Base.EventHandler.add(selectedHandler, eventName, onTouchStart, this);
    }
  }
  /* istanbul ignore next */


  function getEventType(e) {
    return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';
  }
  /* istanbul ignore next */


  function onMouseDown(e) {
    e.preventDefault();
    targetElement = e.target.parentElement;
    calculateValues();
    originalMouseX = e.pageX;
    originalMouseY = e.pageY;
    e.target.classList.add(FOCUSED_HANDLER);

    if (!(0, _ej2Base.isNullOrUndefined)(resizeStart)) {
      if (resizeStart(e) === true) {
        return;
      }
    }

    var target = (0, _ej2Base.isNullOrUndefined)(containerElement) ? document : containerElement;

    _ej2Base.EventHandler.add(target, 'mousemove', onMouseMove, this);

    _ej2Base.EventHandler.add(document, 'mouseup', onMouseUp, this);

    for (var i = 0; i < RESTRICT_LEFT.length; i++) {
      if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
        setLeft = false;
      } else {
        setLeft = true;
      }
    }
  }
  /* istanbul ignore next */


  function onMouseUp(e) {
    var touchMoveEvent = _ej2Base.Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';
    var touchEndEvent = _ej2Base.Browser.info.name === 'msie' ? 'pointerup' : 'touchend';
    var target = (0, _ej2Base.isNullOrUndefined)(containerElement) ? document : containerElement;

    _ej2Base.EventHandler.remove(target, 'mousemove', onMouseMove);

    _ej2Base.EventHandler.remove(target, touchMoveEvent, onMouseMove);

    var eventName = _ej2Base.Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';

    _ej2Base.EventHandler.remove(target, eventName, onMouseMove);

    if (!(0, _ej2Base.isNullOrUndefined)(document.body.querySelector('.' + FOCUSED_HANDLER))) {
      document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
    }

    if (!(0, _ej2Base.isNullOrUndefined)(resizeEnd)) {
      resizeEnd(e);
    }

    _ej2Base.EventHandler.remove(document, 'mouseup', onMouseUp);

    _ej2Base.EventHandler.remove(document, touchEndEvent, onMouseUp);
  }
  /* istanbul ignore next */


  function calculateValues() {
    originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));
    originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));
    originalX = targetElement.getBoundingClientRect().left;
    originalY = targetElement.getBoundingClientRect().top;
  }
  /* istanbul ignore next */


  function onTouchStart(e) {
    targetElement = e.target.parentElement;
    calculateValues();
    originalMouseX = e.touches[0].pageX;
    originalMouseY = e.touches[0].pageY;

    if (!(0, _ej2Base.isNullOrUndefined)(resizeStart)) {
      if (resizeStart(e) === true) {
        return;
      }
    }

    var touchMoveEvent = _ej2Base.Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';
    var touchEndEvent = _ej2Base.Browser.info.name === 'msie' ? 'pointerup' : 'touchend';
    var target = (0, _ej2Base.isNullOrUndefined)(containerElement) ? document : containerElement;

    _ej2Base.EventHandler.add(target, touchMoveEvent, onMouseMove, this);

    _ej2Base.EventHandler.add(document, touchEndEvent, onMouseUp);
  }
  /* istanbul ignore next */


  function onMouseMove(e) {
    if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
      selectedHandler = e.target;
    } else if (!(0, _ej2Base.isNullOrUndefined)(document.body.querySelector('.' + FOCUSED_HANDLER))) {
      selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);
    }

    if (!(0, _ej2Base.isNullOrUndefined)(selectedHandler)) {
      var resizeTowards = '';

      for (var i = 0; i < elementClass.length; i++) {
        if (selectedHandler.classList.contains('e-' + elementClass[i])) {
          resizeTowards = elementClass[i];
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(resize)) {
        resize(e);
      }

      switch (resizeTowards) {
        case 'south':
          resizeSouth(e);
          break;

        case 'north':
          resizeNorth(e);
          break;

        case 'west':
          resizeWest(e);
          break;

        case 'east':
          resizeEast(e);
          break;

        case 'south-east':
          resizeSouth(e);
          resizeEast(e);
          break;

        case 'south-west':
          resizeSouth(e);
          resizeWest(e);
          break;

        case 'north-east':
          resizeNorth(e);
          resizeEast(e);
          break;

        case 'north-west':
          resizeNorth(e);
          resizeWest(e);
          break;

        default:
          break;
      }
    }
  }
  /* istanbul ignore next */


  function getClientRectValues(element) {
    return element.getBoundingClientRect();
  }
  /* istanbul ignore next */
  // tslint:disable-next-line


  function resizeSouth(e) {
    var documentHeight = document.documentElement.clientHeight;
    var calculateValue = false;
    var containerRectValues;
    var currentpageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;
    var targetRectValues = getClientRectValues(targetElement);

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      containerRectValues = getClientRectValues(containerElement);
    }

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      calculateValue = true;
    } else if ((0, _ej2Base.isNullOrUndefined)(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
      calculateValue = true;
    }

    var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
    calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
    var containerTop = 0;

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      containerTop = containerRectValues.top;
    }

    var borderValue = (0, _ej2Base.isNullOrUndefined)(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
    var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
    topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;

    if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
      calculateValue = false;

      if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
        return;
      }

      targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';
      return;
    }

    var targetTop = 0;

    if (calculateValue) {
      if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
        targetTop = targetRectValues.top;

        if (calculatedHeight + targetTop <= 30) {
          calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
        }
      }

      if (calculatedHeight + targetRectValues.top >= maxHeight) {
        targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';
      }

      var calculatedTop = (0, _ej2Base.isNullOrUndefined)(containerElement) ? targetTop : topWithoutborder;

      if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
        targetElement.style.height = calculatedHeight + 'px';
      }
    }
  }
  /* istanbul ignore next */
  // tslint:disable-next-line


  function resizeNorth(e) {
    var calculateValue = false;
    var boundaryRectValues;
    var pageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;
    var targetRectValues = getClientRectValues(targetElement);

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      boundaryRectValues = getClientRectValues(containerElement);
    }

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
      calculateValue = true;
    } else if ((0, _ej2Base.isNullOrUndefined)(containerElement) && pageY > 0) {
      calculateValue = true;
    }

    var currentHeight = originalHeight - (pageY - originalMouseY);

    if (getClientRectValues(targetElement).bottom + currentHeight > maxHeight) {
      calculateValue = false;
      targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';
    }

    if (calculateValue) {
      if (currentHeight >= minHeight && currentHeight <= maxHeight) {
        var containerTop = 0;

        if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
          containerTop = boundaryRectValues.top;
        }

        var top_1 = originalY - containerTop + (pageY - originalMouseY);
        top_1 = top_1 > 0 ? top_1 : 1;
        targetElement.style.height = currentHeight + 'px';
        targetElement.style.top = top_1 + 'px';
      }
    }
  }
  /* istanbul ignore next */
  // tslint:disable-next-line


  function resizeWest(e) {
    var documentWidth = document.documentElement.clientWidth;
    var calculateValue = false;
    var rectValues;

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      rectValues = getClientRectValues(containerElement);
    }

    var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;
    var targetRectValues = getClientRectValues(targetElement);
    var borderValue = (0, _ej2Base.isNullOrUndefined)(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
    var left = (0, _ej2Base.isNullOrUndefined)(containerElement) ? 0 : rectValues.left;
    var containerWidth = (0, _ej2Base.isNullOrUndefined)(containerElement) ? 0 : rectValues.width;

    if ((0, _ej2Base.isNullOrUndefined)(resizeWestWidth)) {
      if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
        resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
        resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
      } else {
        resizeWestWidth = documentWidth;
      }
    }

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement) && targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right) - borderValue <= maxWidth) {
      calculateValue = true;
    } else if ((0, _ej2Base.isNullOrUndefined)(containerElement) && pageX >= 0) {
      calculateValue = true;
    }

    var calculatedWidth = originalWidth - (pageX - originalMouseX);

    if (setLeft) {
      calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
    }

    if (calculateValue) {
      if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
        var containerLeft = 0;

        if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
          containerLeft = rectValues.left;
        }

        var left_1 = originalX - containerLeft + (pageX - originalMouseX);
        left_1 = left_1 > 0 ? left_1 : 1;

        if (calculatedWidth !== previousWidth && setWidth) {
          targetElement.style.width = calculatedWidth + 'px';
        }

        if (setLeft) {
          targetElement.style.left = left_1 + 'px';

          if (left_1 === 1) {
            setWidth = false;
          } else {
            setWidth = true;
          }
        }
      }
    }

    previousWidth = calculatedWidth;
  }
  /* istanbul ignore next */
  // tslint:disable-next-line


  function resizeEast(e) {
    var documentWidth = document.documentElement.clientWidth;
    var calculateValue = false;
    var containerRectValues;

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      containerRectValues = getClientRectValues(containerElement);
    }

    var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;
    var targetRectValues = getClientRectValues(targetElement);

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width < maxWidth || targetRectValues.right - containerRectValues.left > targetRectValues.width)) {
      calculateValue = true;
    } else if ((0, _ej2Base.isNullOrUndefined)(containerElement) && documentWidth - pageX > 0) {
      calculateValue = true;
    }

    var calculatedWidth = originalWidth + (pageX - originalMouseX);
    var containerLeft = 0;

    if (!(0, _ej2Base.isNullOrUndefined)(containerElement)) {
      containerLeft = containerRectValues.left;
    }

    if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
      calculateValue = false;

      if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
        return;
      }

      targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';
    }

    if (calculateValue) {
      if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
        targetElement.style.width = calculatedWidth + 'px';
      }
    }
  }
  /* istanbul ignore next */


  function setMinHeight(minimumHeight) {
    minHeight = minimumHeight;
  }

  function removeResize() {
    var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);

    for (var i = 0; i < handlers.length; i++) {
      (0, _ej2Base.detach)(handlers[i]);
    }
  }
});;
define('@syncfusion/ej2-popups/src/dialog/dialog',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-buttons", "../popup/popup", "../common/resize"], function (_exports, _ej2Base, _ej2Buttons, _popup, _resize) {
  "use strict";

  _exports.__esModule = true;
  _exports.DialogUtility = _exports.Dialog = _exports.AnimationSettings = _exports.ButtonProps = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var ButtonProps =
  /** @class */
  function (_super) {
    __extends(ButtonProps, _super);

    function ButtonProps() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)()], ButtonProps.prototype, "buttonModel", void 0);

    __decorate([(0, _ej2Base.Property)('Button')], ButtonProps.prototype, "type", void 0);

    __decorate([(0, _ej2Base.Event)()], ButtonProps.prototype, "click", void 0);

    return ButtonProps;
  }(_ej2Base.ChildProperty);

  _exports.ButtonProps = ButtonProps;

  /**
   * Configures the animation properties for both open and close the dialog.
   */
  var AnimationSettings =
  /** @class */
  function (_super) {
    __extends(AnimationSettings, _super);

    function AnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('Fade')], AnimationSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)(400)], AnimationSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)(0)], AnimationSettings.prototype, "delay", void 0);

    return AnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.AnimationSettings = AnimationSettings;
  var ROOT = 'e-dialog';
  var RTL = 'e-rtl';
  var DLG_HEADER_CONTENT = 'e-dlg-header-content';
  var DLG_HEADER = 'e-dlg-header';
  var DLG_FOOTER_CONTENT = 'e-footer-content';
  var MODAL_DLG = 'e-dlg-modal';
  var DLG_CONTENT = 'e-dlg-content';
  var DLG_CLOSE_ICON = 'e-icon-dlg-close';
  var DLG_OVERLAY = 'e-dlg-overlay';
  var DLG_TARGET = 'e-dlg-target';
  var DLG_CONTAINER = 'e-dlg-container';
  var SCROLL_DISABLED = 'e-scroll-disabled';
  var DLG_PRIMARY_BUTTON = 'e-primary';
  var ICON = 'e-icons';
  var POPUP_ROOT = 'e-popup';
  var DEVICE = 'e-device';
  var FULLSCREEN = 'e-dlg-fullscreen';
  var DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';
  var DLG_HIDE = 'e-popup-close';
  var DLG_SHOW = 'e-popup-open';
  var DLG_UTIL_DEFAULT_TITLE = 'Information';
  var DLG_UTIL_ROOT = 'e-scroll-disabled';
  var DLG_UTIL_ALERT = 'e-alert-dialog';
  var DLG_UTIL_CONFIRM = 'e-confirm-dialog';
  var DLG_RESIZABLE = 'e-dlg-resizable';
  var DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';
  var DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';
  /**
   * Represents the dialog component that displays the information and get input from the user.
   * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.
   * ```html
   * <div id="dialog"></div>
   * ```
   * ```typescript
   * <script>
   *   var dialogObj = new Dialog({ header: 'Dialog' });
   *   dialogObj.appendTo("#dialog");
   * </script>
   * ```
   */

  var Dialog =
  /** @class */
  function (_super) {
    __extends(Dialog, _super);
    /**
     * Constructor for creating the widget
     * @hidden
     */


    function Dialog(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize the control rendering
     * @private
     */


    Dialog.prototype.render = function () {
      this.initialize();
      this.initRender();
      this.wireEvents();

      if (this.width === '100%') {
        this.element.style.width = '';
      }

      if (this.minHeight !== '') {
        this.element.style.minHeight = this.minHeight.toString();
      }

      if (this.enableResize) {
        this.setResize();

        if (this.animationSettings.effect === 'None') {
          this.getMinHeight();
        }
      }

      this.renderComplete();
    };
    /**
     * Initialize the event handler
     * @private
     */


    Dialog.prototype.preRender = function () {
      var _this = this;

      this.headerContent = null;
      this.allowMaxHeight = true;
      this.preventVisibility = true;
      this.clonedEle = this.element.cloneNode(true);

      this.closeIconClickEventHandler = function (event) {
        _this.hide(event);
      };

      this.dlgOverlayClickEventHandler = function (event) {
        _this.trigger('overlayClick', event);

        _this.focusContent();
      };

      var localeText = {
        close: 'Close'
      };
      this.l10n = new _ej2Base.L10n('dialog', localeText, this.locale);
      this.checkPositionData();

      if ((0, _ej2Base.isNullOrUndefined)(this.target)) {
        var prevOnChange = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        this.target = document.body;
        this.isProtectedOnChange = prevOnChange;
      }
    };

    ;

    Dialog.prototype.isNumberValue = function (value) {
      var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
      return isNumber;
    };

    Dialog.prototype.checkPositionData = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.position)) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.position.X) && typeof this.position.X !== 'number') {
          var isNumber = this.isNumberValue(this.position.X);

          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.X = parseFloat(this.position.X);
            this.isProtectedOnChange = prevOnChange;
          }
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.position.Y) && typeof this.position.Y !== 'number') {
          var isNumber = this.isNumberValue(this.position.Y);

          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.Y = parseFloat(this.position.Y);
            this.isProtectedOnChange = prevOnChange;
          }
        }
      }
    };

    Dialog.prototype.getEle = function (list, selector) {
      var element = undefined;

      for (var i = 0; i < list.length; i++) {
        if (list[i].classList.contains(selector)) {
          element = list[i];
          break;
        }
      }

      return element;
    };
    /* istanbul ignore next */


    Dialog.prototype.getMinHeight = function () {
      var computedHeaderHeight = '0px';
      var computedFooterHeight = '0px';

      if (!(0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {
        computedHeaderHeight = getComputedStyle(this.headerContent).height;
      }

      var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);

      if (!(0, _ej2Base.isNullOrUndefined)(footerEle)) {
        computedFooterHeight = getComputedStyle(footerEle).height;
      }

      var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);
      var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);
      (0, _resize.setMinHeight)(headerHeight + 30 + footerHeight);
    };

    Dialog.prototype.onResizeStart = function (args) {
      this.trigger('resizeStart', args);
      return args.cancel;
    };

    Dialog.prototype.onResizing = function (args) {
      this.trigger('resizing', args);
    };

    Dialog.prototype.onResizeComplete = function (args) {
      this.trigger('resizeStop', args);
    };

    Dialog.prototype.setResize = function () {
      if (this.enableResize) {
        if (this.isBlazorServerRender() && !(0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.e-icons.e-resize-handle'))) {
          return;
        }

        this.element.classList.add(DLG_RESIZABLE);
        var computedHeight = getComputedStyle(this.element).minHeight;
        var computedWidth = getComputedStyle(this.element).minWidth;
        var direction = this.enableRtl ? 'south-west' : 'south-east';

        if (this.isModal && this.enableRtl) {
          this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
        } else if (this.isModal && this.target === document.body) {
          this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
        }

        (0, _resize.createResize)({
          element: this.element,
          direction: direction,
          minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),
          maxHeight: this.targetEle.clientHeight,
          minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),
          maxWidth: this.targetEle.clientWidth,
          boundary: this.target === document.body ? null : this.targetEle,
          resizeBegin: this.onResizeStart.bind(this),
          resizeComplete: this.onResizeComplete.bind(this),
          resizing: this.onResizing.bind(this)
        });
      } else {
        (0, _resize.removeResize)();

        if (this.isModal) {
          this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        } else {
          this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
        }

        this.element.classList.remove(DLG_RESIZABLE);
      }
    };
    /* istanbul ignore next */


    Dialog.prototype.keyDown = function (event) {
      var _this = this;

      if (event.keyCode === 9) {
        if (this.isModal) {
          var buttonObj = void 0;

          if (!(0, _ej2Base.isNullOrUndefined)(this.btnObj)) {
            buttonObj = this.btnObj[this.btnObj.length - 1];
          }

          if (!(0, _ej2Base.isNullOrUndefined)(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {
            event.preventDefault();
            this.focusableElements(this.element).focus();
          }

          if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {
            event.preventDefault();

            if (!(0, _ej2Base.isNullOrUndefined)(buttonObj)) {
              buttonObj.element.focus();
            }
          }
        }
      }

      var element = document.activeElement;
      var isTagName = ['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1;
      var isContentEdit = false;

      if (!isTagName) {
        isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';
      }

      if (event.keyCode === 27 && this.closeOnEscape) {
        this.hide(event);
      }

      if (event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' && isTagName && !(0, _ej2Base.isNullOrUndefined)(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' || isContentEdit) && !(0, _ej2Base.isNullOrUndefined)(this.primaryButtonEle)) {
        var buttonIndex_1;
        var firstPrimary = this.buttons.some(function (data, index) {
          buttonIndex_1 = index;
          var buttonModel = data.buttonModel;
          return !(0, _ej2Base.isNullOrUndefined)(buttonModel) && buttonModel.isPrimary === true;
        });

        if (firstPrimary && typeof this.buttons[buttonIndex_1].click === 'function') {
          setTimeout(function () {
            _this.buttons[buttonIndex_1].click.call(_this, event);
          });
        }
      }
    };
    /**
     * Initialize the control rendering
     * @private
     */


    Dialog.prototype.initialize = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.target)) {
        this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;
      }

      if (!this.isBlazorServerRender()) {
        (0, _ej2Base.addClass)([this.element], ROOT);
      }

      if (_ej2Base.Browser.isDevice) {
        (0, _ej2Base.addClass)([this.element], DEVICE);
      }

      if (!this.isBlazorServerRender()) {
        this.setCSSClass();
      }

      this.setMaxHeight();
    };
    /**
     * Initialize the rendering
     * @private
     */


    Dialog.prototype.initRender = function () {
      var _this = this;

      this.initialRender = true;

      if (!this.isBlazorServerRender()) {
        (0, _ej2Base.attributes)(this.element, {
          role: 'dialog'
        });
      }

      if (this.zIndex === 1000) {
        this.setzIndex(this.element, false);
        this.calculatezIndex = true;
      } else {
        this.calculatezIndex = false;
      }

      if (this.isBlazorServerRender() && (0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
        this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];
      }

      if (!this.isBlazorServerRender()) {
        this.setTargetContent();

        if (this.header !== '' && !(0, _ej2Base.isNullOrUndefined)(this.header)) {
          this.setHeader();
        }

        if (this.showCloseIcon) {
          this.renderCloseIcon();
        }

        this.setContent();

        if (this.footerTemplate !== '' && !(0, _ej2Base.isNullOrUndefined)(this.footerTemplate)) {
          this.setFooterTemplate();
        } else if (!(0, _ej2Base.isNullOrUndefined)(this.buttons[0].buttonModel)) {
          this.setButton();
        }
      }

      if (this.isBlazorServerRender()) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.buttons[0].buttonModel) && this.footerTemplate === '') {
          this.setButton();
        }
      }

      if (this.allowDragging && !(0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
        this.setAllowDragging();
      }

      if (!this.isBlazorServerRender()) {
        (0, _ej2Base.attributes)(this.element, {
          'aria-modal': this.isModal ? 'true' : 'false'
        });

        if (this.isModal) {
          this.setIsModal();
        }
      }

      if (this.isBlazorServerRender() && (0, _ej2Base.isNullOrUndefined)(this.dlgContainer)) {
        this.dlgContainer = this.element.parentElement;
        this.dlgOverlay = this.element.parentElement.getElementsByClassName('e-dlg-overlay')[0];
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.targetEle)) {
        this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
      }

      this.popupObj = new _popup.Popup(this.element, {
        height: this.height,
        width: this.width,
        zIndex: this.zIndex,
        relateTo: this.target,
        actionOnScroll: 'none',
        enableRtl: this.enableRtl,
        open: function (event) {
          var eventArgs = {
            container: _this.isModal ? _this.dlgContainer : _this.element,
            element: _this.element,
            target: _this.target,
            preventFocus: false
          };

          if (_this.enableResize) {
            _this.getMinHeight();
          }

          _this.trigger('open', eventArgs, function (openEventArgs) {
            if (!openEventArgs.preventFocus) {
              _this.focusContent();
            }
          });
        },
        close: function (event) {
          if (_this.isModal) {
            (0, _ej2Base.addClass)([_this.dlgOverlay], 'e-fade');
          }

          _this.unBindEvent(_this.element);

          if (_this.isModal) {
            _this.dlgContainer.style.display = 'none';
          }

          _this.trigger('close', _this.closeArgs);

          var activeEle = document.activeElement;

          if (!(0, _ej2Base.isNullOrUndefined)(activeEle) && !(0, _ej2Base.isNullOrUndefined)(activeEle.blur)) {
            activeEle.blur();
          }

          if (!(0, _ej2Base.isNullOrUndefined)(_this.storeActiveElement)) {
            _this.storeActiveElement.focus();
          }
        }
      });
      this.positionChange();
      this.setEnableRTL();

      if (!this.isBlazorServerRender()) {
        (0, _ej2Base.addClass)([this.element], DLG_HIDE);

        if (this.isModal) {
          this.setOverlayZindex();
        }
      }

      if (this.visible) {
        this.show();
      } else {
        if (this.isModal) {
          this.dlgOverlay.style.display = 'none';
        }
      }

      this.initialRender = false;
    };

    Dialog.prototype.setOverlayZindex = function (zIndexValue) {
      var zIndex;

      if ((0, _ej2Base.isNullOrUndefined)(zIndexValue)) {
        zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
      } else {
        zIndex = zIndexValue;
      }

      this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
      this.dlgContainer.style.zIndex = zIndex.toString();
    };

    Dialog.prototype.positionChange = function () {
      if (this.isModal) {
        if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else {
          this.element.style.top = '0px';
          this.element.style.left = '0px';
          this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);
        }
      } else {
        this.setPopupPosition();
      }
    };

    Dialog.prototype.setPopupPosition = function () {
      this.popupObj.setProperties({
        position: {
          X: this.position.X,
          Y: this.position.Y
        }
      });
    };

    Dialog.prototype.setAllowDragging = function () {
      var _this = this;

      var handleContent = '.' + DLG_HEADER_CONTENT;
      this.dragObj = new _ej2Base.Draggable(this.element, {
        clone: false,
        abort: '.e-dlg-closeicon-btn',
        handle: handleContent,
        dragStart: function (event) {
          _this.trigger('dragStart', event, function (dragEventArgs) {
            if ((0, _ej2Base.isBlazor)()) {
              dragEventArgs.bindEvents(event.dragElement);
            }
          });
        },
        dragStop: function (event) {
          if (_this.isModal) {
            if (!(0, _ej2Base.isNullOrUndefined)(_this.position)) {
              _this.dlgContainer.classList.remove('e-dlg-' + _this.position.X + '-' + _this.position.Y);
            } // Reset the dialog position after drag completion.


            _this.element.style.position = 'relative';
          }

          _this.trigger('dragStop', event);

          _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        },
        drag: function (event) {
          _this.trigger('drag', event);
        }
      });

      if (!(0, _ej2Base.isNullOrUndefined)(this.targetEle)) {
        this.dragObj.dragArea = this.targetEle;
      }
    };

    Dialog.prototype.setButton = function () {
      if (!this.isBlazorServerRender()) {
        this.buttonContent = [];
        this.btnObj = [];
        var primaryBtnFlag = true;

        for (var i = 0; i < this.buttons.length; i++) {
          var buttonType = !(0, _ej2Base.isNullOrUndefined)(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';
          var btn = this.createElement('button', {
            attrs: {
              type: buttonType
            }
          });
          this.buttonContent.push(btn.outerHTML);
        }

        this.setFooterTemplate();
      }

      var footerEle = this.element.querySelector('.' + DLG_FOOTER_CONTENT);
      var footerBtn = !(0, _ej2Base.isNullOrUndefined)(footerEle) && footerEle.querySelectorAll('button');

      for (var i = 0; i < this.buttons.length; i++) {
        if (!this.isBlazorServerRender()) {
          this.btnObj[i] = new _ej2Buttons.Button(this.buttons[i].buttonModel);
        }

        if (this.isBlazorServerRender()) {
          this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);
        }

        if (!(0, _ej2Base.isNullOrUndefined)(this.ftrTemplateContent) && typeof this.buttons[i].click === 'function' && footerBtn.length > 0) {
          _ej2Base.EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);
        }

        if (!this.isBlazorServerRender() && !(0, _ej2Base.isNullOrUndefined)(this.ftrTemplateContent)) {
          this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);
          this.btnObj[i].element.classList.add('e-flat');
          this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
        }
      }
    };

    Dialog.prototype.setContent = function () {
      (0, _ej2Base.attributes)(this.element, {
        'aria-describedby': this.element.id + '_dialog-content'
      });
      this.contentEle = this.createElement('div', {
        className: DLG_CONTENT,
        id: this.element.id + '_dialog-content'
      });

      if (this.innerContentElement) {
        this.contentEle.appendChild(this.innerContentElement);
      } else if (!(0, _ej2Base.isNullOrUndefined)(this.content) && this.content !== '' || !this.initialRender) {
        var blazorContain = Object.keys(window);

        if (typeof this.content === 'string' && blazorContain.indexOf('ejsInterop') === -1) {
          this.contentEle.innerHTML = this.sanitizeHelper(this.content);
        } else if (this.content instanceof HTMLElement) {
          this.contentEle.appendChild(this.content);
        } else {
          this.setTemplate(this.content, this.contentEle);
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
        this.element.insertBefore(this.contentEle, this.element.children[1]);
      } else {
        this.element.insertBefore(this.contentEle, this.element.children[0]);
      }

      if (this.height === 'auto') {
        this.setMaxHeight();
      }
    };

    Dialog.prototype.setTemplate = function (template, toElement) {
      var templateFn;
      var templateProps;
      var blazorContain = Object.keys(window);

      if (toElement.classList.contains(DLG_HEADER)) {
        templateProps = this.element.id + 'header';
      } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
        templateProps = this.element.id + 'footerTemplate';
      } else {
        templateProps = this.element.id + 'content';
      }

      var templateValue;

      if (!(0, _ej2Base.isNullOrUndefined)(template.outerHTML)) {
        toElement.appendChild(template);
      } else if (typeof template !== 'string' || (0, _ej2Base.isBlazor)() && !this.isStringTemplate) {
        templateFn = (0, _ej2Base.compile)(template);
        templateValue = template;
      } else {
        toElement.innerHTML = this.sanitizeHelper(template);
      }

      var fromElements = [];

      if (!(0, _ej2Base.isNullOrUndefined)(templateFn)) {
        var isString = blazorContain.indexOf('ejsInterop') !== -1 && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0 ? this.isStringTemplate : true;

        for (var _i = 0, _a = templateFn({}, null, null, templateProps, isString); _i < _a.length; _i++) {
          var item = _a[_i];
          fromElements.push(item);
        }

        (0, _ej2Base.append)([].slice.call(fromElements), toElement);

        if (blazorContain.indexOf('ejsInterop') !== -1 && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0) {
          this.blazorTemplate(templateProps);
        }
      }
    };
    /**
     * @hidden
     */


    Dialog.prototype.sanitizeHelper = function (value) {
      if (this.enableHtmlSanitizer) {
        var item = _ej2Base.SanitizeHtmlHelper.beforeSanitize();

        var beforeEvent = {
          cancel: false,
          helper: null
        };
        (0, _ej2Base.extend)(item, item, beforeEvent);
        this.trigger('beforeSanitizeHtml', item);

        if (item.cancel && !(0, _ej2Base.isNullOrUndefined)(item.helper)) {
          value = item.helper(value);
        } else if (!item.cancel) {
          value = _ej2Base.SanitizeHtmlHelper.serializeValue(item, value);
        }
      }

      return value;
    };

    Dialog.prototype.blazorTemplate = function (templateProps) {
      if (templateProps === this.element.id + 'header') {
        (0, _ej2Base.updateBlazorTemplate)(templateProps, 'Header', this);
      } else if (templateProps === this.element.id + 'footerTemplate') {
        (0, _ej2Base.updateBlazorTemplate)(templateProps, 'FooterTemplate', this);
      } else {
        (0, _ej2Base.updateBlazorTemplate)(templateProps, 'Content', this);
      }
    };

    Dialog.prototype.setMaxHeight = function () {
      if (!this.allowMaxHeight) {
        return;
      }

      var display = this.element.style.display;
      this.element.style.display = 'none';
      this.element.style.maxHeight = !(0, _ej2Base.isNullOrUndefined)(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px';
      this.element.style.display = display;
    };

    Dialog.prototype.setEnableRTL = function () {
      if (!this.isBlazorServerRender()) {
        this.enableRtl ? (0, _ej2Base.addClass)([this.element], RTL) : (0, _ej2Base.removeClass)([this.element], RTL);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.e-resize-handle'))) {
        (0, _resize.removeResize)();
        this.setResize();
      }
    };

    Dialog.prototype.setTargetContent = function () {
      var _this = this;

      if ((0, _ej2Base.isNullOrUndefined)(this.content) || this.content === '') {
        var isContent = this.element.innerHTML.replace(/\s|<(\/?|\!?)(!--!--)>/g, '') !== '';

        if (this.element.children.length > 0 || isContent) {
          this.innerContentElement = document.createDocumentFragment();
          [].slice.call(this.element.childNodes).forEach(function (el) {
            if (el.nodeType !== 8) {
              _this.innerContentElement.appendChild(el);
            }
          });
        }
      }
    };

    Dialog.prototype.setHeader = function () {
      if (this.headerEle) {
        this.headerEle.innerHTML = '';
      } else {
        this.headerEle = this.createElement('div', {
          id: this.element.id + '_title',
          className: DLG_HEADER
        });
      }

      this.createHeaderContent();
      this.headerContent.appendChild(this.headerEle);
      this.setTemplate(this.header, this.headerEle);
      (0, _ej2Base.attributes)(this.element, {
        'aria-labelledby': this.element.id + '_title'
      });
      this.element.insertBefore(this.headerContent, this.element.children[0]);
    };

    Dialog.prototype.setFooterTemplate = function () {
      if (this.ftrTemplateContent) {
        this.ftrTemplateContent.innerHTML = '';
      } else {
        this.ftrTemplateContent = this.createElement('div', {
          className: DLG_FOOTER_CONTENT
        });
      }

      if (this.footerTemplate !== '' && !(0, _ej2Base.isNullOrUndefined)(this.footerTemplate)) {
        this.setTemplate(this.footerTemplate, this.ftrTemplateContent);
      } else {
        this.ftrTemplateContent.innerHTML = this.buttonContent.join('');
      }

      this.element.appendChild(this.ftrTemplateContent);
    };

    Dialog.prototype.createHeaderContent = function () {
      if ((0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
        this.headerContent = this.createElement('div', {
          className: DLG_HEADER_CONTENT
        });
      }
    };

    Dialog.prototype.renderCloseIcon = function () {
      this.closeIcon = this.createElement('button', {
        className: DLG_CLOSE_ICON_BTN,
        attrs: {
          type: 'button'
        }
      });
      this.closeIconBtnObj = new _ej2Buttons.Button({
        cssClass: 'e-flat',
        iconCss: DLG_CLOSE_ICON + ' ' + ICON
      });
      this.closeIconTitle();

      if (!(0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
        (0, _ej2Base.prepend)([this.closeIcon], this.headerContent);
      } else {
        this.createHeaderContent();
        (0, _ej2Base.prepend)([this.closeIcon], this.headerContent);
        this.element.insertBefore(this.headerContent, this.element.children[0]);
      }

      this.closeIconBtnObj.appendTo(this.closeIcon);
    };

    Dialog.prototype.closeIconTitle = function () {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant('close');
      this.closeIcon.setAttribute('title', closeIconTitle);
      this.closeIcon.setAttribute('aria-label', closeIconTitle);
    };

    Dialog.prototype.setCSSClass = function (oldCSSClass) {
      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.element], this.cssClass.split(' '));
      }

      if (oldCSSClass) {
        (0, _ej2Base.removeClass)([this.element], oldCSSClass.split(' '));
      }
    };

    Dialog.prototype.setIsModal = function () {
      this.dlgContainer = this.createElement('div', {
        className: DLG_CONTAINER
      });
      this.element.classList.remove(DLG_SHOW);
      this.element.parentNode.insertBefore(this.dlgContainer, this.element);
      this.dlgContainer.appendChild(this.element);
      (0, _ej2Base.addClass)([this.element], MODAL_DLG);
      this.dlgOverlay = this.createElement('div', {
        className: DLG_OVERLAY
      });
      this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
      this.dlgContainer.appendChild(this.dlgOverlay);
    };

    Dialog.prototype.getValidFocusNode = function (items) {
      var node;

      for (var u = 0; u < items.length; u++) {
        node = items[u];

        if ((node.clientHeight > 0 || node.tagName.toLowerCase() === 'a' && node.hasAttribute('href')) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
          return node;
        }
      }

      return node;
    };

    Dialog.prototype.focusableElements = function (content) {
      if (!(0, _ej2Base.isNullOrUndefined)(content)) {
        var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
        var items = content.querySelectorAll(value);
        return this.getValidFocusNode(items);
      }

      return null;
    };

    Dialog.prototype.getAutoFocusNode = function (container) {
      var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);
      var value = '[autofocus]';
      var items = container.querySelectorAll(value);
      var validNode = this.getValidFocusNode(items);

      if ((0, _ej2Base.isBlazor)()) {
        this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
      }

      if (!(0, _ej2Base.isNullOrUndefined)(validNode)) {
        node = validNode;
      } else {
        validNode = this.focusableElements(this.contentEle);

        if (!(0, _ej2Base.isNullOrUndefined)(validNode)) {
          return node = validNode;
        } else if (!(0, _ej2Base.isNullOrUndefined)(this.primaryButtonEle)) {
          return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);
        }
      }

      return node;
    };

    Dialog.prototype.disableElement = function (element, t) {
      var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;

      if (elementMatch) {
        for (; element; element = element.parentNode) {
          if (element instanceof Element && elementMatch.call(element, t)) {
            /* istanbul ignore next */
            return element;
          }
        }
      }

      return null;
    };

    Dialog.prototype.focusContent = function () {
      var element = this.getAutoFocusNode(this.element);
      var node = !(0, _ej2Base.isNullOrUndefined)(element) ? element : this.element;
      node.focus();
      this.bindEvent(this.element);
    };

    Dialog.prototype.bindEvent = function (element) {
      _ej2Base.EventHandler.add(element, 'keydown', this.keyDown, this);
    };

    Dialog.prototype.unBindEvent = function (element) {
      _ej2Base.EventHandler.remove(element, 'keydown', this.keyDown);
    };

    Dialog.prototype.updateSanitizeContent = function () {
      if (!this.isBlazorServerRender()) {
        this.contentEle.innerHTML = this.sanitizeHelper(this.content);
      }
    };

    Dialog.prototype.isBlazorServerRender = function () {
      return (0, _ej2Base.isBlazor)() && this.isServerRendered;
    };
    /**
     * Module required function
     * @private
     */


    Dialog.prototype.getModuleName = function () {
      return 'dialog';
    };
    /**
     * Called internally if any of the property value changed
     * @private
     */


    Dialog.prototype.onPropertyChanged = function (newProp, oldProp) {
      if (!this.element.classList.contains(ROOT)) {
        return;
      }

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'content':
            if (!(0, _ej2Base.isNullOrUndefined)(this.content) && this.content !== '') {
              if (this.isBlazorServerRender()) {
                this.contentEle = this.element.querySelector('.e-dlg-content');
              }

              if (!(0, _ej2Base.isNullOrUndefined)(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {
                if (!this.isBlazorServerRender()) {
                  this.contentEle.innerHTML = '';
                }

                typeof this.content === 'string' ? this.isBlazorServerRender() && this.contentEle.innerText === '' ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
                this.setMaxHeight();
              } else {
                if (!this.isBlazorServerRender() || (0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.e-dlg-content'))) {
                  this.setContent();
                }
              }
            } else if (!(0, _ej2Base.isNullOrUndefined)(this.contentEle)) {
              (0, _ej2Base.detach)(this.contentEle);
              this.contentEle = null;
            }

            break;

          case 'header':
            if (this.header === '' || (0, _ej2Base.isNullOrUndefined)(this.header)) {
              if (this.headerEle) {
                (0, _ej2Base.detach)(this.headerEle);
                this.headerEle = null;
              }
            } else {
              if (!this.isBlazorServerRender() || (0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.e-dlg-header-content'))) {
                this.setHeader();
              }
            }

            break;

          case 'footerTemplate':
            if (this.footerTemplate === '' || (0, _ej2Base.isNullOrUndefined)(this.footerTemplate)) {
              if (!this.ftrTemplateContent) {
                return;
              }

              (0, _ej2Base.detach)(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
              this.buttons = [{}];
            } else {
              if (!this.isBlazorServerRender() || (0, _ej2Base.isNullOrUndefined)(this.element.querySelector('.e-footer-content'))) {
                this.setFooterTemplate();
              }

              this.buttons = [{}];
            }

            break;

          case 'showCloseIcon':
            if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
              if (!this.showCloseIcon && (this.header === '' || (0, _ej2Base.isNullOrUndefined)(this.header))) {
                (0, _ej2Base.detach)(this.headerContent);
                this.headerContent = null;
              } else if (!this.showCloseIcon) {
                (0, _ej2Base.detach)(this.closeIcon);
              } else {
                if (this.isBlazorServerRender()) {
                  this.wireEvents();
                }
              }
            } else {
              if (!this.isBlazorServerRender()) {
                this.renderCloseIcon();
              }

              this.wireEvents();
            }

            break;

          case 'locale':
            if (this.showCloseIcon) {
              this.closeIconTitle();
            }

            break;

          case 'visible':
            this.visible ? this.show() : this.hide();
            break;

          case 'isModal':
            this.updateIsModal();
            break;

          case 'height':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'height': (0, _ej2Base.formatUnit)(newProp.height)
            });
            break;

          case 'width':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'width': (0, _ej2Base.formatUnit)(newProp.width)
            });
            break;

          case 'zIndex':
            this.popupObj.zIndex = this.zIndex;

            if (this.isModal) {
              this.setOverlayZindex(this.zIndex);
            }

            if (this.element.style.zIndex !== this.zIndex.toString()) {
              this.calculatezIndex = false;
            }

            break;

          case 'cssClass':
            this.setCSSClass(oldProp.cssClass);
            break;

          case 'buttons':
            var buttonCount = this.buttons.length;

            if (!(0, _ej2Base.isNullOrUndefined)(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
              (0, _ej2Base.detach)(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
            }

            for (var i = 0; i < buttonCount; i++) {
              if (!(0, _ej2Base.isNullOrUndefined)(this.buttons[i].buttonModel)) {
                this.footerTemplate = '';
                this.setButton();
              }
            }

            break;

          case 'allowDragging':
            if (this.allowDragging && !(0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
              this.setAllowDragging();
            } else {
              this.dragObj.destroy();
            }

            break;

          case 'target':
            this.popupObj.relateTo = newProp.target;
            break;

          case 'position':
            this.checkPositionData();

            if (this.isModal) {
              var positionX = (0, _ej2Base.isNullOrUndefined)(oldProp.position.X) ? this.position.X : oldProp.position.X;
              var positionY = (0, _ej2Base.isNullOrUndefined)(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;

              if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {
                this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);
              }
            }

            this.positionChange();
            break;

          case 'enableRtl':
            this.setEnableRTL();
            break;

          case 'enableResize':
            this.setResize();
            break;
        }
      }
    };

    Dialog.prototype.updateIsModal = function () {
      this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');

      if (this.isModal) {
        this.setIsModal();
        this.element.style.top = '0px';
        this.element.style.left = '0px';

        if (!(0, _ej2Base.isNullOrUndefined)(this.targetEle)) {
          this.targetEle.appendChild(this.dlgContainer);
        }
      } else {
        (0, _ej2Base.removeClass)([this.element], MODAL_DLG);
        (0, _ej2Base.removeClass)([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        (0, _ej2Base.detach)(this.dlgOverlay);

        while (this.dlgContainer.firstChild) {
          this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
        }

        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
      }

      if (this.visible) {
        this.show();
      }

      this.positionChange();

      if (this.isModal && this.dlgOverlay) {
        _ej2Base.EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
      }
    };

    Dialog.prototype.setzIndex = function (zIndexElement, setPopupZindex) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.zIndex = (0, _popup.getZindexPartial)(zIndexElement);
      this.isProtectedOnChange = prevOnChange;

      if (setPopupZindex) {
        this.popupObj.zIndex = this.zIndex;
      }
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */


    Dialog.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}
     * @memberof dialog
     */


    Dialog.prototype.destroy = function () {
      var classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE];
      var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];

      if (this.isModal) {
        (0, _ej2Base.removeClass)([!(0, _ej2Base.isNullOrUndefined)(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
      }

      this.unWireEvents();

      if (!(0, _ej2Base.isNullOrUndefined)(this.btnObj)) {
        for (var i = 0; i < this.btnObj.length; i++) {
          this.btnObj[i].destroy();
        }
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.dragObj)) {
        this.dragObj.destroy();
      }

      if (this.popupObj.element.classList.contains(POPUP_ROOT)) {
        this.popupObj.destroy();
      }

      (0, _ej2Base.removeClass)([this.element], classArray);

      if (!(0, _ej2Base.isNullOrUndefined)(this.cssClass) && this.cssClass !== '') {
        (0, _ej2Base.removeClass)([this.element], this.cssClass.split(' '));
      }

      if (this.isModal && !this.isBlazorServerRender()) {
        (0, _ej2Base.detach)(this.dlgOverlay);
        this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
        (0, _ej2Base.detach)(this.dlgContainer);
      }

      if (!this.isBlazorServerRender()) {
        this.element.innerHTML = this.clonedEle.innerHTML;
      }

      if (this.isBlazorServerRender()) {
        if (!(0, _ej2Base.isNullOrUndefined)(this.element.children)) {
          for (var i = 0; i <= this.element.children.length; i++) {
            i = i - i;
            (0, _ej2Base.detach)(this.element.children[i]);
          }
        }
      }

      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[i]);
      }

      _super.prototype.destroy.call(this);
    };
    /**
     * Binding event to the element while widget creation
     * @hidden
     */


    Dialog.prototype.wireEvents = function () {
      if (this.isBlazorServerRender() && this.showCloseIcon) {
        this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];
      }

      if (this.showCloseIcon) {
        _ej2Base.EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);
      }

      if (this.isModal && this.dlgOverlay) {
        _ej2Base.EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
      }
    };
    /**
     * Unbinding event to the element while widget destroy
     * @hidden
     */


    Dialog.prototype.unWireEvents = function () {
      if (this.showCloseIcon) {
        _ej2Base.EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);
      }

      if (this.isModal) {
        _ej2Base.EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.buttons[0].buttonModel) && this.footerTemplate === '') {
        for (var i = 0; i < this.buttons.length; i++) {
          if (typeof this.buttons[i].click === 'function') {
            _ej2Base.EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);
          }
        }
      }
    };
    /**
     * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.
     * @return {void}
     */


    Dialog.prototype.refreshPosition = function () {
      this.popupObj.refreshPosition();
    };
    /**
     * Opens the dialog if it is in hidden state.
     * To open the dialog with full screen width, set the parameter to true.
     * @param { boolean } isFullScreen - Enable the fullScreen Dialog.
     * @return {void}
     */


    Dialog.prototype.show = function (isFullScreen) {
      var _this = this;

      if (!this.element.classList.contains(ROOT)) {
        return;
      }

      if (!this.element.classList.contains(DLG_SHOW) || !(0, _ej2Base.isNullOrUndefined)(isFullScreen)) {
        if (!(0, _ej2Base.isNullOrUndefined)(isFullScreen)) {
          this.fullScreen(isFullScreen);
        }

        var eventArgs_1 = (0, _ej2Base.isBlazor)() ? {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          maxHeight: this.element.style.maxHeight
        } : {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          target: this.target,
          maxHeight: this.element.style.maxHeight
        };
        this.trigger('beforeOpen', eventArgs_1, function (beforeOpenArgs) {
          if (!beforeOpenArgs.cancel) {
            if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {
              _this.allowMaxHeight = false;
              _this.element.style.maxHeight = eventArgs_1.maxHeight;
            }

            _this.storeActiveElement = document.activeElement;
            _this.element.tabIndex = -1;

            if (_this.isModal && !(0, _ej2Base.isNullOrUndefined)(_this.dlgOverlay)) {
              _this.dlgOverlay.style.display = 'block';
              _this.dlgContainer.style.display = 'flex';
              (0, _ej2Base.removeClass)([_this.dlgOverlay], 'e-fade');

              if (!(0, _ej2Base.isNullOrUndefined)(_this.targetEle)) {
                if (_this.targetEle === document.body) {
                  _this.dlgContainer.style.position = 'fixed';
                } else {
                  _this.dlgContainer.style.position = 'absolute';
                }

                _this.dlgOverlay.style.position = 'absolute';
                _this.element.style.position = 'relative';
                (0, _ej2Base.addClass)([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              } else {
                (0, _ej2Base.addClass)([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }

            var openAnimation = {
              name: _this.animationSettings.effect + 'In',
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;

            if (_this.calculatezIndex) {
              _this.setzIndex(zIndexElement, true);

              (0, _ej2Base.setStyleAttribute)(_this.element, {
                'zIndex': _this.zIndex
              });

              if (_this.isModal) {
                _this.setOverlayZindex(_this.zIndex);
              }
            }

            _this.animationSettings.effect === 'None' ? _this.popupObj.show() : _this.popupObj.show(openAnimation);
            _this.dialogOpen = true;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = true;
            _this.preventVisibility = true;
            _this.isProtectedOnChange = prevOnChange;
          }
        });
      }
    };
    /**
     * Closes the dialog if it is in visible state.
     * @return {void}
     */


    Dialog.prototype.hide = function (event) {
      var _this = this;

      if (!this.element.classList.contains(ROOT)) {
        return;
      }

      if (this.preventVisibility) {
        var eventArgs = (0, _ej2Base.isBlazor)() ? {
          cancel: false,
          isInteraction: event ? true : false,
          isInteracted: event ? true : false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          event: event
        } : {
          cancel: false,
          isInteraction: event ? true : false,
          isInteracted: event ? true : false,
          element: this.element,
          target: this.target,
          container: this.isModal ? this.dlgContainer : this.element,
          event: event
        };
        this.closeArgs = eventArgs;
        this.trigger('beforeClose', eventArgs, function (beforeCloseArgs) {
          if (!beforeCloseArgs.cancel) {
            if (_this.isModal) {
              !(0, _ej2Base.isNullOrUndefined)(_this.targetEle) ? (0, _ej2Base.removeClass)([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) : (0, _ej2Base.removeClass)([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            }

            var closeAnimation = {
              name: _this.animationSettings.effect + 'Out',
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            _this.animationSettings.effect === 'None' ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);
            _this.dialogOpen = false;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = false;
            _this.preventVisibility = false;
            _this.isProtectedOnChange = prevOnChange;
          }
        });
      }
    };
    /**
     * Specifies to view the Full screen Dialog.
     * @private
     */


    Dialog.prototype.fullScreen = function (args) {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;

      if (args) {
        (0, _ej2Base.addClass)([this.element], FULLSCREEN);
        var display = this.element.style.display;
        this.element.style.display = 'none';
        this.element.style.maxHeight = !(0, _ej2Base.isNullOrUndefined)(this.target) ? this.targetEle.offsetHeight + 'px' : window.innerHeight + 'px';
        this.element.style.display = display;
        (0, _ej2Base.addClass)([document.body], [DLG_TARGET, SCROLL_DISABLED]);

        if (this.allowDragging && !(0, _ej2Base.isNullOrUndefined)(this.dragObj)) {
          this.dragObj.destroy();
        }
      } else {
        (0, _ej2Base.removeClass)([this.element], FULLSCREEN);
        (0, _ej2Base.removeClass)([document.body], [DLG_TARGET, SCROLL_DISABLED]);

        if (this.allowDragging && !(0, _ej2Base.isNullOrUndefined)(this.headerContent)) {
          this.setAllowDragging();
        }
      }

      return args;
    };
    /**
     * Returns the dialog button instances.
     * Based on that, you can dynamically change the button states.
     * @param { number } index - Index of the button.
     * @return {Button}
     */


    Dialog.prototype.getButtons = function (index) {
      if (!(0, _ej2Base.isNullOrUndefined)(index)) {
        return this.btnObj[index];
      }

      return this.btnObj;
    };

    __decorate([(0, _ej2Base.Property)('')], Dialog.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Dialog.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Dialog.prototype, "showCloseIcon", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Dialog.prototype, "isModal", void 0);

    __decorate([(0, _ej2Base.Property)('')], Dialog.prototype, "header", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Dialog.prototype, "visible", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Dialog.prototype, "enableResize", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Dialog.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('')], Dialog.prototype, "minHeight", void 0);

    __decorate([(0, _ej2Base.Property)('100%')], Dialog.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('')], Dialog.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], Dialog.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Dialog.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)('')], Dialog.prototype, "footerTemplate", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Dialog.prototype, "allowDragging", void 0);

    __decorate([(0, _ej2Base.Collection)([{}], ButtonProps)], Dialog.prototype, "buttons", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Dialog.prototype, "closeOnEscape", void 0);

    __decorate([(0, _ej2Base.Complex)({}, AnimationSettings)], Dialog.prototype, "animationSettings", void 0);

    __decorate([(0, _ej2Base.Complex)({
      X: 'center',
      Y: 'center'
    }, _popup.PositionData)], Dialog.prototype, "position", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "beforeSanitizeHtml", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "dragStart", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "dragStop", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "drag", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "overlayClick", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "resizeStart", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "resizing", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "resizeStop", void 0);

    __decorate([(0, _ej2Base.Event)()], Dialog.prototype, "destroyed", void 0);

    Dialog = __decorate([_ej2Base.NotifyPropertyChanges], Dialog);
    return Dialog;
  }(_ej2Base.Component);

  _exports.Dialog = Dialog;

  /**
   * Base for creating Alert and Confirmation Dialog through util method.
   */
  var DialogUtility;
  _exports.DialogUtility = DialogUtility;

  (function (DialogUtility) {
    /**
     * An alert dialog box is used to display warning like messages to the users.
     * ```
     * Eg : DialogUtility.alert('Alert message');
     *
     * ```
     */

    /* istanbul ignore next */
    function alert(args) {
      var dialogComponent;
      var dialogElement = (0, _ej2Base.createElement)('div', {
        'className': DLG_UTIL_ALERT
      });
      document.body.appendChild(dialogElement);
      var alertDialogObj;
      var okButtonModel = [{
        buttonModel: {
          isPrimary: true,
          content: 'OK'
        },
        click: function () {
          this.hide();
        }
      }];

      if (typeof args === 'string') {
        alertDialogObj = createDialog({
          content: args,
          position: {
            X: 'center',
            Y: 'top'
          },
          isModal: true,
          header: DLG_UTIL_DEFAULT_TITLE,
          buttons: okButtonModel
        }, dialogElement);
      } else {
        alertDialogObj = createDialog(alertOptions(args), dialogElement);
      }

      alertDialogObj.close = function () {
        if (args && args.close) {
          args.close.apply(alertDialogObj);
        }

        alertDialogObj.destroy();

        if (alertDialogObj.element.classList.contains('e-dlg-modal')) {
          alertDialogObj.element.parentElement.remove();
          alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
        } else {
          alertDialogObj.element.remove();
        }
      };

      return alertDialogObj;
    }

    DialogUtility.alert = alert;
    /**
     * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.
     * ```
     * Eg : DialogUtility.confirm('Confirm dialog message');
     *
     * ```
     */

    /* istanbul ignore next */

    function confirm(args) {
      var dialogComponent;
      var dialogElement = (0, _ej2Base.createElement)('div', {
        'className': DLG_UTIL_CONFIRM
      });
      document.body.appendChild(dialogElement);
      var confirmDialogObj;
      var okCancelButtonModel = [{
        buttonModel: {
          isPrimary: true,
          content: 'OK'
        },
        click: function () {
          this.hide();
        }
      }, {
        buttonModel: {
          content: 'Cancel'
        },
        click: function () {
          this.hide();
        }
      }];

      if (typeof args === 'string') {
        confirmDialogObj = createDialog({
          position: {
            X: 'center',
            Y: 'top'
          },
          content: args,
          isModal: true,
          header: DLG_UTIL_DEFAULT_TITLE,
          buttons: okCancelButtonModel
        }, dialogElement);
      } else {
        confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
      }

      confirmDialogObj.close = function () {
        if (args && args.close) {
          args.close.apply(confirmDialogObj);
        }

        confirmDialogObj.destroy();

        if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {
          confirmDialogObj.element.parentElement.remove();
          confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
        } else {
          confirmDialogObj.element.remove();
        }
      };

      return confirmDialogObj;
    }

    DialogUtility.confirm = confirm;

    function createDialog(options, element) {
      var dialogObject = new Dialog(options);
      dialogObject.appendTo(element);
      return dialogObject;
    }

    function alertOptions(option) {
      var options = {};
      options.buttons = [];
      options = formOptions(options, option);
      options = setAlertButtonModel(options, option);
      return options;
    }

    function confirmOptions(option) {
      var options = {};
      options.buttons = [];
      options = formOptions(options, option);
      options = setConfirmButtonModel(options, option);
      return options;
    }

    function formOptions(options, option) {
      options.header = !(0, _ej2Base.isNullOrUndefined)(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;
      options.content = !(0, _ej2Base.isNullOrUndefined)(option.content) ? option.content : '';
      options.isModal = !(0, _ej2Base.isNullOrUndefined)(option.isModal) ? option.isModal : true;
      options.showCloseIcon = !(0, _ej2Base.isNullOrUndefined)(option.showCloseIcon) ? option.showCloseIcon : false;
      options.allowDragging = !(0, _ej2Base.isNullOrUndefined)(option.isDraggable) ? option.isDraggable : false;
      options.closeOnEscape = !(0, _ej2Base.isNullOrUndefined)(option.closeOnEscape) ? option.closeOnEscape : false;
      options.position = !(0, _ej2Base.isNullOrUndefined)(option.position) ? option.position : {
        X: 'center',
        Y: 'top'
      };
      options.animationSettings = !(0, _ej2Base.isNullOrUndefined)(option.animationSettings) ? option.animationSettings : {
        effect: 'Fade',
        duration: 400,
        delay: 0
      };
      options.cssClass = !(0, _ej2Base.isNullOrUndefined)(option.cssClass) ? option.cssClass : '';
      options.zIndex = !(0, _ej2Base.isNullOrUndefined)(option.zIndex) ? option.zIndex : 1000;
      options.open = !(0, _ej2Base.isNullOrUndefined)(option.open) ? option.open : null;
      return options;
    }

    function setAlertButtonModel(options, option) {
      var alertButtonModel = [{
        buttonModel: {
          isPrimary: true,
          content: 'OK'
        },
        click: function () {
          this.hide();
        }
      }];

      if (!(0, _ej2Base.isNullOrUndefined)(option.okButton)) {
        options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
      } else {
        options.buttons = alertButtonModel;
      }

      return options;
    }

    function setConfirmButtonModel(options, option) {
      var okButtonModel = {
        buttonModel: {
          isPrimary: true,
          content: 'OK'
        },
        click: function () {
          this.hide();
        }
      };
      var cancelButtonModel = {
        buttonModel: {
          content: 'Cancel'
        },
        click: function () {
          this.hide();
        }
      };

      if (!(0, _ej2Base.isNullOrUndefined)(option.okButton)) {
        options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
      } else {
        options.buttons[0] = okButtonModel;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(option.cancelButton)) {
        options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
      } else {
        options.buttons[1] = cancelButtonModel;
      }

      return options;
    }

    function formButtonModel(buttonModel, option, buttonPropModel) {
      var buttonProps = buttonPropModel;

      if (!(0, _ej2Base.isNullOrUndefined)(option.text)) {
        buttonProps.buttonModel.content = option.text;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(option.icon)) {
        buttonProps.buttonModel.iconCss = option.icon;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(option.cssClass)) {
        buttonProps.buttonModel.cssClass = option.cssClass;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(option.click)) {
        buttonProps.click = option.click;
      }

      return buttonProps;
    }
  })(DialogUtility || (_exports.DialogUtility = DialogUtility = {}));
});;
define('@syncfusion/ej2-popups/src/dialog/index',["exports", "./dialog"], function (_exports, _dialog) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_dialog).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _dialog[key];
  });
});;
define('@syncfusion/ej2-popups/src/index',["exports", "./popup/index", "./common/index", "./dialog/index", "./tooltip/index", "./spinner/index"], function (_exports, _index, _index2, _index3, _index4, _index5) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
});;
define('@syncfusion/ej2-popups/src/popup/index',["exports", "./popup"], function (_exports, _popup) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_popup).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _popup[key];
  });
});;
define('@syncfusion/ej2-popups/src/popup/popup',["exports", "@syncfusion/ej2-base", "../common/position", "../common/collision"], function (_exports, _ej2Base, _position, _collision) {
  "use strict";

  _exports.__esModule = true;
  _exports.getScrollableParent = getScrollableParent;
  _exports.getZindexPartial = getZindexPartial;
  _exports.getMaxZindex = getMaxZindex;
  _exports.Popup = _exports.PositionData = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * Specifies the offset position values.
   */
  var PositionData =
  /** @class */
  function (_super) {
    __extends(PositionData, _super);

    function PositionData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('left')], PositionData.prototype, "X", void 0);

    __decorate([(0, _ej2Base.Property)('top')], PositionData.prototype, "Y", void 0);

    return PositionData;
  }(_ej2Base.ChildProperty);

  _exports.PositionData = PositionData;
  // don't use space in classNames
  var CLASSNAMES = {
    ROOT: 'e-popup',
    RTL: 'e-rtl',
    OPEN: 'e-popup-open',
    CLOSE: 'e-popup-close'
  };
  /**
   * Represents the Popup Component
   * ```html
   * <div id="popup" style="position:absolute;height:100px;width:100px;">
   * <div style="margin:35px 25px;">Popup Content</div></div>
   * ```
   * ```typescript
   * <script>
   *   var popupObj = new Popup();
   *   popupObj.appendTo("#popup");
   * </script>
   * ```
   */

  var Popup =
  /** @class */
  function (_super) {
    __extends(Popup, _super);

    function Popup(element, options) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Called internally if any of the property value changed.
     * @private
     */


    Popup.prototype.onPropertyChanged = function (newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'width':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'width': (0, _ej2Base.formatUnit)(newProp.width)
            });
            break;

          case 'height':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'height': (0, _ej2Base.formatUnit)(newProp.height)
            });
            break;

          case 'zIndex':
            (0, _ej2Base.setStyleAttribute)(this.element, {
              'zIndex': newProp.zIndex
            });
            break;

          case 'enableRtl':
            this.setEnableRtl();
            break;

          case 'position':
          case 'relateTo':
            this.refreshPosition();
            break;

          case 'offsetX':
            var x = newProp.offsetX - oldProp.offsetX;
            this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + 'px';
            break;

          case 'offsetY':
            var y = newProp.offsetY - oldProp.offsetY;
            this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + 'px';
            break;

          case 'content':
            this.setContent();
            break;

          case 'actionOnScroll':
            if (newProp.actionOnScroll !== 'none') {
              this.wireScrollEvents();
            } else {
              this.unwireScrollEvents();
            }

            break;
        }
      }
    };
    /**
     * gets the Component module name.
     * @private
     */


    Popup.prototype.getModuleName = function () {
      return 'popup';
    };
    /**
     * gets the persisted state properties of the Component.
     */


    Popup.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * To destroy the control.
     */


    Popup.prototype.destroy = function () {
      this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
      this.unwireEvents();

      _super.prototype.destroy.call(this);
    };
    /**
     * To Initialize the control rendering
     * @private
     */


    Popup.prototype.render = function () {
      this.element.classList.add(CLASSNAMES.ROOT);
      var styles = {};

      if (this.zIndex !== 1000) {
        styles.zIndex = this.zIndex;
      }

      if (this.width !== 'auto') {
        styles.width = (0, _ej2Base.formatUnit)(this.width);
      }

      if (this.height !== 'auto') {
        styles.height = (0, _ej2Base.formatUnit)(this.height);
      }

      (0, _ej2Base.setStyleAttribute)(this.element, styles);
      this.fixedParent = false;
      this.setEnableRtl();
      this.setContent();
    };

    Popup.prototype.wireEvents = function () {
      if (_ej2Base.Browser.isDevice) {
        _ej2Base.EventHandler.add(window, 'orientationchange', this.orientationOnChange, this);
      }

      if (this.actionOnScroll !== 'none') {
        this.wireScrollEvents();
      }
    };

    Popup.prototype.wireScrollEvents = function () {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_1 = _a[_i];

          _ej2Base.EventHandler.add(parent_1, 'scroll', this.scrollRefresh, this);
        }
      }
    };

    Popup.prototype.unwireEvents = function () {
      if (_ej2Base.Browser.isDevice) {
        _ej2Base.EventHandler.remove(window, 'orientationchange', this.orientationOnChange);
      }

      if (this.actionOnScroll !== 'none') {
        this.unwireScrollEvents();
      }
    };

    Popup.prototype.unwireScrollEvents = function () {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_2 = _a[_i];

          _ej2Base.EventHandler.remove(parent_2, 'scroll', this.scrollRefresh);
        }
      }
    };

    Popup.prototype.getRelateToElement = function () {
      var relateToElement = this.relateTo === '' || (0, _ej2Base.isNullOrUndefined)(this.relateTo) ? document.body : this.relateTo;
      this.setProperties({
        relateTo: relateToElement
      }, true);
      return typeof this.relateTo === 'string' ? document.querySelector(this.relateTo) : this.relateTo;
    };

    Popup.prototype.scrollRefresh = function (e) {
      if (this.actionOnScroll === 'reposition') {
        if (!(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && e.target.parentElement == null)) {
          this.refreshPosition();
        }
      } else if (this.actionOnScroll === 'hide') {
        this.hide();
      }

      if (this.actionOnScroll !== 'none') {
        if (this.getRelateToElement()) {
          var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);

          if (!targetVisible && !this.targetInvisibleStatus) {
            this.trigger('targetExitViewport');
            this.targetInvisibleStatus = true;
          } else if (targetVisible) {
            this.targetInvisibleStatus = false;
          }
        }
      }
    };
    /**
     * This method is to get the element visibility on viewport when scroll
     * the page. This method will returns true even though 1 px of element
     * part is in visible.
     */


    Popup.prototype.isElementOnViewport = function (relateToElement, scrollElement) {
      var scrollParents = this.getScrollableParent(relateToElement);

      for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {
        if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {
          continue;
        } else {
          return false;
        }
      }

      return true;
    };

    Popup.prototype.isElementVisible = function (relateToElement, scrollElement) {
      var rect = this.checkGetBoundingClientRect(relateToElement);

      if (!rect.height || !rect.width) {
        return false;
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.checkGetBoundingClientRect(scrollElement))) {
        var parent_4 = scrollElement.getBoundingClientRect();
        return !(rect.bottom < parent_4.top) && !(rect.bottom > parent_4.bottom) && !(rect.right > parent_4.right) && !(rect.left < parent_4.left);
      } else {
        var win = window;
        var windowView = {
          top: win.scrollY,
          left: win.scrollX,
          right: win.scrollX + win.outerWidth,
          bottom: win.scrollY + win.outerHeight
        };
        var off = (0, _position.calculatePosition)(relateToElement);
        var ele = {
          top: off.top,
          left: off.left,
          right: off.left + rect.width,
          bottom: off.top + rect.height
        };
        var elementView = {
          top: windowView.bottom - ele.top,
          left: windowView.right - ele.left,
          bottom: ele.bottom - windowView.top,
          right: ele.right - windowView.left
        };
        return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
      }
    };
    /**
     * Initialize the event handler
     * @private
     */


    Popup.prototype.preRender = function () {//There is no event handler
    };

    Popup.prototype.setEnableRtl = function () {
      this.reposition();
      this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
    };

    Popup.prototype.setContent = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.content)) {
        this.element.innerHTML = '';

        if (typeof this.content === 'string') {
          this.element.textContent = this.content;
        } else {
          this.element.appendChild(this.content);
        }
      }
    };

    Popup.prototype.orientationOnChange = function () {
      var _this = this;

      setTimeout(function () {
        _this.refreshPosition();
      }, 200);
    };
    /**
     * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.
     */


    Popup.prototype.refreshPosition = function (target, collision) {
      if (!(0, _ej2Base.isNullOrUndefined)(target)) {
        this.checkFixedParent(target);
      }

      this.reposition();

      if (!collision) {
        this.checkCollision();
      }
    };

    Popup.prototype.reposition = function () {
      var pos;
      var position;
      var relateToElement = this.getRelateToElement();

      if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {
        pos = {
          left: this.position.X,
          top: this.position.Y
        };
      } else if (typeof this.position.X === 'string' && typeof this.position.Y === 'number' || typeof this.position.X === 'number' && typeof this.position.Y === 'string') {
        var display = this.element.style.display;
        var parentDisplay = void 0;
        this.element.style.display = 'block';

        if (this.element.classList.contains('e-dlg-modal')) {
          parentDisplay = this.element.parentElement.style.display;
          this.element.parentElement.style.display = 'block';
        }

        position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);

        if (typeof this.position.X === 'string') {
          pos = {
            left: position.left,
            top: this.position.Y
          };
        } else {
          pos = {
            left: this.position.X,
            top: position.top
          };
        }

        this.element.style.display = display;

        if (this.element.classList.contains('e-dlg-modal')) {
          this.element.parentElement.style.display = parentDisplay;
        }
      } else if (relateToElement) {
        var display = this.element.style.display;
        this.element.style.display = 'block';
        pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        this.element.style.display = display;
      } else {
        pos = {
          left: 0,
          top: 0
        };
      }

      if (!(0, _ej2Base.isNullOrUndefined)(pos)) {
        this.element.style.left = pos.left + 'px';
        this.element.style.top = pos.top + 'px';
      }
    };

    Popup.prototype.checkGetBoundingClientRect = function (ele) {
      var eleRect;

      try {
        eleRect = ele.getBoundingClientRect();
        return eleRect;
      } catch (error) {
        return null;
      }
    };

    Popup.prototype.getAnchorPosition = function (anchorEle, ele, position, offsetX, offsetY) {
      var eleRect = this.checkGetBoundingClientRect(ele);
      var anchorRect = this.checkGetBoundingClientRect(anchorEle);

      if ((0, _ej2Base.isNullOrUndefined)(eleRect) || (0, _ej2Base.isNullOrUndefined)(anchorRect)) {
        return null;
      }

      var anchor = anchorEle;
      var anchorPos = {
        left: 0,
        top: 0
      };

      if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {
        anchorPos = (0, _position.calculatePosition)(anchorEle);
      } else {
        if (ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY') {
          ele = ele.parentElement;
        }

        anchorPos = (0, _position.calculateRelativeBasedPosition)(anchor, ele);
      }

      switch (position.X) {
        default:
        case 'left':
          break;

        case 'center':
          if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
            anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
          } else if (this.targetType === 'container') {
            anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
          } else {
            anchorPos.left += anchorRect.width / 2;
          }

          break;

        case 'right':
          if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
            anchorPos.left += window.innerWidth - eleRect.width;
          } else if (this.targetType === 'container') {
            anchorPos.left += anchorRect.width - eleRect.width;
          } else {
            anchorPos.left += anchorRect.width;
          }

          break;
      }

      switch (position.Y) {
        default:
        case 'top':
          break;

        case 'center':
          if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
            anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
          } else if (this.targetType === 'container') {
            anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
          } else {
            anchorPos.top += anchorRect.height / 2;
          }

          break;

        case 'bottom':
          if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {
            anchorPos.top += window.innerHeight - eleRect.height;
          } else if (this.targetType === 'container') {
            anchorPos.top += anchorRect.height - eleRect.height;
          } else {
            anchorPos.top += anchorRect.height;
          }

          break;
      }

      anchorPos.left += offsetX;
      anchorPos.top += offsetY;
      return anchorPos;
    };

    Popup.prototype.callFlip = function (param) {
      var relateToElement = this.getRelateToElement();
      (0, _collision.flip)(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
    };

    Popup.prototype.callFit = function (param) {
      if ((0, _collision.isCollide)(this.element, this.viewPortElement).length !== 0) {
        if ((0, _ej2Base.isNullOrUndefined)(this.viewPortElement)) {
          var data = (0, _collision.fit)(this.element, this.viewPortElement, param);

          if (param.X) {
            this.element.style.left = data.left + 'px';
          }

          if (param.Y) {
            this.element.style.top = data.top + 'px';
          }
        } else {
          var elementRect = this.checkGetBoundingClientRect(this.element);
          var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);

          if ((0, _ej2Base.isNullOrUndefined)(elementRect) || (0, _ej2Base.isNullOrUndefined)(viewPortRect)) {
            return null;
          }

          if (param && param.Y === true) {
            if (viewPortRect.top > elementRect.top) {
              this.element.style.top = '0px';
            } else if (viewPortRect.bottom < elementRect.bottom) {
              this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';
            }
          }

          if (param && param.X === true) {
            if (viewPortRect.right < elementRect.right) {
              this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';
            } else if (viewPortRect.left > elementRect.left) {
              this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';
            }
          }
        }
      }
    };

    Popup.prototype.checkCollision = function () {
      var horz = this.collision.X;
      var vert = this.collision.Y;

      if (horz === 'none' && vert === 'none') {
        return;
      }

      if (horz === 'flip' && vert === 'flip') {
        this.callFlip({
          X: true,
          Y: true
        });
      } else if (horz === 'fit' && vert === 'fit') {
        this.callFit({
          X: true,
          Y: true
        });
      } else {
        if (horz === 'flip') {
          this.callFlip({
            X: true,
            Y: false
          });
        } else if (vert === 'flip') {
          this.callFlip({
            Y: true,
            X: false
          });
        }

        if (horz === 'fit') {
          this.callFit({
            X: true,
            Y: false
          });
        } else if (vert === 'fit') {
          this.callFit({
            X: false,
            Y: true
          });
        }
      }
    };
    /**
     * Shows the popup element from screen.
     * @param { AnimationModel | Function } collisionOrAnimationOptions? - To pass animation options or collision function.
     * @param { Function } collision? - To pass the collision function.
     * @param { HTMLElement } relativeElement? - To calculate the zIndex value dynamically.
     */


    Popup.prototype.show = function (animationOptions, relativeElement) {
      var _this = this;

      this.wireEvents();

      if (this.zIndex === 1000 || !(0, _ej2Base.isNullOrUndefined)(relativeElement)) {
        var zIndexElement = (0, _ej2Base.isNullOrUndefined)(relativeElement) ? this.element : relativeElement;
        this.zIndex = getZindexPartial(zIndexElement);
        (0, _ej2Base.setStyleAttribute)(this.element, {
          'zIndex': this.zIndex
        });
      }

      animationOptions = !(0, _ej2Base.isNullOrUndefined)(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.showAnimation;

      if (this.collision.X !== 'none' || this.collision.Y !== 'none') {
        (0, _ej2Base.removeClass)([this.element], CLASSNAMES.CLOSE);
        (0, _ej2Base.addClass)([this.element], CLASSNAMES.OPEN);
        this.checkCollision();
        (0, _ej2Base.removeClass)([this.element], CLASSNAMES.OPEN);
        (0, _ej2Base.addClass)([this.element], CLASSNAMES.CLOSE);
      }

      if (!(0, _ej2Base.isNullOrUndefined)(animationOptions)) {
        animationOptions.begin = function () {
          if (!_this.isDestroyed) {
            (0, _ej2Base.removeClass)([_this.element], CLASSNAMES.CLOSE);
            (0, _ej2Base.addClass)([_this.element], CLASSNAMES.OPEN);
          }
        };

        animationOptions.end = function () {
          if (!_this.isDestroyed) {
            _this.trigger('open');
          }
        };

        new _ej2Base.Animation(animationOptions).animate(this.element);
      } else {
        (0, _ej2Base.removeClass)([this.element], CLASSNAMES.CLOSE);
        (0, _ej2Base.addClass)([this.element], CLASSNAMES.OPEN);
        this.trigger('open');
      }
    };
    /**
     * Hides the popup element from screen.
     * @param { AnimationModel } animationOptions? - To give the animation options.
     */


    Popup.prototype.hide = function (animationOptions) {
      var _this = this;

      animationOptions = !(0, _ej2Base.isNullOrUndefined)(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.hideAnimation;

      if (!(0, _ej2Base.isNullOrUndefined)(animationOptions)) {
        animationOptions.end = function () {
          if (!_this.isDestroyed) {
            (0, _ej2Base.removeClass)([_this.element], CLASSNAMES.OPEN);
            (0, _ej2Base.addClass)([_this.element], CLASSNAMES.CLOSE);

            _this.trigger('close');
          }
        };

        new _ej2Base.Animation(animationOptions).animate(this.element);
      } else {
        (0, _ej2Base.removeClass)([this.element], CLASSNAMES.OPEN);
        (0, _ej2Base.addClass)([this.element], CLASSNAMES.CLOSE);
        this.trigger('close');
      }

      this.unwireEvents();
    };
    /**
     * Gets scrollable parent elements for the given element.
     * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
     */


    Popup.prototype.getScrollableParent = function (element) {
      this.checkFixedParent(element);
      return getScrollableParent(element, this.fixedParent);
    };

    Popup.prototype.checkFixedParent = function (element) {
      var parent = element.parentElement;

      while (parent && parent.tagName !== 'HTML') {
        var parentStyle = getComputedStyle(parent);

        if (parentStyle.position === 'fixed' && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {
          this.element.style.position = 'fixed';
          this.fixedParent = true;
        }

        parent = parent.parentElement;

        if ((0, _ej2Base.isNullOrUndefined)(this.element.offsetParent) && parentStyle.position === 'fixed' && this.element.style.position === 'fixed') {
          this.fixedParent = true;
        }
      }
    };

    __decorate([(0, _ej2Base.Property)('auto')], Popup.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Popup.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Popup.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)('container')], Popup.prototype, "targetType", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Popup.prototype, "viewPortElement", void 0);

    __decorate([(0, _ej2Base.Property)({
      X: 'none',
      Y: 'none'
    })], Popup.prototype, "collision", void 0);

    __decorate([(0, _ej2Base.Property)('')], Popup.prototype, "relateTo", void 0);

    __decorate([(0, _ej2Base.Complex)({}, PositionData)], Popup.prototype, "position", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Popup.prototype, "offsetX", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Popup.prototype, "offsetY", void 0);

    __decorate([(0, _ej2Base.Property)(1000)], Popup.prototype, "zIndex", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Popup.prototype, "enableRtl", void 0);

    __decorate([(0, _ej2Base.Property)('reposition')], Popup.prototype, "actionOnScroll", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Popup.prototype, "showAnimation", void 0);

    __decorate([(0, _ej2Base.Property)(null)], Popup.prototype, "hideAnimation", void 0);

    __decorate([(0, _ej2Base.Event)()], Popup.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], Popup.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], Popup.prototype, "targetExitViewport", void 0);

    Popup = __decorate([_ej2Base.NotifyPropertyChanges], Popup);
    return Popup;
  }(_ej2Base.Component);

  _exports.Popup = Popup;

  /**
   * Gets scrollable parent elements for the given element.
   * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
   * @private
   */
  function getScrollableParent(element, fixedParent) {
    var eleStyle = getComputedStyle(element);
    var scrollParents = [];
    var overflowRegex = /(auto|scroll)/;
    var parent = element.parentElement;

    while (parent && parent.tagName !== 'HTML') {
      var parentStyle = getComputedStyle(parent);

      if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static') && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
        scrollParents.push(parent);
      }

      parent = parent.parentElement;
    }

    if (!fixedParent) {
      scrollParents.push(document);
    }

    return scrollParents;
  }
  /**
   * Gets the maximum z-index of the given element.
   * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.
   * @private
   */


  function getZindexPartial(element) {
    // upto body traversal
    var parent = element.parentElement;
    var parentZindex = [];

    while (parent) {
      if (parent.tagName !== 'BODY') {
        var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');
        var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');

        if (index !== 'auto' && position !== 'static') {
          parentZindex.push(index);
        }

        parent = parent.parentElement;
      } else {
        break;
      }
    } //Body direct children element traversal


    var childrenZindex = [];

    for (var i = 0; i < document.body.children.length; i++) {
      if (!element.isEqualNode(document.body.children[i])) {
        var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');
        var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');

        if (index !== 'auto' && position !== 'static') {
          childrenZindex.push(index);
        }
      }
    }

    childrenZindex.push('999');
    var siblingsZindex = [];

    if (!(0, _ej2Base.isNullOrUndefined)(element.parentElement) && element.parentElement.tagName !== 'BODY') {
      var childNodes = [].slice.call(element.parentElement.children);

      for (var i = 0; i < childNodes.length; i++) {
        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');
        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');

        if (index !== 'auto' && position !== 'static') {
          siblingsZindex.push(index);
        }
      }
    }

    var finalValue = parentZindex.concat(childrenZindex, siblingsZindex);
    var currentZindexValue = Math.max.apply(Math, finalValue) + 1; // Checking the max-zindex value

    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
  }
  /**
   * Gets the maximum z-index of the page.
   * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.
   * @private
   */


  function getMaxZindex(tagName) {
    if (tagName === void 0) {
      tagName = ['*'];
    }

    var maxZindex = [];

    for (var i = 0; i < tagName.length; i++) {
      var elements = document.getElementsByTagName(tagName[i]);

      for (var i_1 = 0; i_1 < elements.length; i_1++) {
        var index = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('z-index');
        var position = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('position');

        if (index !== 'auto' && position !== 'static') {
          maxZindex.push(index);
        }
      }
    }

    var currentZindexValue = Math.max.apply(Math, maxZindex) + 1;
    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
  }
});;
define('@syncfusion/ej2-popups/src/spinner/index',["exports", "./spinner"], function (_exports, _spinner) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_spinner).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _spinner[key];
  });
});;
define('@syncfusion/ej2-popups/src/spinner/spinner',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.blazorSpinner = blazorSpinner;
  _exports.createSpinner = createSpinner;
  _exports.showSpinner = showSpinner;
  _exports.hideSpinner = hideSpinner;
  _exports.setSpinner = setSpinner;
  var globalTimeOut = {};
  var spinTemplate = null;
  var spinCSSClass = null;
  var DEFT_MAT_WIDTH = 30;
  var DEFT_FAB_WIDTH = 30;
  var DEFT_BOOT_WIDTH = 30;
  var DEFT_BOOT4_WIDTH = 36;
  var CLS_SHOWSPIN = 'e-spin-show';
  var CLS_HIDESPIN = 'e-spin-hide';
  var CLS_MATERIALSPIN = 'e-spin-material';
  var CLS_FABRICSPIN = 'e-spin-fabric';
  var CLS_BOOTSPIN = 'e-spin-bootstrap';
  var CLS_BOOT4SPIN = 'e-spin-bootstrap4';
  var CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';
  var CLS_SPINWRAP = 'e-spinner-pane';
  var CLS_SPININWRAP = 'e-spinner-inner';
  var CLS_SPINCIRCLE = 'e-path-circle';
  var CLS_SPINARC = 'e-path-arc';
  var CLS_SPINLABEL = 'e-spin-label';
  var CLS_SPINTEMPLATE = 'e-spin-template';
  /**
   * Function to change the Spinners in a page globally from application end.
   * ```
   * E.g : blazorSpinner({ action: "Create", options: {target: targetElement}, type: "" });
   * ```
   * @param args
   * @private
   */

  function blazorSpinner(action, options, target, type) {
    switch (action) {
      case 'Create':
        var element = document.querySelector(options.target);
        var args = {
          type: type,
          target: element,
          cssClass: options.cssClass,
          label: options.label,
          width: options.width
        };
        createSpinner(args);
        break;

      case 'Show':
        showSpinner(document.querySelector(target));
        break;

      case 'Hide':
        hideSpinner(document.querySelector(target));
        break;

      case 'Set':
        var setArgs = {
          cssClass: options.cssClass,
          type: type
        };
        setSpinner(setArgs);
        break;
    }
  }
  /**
   * Create a spinner for the specified target element.
   * ```
   * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });
   * ```
   * @param args
   * @private
   */


  function createSpinner(args, internalCreateElement) {
    var radius;
    var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;
    var container = create_spinner_container(args.target, makeElement);

    if (!(0, _ej2Base.isNullOrUndefined)(args.cssClass)) {
      container.wrap.classList.add(args.cssClass);
    }

    if (!(0, _ej2Base.isNullOrUndefined)(args.template) || !(0, _ej2Base.isNullOrUndefined)(spinTemplate)) {
      var template = !(0, _ej2Base.isNullOrUndefined)(args.template) ? args.template : spinTemplate;
      container.wrap.classList.add(CLS_SPINTEMPLATE);
      replaceContent(container.wrap, template, spinCSSClass);
    } else {
      var theme = !(0, _ej2Base.isNullOrUndefined)(args.type) ? args.type : getTheme(container.wrap);
      var width = !(0, _ej2Base.isNullOrUndefined)(args.width) ? args.width : undefined;
      radius = calculateRadius(width, theme);
      setTheme(theme, container.wrap, radius, makeElement);

      if (!(0, _ej2Base.isNullOrUndefined)(args.label)) {
        createLabel(container.inner_wrap, args.label, makeElement);
      }
    }

    container.wrap.classList.add(CLS_HIDESPIN);
    container = null;
  }

  function createLabel(container, label, makeElement) {
    var labelEle = makeElement('div', {});
    labelEle.classList.add(CLS_SPINLABEL);
    labelEle.textContent = label;
    container.appendChild(labelEle);
    return labelEle;
  }

  function createMaterialSpinner(container, radius, makeElement) {
    var uniqueID = random_generator();
    globalTimeOut[uniqueID] = {
      timeOut: 0,
      type: 'Material',
      radius: radius
    };
    create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);
    mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);
  }

  function createBootstrap4Spinner(container, radius, makeElement) {
    var uniqueID = random_generator();
    globalTimeOut[uniqueID] = {
      timeOut: 0,
      type: 'Bootstrap4',
      radius: radius
    };
    create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);
    mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);
  }

  function startMatAnimate(container, uniqueID, radius) {
    var globalObject = {};
    var timeOutVar = 0;
    globalTimeOut[uniqueID].timeOut = 0;
    globalObject[uniqueID] = globalVariables(uniqueID, radius, 0, 0);
    var spinnerInfo = {
      uniqueID: uniqueID,
      container: container,
      globalInfo: globalObject,
      timeOutVar: timeOutVar
    };
    animateMaterial(spinnerInfo);
  }

  function createFabricSpinner(container, radius, makeElement) {
    var uniqueID = random_generator();
    globalTimeOut[uniqueID] = {
      timeOut: 0,
      type: 'Fabric',
      radius: radius
    };
    create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);
    fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
  }

  function createHighContrastSpinner(container, radius, makeElement) {
    var uniqueID = random_generator();
    globalTimeOut[uniqueID] = {
      timeOut: 0,
      type: 'HighContrast',
      radius: radius
    };
    create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);
    fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
  }

  function getTheme(container) {
    var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');
    return theme.replace(/['"]+/g, '');
  }

  function setTheme(theme, container, radius, makeElement) {
    var innerContainer = container.querySelector('.' + CLS_SPININWRAP);
    var svg = innerContainer.querySelector('svg');

    if (!(0, _ej2Base.isNullOrUndefined)(svg)) {
      innerContainer.removeChild(svg);
    }

    switch (theme) {
      case 'Material':
        createMaterialSpinner(innerContainer, radius, makeElement);
        break;

      case 'Fabric':
        createFabricSpinner(innerContainer, radius, makeElement);
        break;

      case 'Bootstrap':
        createBootstrapSpinner(innerContainer, radius, makeElement);
        break;

      case 'HighContrast':
        createHighContrastSpinner(innerContainer, radius, makeElement);
        break;

      case 'Bootstrap4':
        createBootstrap4Spinner(innerContainer, radius, makeElement);
        break;
    }
  }

  function createBootstrapSpinner(innerContainer, radius, makeElement) {
    var uniqueID = random_generator();
    globalTimeOut[uniqueID] = {
      timeOut: 0,
      type: 'Bootstrap',
      radius: radius
    };
    create_bootstrap_element(innerContainer, uniqueID, makeElement);
    boot_calculate_attributes(innerContainer, radius);
  }

  function create_bootstrap_element(innerContainer, uniqueID, makeElement) {
    var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    var viewBoxValue = 64;
    var trans = 32;
    var defaultRadius = 2;
    svgBoot.setAttribute('id', uniqueID);
    svgBoot.setAttribute('class', CLS_BOOTSPIN);
    svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);
    innerContainer.insertBefore(svgBoot, innerContainer.firstChild);

    for (var item = 0; item <= 7; item++) {
      var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);
      bootCircle.setAttribute('r', defaultRadius + '');
      bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');
      svgBoot.appendChild(bootCircle);
    }
  }

  function boot_calculate_attributes(innerContainer, radius) {
    var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
    svg.style.width = svg.style.height = radius + 'px';
    var x = 0;
    var y = 0;
    var rad = 24;
    var startArc = 90;

    for (var item = 0; item <= 7; item++) {
      var start = defineArcPoints(x, y, rad, startArc);
      var circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);
      circleEle.setAttribute('cx', start.x + '');
      circleEle.setAttribute('cy', start.y + '');
      startArc = startArc >= 360 ? 0 : startArc;
      startArc = startArc + 45;
    }
  }

  function generateSeries(begin, stop) {
    var series = [];
    var start = begin;
    var end = stop;
    var increment = false;
    var count = 1;
    formSeries(start);

    function formSeries(i) {
      series.push(i);

      if (i !== end || count === 1) {
        if (i <= start && i > 1 && !increment) {
          i = parseFloat((i - 0.2).toFixed(2));
        } else if (i === 1) {
          i = 7;
          i = parseFloat((i + 0.2).toFixed(2));
          increment = true;
        } else if (i < 8 && increment) {
          i = parseFloat((i + 0.2).toFixed(2));

          if (i === 8) {
            increment = false;
          }
        } else if (i <= 8 && !increment) {
          i = parseFloat((i - 0.2).toFixed(2));
        }

        ++count;
        formSeries(i);
      }
    }

    return series;
  }

  function animateBootstrap(innerContainer) {
    var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
    var id = svg.getAttribute('id');

    for (var i = 1; i <= 8; i++) {
      var circleEle = innerContainer.getElementsByClassName('e-path-circle_' + (i === 8 ? 0 : i))[0];
      rotation(circleEle, i, i, generateSeries(i, i), id);
    }

    function rotation(circle, start, end, series, id) {
      var count = 0;
      boot_animate(start);

      function boot_animate(radius) {
        if (globalTimeOut[id].isAnimate) {
          ++count;
          circle.setAttribute('r', radius + '');

          if (count >= series.length) {
            count = 0;
          }

          globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
        }
      }
    }
  }

  function replaceContent(container, template, cssClass) {
    if (!(0, _ej2Base.isNullOrUndefined)(cssClass)) {
      container.classList.add(cssClass);
    }

    var inner = container.querySelector('.e-spinner-inner');
    inner.innerHTML = template;
  }

  function calculateRadius(width, theme) {
    var defaultSize;

    switch (theme) {
      case 'Material':
        defaultSize = DEFT_MAT_WIDTH;
        break;

      case 'Fabric':
        defaultSize = DEFT_FAB_WIDTH;
        break;

      case 'Bootstrap4':
        defaultSize = DEFT_BOOT4_WIDTH;
        break;

      default:
        defaultSize = DEFT_BOOT_WIDTH;
    }

    width = width ? parseFloat(width + '') : defaultSize;
    return theme === 'Bootstrap' ? width : width / 2;
  }

  function globalVariables(id, radius, count, previousId) {
    return {
      radius: radius,
      count: count,
      previousId: previousId
    };
  }

  function random_generator() {
    var random = '';
    var combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

    for (var i = 0; i < 5; i++) {
      random += combine.charAt(Math.floor(Math.random() * combine.length));
    }

    return random;
  }

  function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
    var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svgFabric.setAttribute('id', uniqueID);
    svgFabric.setAttribute('class', themeClass);
    var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);
    var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    fabricCircleArc.setAttribute('class', CLS_SPINARC);
    innerCon.insertBefore(svgFabric, innerCon.firstChild);
    svgFabric.appendChild(fabricCirclePath);
    svgFabric.appendChild(fabricCircleArc);
  }

  function create_material_element(innerContainer, uniqueID, makeElement, cls) {
    var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svgMaterial.setAttribute('class', cls);
    svgMaterial.setAttribute('id', uniqueID);
    var matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    matCirclePath.setAttribute('class', CLS_SPINCIRCLE);
    innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
    svgMaterial.appendChild(matCirclePath);
  }

  function create_spinner_container(target, makeElement) {
    var spinnerContainer = makeElement('div', {});
    spinnerContainer.classList.add(CLS_SPINWRAP);
    var spinnerInnerContainer = makeElement('div', {});
    spinnerInnerContainer.classList.add(CLS_SPININWRAP);
    target.appendChild(spinnerContainer);
    spinnerContainer.appendChild(spinnerInnerContainer);
    return {
      wrap: spinnerContainer,
      inner_wrap: spinnerInnerContainer
    };
  }

  function animateMaterial(spinnerInfo) {
    var start = 1;
    var end = 149;
    var duration = 1333;
    var max = 75;
    createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
    spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
  }

  function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
    var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
    var startTime = new Date().getTime();
    var change = end - start;
    var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + '');
    var strokeSize = getStrokeSize(diameter);
    var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
    mat_animation(spinnerInfo);

    function mat_animation(spinnerInfo) {
      var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));
      updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);

      if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {
        globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);
      } else {
        animateMaterial(spinnerInfo);
      }
    }

    function updatePath(value, container) {
      if (!(0, _ej2Base.isNullOrUndefined)(container.querySelector('svg.e-spin-material')) && !(0, _ej2Base.isNullOrUndefined)(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {
        var svg = container.querySelector('svg.e-spin-material');
        var path = svg.querySelector('path.e-path-circle');
        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');
        path.setAttribute('transform', 'rotate(' + rotate + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');
      }
    }
  }

  function mat_calculate_attributes(radius, container, type, cls) {
    var diameter = radius * 2;
    var svg = container.querySelector('svg.' + cls);
    var path = svg.querySelector('path.e-path-circle');
    var strokeSize = getStrokeSize(diameter);
    var transformOrigin = diameter / 2 + 'px';
    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
    svg.style.width = svg.style.height = diameter + 'px';
    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
    path.setAttribute('d', drawArc(diameter, strokeSize));

    if (type === 'Material') {
      path.setAttribute('stroke-width', strokeSize + '');
      path.setAttribute('stroke-dasharray', (diameter - strokeSize) * Math.PI * 0.75 + '');
      path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');
    }
  }

  function getSize(value) {
    var parsed = parseFloat(value);
    return parsed;
  }

  function drawArc(diameter, strokeSize) {
    var radius = diameter / 2;
    var offset = strokeSize / 2;
    return 'M' + radius + ',' + offset + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;
  }

  function getStrokeSize(diameter) {
    return 10 / 100 * diameter;
  }

  function getDashOffset(diameter, strokeSize, value, max) {
    return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
  }

  function easeAnimation(current, start, change, duration) {
    var timestamp = (current /= duration) * current;
    var timecount = timestamp * current;
    return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
  }

  function fb_calculate_attributes(radius, innerConainer, trgClass) {
    var centerX = radius;
    var centerY = radius;
    var diameter = radius * 2;
    var startArc = 315;
    var endArc = 45;
    var svg = innerConainer.querySelector('.' + trgClass);
    var circle = svg.querySelector('.e-path-circle');
    var path = svg.querySelector('.e-path-arc');
    var transformOrigin = diameter / 2 + 'px';
    circle.setAttribute('d', defineCircle(centerX, centerY, radius));
    path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));
    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;
    svg.style.width = svg.style.height = diameter + 'px';
  }

  function defineArcPoints(centerX, centerY, radius, angle) {
    var radians = (angle - 90) * Math.PI / 180.0;
    return {
      x: centerX + radius * Math.cos(radians),
      y: centerY + radius * Math.sin(radians)
    };
  }

  function defineArc(x, y, radius, startArc, endArc) {
    var start = defineArcPoints(x, y, radius, endArc);
    var end = defineArcPoints(x, y, radius, startArc);
    var d = ['M', start.x, start.y, 'A', radius, radius, 0, 0, 0, end.x, end.y].join(' ');
    return d;
  }

  function defineCircle(x, y, radius) {
    var d = ['M', x, y, 'm', -radius, 0, 'a', radius, radius, 0, 1, 0, radius * 2, 0, 'a', radius, radius, 0, 1, 0, -radius * 2, 0].join(' ');
    return d;
  }
  /**
   * Function to show the Spinner.
   * @param container - Specify the target of the Spinner.
   * @private
   */


  function showSpinner(container) {
    showHideSpinner(container, false);
    container = null;
  }

  function showHideSpinner(container, isHide) {
    var spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container : container.querySelector('.' + CLS_SPINWRAP);
    var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);
    var spinCheck;
    spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);

    if (spinCheck) {
      var svgEle = spinnerWrap.querySelector('svg');

      if ((0, _ej2Base.isNullOrUndefined)(svgEle)) {
        return;
      }

      var id = svgEle.getAttribute('id');
      globalTimeOut[id].isAnimate = !isHide;

      switch (globalTimeOut[id].type) {
        case 'Material':
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);
          break;

        case 'Bootstrap':
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);
          break;
      }
    }

    isHide ? (0, _ej2Base.classList)(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : (0, _ej2Base.classList)(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
    container = null;
  }
  /**
   * Function to hide the Spinner.
   * @param container - Specify the target of the Spinner.
   * @private
   */


  function hideSpinner(container) {
    showHideSpinner(container, true);
    container = null;
  }
  /**
   * Function to change the Spinners in a page globally from application end.
   * ```
   * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });
   * ```
   * @param args
   * @private
   */


  function setSpinner(args, internalCreateElement) {
    var makeElement = !(0, _ej2Base.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _ej2Base.createElement;

    if (args.template !== undefined) {
      spinTemplate = args.template;

      if (args.template !== undefined) {
        spinCSSClass = args.cssClass;
      }
    }

    var container = document.querySelectorAll('.' + CLS_SPINWRAP);

    for (var index = 0; index < container.length; index++) {
      ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);
    }
  }

  function ensureTemplate(template, container, theme, cssClass, makeEle) {
    if ((0, _ej2Base.isNullOrUndefined)(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {
      replaceTheme(container, theme, cssClass, makeEle);

      if (container.classList.contains(CLS_SHOWSPIN)) {
        container.classList.remove(CLS_SHOWSPIN);
        showSpinner(container);
      } else {
        container.classList.remove(CLS_HIDESPIN);
        hideSpinner(container);
      }
    } else {
      spinTemplate = template;

      if (!(0, _ej2Base.isNullOrUndefined)(cssClass)) {
        spinCSSClass = cssClass;
      }
    }
  }

  function replaceTheme(container, theme, cssClass, makeEle) {
    if (!(0, _ej2Base.isNullOrUndefined)(cssClass)) {
      container.classList.add(cssClass);
    }

    var svgElement = container.querySelector('svg');
    var radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;
    var classNames = svgElement.getAttribute('class');
    var svgClassList = classNames.split(/\s/);

    if (svgClassList.indexOf('e-spin-material') >= 0) {
      var id = svgElement.getAttribute('id');
      clearTimeout(globalTimeOut[id].timeOut);
    }

    setTheme(theme, container, radius, makeEle);
  }
});;
define('@syncfusion/ej2-popups/src/tooltip/index',["exports", "./tooltip"], function (_exports, _tooltip) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_tooltip).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _tooltip[key];
  });
});;
define('@syncfusion/ej2-popups/src/tooltip/tooltip',["exports", "@syncfusion/ej2-base", "../popup/popup", "../common/position", "../common/collision"], function (_exports, _ej2Base, _popup, _position, _collision) {
  "use strict";

  _exports.__esModule = true;
  _exports.Tooltip = _exports.Animation = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var TOUCHEND_HIDE_DELAY = 1500;
  var TAPHOLD_THRESHOLD = 500;
  var SHOW_POINTER_TIP_GAP = 0;
  var HIDE_POINTER_TIP_GAP = 8;
  var MOUSE_TRAIL_GAP = 2;
  var POINTER_ADJUST = 2;
  var ROOT = 'e-tooltip';
  var RTL = 'e-rtl';
  var DEVICE = 'e-bigger';
  var ICON = 'e-icons';
  var CLOSE = 'e-tooltip-close';
  var TOOLTIP_WRAP = 'e-tooltip-wrap';
  var CONTENT = 'e-tip-content';
  var ARROW_TIP = 'e-arrow-tip';
  var ARROW_TIP_OUTER = 'e-arrow-tip-outer';
  var ARROW_TIP_INNER = 'e-arrow-tip-inner';
  var TIP_BOTTOM = 'e-tip-bottom';
  var TIP_TOP = 'e-tip-top';
  var TIP_LEFT = 'e-tip-left';
  var TIP_RIGHT = 'e-tip-right';
  var POPUP_ROOT = 'e-popup';
  var POPUP_OPEN = 'e-popup-open';
  var POPUP_CLOSE = 'e-popup-close';
  var POPUP_LIB = 'e-lib';
  var HIDE_POPUP = 'e-hidden';

  var Animation =
  /** @class */
  function (_super) {
    __extends(Animation, _super);

    function Animation() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)({
      effect: 'FadeIn',
      duration: 150,
      delay: 0
    })], Animation.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Property)({
      effect: 'FadeOut',
      duration: 150,
      delay: 0
    })], Animation.prototype, "close", void 0);

    return Animation;
  }(_ej2Base.ChildProperty);

  _exports.Animation = Animation;

  /**
   * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.
   * ```html
   * <div id="tooltip">Show Tooltip</div>
   * ```
   * ```typescript
   * <script>
   *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });
   *   tooltipObj.appendTo("#tooltip");
   * </script>
   * ```
   */
  var Tooltip =
  /** @class */
  function (_super) {
    __extends(Tooltip, _super);
    /**
     * Constructor for creating the Tooltip Component
     */


    function Tooltip(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.isBlazorTooltip = false;
      _this.contentTargetValue = null;
      _this.contentEvent = null;
      _this.contentAnimation = null;
      return _this;
    }

    Tooltip.prototype.initialize = function () {
      this.formatPosition();

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        (0, _ej2Base.addClass)([this.element], ROOT);
      }
    };

    Tooltip.prototype.formatPosition = function () {
      var _a, _b;

      if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {
        _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
      } else {
        _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
      }
    };

    Tooltip.prototype.renderArrow = function () {
      this.setTipClass(this.position);

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        var tip = this.createElement('div', {
          className: ARROW_TIP + ' ' + this.tipClass
        });
        tip.appendChild(this.createElement('div', {
          className: ARROW_TIP_OUTER + ' ' + this.tipClass
        }));
        tip.appendChild(this.createElement('div', {
          className: ARROW_TIP_INNER + ' ' + this.tipClass
        }));
        this.tooltipEle.appendChild(tip);
      } else {
        var tip = this.tooltipEle.querySelector('.' + ARROW_TIP);
        (0, _ej2Base.addClass)([tip.querySelector('.' + ARROW_TIP_OUTER)], this.tipClass);
        (0, _ej2Base.addClass)([tip.querySelector('.' + ARROW_TIP_INNER)], this.tipClass);
        this.tooltipEle.appendChild(tip);
      }
    };

    Tooltip.prototype.setTipClass = function (position) {
      if (position.indexOf('Right') === 0) {
        this.tipClass = TIP_LEFT;
      } else if (position.indexOf('Bottom') === 0) {
        this.tipClass = TIP_TOP;
      } else if (position.indexOf('Left') === 0) {
        this.tipClass = TIP_RIGHT;
      } else {
        this.tipClass = TIP_BOTTOM;
      }
    };

    Tooltip.prototype.renderPopup = function (target) {
      var elePos = this.mouseTrail ? {
        top: 0,
        left: 0
      } : this.getTooltipPosition(target);
      this.tooltipEle.classList.remove(POPUP_LIB);

      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        this.popupObj = new _popup.Popup(this.tooltipEle, {
          position: {
            X: elePos.left,
            Y: elePos.top
          },
          open: this.openPopupHandler.bind(this),
          close: this.closePopupHandler.bind(this),
          enableRtl: this.enableRtl
        });
      } else {
        this.popupObj = new _popup.Popup(this.tooltipEle, {
          height: this.height,
          width: this.width,
          position: {
            X: elePos.left,
            Y: elePos.top
          },
          enableRtl: this.enableRtl,
          open: this.openPopupHandler.bind(this),
          close: this.closePopupHandler.bind(this)
        });
      }
    };

    Tooltip.prototype.getTooltipPosition = function (target) {
      this.tooltipEle.style.display = 'none';
      var pos = (0, _position.calculatePosition)(target, this.tooltipPositionX, this.tooltipPositionY);
      this.tooltipEle.style.display = '';
      var offsetPos = this.calculateTooltipOffset(this.position);
      var elePos = this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);
      return elePos;
    };

    Tooltip.prototype.reposition = function (target) {
      var elePos = this.getTooltipPosition(target);
      this.popupObj.position = {
        X: elePos.left,
        Y: elePos.top
      };
      this.popupObj.dataBind();
    };

    Tooltip.prototype.openPopupHandler = function () {
      if (!this.mouseTrail && this.needTemplateReposition()) {
        this.reposition(this.findTarget());
      }

      this.trigger('afterOpen', this.tooltipEventArgs);
    };

    Tooltip.prototype.closePopupHandler = function () {
      (0, _ej2Base.resetBlazorTemplate)(this.element.id + 'content', 'Content');
      this.clear();
      this.trigger('afterClose', this.tooltipEventArgs);
    };

    Tooltip.prototype.calculateTooltipOffset = function (position) {
      var pos = {
        top: 0,
        left: 0
      };
      var tooltipEleWidth = this.tooltipEle.offsetWidth;
      var tooltipEleHeight = this.tooltipEle.offsetHeight;
      var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
      var tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
      var tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
      var tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
      var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);

      if (this.mouseTrail) {
        tipAdjust += MOUSE_TRAIL_GAP;
      }

      switch (position) {
        case 'RightTop':
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;

        case 'RightCenter':
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;

        case 'RightBottom':
          pos.left += tipWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;

        case 'BottomRight':
          pos.top += tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;

        case 'BottomCenter':
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;

        case 'BottomLeft':
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;

        case 'LeftBottom':
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;

        case 'LeftCenter':
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;

        case 'LeftTop':
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;

        case 'TopLeft':
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;

        case 'TopRight':
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;

        default:
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
      }

      pos.left += this.offsetX;
      pos.top += this.offsetY;
      return pos;
    };

    Tooltip.prototype.updateTipPosition = function (position) {
      var selEle = this.tooltipEle.querySelectorAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER);
      var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
      (0, _ej2Base.removeClass)(selEle, removeList);
      this.setTipClass(position);
      (0, _ej2Base.addClass)(selEle, this.tipClass);
    };

    Tooltip.prototype.adjustArrow = function (target, position, tooltipPositionX, tooltipPositionY) {
      if (this.showTipPointer === false) {
        return;
      }

      this.updateTipPosition(position);
      var leftValue;
      var topValue;
      var tooltipWidth = this.tooltipEle.clientWidth;
      var tooltipHeight = this.tooltipEle.clientHeight;
      var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
      var arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);
      var tipWidth = arrowEle.offsetWidth;
      var tipHeight = arrowEle.offsetHeight;

      if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
        if (this.tipClass === TIP_BOTTOM) {
          topValue = '99.9%'; // Arrow icon aligned -2px height from ArrowOuterTip div

          arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';
        } else {
          topValue = -(tipHeight - 1) + 'px'; // Arrow icon aligned -6px height from ArrowOuterTip div

          arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';
        }

        if (target) {
          var tipPosExclude = tooltipPositionX !== 'Center' || tooltipWidth > target.offsetWidth || this.mouseTrail;

          if (tipPosExclude && tooltipPositionX === 'Left' || !tipPosExclude && this.tipPointerPosition === 'End') {
            leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + 'px';
          } else if (tipPosExclude && tooltipPositionX === 'Right' || !tipPosExclude && this.tipPointerPosition === 'Start') {
            leftValue = POINTER_ADJUST + 'px';
          } else {
            leftValue = tooltipWidth / 2 - tipWidth / 2 + 'px';
          }
        }
      } else {
        if (this.tipClass === TIP_RIGHT) {
          leftValue = '99.9%'; // Arrow icon aligned -2px left from ArrowOuterTip div

          arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';
        } else {
          leftValue = -(tipWidth - 1) + 'px'; // Arrow icon aligned -2px from ArrowOuterTip width

          arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + 'px';
        }

        var tipPosExclude = tooltipPositionY !== 'Center' || tooltipHeight > target.offsetHeight || this.mouseTrail;

        if (tipPosExclude && tooltipPositionY === 'Top' || !tipPosExclude && this.tipPointerPosition === 'End') {
          topValue = tooltipHeight - tipHeight - POINTER_ADJUST + 'px';
        } else if (tipPosExclude && tooltipPositionY === 'Bottom' || !tipPosExclude && this.tipPointerPosition === 'Start') {
          topValue = POINTER_ADJUST + 'px';
        } else {
          topValue = tooltipHeight / 2 - tipHeight / 2 + 'px';
        }
      }

      arrowEle.style.top = topValue;
      arrowEle.style.left = leftValue;
    };

    Tooltip.prototype.renderContent = function (target) {
      var tooltipContent = this.tooltipEle.querySelector('.' + CONTENT);

      if (target && !(0, _ej2Base.isNullOrUndefined)(target.getAttribute('title'))) {
        target.setAttribute('data-content', target.getAttribute('title'));
        target.removeAttribute('title');
      }

      if (!(0, _ej2Base.isNullOrUndefined)(this.content)) {
        if (this.isBlazorTooltip || !((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
          tooltipContent.innerHTML = '';

          if (this.content instanceof HTMLElement) {
            tooltipContent.appendChild(this.content);
          } else if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') < 0) {
            if (this.enableHtmlSanitizer) {
              this.setProperties({
                content: _ej2Base.SanitizeHtmlHelper.sanitize(this.content)
              }, true);
            }

            tooltipContent.innerHTML = this.content;
          } else {
            var templateFunction = (0, _ej2Base.compile)(this.content);
            (0, _ej2Base.append)(templateFunction({}, null, null, this.element.id + 'content'), tooltipContent);

            if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') >= 0) {
              this.isBlazorTemplate = true;
              (0, _ej2Base.updateBlazorTemplate)(this.element.id + 'content', 'Content', this);
            }
          }
        }
      } else {
        if (target && !(0, _ej2Base.isNullOrUndefined)(target.getAttribute('data-content'))) {
          tooltipContent.innerHTML = target.getAttribute('data-content');
        }
      }
    };

    Tooltip.prototype.renderCloseIcon = function () {
      if (!this.isSticky) {
        return;
      }

      var tipClose = this.createElement('div', {
        className: ICON + ' ' + CLOSE
      });
      this.tooltipEle.appendChild(tipClose);

      _ej2Base.EventHandler.add(tipClose, _ej2Base.Browser.touchStartEvent, this.onStickyClose, this);
    };

    Tooltip.prototype.addDescribedBy = function (target, id) {
      var describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/);

      if (describedby.indexOf(id) < 0) {
        describedby.push(id);
      }

      (0, _ej2Base.attributes)(target, {
        'aria-describedby': describedby.join(' ').trim(),
        'data-tooltip-id': id
      });
    };

    Tooltip.prototype.removeDescribedBy = function (target) {
      var id = target.getAttribute('data-tooltip-id');
      var describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/);
      var index = describedby.indexOf(id);

      if (index !== -1) {
        describedby.splice(index, 1);
      }

      target.removeAttribute('data-tooltip-id');
      var orgdescribedby = describedby.join(' ').trim();

      if (orgdescribedby) {
        target.setAttribute('aria-describedby', orgdescribedby);
      } else {
        target.removeAttribute('aria-describedby');
      }
    };

    Tooltip.prototype.tapHoldHandler = function (evt) {
      clearTimeout(this.autoCloseTimer);
      this.targetHover(evt.originalEvent);
    };

    Tooltip.prototype.touchEndHandler = function (e) {
      var _this = this;

      if (this.isSticky) {
        return;
      }

      var close = function () {
        _this.close();
      };

      this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
    };

    Tooltip.prototype.targetClick = function (e) {
      var target;

      if (this.target) {
        target = (0, _ej2Base.closest)(e.target, this.target);
      } else {
        target = this.element;
      }

      if ((0, _ej2Base.isNullOrUndefined)(target)) {
        return;
      }

      if (target.getAttribute('data-tooltip-id') === null) {
        this.targetHover(e);
      } else if (!this.isSticky) {
        this.hideTooltip(this.animation.close, e, target);
      }
    };

    Tooltip.prototype.targetHover = function (e) {
      var target;

      if (this.target) {
        target = (0, _ej2Base.closest)(e.target, this.target);
      } else {
        target = this.element;
      }

      if ((0, _ej2Base.isNullOrUndefined)(target) || target.getAttribute('data-tooltip-id') !== null) {
        return;
      }

      var targetList = [].slice.call(document.querySelectorAll('[data-tooltip-id= ' + this.ctrlId + '_content]'));

      for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {
        var target_1 = targetList_1[_i];
        this.restoreElement(target_1);
      }

      this.showTooltip(target, this.animation.open, e);
    };

    Tooltip.prototype.showTooltip = function (target, showAnimation, e) {
      var _this = this;

      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      this.tooltipEventArgs = e ? {
        type: e.type,
        cancel: false,
        target: target,
        event: e,
        element: this.tooltipEle
      } : {
        type: null,
        cancel: false,
        target: target,
        event: null,
        element: this.tooltipEle
      };

      var observeCallback = function (beforeRenderArgs) {
        _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
      };

      this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));
    };

    Tooltip.prototype.beforeRenderCallback = function (beforeRenderArgs, target, e, showAnimation) {
      var isBlazorTooltipRendered = false;

      if (beforeRenderArgs.cancel) {
        this.isHidden = true;
        this.clear();
      } else {
        this.isHidden = false;

        if ((0, _ej2Base.isNullOrUndefined)(this.tooltipEle)) {
          if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
            this.contentTargetValue = target;
            this.contentEvent = e;
            this.contentAnimation = showAnimation;
            var args = {
              'enableTooltip': 'true'
            }; // tslint:disable

            this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable

            isBlazorTooltipRendered = true;
          } else {
            this.ctrlId = this.element.getAttribute('id') ? (0, _ej2Base.getUniqueID)(this.element.getAttribute('id')) : (0, _ej2Base.getUniqueID)('tooltip');
            this.tooltipEle = this.createElement('div', {
              className: TOOLTIP_WRAP + ' ' + POPUP_ROOT + ' ' + POPUP_LIB,
              attrs: {
                role: 'tooltip',
                'aria-hidden': 'false',
                'id': this.ctrlId + '_content'
              },
              styles: 'width:' + (0, _ej2Base.formatUnit)(this.width) + ';height:' + (0, _ej2Base.formatUnit)(this.height) + ';position:absolute;'
            });

            if (this.cssClass) {
              (0, _ej2Base.addClass)([this.tooltipEle], this.cssClass.split(' '));
            }

            this.beforeRenderBlazor(target, this);
          }

          if (!isBlazorTooltipRendered) {
            this.afterRenderBlazor(target, e, showAnimation, this);
          }
        } else {
          if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
            (0, _ej2Base.addClass)([this.tooltipEle], POPUP_OPEN);
            document.body.appendChild(this.tooltipEle);
            this.renderCloseIcon();
            this.renderPopup(target);
          }

          if (target) {
            this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            this.addDescribedBy(target, this.ctrlId + '_content');
            this.renderContent(target);

            _ej2Base.Animation.stop(this.tooltipEle);

            this.reposition(target);
            this.afterRenderBlazor(target, e, showAnimation, this);
          }
        }
      }
    };

    ;

    Tooltip.prototype.contentUpdated = function (args) {
      if ((0, _ej2Base.isNullOrUndefined)(this.tooltipEle)) {
        if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
          this.ctrlId = this.element.id;
          this.tooltipEle = document.querySelector('#' + this.ctrlId + '_content');
          this.tooltipEle.setAttribute('style', 'width:' + (0, _ej2Base.formatUnit)(this.width) + ';height:' + (0, _ej2Base.formatUnit)(this.height) + ';position:absolute;');
          this.beforeRenderBlazor(this.contentTargetValue, this);
          this.afterRenderBlazor(this.contentTargetValue, this.contentEvent, this.contentAnimation, this);
          this.contentTargetValue = this.contentEvent = this.contentAnimation = null;
        }
      }
    };

    ;

    Tooltip.prototype.beforeRenderBlazor = function (target, ctrlObj) {
      if (target) {
        if (_ej2Base.Browser.isDevice) {
          (0, _ej2Base.addClass)([ctrlObj.tooltipEle], DEVICE);
        }

        if (ctrlObj.width !== 'auto') {
          ctrlObj.tooltipEle.style.maxWidth = (0, _ej2Base.formatUnit)(ctrlObj.width);
        }

        if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
          ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', {
            className: CONTENT
          }));
        }

        document.body.appendChild(ctrlObj.tooltipEle);
        (0, _ej2Base.removeClass)([ctrlObj.tooltipEle], HIDE_POPUP);
        ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');
        ctrlObj.renderContent(target);
        (0, _ej2Base.addClass)([ctrlObj.tooltipEle], POPUP_OPEN);

        if (ctrlObj.showTipPointer) {
          ctrlObj.renderArrow();
        }

        ctrlObj.renderCloseIcon();
        ctrlObj.renderPopup(target);
        ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);

        _ej2Base.Animation.stop(ctrlObj.tooltipEle);

        ctrlObj.reposition(target);
      }
    };

    Tooltip.prototype.afterRenderBlazor = function (target, e, showAnimation, ctrlObj) {
      if (target) {
        (0, _ej2Base.removeClass)([ctrlObj.tooltipEle], POPUP_OPEN);
        (0, _ej2Base.addClass)([ctrlObj.tooltipEle], POPUP_CLOSE);
        ctrlObj.tooltipEventArgs = e ? {
          type: e.type,
          cancel: false,
          target: target,
          event: e,
          element: ctrlObj.tooltipEle
        } : {
          type: null,
          cancel: false,
          target: target,
          event: null,
          element: ctrlObj.tooltipEle
        };

        if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {
          ctrlObj.tooltipEle.style.display = 'none';
        }

        var observeCallback = function (observedArgs) {
          ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
        };

        ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
      }
    };

    Tooltip.prototype.beforeOpenCallback = function (observedArgs, target, showAnimation, e) {
      var _this = this;

      if (observedArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.restoreElement(target);
      } else {
        var openAnimation_1 = {
          name: showAnimation.effect,
          duration: showAnimation.duration,
          delay: showAnimation.delay,
          timingFunction: 'easeOut'
        };

        if (showAnimation.effect === 'None') {
          openAnimation_1 = undefined;
        }

        if (this.openDelay > 0) {
          var show = function () {
            if (_this.popupObj) {
              _this.popupObj.show(openAnimation_1, target);
            }
          };

          this.showTimer = setTimeout(show, this.openDelay);
        } else {
          this.popupObj.show(openAnimation_1, target);
        }
      }

      if (e) {
        this.wireMouseEvents(e, target);
      }
    };

    Tooltip.prototype.needTemplateReposition = function () {
      // tslint:disable-next-line:no-any
      var tooltip = this;
      return !(0, _ej2Base.isNullOrUndefined)(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== 'string' || (0, _ej2Base.isBlazor)() && this.isServerRendered && this.isBlazorTemplate;
    };

    Tooltip.prototype.checkCollision = function (target, x, y) {
      var elePos = {
        left: x,
        top: y,
        position: this.position,
        horizontal: this.tooltipPositionX,
        vertical: this.tooltipPositionY
      };
      var affectedPos = (0, _collision.isCollide)(this.tooltipEle, this.target ? this.element : null, x, y);

      if (affectedPos.length > 0) {
        elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX;
        elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY;
      }

      return elePos;
    };

    Tooltip.prototype.collisionFlipFit = function (target, x, y) {
      var elePos = this.checkCollision(target, x, y);
      var newpos = elePos.position;

      if (this.tooltipPositionY !== elePos.vertical) {
        newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
      }

      if (this.tooltipPositionX !== elePos.horizontal) {
        if (newpos.indexOf('Left') === 0) {
          elePos.vertical = newpos === 'LeftTop' || newpos === 'LeftCenter' ? 'Top' : 'Bottom';
          newpos = elePos.vertical + 'Left';
        }

        if (newpos.indexOf('Right') === 0) {
          elePos.vertical = newpos === 'RightTop' || newpos === 'RightCenter' ? 'Top' : 'Bottom';
          newpos = elePos.vertical + 'Right';
        }

        elePos.horizontal = this.tooltipPositionX;
      }

      this.tooltipEventArgs = {
        type: null,
        cancel: false,
        target: target,
        event: null,
        element: this.tooltipEle,
        collidedPosition: newpos
      };
      this.trigger('beforeCollision', this.tooltipEventArgs);

      if (elePos.position !== newpos) {
        var pos = (0, _position.calculatePosition)(target, elePos.horizontal, elePos.vertical);
        this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
        var offsetPos = this.calculateTooltipOffset(newpos);
        offsetPos.top -= 'TopBottom'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && 'TopBottom'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * this.offsetY : 0;
        offsetPos.left -= 'RightLeft'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && 'RightLeft'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * this.offsetX : 0;
        elePos.position = newpos;
        elePos.left = pos.left + offsetPos.left;
        elePos.top = pos.top + offsetPos.top;
      } else {
        this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
      }

      var eleOffset = {
        left: elePos.left,
        top: elePos.top
      };
      var left = (0, _collision.fit)(this.tooltipEle, this.target ? this.element : null, {
        X: true,
        Y: false
      }, eleOffset).left;

      if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {
        var arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);
        var arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);

        if (arrowleft < 0) {
          arrowleft = 0;
        } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
          arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
        }

        arrowEle.style.left = arrowleft.toString() + 'px';
      }

      eleOffset.left = left;
      return eleOffset;
    };

    Tooltip.prototype.hideTooltip = function (hideAnimation, e, targetElement) {
      var _this = this;

      var target;

      if (e) {
        target = this.target ? targetElement || e.target : this.element;
        this.tooltipEventArgs = {
          type: e.type,
          cancel: false,
          target: target,
          event: e,
          element: this.tooltipEle
        };
      } else {
        target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');
        this.tooltipEventArgs = {
          type: null,
          cancel: false,
          target: target,
          event: null,
          element: this.tooltipEle
        };
      }

      if ((0, _ej2Base.isNullOrUndefined)(target)) {
        return;
      }

      this.trigger('beforeClose', this.tooltipEventArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          _this.restoreElement(target);

          _this.isHidden = true;
          var closeAnimation_1 = {
            name: hideAnimation.effect,
            duration: hideAnimation.duration,
            delay: hideAnimation.delay,
            timingFunction: 'easeIn'
          };

          if (hideAnimation.effect === 'None') {
            closeAnimation_1 = undefined;
          }

          if (_this.closeDelay > 0) {
            var hide = function () {
              if (_this.popupObj) {
                _this.popupObj.hide(closeAnimation_1);
              }
            };

            _this.hideTimer = setTimeout(hide, _this.closeDelay);
          } else {
            _this.popupObj.hide(closeAnimation_1);
          }
        } else {
          _this.isHidden = false;
        }
      });
    };

    Tooltip.prototype.restoreElement = function (target) {
      this.unwireMouseEvents(target);

      if (!(0, _ej2Base.isNullOrUndefined)(target.getAttribute('data-content'))) {
        target.setAttribute('title', target.getAttribute('data-content'));
        target.removeAttribute('data-content');
      }

      this.removeDescribedBy(target);
    };

    Tooltip.prototype.clear = function () {
      if (this.tooltipEle) {
        (0, _ej2Base.removeClass)([this.tooltipEle], POPUP_CLOSE);
        (0, _ej2Base.addClass)([this.tooltipEle], POPUP_OPEN);
      }

      if (this.isHidden) {
        if (this.popupObj) {
          this.popupObj.destroy();
        }

        if ((0, _ej2Base.isBlazor)() && this.isServerRendered && this.tooltipEle) {
          this.tooltipEle.style.display = 'none';
          this.tooltipEle = null;
          var args = {
            'enableTooltip': 'false'
          }; // tslint:disable

          this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable

          (0, _ej2Base.remove)(this.tooltipEle);
        } else if (this.tooltipEle) {
          (0, _ej2Base.remove)(this.tooltipEle);
        }

        this.tooltipEle = null;
        this.popupObj = null;
      }
    };

    Tooltip.prototype.onMouseOut = function (e) {
      var enteredElement = e.relatedTarget; // don't close the tooltip only if it is tooltip content element

      if (enteredElement && !this.mouseTrail) {
        var checkForTooltipElement = (0, _ej2Base.closest)(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT);

        if (checkForTooltipElement) {
          _ej2Base.EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);

          this.unwireMouseEvents(e.target);
        } else {
          this.hideTooltip(this.animation.close, e);
        }
      } else {
        this.hideTooltip(this.animation.close, e);
      }
    };

    Tooltip.prototype.tooltipElementMouseOut = function (e) {
      this.hideTooltip(this.animation.close, e, this.findTarget());

      _ej2Base.EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);
    };

    Tooltip.prototype.onStickyClose = function (e) {
      this.close();
    };

    Tooltip.prototype.onMouseMove = function (event) {
      var eventPageX = 0;
      var eventPageY = 0;

      if (event.type.indexOf('touch') > -1) {
        event.preventDefault();
        eventPageX = event.touches[0].pageX;
        eventPageY = event.touches[0].pageY;
      } else {
        eventPageX = event.pageX;
        eventPageY = event.pageY;
      }

      _ej2Base.Animation.stop(this.tooltipEle);

      (0, _ej2Base.removeClass)([this.tooltipEle], POPUP_CLOSE);
      (0, _ej2Base.addClass)([this.tooltipEle], POPUP_OPEN);
      this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
      var pos = this.calculateTooltipOffset(this.position);
      var x = eventPageX + pos.left + this.offsetX;
      var y = eventPageY + pos.top + this.offsetY;
      var elePos = this.checkCollision(event.target, x, y);

      if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
        var newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
        elePos.position = newpos;
        this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
        var colpos = this.calculateTooltipOffset(elePos.position);
        elePos.left = eventPageX + colpos.left - this.offsetX;
        elePos.top = eventPageY + colpos.top - this.offsetY;
      }

      this.tooltipEle.style.left = elePos.left + 'px';
      this.tooltipEle.style.top = elePos.top + 'px';
    };

    Tooltip.prototype.keyDown = function (event) {
      if (this.tooltipEle && event.keyCode === 27) {
        this.close();
      }
    };

    Tooltip.prototype.touchEnd = function (e) {
      if (this.tooltipEle && (0, _ej2Base.closest)(e.target, '.' + ROOT) === null) {
        this.close();
      }
    };

    Tooltip.prototype.scrollHandler = function (e) {
      if (this.tooltipEle) {
        this.close();
      }
    };
    /**
     * Core method that initializes the control rendering.
     * @private
     */


    Tooltip.prototype.render = function () {
      this.initialize();
      this.wireEvents(this.opensOn);
      this.renderComplete();
    };
    /**
     * Initializes the values of private members.
     * @private
     */


    Tooltip.prototype.preRender = function () {
      this.tipClass = TIP_BOTTOM;
      this.tooltipPositionX = 'Center';
      this.tooltipPositionY = 'Top';
      this.isHidden = true;
    };
    /**
     * Binding events to the Tooltip element.
     * @hidden
     */


    Tooltip.prototype.wireEvents = function (trigger) {
      var triggerList = this.getTriggerList(trigger);

      for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {
        var opensOn = triggerList_1[_i];

        if (opensOn === 'Custom') {
          return;
        }

        if (opensOn === 'Focus') {
          this.wireFocusEvents();
        }

        if (opensOn === 'Click') {
          _ej2Base.EventHandler.add(this.element, _ej2Base.Browser.touchStartEvent, this.targetClick, this);
        }

        if (opensOn === 'Hover') {
          if (_ej2Base.Browser.isDevice) {
            this.touchModule = new _ej2Base.Touch(this.element, {
              tapHoldThreshold: TAPHOLD_THRESHOLD,
              tapHold: this.tapHoldHandler.bind(this)
            });

            _ej2Base.EventHandler.add(this.element, _ej2Base.Browser.touchEndEvent, this.touchEndHandler, this);
          } else {
            _ej2Base.EventHandler.add(this.element, 'mouseover', this.targetHover, this);
          }
        }
      }

      _ej2Base.EventHandler.add(document, 'touchend', this.touchEnd, this);

      _ej2Base.EventHandler.add(document, 'scroll', this.scrollHandler, this);

      _ej2Base.EventHandler.add(document, 'keydown', this.keyDown, this);
    };

    Tooltip.prototype.getTriggerList = function (trigger) {
      if (trigger === 'Auto') {
        trigger = _ej2Base.Browser.isDevice ? 'Hover' : 'Hover Focus';
      }

      return trigger.split(' ');
    };

    Tooltip.prototype.wireFocusEvents = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.target)) {
        var targetList = [].slice.call(this.element.querySelectorAll(this.target));

        for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {
          var target = targetList_2[_i];

          _ej2Base.EventHandler.add(target, 'focus', this.targetHover, this);
        }
      } else {
        _ej2Base.EventHandler.add(this.element, 'focus', this.targetHover, this);
      }
    };

    Tooltip.prototype.wireMouseEvents = function (e, target) {
      if (this.tooltipEle) {
        if (!this.isSticky) {
          if (e.type === 'focus') {
            _ej2Base.EventHandler.add(target, 'blur', this.onMouseOut, this);
          }

          if (e.type === 'mouseover') {
            _ej2Base.EventHandler.add(target, 'mouseleave', this.onMouseOut, this);
          }
        }

        if (this.mouseTrail) {
          _ej2Base.EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);
        }
      }
    };
    /**
     * Unbinding events from the element on widget destroy.
     * @hidden
     */


    Tooltip.prototype.unwireEvents = function (trigger) {
      var triggerList = this.getTriggerList(trigger);

      for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {
        var opensOn = triggerList_2[_i];

        if (opensOn === 'Custom') {
          return;
        }

        if (opensOn === 'Focus') {
          this.unwireFocusEvents();
        }

        if (opensOn === 'Click') {
          _ej2Base.EventHandler.remove(this.element, _ej2Base.Browser.touchStartEvent, this.targetClick);
        }

        if (opensOn === 'Hover') {
          if (_ej2Base.Browser.isDevice) {
            if (this.touchModule) {
              this.touchModule.destroy();
            }

            _ej2Base.EventHandler.remove(this.element, _ej2Base.Browser.touchEndEvent, this.touchEndHandler);
          } else {
            _ej2Base.EventHandler.remove(this.element, 'mouseover', this.targetHover);
          }
        }
      }

      _ej2Base.EventHandler.remove(document, 'touchend', this.touchEnd);

      _ej2Base.EventHandler.remove(document, 'scroll', this.scrollHandler);

      _ej2Base.EventHandler.remove(document, 'keydown', this.keyDown);
    };

    Tooltip.prototype.unwireFocusEvents = function () {
      if (!(0, _ej2Base.isNullOrUndefined)(this.target)) {
        var targetList = [].slice.call(this.element.querySelectorAll(this.target));

        for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {
          var target = targetList_3[_i];

          _ej2Base.EventHandler.remove(target, 'focus', this.targetHover);
        }
      } else {
        _ej2Base.EventHandler.remove(this.element, 'focus', this.targetHover);
      }
    };

    Tooltip.prototype.unwireMouseEvents = function (target) {
      if (!this.isSticky) {
        var triggerList = this.getTriggerList(this.opensOn);

        for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {
          var opensOn = triggerList_3[_i];

          if (opensOn === 'Focus') {
            _ej2Base.EventHandler.remove(target, 'blur', this.onMouseOut);
          }

          if (opensOn === 'Hover' && !_ej2Base.Browser.isDevice) {
            _ej2Base.EventHandler.remove(target, 'mouseleave', this.onMouseOut);
          }
        }
      }

      if (this.mouseTrail) {
        _ej2Base.EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);
      }
    };

    Tooltip.prototype.findTarget = function () {
      var target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');
      return target;
    };
    /**
     * Core method to return the component name.
     * @private
     */


    Tooltip.prototype.getModuleName = function () {
      return 'tooltip';
    };
    /**
     * Returns the properties to be maintained in the persisted state.
     * @private
     */


    Tooltip.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * Called internally, if any of the property value changed.
     * @private
     */


    Tooltip.prototype.onPropertyChanged = function (newProp, oldProp) {
      var targetElement = this.findTarget();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'width':
            if (this.tooltipEle && targetElement) {
              this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = (0, _ej2Base.formatUnit)(newProp.width);
              this.reposition(targetElement);
            }

            break;

          case 'height':
            if (this.tooltipEle && targetElement) {
              this.tooltipEle.style.height = (0, _ej2Base.formatUnit)(newProp.height);
              this.reposition(targetElement);
            }

            break;

          case 'content':
            if (this.tooltipEle) {
              if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
                this.isBlazorTooltip = true;
              }

              this.renderContent();
            } else if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
              var args = {
                'content': newProp.content
              }; // tslint:disable

              this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args); // tslint:enable
            }

            break;

          case 'opensOn':
            this.unwireEvents(oldProp.opensOn);
            this.wireEvents(newProp.opensOn);
            break;

          case 'position':
            this.formatPosition();

            if (this.tooltipEle && targetElement) {
              var arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);
              arrowInnerELe.style.top = arrowInnerELe.style.left = null;
              this.reposition(targetElement);
            }

            break;

          case 'tipPointerPosition':
            if (this.tooltipEle && targetElement) {
              this.reposition(targetElement);
            }

            break;

          case 'offsetX':
            if (this.tooltipEle) {
              var x = newProp.offsetX - oldProp.offsetX;
              this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + 'px';
            }

            break;

          case 'offsetY':
            if (this.tooltipEle) {
              var y = newProp.offsetY - oldProp.offsetY;
              this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + 'px';
            }

            break;

          case 'cssClass':
            if (this.tooltipEle) {
              if (oldProp.cssClass) {
                (0, _ej2Base.removeClass)([this.tooltipEle], oldProp.cssClass.split(' '));
              }

              if (newProp.cssClass) {
                (0, _ej2Base.addClass)([this.tooltipEle], newProp.cssClass.split(' '));
              }
            }

            break;

          case 'enableRtl':
            if (this.tooltipEle) {
              if (this.enableRtl) {
                (0, _ej2Base.addClass)([this.tooltipEle], RTL);
              } else {
                (0, _ej2Base.removeClass)([this.tooltipEle], RTL);
              }
            }

            break;
        }
      }
    };
    /**
     * It is used to show the Tooltip on the specified target with specific animation settings.
     * @param element Target element where the Tooltip is to be displayed.
     * @param animation Sets the specific animation, while showing the Tooltip on the screen.
     * @return {void}
     */


    Tooltip.prototype.open = function (element, animation) {
      if (animation === void 0) {
        animation = this.animation.open;
      }

      if (element.style.display === 'none') {
        return;
      }

      this.showTooltip(element, animation);
    };
    /**
     * It is used to hide the Tooltip with specific animation effect.
     * @param animation Sets the specific animation when hiding Tooltip from the screen.
     * @return {void}
     */


    Tooltip.prototype.close = function (animation) {
      if (animation === void 0) {
        animation = this.animation.close;
      }

      this.hideTooltip(animation);
    };
    /**
     * It is used to refresh the Tooltip content and its position.
     * @param target Target element where the Tooltip content or position needs to be refreshed.
     * @return {void}
     */


    Tooltip.prototype.refresh = function (target) {
      if (this.tooltipEle) {
        this.renderContent(target);
      }

      if (this.popupObj && target) {
        this.reposition(target);
      }
    };
    /**
     * It is used to destroy the Tooltip component.
     * @method destroy
     * @return {void}
     * @memberof Tooltip
     */


    Tooltip.prototype.destroy = function () {
      _super.prototype.destroy.call(this);

      (0, _ej2Base.removeClass)([this.element], ROOT);
      this.unwireEvents(this.opensOn);
      this.unwireMouseEvents(this.element);

      if (this.popupObj) {
        this.popupObj.destroy();
      }

      if (this.tooltipEle) {
        (0, _ej2Base.remove)(this.tooltipEle);
      }

      this.tooltipEle = null;
      this.popupObj = null;
    };

    __decorate([(0, _ej2Base.Property)('auto')], Tooltip.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('auto')], Tooltip.prototype, "height", void 0);

    __decorate([(0, _ej2Base.Property)()], Tooltip.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)()], Tooltip.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Property)('TopCenter')], Tooltip.prototype, "position", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Tooltip.prototype, "offsetX", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Tooltip.prototype, "offsetY", void 0);

    __decorate([(0, _ej2Base.Property)(true)], Tooltip.prototype, "showTipPointer", void 0);

    __decorate([(0, _ej2Base.Property)('Auto')], Tooltip.prototype, "tipPointerPosition", void 0);

    __decorate([(0, _ej2Base.Property)('Auto')], Tooltip.prototype, "opensOn", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Tooltip.prototype, "mouseTrail", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Tooltip.prototype, "isSticky", void 0);

    __decorate([(0, _ej2Base.Complex)({}, Animation)], Tooltip.prototype, "animation", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Tooltip.prototype, "openDelay", void 0);

    __decorate([(0, _ej2Base.Property)(0)], Tooltip.prototype, "closeDelay", void 0);

    __decorate([(0, _ej2Base.Property)()], Tooltip.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Tooltip.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "beforeRender", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "afterOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "afterClose", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "beforeCollision", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], Tooltip.prototype, "destroyed", void 0);

    Tooltip = __decorate([_ej2Base.NotifyPropertyChanges], Tooltip);
    return Tooltip;
  }(_ej2Base.Component);

  _exports.Tooltip = Tooltip;
});;
define('@syncfusion/ej2-splitbuttons/index',["exports", "./src/index"], function (_exports, _index) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/button-group/button-group',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-buttons"], function (_exports, _ej2Base, _ej2Buttons) {
  "use strict";

  _exports.__esModule = true;
  _exports.createButtonGroup = createButtonGroup;

  /**
   * Initialize ButtonGroup CSS component with specified properties.
   * ```html
   * <div id='buttongroup'>
   * <button></button>
   * <button></button>
   * <button></button>
   * </div>
   * ```
   * ```typescript
   * createButtonGroup('#buttongroup', {
   *   cssClass: 'e-outline',
   *   buttons: [
   *       { content: 'Day' },
   *       { content: 'Week' },
   *       { content: 'Work Week'}
   *   ]
   * });
   * ```
   * @param {string} selector
   * @param {CreateButtonGroupModel} options
   * @returns HTMLElement
   */
  function createButtonGroup(selector, options, createElement) {
    if (options === void 0) {
      options = {};
    }

    var child;
    var btnElem;
    var nextChild;
    var btnModel;

    if ((0, _ej2Base.isNullOrUndefined)(createElement)) {
      createElement = _ej2Base.createElement;
    }

    var wrapper = document.querySelector(selector);
    (0, _ej2Base.addClass)([wrapper], ['e-btn-group', 'e-css']);
    wrapper.setAttribute('role', 'group');
    var childs = wrapper.children;
    options.buttons = options.buttons || [];

    for (var i = 0, j = 0; j < childs.length; i++, j++) {
      child = childs[j];
      btnModel = options.buttons[i];

      if (btnModel !== null) {
        if (child.tagName === 'BUTTON') {
          btnElem = child;
        } else {
          btnElem = createElement('label');
          nextChild = childs[j + 1];

          if (nextChild) {
            wrapper.insertBefore(btnElem, nextChild);
          } else {
            wrapper.appendChild(btnElem);
          }

          if (child.id) {
            btnElem.setAttribute('for', child.id);
          }

          if (btnModel && btnModel.disabled) {
            child.disabled = true;
          }

          j++;
        }

        if (options.cssClass && btnModel && !btnModel.cssClass) {
          btnModel.cssClass = options.cssClass;
        }

        new _ej2Buttons.Button(btnModel || {}, btnElem);
      }
    }

    return wrapper;
  }
});;
define('@syncfusion/ej2-splitbuttons/src/button-group/index',["exports", "./button-group"], function (_exports, _buttonGroup) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_buttonGroup).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _buttonGroup[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/common/common',["exports", "@syncfusion/ej2-base"], function (_exports, _ej2Base) {
  "use strict";

  _exports.__esModule = true;
  _exports.getModel = getModel;
  _exports.Item = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  /**
   * @param props
   * @param model
   */
  function getModel(props, model) {
    var obj = (0, _ej2Base.extend)({}, props);

    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
      var prop = _a[_i];

      if (model.indexOf(prop) < 0) {
        (0, _ej2Base.deleteObject)(obj, prop);
      }
    }

    return obj;
  }

  var Item =
  /** @class */
  function (_super) {
    __extends(Item, _super);

    function Item() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "id", void 0);

    __decorate([(0, _ej2Base.Property)(false)], Item.prototype, "separator", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "text", void 0);

    __decorate([(0, _ej2Base.Property)('')], Item.prototype, "url", void 0);

    return Item;
  }(_ej2Base.ChildProperty);

  _exports.Item = Item;
});;
define('@syncfusion/ej2-splitbuttons/src/common/index',["exports", "./common"], function (_exports, _common) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_common).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _common[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-buttons", "@syncfusion/ej2-popups", "./../common/common"], function (_exports, _ej2Base, _ej2Buttons, _ej2Popups, _common) {
  "use strict";

  _exports.__esModule = true;
  _exports.DropDownButton = _exports.dropDownButtonObserver = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var dropDownButtonObserver = new _ej2Base.Observer();
  _exports.dropDownButtonObserver = dropDownButtonObserver;
  var classNames = {
    DISABLED: 'e-disabled',
    FOCUS: 'e-focused',
    ICON: 'e-menu-icon',
    ITEM: 'e-item',
    POPUP: 'e-dropdown-popup',
    RTL: 'e-rtl',
    SEPARATOR: 'e-separator',
    VERTICAL: 'e-vertical'
  };
  /**
   * DropDownButton component is used to toggle contextual overlays for displaying list of action items.
   * It can contain both text and images.
   * ```html
   * <button id="element">DropDownButton</button>
   * ```
   * ```typescript
   * <script>
   * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);
   * dropDownButtonObj.appendTo("#element");
   * </script>
   * ```
   */

  var DropDownButton =
  /** @class */
  function (_super) {
    __extends(DropDownButton, _super);
    /**
     * Constructor for creating the widget
     * @param  {DropDownButtonModel} options?
     * @param  {string|HTMLButtonElement} element?
     */


    function DropDownButton(options, element) {
      return _super.call(this, options, element) || this;
    }

    DropDownButton.prototype.preRender = function () {
      /** */
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @returns string
     */


    DropDownButton.prototype.getPersistData = function () {
      return this.addOnPersist([]);
    };
    /**
     * To open/close DropDownButton popup based on current state of the DropDownButton.
     * @returns void
     */


    DropDownButton.prototype.toggle = function () {
      this.canOpen() ? this.openPopUp() : this.closePopup();
    };
    /**
     * Initialize the Component rendering
     * @returns void
     * @private
     */


    DropDownButton.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        _ej2Buttons.buttonObserver.on('component-rendered', this.buttonRendered, this, this.element.id);

        this.createPopup();
        this.setActiveElem([this.element]);
      } else {
        this.initialize();
      }

      if (!this.disabled) {
        this.wireEvents();
      }

      this.renderComplete();

      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        dropDownButtonObserver.notify('component-rendered', {
          id: this.element.id,
          instance: this
        });
      }
    };

    DropDownButton.prototype.buttonRendered = function (args) {
      if (this.element.id === args.instance.element.id) {
        this.button = args.instance;

        _ej2Buttons.buttonObserver.off('component-rendered', this.buttonRendered, this.element.id);
      }
    };
    /**
     * Adds a new item to the menu. By default, new item appends to the list as the last item,
     * but you can insert based on the text parameter.
     * @param  { ItemModel[] } items - Specifies an array of JSON data.
     * @param { string } text - Specifies the text to insert the newly added item in the menu.
     * @returns {void}.
     */


    DropDownButton.prototype.addItems = function (items, text) {
      var newItem;
      var idx = this.items.length;

      for (var j = 0, len = this.items.length; j < len; j++) {
        if (text === this.items[j].text) {
          idx = j;
          break;
        }
      }

      for (var i = items.length - 1; i >= 0; i--) {
        // tslint:disable-next-line
        newItem = new _common.Item(this, 'items', items[i], true);
        this.items.splice(idx, 0, newItem);
      }

      if (!this.canOpen()) {
        this.createItems();
      }
    };
    /**
     * Removes the items from the menu.
     * @param  { string[] } items - Specifies an array of string to remove the items.
     * @returns {void}.
     */


    DropDownButton.prototype.removeItems = function (items) {
      for (var i = 0, len = items.length; i < len; i++) {
        for (var j = 0, len_1 = this.items.length; j < len_1; j++) {
          if (items[i] === this.items[j].text) {
            this.items.splice(j, 1);
            break;
          }
        }
      }

      if (!this.canOpen()) {
        this.createItems();
      }
    };

    DropDownButton.prototype.createPopup = function () {
      var _a;

      var div = this.createElement('div', {
        className: classNames.POPUP,
        id: this.element.id + '-popup'
      });
      document.body.appendChild(div);
      this.dropDown = new _ej2Popups.Popup(div, {
        relateTo: this.element,
        collision: {
          X: 'fit',
          Y: 'flip'
        },
        position: {
          X: 'left',
          Y: 'bottom'
        },
        targetType: 'relative',
        content: this.target ? this.getTargetElement() : '',
        enableRtl: this.enableRtl
      });

      if (this.dropDown.element.style.position === 'fixed') {
        this.dropDown.refreshPosition(this.element);
      }

      this.dropDown.hide();
      (0, _ej2Base.attributes)(this.element, (_a = {}, _a['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', _a['aria-expanded'] = 'false', _a['aria-owns'] = this.getPopUpElement().id, _a['type'] = 'button', _a));

      if (this.cssClass) {
        (0, _ej2Base.addClass)([div], this.cssClass.split(' '));
      }
    };

    DropDownButton.prototype.getTargetElement = function () {
      return typeof this.target === 'string' ? (0, _ej2Base.select)(this.target) : this.target;
    };

    DropDownButton.prototype.createItems = function (appendItems) {
      var items = this.items;
      var showIcon = this.hasIcon(this.items, 'iconCss');
      var span;
      var item;
      var li;
      var eventArgs;
      var ul = this.getULElement();

      if (ul) {
        ul.innerHTML = '';
      } else {
        ul = this.createElement('ul', {
          attrs: {
            'role': 'menu',
            'tabindex': '0'
          }
        });
      }

      for (var i = 0; i < items.length; i++) {
        item = items[i];
        var tempItem = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(item.text) : item.text;
        li = this.createElement('li', {
          innerHTML: item.url ? '' : tempItem,
          className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,
          attrs: {
            'role': 'menuItem',
            'tabindex': '-1'
          },
          id: item.id ? item.id : (0, _ej2Base.getUniqueID)('e-' + this.getModuleName() + '-item')
        });

        if (item.iconCss) {
          span = this.createElement('span', {
            className: classNames.ICON + ' ' + item.iconCss
          });
          li.insertBefore(span, li.childNodes[0]);
        } else {
          if (showIcon && !item.separator) {
            li.classList.add('e-blank-icon');
          }
        }

        if (item.url) {
          li.appendChild(this.createAnchor(item));
        }

        eventArgs = {
          item: item,
          element: li
        };
        this.trigger('beforeItemRender', eventArgs);
        ul.appendChild(li);
      }

      if (appendItems) {
        this.getPopUpElement().appendChild(ul);
      }

      if (showIcon) {
        var blankIconLi = [].slice.call(this.getPopUpElement().getElementsByClassName('e-blank-icon'));
        var iconLi = this.getPopUpElement().querySelector('.e-item:not(.e-blank-icon)');
        var icon = iconLi.querySelector('.e-menu-icon');
        var cssProp_1;

        if (this.enableRtl) {
          cssProp_1 = {
            padding: 'paddingRight',
            margin: 'marginLeft'
          };
        } else {
          cssProp_1 = {
            padding: 'paddingLeft',
            margin: 'marginRight'
          };
        } // tslint:disable


        var size_1 = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(this.enableRtl ? getComputedStyle(icon)[cssProp_1.margin] : getComputedStyle(icon)[cssProp_1.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + "px";
        blankIconLi.forEach(function (li) {
          li.style[cssProp_1.padding] = size_1;
        }); // tslint:enable
      }
    };

    DropDownButton.prototype.hasIcon = function (items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i][field]) {
          return true;
        }
      }

      return false;
    };

    DropDownButton.prototype.createAnchor = function (item) {
      var tempItem = this.enableHtmlSanitizer ? _ej2Base.SanitizeHtmlHelper.sanitize(item.text) : item.text;
      return this.createElement('a', {
        className: 'e-menu-text e-menu-url',
        innerHTML: tempItem,
        attrs: {
          'href': item.url
        }
      });
    };

    DropDownButton.prototype.initialize = function () {
      this.button = new _ej2Buttons.Button({
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        cssClass: this.cssClass,
        content: this.content,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        enablePersistence: this.enablePersistence
      });
      this.button.createElement = this.createElement;
      this.button.appendTo(this.element);

      if (!this.element.id) {
        this.element.id = (0, _ej2Base.getUniqueID)('e-' + this.getModuleName());
      }

      this.appendArrowSpan();
      this.createPopup();
      this.setActiveElem([this.element]);
    };

    DropDownButton.prototype.appendArrowSpan = function () {
      this.element.appendChild(this.createElement('span', {
        className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'
      }));
    };

    DropDownButton.prototype.setActiveElem = function (elem) {
      this.activeElem = elem;
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */


    DropDownButton.prototype.getModuleName = function () {
      return 'dropdown-btn';
    };

    DropDownButton.prototype.canOpen = function () {
      return this.getPopUpElement().classList.contains('e-popup-close');
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    DropDownButton.prototype.destroy = function () {
      var _this = this;

      _super.prototype.destroy.call(this);

      if (this.getModuleName() === 'dropdown-btn') {
        var attrList = void 0;
        var classList_1;

        if (this.element.querySelector('span.e-caret')) {
          (0, _ej2Base.detach)(this.element.querySelector('span.e-caret'));
        }

        if (this.cssClass) {
          classList_1 = this.cssClass.split(' ');
        }

        this.button.destroy();

        if (classList_1) {
          (0, _ej2Base.removeClass)([this.element], classList_1);
        }

        (0, _ej2Base.removeClass)(this.activeElem, ['e-active']);
        attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];
        attrList.forEach(function (key) {
          _this.element.removeAttribute(key);
        });
        this.dropDown.destroy();
        var popupEle = document.getElementById(this.getPopUpElement().id);

        if (popupEle) {
          (0, _ej2Base.removeClass)([popupEle], ['e-popup-open', 'e-popup-close']);
          (0, _ej2Base.detach)(popupEle);
        }

        if (!this.disabled) {
          this.unWireEvents();
        }
      }
    };

    DropDownButton.prototype.getPopUpElement = function () {
      return this.dropDown.element;
    };

    DropDownButton.prototype.getULElement = function () {
      return this.getPopUpElement().children[0];
    };

    DropDownButton.prototype.wireEvents = function () {
      var popupElement = this.getPopUpElement();
      this.delegateMousedownHandler = this.mousedownHandler.bind(this);

      _ej2Base.EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);

      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);

      _ej2Base.EventHandler.add(popupElement, 'click', this.clickHandler, this);

      _ej2Base.EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);

      _ej2Base.EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);

      this.rippleFn = (0, _ej2Base.rippleEffect)(popupElement, {
        selector: '.' + classNames.ITEM
      });
    };
    /** @hidden */


    DropDownButton.prototype.keyBoardHandler = function (e) {
      if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {
        return;
      }

      switch (e.keyCode) {
        case 38:
        case 40:
          if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
            this.keyEventHandler(e);
          } else {
            this.upDownKeyHandler(e);
          }

          break;

        case 9:
        case 13:
        case 27:
        case 32:
          this.keyEventHandler(e);
          break;
      }
    };

    DropDownButton.prototype.upDownKeyHandler = function (e) {
      if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }

      e.preventDefault();
      var ul = this.getULElement();
      var defaultIdx = e.keyCode === 40 ? 0 : ul.childElementCount - 1;
      var liIdx = defaultIdx;
      var li = null;
      this.removeCustomSelection();

      for (var i = 0, len = ul.children.length; i < len; i++) {
        if (ul.children[i].classList.contains(classNames.FOCUS)) {
          li = ul.children[i];
          liIdx = i;
          li.classList.remove(classNames.FOCUS);
          e.keyCode === 40 ? liIdx++ : liIdx--;

          if (liIdx === (e.keyCode === 40 ? ul.childElementCount : -1)) {
            liIdx = defaultIdx;
          }
        }
      }

      li = ul.children[liIdx];
      liIdx = this.isValidLI(li, liIdx, e.keyCode);

      if (liIdx !== -1) {
        (0, _ej2Base.addClass)([ul.children[liIdx]], classNames.FOCUS);
        ul.children[liIdx].focus();
      }
    };

    DropDownButton.prototype.removeCustomSelection = function () {
      var selectedLi = this.getULElement().querySelector('.e-selected');

      if (selectedLi) {
        selectedLi.classList.remove('e-selected');
      }
    };

    DropDownButton.prototype.isValidLI = function (li, index, keyCode, count) {
      if (count === void 0) {
        count = 0;
      }

      if (li.classList.contains(classNames.SEPARATOR) || li.classList.contains(classNames.DISABLED)) {
        if (index === (keyCode === 40 ? this.items.length - 1 : 0)) {
          index = keyCode === 40 ? 0 : this.items.length - 1;
        } else {
          keyCode === 40 ? index++ : index--;
        }
      }

      li = this.getULElement().children[index];

      if (li.classList.contains(classNames.SEPARATOR) || li.classList.contains(classNames.DISABLED)) {
        count++;

        if (count === this.items.length) {
          return index = -1;
        }

        index = this.isValidLI(li, index, keyCode, count);
      }

      return index;
    };

    DropDownButton.prototype.keyEventHandler = function (e) {
      if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
        return;
      }

      if (e.keyCode !== 9) {
        e.preventDefault();
      }

      if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
        if (!this.canOpen()) {
          this.closePopup(e, this.element);
        }
      } else {
        this.clickHandler(e);
      }
    };

    DropDownButton.prototype.getLI = function (elem) {
      return elem.tagName === 'LI' ? elem : (0, _ej2Base.closest)(elem, 'li');
    };

    DropDownButton.prototype.mousedownHandler = function (e) {
      var trgt = e.target;

      if (!this.canOpen() && !((0, _ej2Base.closest)(trgt, '#' + this.getPopUpElement().id) || (0, _ej2Base.closest)(trgt, '#' + this.element.id))) {
        this.closePopup(e);
      }
    };

    DropDownButton.prototype.clickHandler = function (e) {
      var trgt = e.target;
      var canOpen = this.canOpen();

      if ((0, _ej2Base.closest)(trgt, '#' + this.element.id)) {
        if (canOpen) {
          this.openPopUp(e);
        } else {
          this.closePopup(e, this.activeElem[0]);
        }
      } else {
        if ((0, _ej2Base.closest)(trgt, '#' + this.getPopUpElement().id)) {
          var eventArgs = void 0;
          var liIdx = void 0;
          var item = void 0;
          var li = this.getLI(trgt);

          if (li) {
            liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
            item = this.items[liIdx];

            if (item) {
              eventArgs = {
                element: li,
                item: item
              };
              this.trigger('select', eventArgs);
            }

            this.closePopup(e, this.activeElem[0]);
          }
        }
      }
    };

    DropDownButton.prototype.openPopUp = function (e) {
      var _this = this;

      if (e === void 0) {
        e = null;
      }

      if (!this.target) {
        this.createItems(true);
      }

      var ul = this.getULElement();
      var beforeOpenArgs = {
        element: ul,
        items: this.items,
        event: e,
        cancel: false
      };
      this.trigger('beforeOpen', beforeOpenArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          var ul_1 = _this.getULElement();

          _this.dropDown.show(null, _this.element);

          (0, _ej2Base.addClass)([_this.element], 'e-active');

          _this.element.setAttribute('aria-expanded', 'true');

          ul_1.focus();
          var openArgs = {
            element: ul_1,
            items: _this.items
          };

          _this.trigger('open', openArgs);
        }
      });
    };

    DropDownButton.prototype.closePopup = function (e, focusEle) {
      var _this = this;

      if (e === void 0) {
        e = null;
      }

      var ul = this.getULElement();
      var beforeCloseArgs = {
        element: ul,
        items: this.items,
        event: e,
        cancel: false
      };
      this.trigger('beforeClose', beforeCloseArgs, function (observedArgs) {
        if (!observedArgs.cancel) {
          var ul_2 = _this.getULElement();

          _this.removeCustomSelection();

          _this.dropDown.hide();

          (0, _ej2Base.removeClass)(_this.activeElem, 'e-active');

          _this.element.setAttribute('aria-expanded', 'false');

          if (focusEle) {
            focusEle.focus();
          }

          var closeArgs = {
            element: ul_2,
            items: _this.items
          };

          _this.trigger('close', closeArgs);

          if (!_this.target && ul_2) {
            (0, _ej2Base.detach)(ul_2);
          }
        }
      });
    };

    DropDownButton.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);

      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);

      _ej2Base.EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);

      _ej2Base.EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);

      _ej2Base.EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);

      this.rippleFn();
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {DropDownButtonModel} newProp
     * @param  {DropDownButtonModel} oldProp
     * @returns void
     * @private
     */


    DropDownButton.prototype.onPropertyChanged = function (newProp, oldProp) {
      var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];
      this.button.setProperties((0, _common.getModel)(newProp, btnModel));
      this.dropDown.setProperties((0, _common.getModel)(newProp, ['enableRtl']));
      var popupElement = this.getPopUpElement();

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'content':
            if (!this.element.querySelector('span.e-caret')) {
              this.appendArrowSpan();
            }

            break;

          case 'disabled':
            if (newProp.disabled) {
              this.unWireEvents();

              if (!this.canOpen()) {
                this.closePopup();
              }
            } else {
              this.wireEvents();
            }

            break;

          case 'cssClass':
            if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {
              var arrowSpan = this.element.querySelector('span.e-caret');
              (0, _ej2Base.classList)(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);
            }

            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([popupElement], oldProp.cssClass.split(' '));
            }

            if (newProp.cssClass) {
              (0, _ej2Base.addClass)([popupElement], newProp.cssClass.split(' '));
            }

            break;

          case 'target':
            this.dropDown.content = this.getTargetElement();
            this.dropDown.dataBind();
            break;

          case 'items':
            if (!this.canOpen()) {
              this.createItems();
            }

            break;
        }
      }
    };
    /**
     * Sets the focus to DropDownButton
     * its native method
     * @public
     */


    DropDownButton.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Property)('')], DropDownButton.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)('')], DropDownButton.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownButton.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('')], DropDownButton.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], DropDownButton.prototype, "iconPosition", void 0);

    __decorate([(0, _ej2Base.Property)(false)], DropDownButton.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Collection)([], _common.Item)], DropDownButton.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('')], DropDownButton.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "beforeItemRender", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], DropDownButton.prototype, "created", void 0);

    DropDownButton = __decorate([_ej2Base.NotifyPropertyChanges], DropDownButton);
    return DropDownButton;
  }(_ej2Base.Component);

  _exports.DropDownButton = DropDownButton;
});;
define('@syncfusion/ej2-splitbuttons/src/drop-down-button/index',["exports", "./drop-down-button"], function (_exports, _dropDownButton) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_dropDownButton).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _dropDownButton[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/index',["exports", "./common/index", "./drop-down-button/index", "./split-button/index", "./button-group/index", "./progress-button/index"], function (_exports, _index, _index2, _index3, _index4, _index5) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index[key];
  });
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index2[key];
  });
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index3[key];
  });
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index4[key];
  });
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _index5[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/progress-button/index',["exports", "./progress-button"], function (_exports, _progressButton) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_progressButton).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _progressButton[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/progress-button/progress-button',["exports", "@syncfusion/ej2-buttons", "@syncfusion/ej2-base", "@syncfusion/ej2-popups"], function (_exports, _ej2Buttons, _ej2Base, _ej2Popups) {
  "use strict";

  _exports.__esModule = true;
  _exports.ProgressButton = _exports.AnimationSettings = _exports.SpinSettings = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };

  var HIDESPINNER = 'e-hide-spinner';
  var PROGRESS = 'e-progress';
  var PROGRESSACTIVE = 'e-progress-active';
  var CONTENTCLS = 'e-btn-content';

  var SpinSettings =
  /** @class */
  function (_super) {
    __extends(SpinSettings, _super);

    function SpinSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(null)], SpinSettings.prototype, "template", void 0);

    __decorate([(0, _ej2Base.Property)(16)], SpinSettings.prototype, "width", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], SpinSettings.prototype, "position", void 0);

    return SpinSettings;
  }(_ej2Base.ChildProperty);

  _exports.SpinSettings = SpinSettings;

  var AnimationSettings =
  /** @class */
  function (_super) {
    __extends(AnimationSettings, _super);

    function AnimationSettings() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    __decorate([(0, _ej2Base.Property)(400)], AnimationSettings.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('None')], AnimationSettings.prototype, "effect", void 0);

    __decorate([(0, _ej2Base.Property)('ease')], AnimationSettings.prototype, "easing", void 0);

    return AnimationSettings;
  }(_ej2Base.ChildProperty);

  _exports.AnimationSettings = AnimationSettings;

  /**
   * The ProgressButton visualizes the progression of an operation to indicate the user
   * that a process is happening in the background with visual representation.
   * ```html
   * <button id="element"></button>
   * ```
   * ```typescript
   * <script>
   * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });
   * progressButtonObj.appendTo("#element");
   * </script>
   * ```
   */
  var ProgressButton =
  /** @class */
  function (_super) {
    __extends(ProgressButton, _super);
    /**
     * Constructor for creating the widget
     * @param  {ProgressButtonModel} options?
     * @param  {string|HTMLButtonElement} element?
     */


    function ProgressButton(options, element) {
      var _this = _super.call(this, options, element) || this;

      _this.step = 1;
      return _this;
    }

    ProgressButton.prototype.preRender = function () {
      _super.prototype.preRender.call(this);
    };
    /**
     * Initialize the Component rendering
     * @returns void
     * @private
     */


    ProgressButton.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)()) {
        this.isServerRendered = false;
      }

      _super.prototype.render.call(this);

      this.init();
      this.wireEvents();
      this.setAria();
      this.renderComplete();
    };
    /**
     * Starts the button progress at the specified percent.
     * @param percent Starts the button progress at this percent.
     * @returns void
     */


    ProgressButton.prototype.start = function (percent) {
      this.isPaused = false;
      this.startProgress(percent ? percent : this.percent, this.progressTime);
    };
    /**
     * Stops the button progress.
     * @returns void
     */


    ProgressButton.prototype.stop = function () {
      this.isPaused = true;
      cancelAnimationFrame(this.timerId);
    };
    /**
     * Complete the button progress.
     * @returns void
     */


    ProgressButton.prototype.progressComplete = function () {
      this.isPaused = false;
      this.finishProgress();
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */


    ProgressButton.prototype.getModuleName = function () {
      return 'progress-btn';
    };
    /**
     * Destroys the widget.
     * @returns void
     */


    ProgressButton.prototype.destroy = function () {
      var _this = this;

      var classList = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + _super.prototype.getModuleName.call(this), 'e-spin-' + this.spinSettings.position.toLowerCase()];
      var css;

      _super.prototype.destroy.call(this);

      this.unWireEvents();
      this.element.innerHTML = '';

      if (this.cssClass) {
        classList = classList.concat(this.cssClass.split(' '));
      }

      (0, _ej2Base.removeClass)([this.element], classList);
      css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow'] : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];
      css.forEach(function (key) {
        _this.element.removeAttribute(key);
      });

      if (this.disabled) {
        this.element.removeAttribute('disabled');
      }
    };

    ProgressButton.prototype.init = function () {
      this.element.classList.add('e-' + _super.prototype.getModuleName.call(this));
      this.setContent();
      this.createSpinner();

      if (this.enableProgress) {
        this.createProgress();
      }
    };

    ProgressButton.prototype.createSpinner = function () {
      var spinner = this.createElement('span', {
        className: 'e-spinner'
      });
      this.setSpinPosition(spinner);
      (0, _ej2Popups.createSpinner)({
        target: spinner,
        width: this.spinSettings.width || 16,
        template: this.spinSettings.template
      }, this.createElement);
    };

    ProgressButton.prototype.getSpinner = function () {
      return this.element.getElementsByClassName('e-spinner')[0];
    };

    ProgressButton.prototype.getProgress = function () {
      return this.element.getElementsByClassName(PROGRESS)[0];
    };

    ProgressButton.prototype.setSpinPosition = function (ele) {
      var position = this.spinSettings.position || 'Left';

      if (position === 'Left' || position === 'Top') {
        this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);
      } else {
        this.element.appendChild(ele);
      }

      this.element.classList.add('e-spin-' + position.toLowerCase());
    };

    ProgressButton.prototype.createProgress = function () {
      this.element.appendChild(this.createElement('span', {
        className: PROGRESS
      }));
    };

    ProgressButton.prototype.setContent = function () {
      var cont;

      if ((0, _ej2Base.isBlazor)()) {
        cont = this.content;

        if (this.enableHtmlSanitizer) {
          cont = _ej2Base.SanitizeHtmlHelper.sanitize(this.content);
        }

        this.setContentIcon(cont);
      } else {
        cont = this.element.innerHTML;

        if (this.enableHtmlSanitizer) {
          cont = _ej2Base.SanitizeHtmlHelper.sanitize(this.element.innerHTML);
        }

        this.element.innerHTML = '';
        this.element.appendChild(this.createElement('span', {
          className: CONTENTCLS,
          innerHTML: cont
        }));
      }
    };

    ProgressButton.prototype.setContentIcon = function (content) {
      var contElem = this.createElement('span', {
        className: CONTENTCLS,
        innerHTML: content
      });

      if (this.iconCss) {
        var span = this.createElement('span', {
          className: 'e-btn-icon ' + this.iconCss
        });

        if (!this.element.textContent.trim()) {
          this.element.classList.add('e-icon-btn');
        } else {
          span.classList.add('e-icon-' + this.iconPosition.toLowerCase());

          if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
            this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
          }
        }

        var node = contElem.childNodes[0];

        if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
          contElem.insertBefore(span, node);
        } else {
          contElem.appendChild(span);
        }
      }

      this.element.appendChild(contElem);
    };

    ProgressButton.prototype.clickHandler = function () {
      if (this.element.classList.contains(PROGRESSACTIVE)) {
        return;
      }

      this.startProgress();
    };

    ProgressButton.prototype.startProgress = function (percent, progressTime) {
      var clsList = this.element.classList;
      var isVertical = clsList.contains('e-vertical');
      clsList.add(PROGRESSACTIVE);

      if (!clsList.contains(HIDESPINNER)) {
        (0, _ej2Popups.showSpinner)(this.element);
      }

      this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);
      this.startContAnimate();
    };

    ProgressButton.prototype.startAnimate = function (timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
      var _this = this;

      try {
        var args = void 0;
        var timeDiff = timestamp - prevTime;
        var stepTime = this.duration * step / 100;
        var timeDiffBuffer_1 = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
        this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer_1;
        prevTime = timestamp - timeDiffBuffer_1;
        percent = percent + (timeDiff - timeDiffBuffer_1) / this.duration * 100;
        prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;
        args = {
          percent: prevPercent,
          currentDuration: progressTime,
          step: step
        };
        this.eIsVertical = isVertical;

        if (percent === 0) {
          this.trigger('begin', args, function (observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else if (percent === 100 || progressTime === this.duration) {
          this.trigger('end', args, function (observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else {
          this.trigger('progress', args, function (observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        }
      } catch (e) {
        cancelAnimationFrame(this.timerId);
        this.trigger('fail', e);
      }
    };

    ProgressButton.prototype.successCallback = function (args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {
      var _this = this;

      var percent = perc;
      var prevPercent = pPerc;
      var timeDiffBuffer = timDif;
      var progressTime = prgTim;
      var prevProgressTime = pPrgTim;
      var prevTime = pTim;
      var isVertical = this.eIsVertical;

      if (percent !== args.percent && args.percent !== prevPercent) {
        percent = args.percent;
      }

      this.percent = percent;
      this.step = args.step;

      if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {
        this.timerId = requestAnimationFrame(function () {
          if (_this.enableProgress) {
            _this.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';
          }

          _this.element.setAttribute('aria-valuenow', percent.toString());
        });
        prevPercent = percent;
        prevProgressTime = progressTime;
      }

      if (!this.isPaused) {
        if (progressTime < this.duration && percent < 100) {
          this.interval = window.setTimeout(function () {
            _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical); // tslint:disable-next-line

          }, this.duration / 100 - timeDiffBuffer);
        } else {
          this.interval = window.setTimeout(function () {
            _this.progressTime = _this.percent = 0;

            if (_this.enableProgress) {
              _this.getProgress().style[isVertical ? 'height' : 'width'] = '0%';
            }

            _this.element.setAttribute('aria-valuenow', '0');

            _this.hideSpin(); // tslint:disable-next-line

          }, 100);
        }
      }
    };

    ProgressButton.prototype.startContAnimate = function () {
      var _this = this;

      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];

      if (this.animationSettings.effect !== 'None') {
        new _ej2Base.Animation({}).animate(ele, {
          duration: this.animationSettings.duration,
          name: 'Progress' + this.animationSettings.effect,
          timingFunction: this.animationSettings.easing,
          begin: function () {
            if (_this.spinSettings.position === 'Center') {
              _this.setSpinnerSize();
            }
          },
          end: function () {
            ele.classList.add('e-animate-end');
          }
        });
      } else if (this.spinSettings.position === 'Center') {
        this.setSpinnerSize();
      }
    };

    ProgressButton.prototype.finishProgress = function () {
      var clsList = this.element.classList;
      var isVertical = clsList.contains('e-vertical');
      clsList.add(PROGRESSACTIVE);
      var args;
      var count = 100;

      for (var i = this.percent; i < count; i++) {
        i += 10;

        if (i > 100) {
          i = 100;
        }

        if (this.enableProgress) {
          this.getProgress().style[isVertical ? 'height' : 'width'] = this.percent < 100 ? i + '%' : '100%';
        }
      }

      this.element.setAttribute('aria-valuenow', '0');
      this.hideSpin();
      args = {
        step: this.step,
        currentDuration: this.progressTime,
        percent: 100
      };
      clearTimeout(this.interval);
      this.trigger('end', args);
      this.progressTime = this.percent = 0;
    };

    ProgressButton.prototype.setSpinnerSize = function () {
      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
      var spinner = this.getSpinner();
      spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';
      spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';
      ele.classList.add('e-cont-animate');
    };

    ProgressButton.prototype.hideSpin = function () {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];

      if (!this.element.classList.contains(HIDESPINNER)) {
        (0, _ej2Popups.hideSpinner)(this.element);
      }

      this.element.classList.remove(PROGRESSACTIVE);

      if (this.animationSettings.effect !== 'None') {
        cont.classList.remove('e-animate-end');
      }

      if (this.spinSettings.position === 'Center') {
        var ele = this.getSpinner();
        cont.classList.remove('e-cont-animate');
        ele.style.width = 'auto';
        ele.style.height = 'auto';
      }
    };

    ProgressButton.prototype.setIconSpan = function () {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
      var iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];

      if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
        cont.insertBefore(iconSpan, cont.childNodes[0]);
      } else {
        cont.appendChild(iconSpan);
      }
    };

    ProgressButton.prototype.setAria = function () {
      (0, _ej2Base.attributes)(this.element, {
        'aria-label': this.element.textContent + ' progress',
        'aria-valuemin': '0',
        'aria-valuemax': '100',
        'aria-valuenow': '0'
      });
    };

    ProgressButton.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'click', this.clickHandler, this);
    };

    ProgressButton.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'click', this.clickHandler);
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {ProgressButtonModel} newProp
     * @param  {ProgressButtonModel} oldProp
     * @returns void
     * @private
     */


    ProgressButton.prototype.onPropertyChanged = function (newProp, oldProp) {
      var ele = this.element;

      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'content':
            if ((0, _ej2Base.isBlazor)()) {
              var btnElem = this.element.querySelector('.e-btn-content');

              if (this.iconCss) {
                if (this.iconPosition === 'Left' || this.iconPosition === 'Top') {
                  btnElem.childNodes[1].textContent = this.content;
                } else {
                  btnElem.childNodes[0].textContent = this.content;
                }
              } else {
                btnElem.textContent = this.content;
              }
            } else {
              this.setContent();
              this.createSpinner();

              if (this.enableProgress) {
                this.createProgress();
              }
            }

            ele.setAttribute('aria-label', ele.textContent + ' progress');
            break;

          case 'iconCss':
            if (!oldProp.iconCss) {
              this.setIconSpan();
            }

            break;

          case 'iconPosition':
            this.setIconSpan();
            break;

          case 'enableProgress':
            if (newProp.enableProgress) {
              this.createProgress();
            } else {
              (0, _ej2Base.remove)(this.getProgress());
            }

            break;

          case 'spinSettings':
            if (newProp.spinSettings.position) {
              ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());
              this.setSpinPosition(this.getSpinner());
            }

            if (newProp.spinSettings.template || newProp.spinSettings.width) {
              ele.removeChild(this.getSpinner());
              this.createSpinner();
            }

            break;
        }
      }
    };
    /**
     * Sets the focus to ProgressButton
     * its native method
     * @public
     */


    ProgressButton.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Property)(false)], ProgressButton.prototype, "enableProgress", void 0);

    __decorate([(0, _ej2Base.Property)(2000)], ProgressButton.prototype, "duration", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], ProgressButton.prototype, "iconPosition", void 0);

    __decorate([(0, _ej2Base.Property)('')], ProgressButton.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ProgressButton.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ProgressButton.prototype, "isPrimary", void 0);

    __decorate([(0, _ej2Base.Property)('')], ProgressButton.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)('')], ProgressButton.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ProgressButton.prototype, "isToggle", void 0);

    __decorate([(0, _ej2Base.Property)(false)], ProgressButton.prototype, "enableHtmlSanitizer", void 0);

    __decorate([(0, _ej2Base.Complex)({}, SpinSettings)], ProgressButton.prototype, "spinSettings", void 0);

    __decorate([(0, _ej2Base.Complex)({}, AnimationSettings)], ProgressButton.prototype, "animationSettings", void 0);

    __decorate([(0, _ej2Base.Event)()], ProgressButton.prototype, "created", void 0);

    __decorate([(0, _ej2Base.Event)()], ProgressButton.prototype, "begin", void 0);

    __decorate([(0, _ej2Base.Event)()], ProgressButton.prototype, "progress", void 0);

    __decorate([(0, _ej2Base.Event)()], ProgressButton.prototype, "end", void 0);

    __decorate([(0, _ej2Base.Event)()], ProgressButton.prototype, "fail", void 0);

    ProgressButton = __decorate([_ej2Base.NotifyPropertyChanges], ProgressButton);
    return ProgressButton;
  }(_ej2Buttons.Button);

  _exports.ProgressButton = ProgressButton;
});;
define('@syncfusion/ej2-splitbuttons/src/split-button/index',["exports", "./split-button"], function (_exports, _splitButton) {
  "use strict";

  _exports.__esModule = true;
  Object.keys(_splitButton).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    _exports[key] = _splitButton[key];
  });
});;
define('@syncfusion/ej2-splitbuttons/src/split-button/split-button',["exports", "@syncfusion/ej2-base", "@syncfusion/ej2-buttons", "./../common/common", "../drop-down-button/drop-down-button"], function (_exports, _ej2Base, _ej2Buttons, _common, _dropDownButton) {
  "use strict";

  _exports.__esModule = true;
  _exports.Deferred = _exports.SplitButton = void 0;

  var __extends = void 0 && (void 0).__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }; /// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>


  var RTL = 'e-rtl';
  var TAGNAME = 'EJS-SPLITBUTTON';
  /**
   * SplitButton component has primary and secondary button. Primary button is used to select
   * default action and secondary button is used to toggle contextual overlays for displaying list of
   * action items. It can contain both text and images.
   * ```html
   * <button id="element"></button>
   * ```
   * ```typescript
   * <script>
   * var splitBtnObj = new SplitButton({content: 'SplitButton'});
   * splitBtnObj.appendTo("#element");
   * </script>
   * ```
   */

  var SplitButton =
  /** @class */
  function (_super) {
    __extends(SplitButton, _super);
    /**
     * Constructor for creating the widget
     * @param  {SplitButtonModel} options?
     * @param  {string|HTMLButtonElement} element?
     */


    function SplitButton(options, element) {
      return _super.call(this, options, element) || this;
    }
    /**
     * Initialize Angular support.
     * @private
     */


    SplitButton.prototype.preRender = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        return;
      }

      var ele = this.element;

      if (ele.tagName === TAGNAME) {
        var ejInstance = (0, _ej2Base.getValue)('ej2_instances', ele);
        var btn = this.createElement('button', {
          attrs: {
            'type': 'button'
          }
        });
        var wrapper = this.createElement(TAGNAME, {
          className: 'e-' + this.getModuleName() + '-wrapper'
        });

        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }

        ele.parentNode.insertBefore(wrapper, ele);
        (0, _ej2Base.detach)(ele);
        ele = btn;
        wrapper.appendChild(ele);
        (0, _ej2Base.setValue)('ej2_instances', ejInstance, ele);
        this.wrapper = wrapper;
        this.element = ele;
      }

      if (!this.element.id) {
        this.element.id = (0, _ej2Base.getUniqueID)('e-' + this.getModuleName());
      }
    };

    SplitButton.prototype.render = function () {
      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        _ej2Buttons.buttonObserver.on('component-rendered', this.buttonInstance, this, this.element.id);

        _dropDownButton.dropDownButtonObserver.on('component-rendered', this.dropDownButtonInstance, this, this.element.id);
      } else {
        this.initWrapper();
        this.createPrimaryButton();
        this.renderControl();
      }
    };

    SplitButton.prototype.buttonInstance = function (args) {
      if (this.element.id === args.instance.element.id) {
        this.primaryBtnObj = args.instance;

        _ej2Buttons.buttonObserver.off('component-rendered', this.buttonInstance, this.element.id);
      }
    };

    SplitButton.prototype.dropDownButtonInstance = function (args) {
      if (args.instance.element.id.indexOf(this.element.id) > -1) {
        this.secondaryBtnObj = args.instance;
        this.renderControl();

        _dropDownButton.dropDownButtonObserver.off('component-rendered', this.dropDownButtonInstance, this.element.id);
      }
    };

    SplitButton.prototype.renderControl = function () {
      this.createSecondaryButton();
      this.setActiveElem([this.element, this.secondaryBtnObj.element]);
      this.setAria();
      this.wireEvents();
      this.renderComplete();
    };

    SplitButton.prototype.addItems = function (items, text) {
      _super.prototype.addItems.call(this, items, text);

      this.secondaryBtnObj.items = this.items;
    };

    SplitButton.prototype.removeItems = function (items) {
      _super.prototype.removeItems.call(this, items);

      this.secondaryBtnObj.items = this.items;
    };

    SplitButton.prototype.initWrapper = function () {
      if (!this.wrapper) {
        this.wrapper = this.createElement('div', {
          className: 'e-' + this.getModuleName() + '-wrapper'
        });
        this.element.parentNode.insertBefore(this.wrapper, this.element);
      }

      this.element.classList.remove('e-' + this.getModuleName());

      if (this.enableRtl) {
        this.wrapper.classList.add(RTL);
      }

      if (this.cssClass) {
        (0, _ej2Base.addClass)([this.wrapper], this.cssClass.split(' '));
      }
    };

    SplitButton.prototype.createPrimaryButton = function () {
      var btnModel = {
        cssClass: this.cssClass,
        enableRtl: this.enableRtl,
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        content: this.content,
        disabled: this.disabled
      };
      this.primaryBtnObj = new _ej2Buttons.Button(btnModel);
      this.primaryBtnObj.createElement = this.createElement;
      this.primaryBtnObj.appendTo(this.element);
      this.element.classList.add('e-' + this.getModuleName());
      this.element.type = 'button';
      this.wrapper.appendChild(this.element);
    };

    SplitButton.prototype.createSecondaryButton = function () {
      var _this = this;

      var dropDownBtnModel;
      var btnElem;

      if ((0, _ej2Base.isBlazor)() && this.isServerRendered) {
        this.wrapper = this.element.parentElement;
        dropDownBtnModel = this.secondaryBtnObj;
      } else {
        btnElem = this.createElement('button', {
          className: 'e-icon-btn',
          attrs: {
            'tabindex': '-1'
          },
          id: this.element.id + '_dropdownbtn'
        });
        this.wrapper.appendChild(btnElem);
        dropDownBtnModel = {
          cssClass: this.cssClass,
          disabled: this.disabled,
          enableRtl: this.enableRtl,
          items: this.items,
          target: this.target
        };
      }

      dropDownBtnModel.beforeItemRender = function (args) {
        _this.trigger('beforeItemRender', args);
      };

      dropDownBtnModel.open = function (args) {
        _this.trigger('open', args);
      };

      dropDownBtnModel.close = function (args) {
        _this.trigger('close', args);
      };

      dropDownBtnModel.select = function (args) {
        _this.trigger('select', args);
      };

      dropDownBtnModel.beforeOpen = function (args) {
        var callBackPromise = new Deferred();

        _this.trigger('beforeOpen', args, function (observedArgs) {
          callBackPromise.resolve(observedArgs);
        });

        return callBackPromise;
      };

      dropDownBtnModel.beforeClose = function (args) {
        var callBackPromise = new Deferred();

        _this.trigger('beforeClose', args, function (observedArgs) {
          callBackPromise.resolve(observedArgs);
        });

        return callBackPromise;
      };

      if (!((0, _ej2Base.isBlazor)() && this.isServerRendered)) {
        this.secondaryBtnObj = new _dropDownButton.DropDownButton(dropDownBtnModel);
        this.secondaryBtnObj.createElement = this.createElement;
        this.secondaryBtnObj.appendTo(btnElem);
      }

      this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
      this.dropDown = this.secondaryBtnObj.dropDown;
      this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];

      _ej2Base.EventHandler.remove(this.getPopUpElement(), 'keydown', this.secondaryBtnObj.keyBoardHandler);

      this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');
    };

    SplitButton.prototype.setAria = function () {
      (0, _ej2Base.attributes)(this.element, {
        'aria-expanded': 'false',
        'aria-haspopup': 'true',
        'aria-label': this.element.textContent + ' splitbutton',
        'aria-owns': this.secondaryBtnObj.dropDown.element.id
      });
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */


    SplitButton.prototype.getModuleName = function () {
      return 'split-btn';
    };
    /**
     * To open/close SplitButton popup based on current state of the SplitButton.
     * @returns void
     */


    SplitButton.prototype.toggle = function () {
      this.secondaryBtnObj.toggle();
    };

    SplitButton.prototype.destroy = function () {
      var _this = this;

      var classList = [RTL];
      var element = document.getElementById(this.element.id);

      if (this.cssClass) {
        classList = classList.concat(this.cssClass.split(' '));
      }

      if (element && element.parentElement === this.wrapper) {
        if (this.wrapper.tagName === TAGNAME) {
          this.wrapper.innerHTML = '';
          (0, _ej2Base.removeClass)([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);
          (0, _ej2Base.removeClass)([this.wrapper], this.cssClass.split(' '));
        } else {
          (0, _ej2Base.removeClass)([this.element], classList);
          ['aria-label', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type'].forEach(function (key) {
            _this.element.removeAttribute(key);
          });
          this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
          (0, _ej2Base.remove)(this.wrapper);
        }

        this.unWireEvents();
      }

      this.primaryBtnObj.destroy();
      this.secondaryBtnObj.destroy();

      _super.prototype.destroy.call(this);

      if (!this.element.getAttribute('class')) {
        this.element.removeAttribute('class');
      }
    };

    SplitButton.prototype.wireEvents = function () {
      _ej2Base.EventHandler.add(this.element, 'click', this.primaryBtnClickHandler, this);

      _ej2Base.EventHandler.add(this.getPopUpElement(), 'keydown', this.keyBoardHandler, this);

      new _ej2Base.KeyboardEvents(this.element, {
        keyAction: this.btnKeyBoardHandler.bind(this),
        keyConfigs: {
          altdownarrow: 'alt+downarrow'
        }
      });
    };

    SplitButton.prototype.unWireEvents = function () {
      _ej2Base.EventHandler.remove(this.element, 'click', this.primaryBtnClickHandler);

      (0, _ej2Base.getInstance)(this.element, _ej2Base.KeyboardEvents).destroy();
    };

    SplitButton.prototype.primaryBtnClickHandler = function () {
      this.trigger('click', {
        element: this.element
      });
    };

    SplitButton.prototype.btnKeyBoardHandler = function (e) {
      switch (e.action) {
        case 'altdownarrow':
          this.clickHandler(e);
          break;
      }
    };
    /**
     * Called internally if any of the property value changed.
     * @param  {SplitButtonModel} newProp
     * @param  {SplitButtonModel} oldProp
     * @returns void
     */


    SplitButton.prototype.onPropertyChanged = function (newProp, oldProp) {
      var model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];
      this.primaryBtnObj.setProperties((0, _common.getModel)(newProp, model));
      model = ['beforeOpen', 'beforeItemRender', 'select', 'open', 'close', 'cssClass', 'disabled', 'enableRtl'];

      if (Object.keys(newProp)[0] === 'items') {
        this.secondaryBtnObj.onPropertyChanged(newProp, oldProp);
      }

      this.secondaryBtnObj.setProperties((0, _common.getModel)(newProp, model));

      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];

        switch (prop) {
          case 'cssClass':
            if (oldProp.cssClass) {
              (0, _ej2Base.removeClass)([this.wrapper], oldProp.cssClass.split(' '));
            }

            (0, _ej2Base.addClass)([this.wrapper], newProp.cssClass.split(' '));
            break;

          case 'enableRtl':
            if (newProp.enableRtl) {
              (0, _ej2Base.addClass)([this.wrapper], RTL);
            } else {
              (0, _ej2Base.removeClass)([this.wrapper], RTL);
            }

            break;
        }
      }
    };
    /**
     * Sets the focus to SplitButton
     * its native method
     * @public
     */


    SplitButton.prototype.focusIn = function () {
      this.element.focus();
    };

    __decorate([(0, _ej2Base.Property)('')], SplitButton.prototype, "content", void 0);

    __decorate([(0, _ej2Base.Property)('')], SplitButton.prototype, "cssClass", void 0);

    __decorate([(0, _ej2Base.Property)(false)], SplitButton.prototype, "disabled", void 0);

    __decorate([(0, _ej2Base.Property)('')], SplitButton.prototype, "iconCss", void 0);

    __decorate([(0, _ej2Base.Property)('Left')], SplitButton.prototype, "iconPosition", void 0);

    __decorate([(0, _ej2Base.Collection)([], _common.Item)], SplitButton.prototype, "items", void 0);

    __decorate([(0, _ej2Base.Property)('')], SplitButton.prototype, "target", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "beforeItemRender", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "beforeOpen", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "beforeClose", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "click", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "close", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "open", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "select", void 0);

    __decorate([(0, _ej2Base.Event)()], SplitButton.prototype, "created", void 0);

    SplitButton = __decorate([_ej2Base.NotifyPropertyChanges], SplitButton);
    return SplitButton;
  }(_dropDownButton.DropDownButton);

  _exports.SplitButton = SplitButton;

  /**
   * Deferred is used to handle asynchronous operation.
   */
  var Deferred =
  /** @class */
  function () {
    function Deferred() {
      var _this = this;
      /**
       * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
       */


      this.promise = new Promise(function (resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      /**
       * Defines the callback function triggers when the Deferred object is resolved.
       */

      this.then = this.promise.then.bind(this.promise);
      /**
       * Defines the callback function triggers when the Deferred object is rejected.
       */

      this.catch = this.promise.catch.bind(this.promise);
    }

    return Deferred;
  }();

  _exports.Deferred = Deferred;
});;
define('aurelia-binding/dist/commonjs/aurelia-binding',['require','exports','module','aurelia-logging','aurelia-pal','aurelia-task-queue','aurelia-metadata'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSetObserver = exports.BindingEngine = exports.NameExpression = exports.Listener = exports.ListenerExpression = exports.BindingBehaviorResource = exports.ValueConverterResource = exports.Call = exports.CallExpression = exports.Binding = exports.BindingExpression = exports.ObjectObservationAdapter = exports.ObserverLocator = exports.SVGAnalyzer = exports.presentationAttributes = exports.presentationElements = exports.elements = exports.ComputedExpression = exports.ClassObserver = exports.SelectValueObserver = exports.CheckedObserver = exports.ValueAttributeObserver = exports.StyleObserver = exports.DataAttributeObserver = exports.dataAttributeAccessor = exports.XLinkAttributeObserver = exports.SetterObserver = exports.PrimitiveObserver = exports.propertyAccessor = exports.DirtyCheckProperty = exports.DirtyChecker = exports.EventSubscriber = exports.EventManager = exports.delegationStrategy = exports.getMapObserver = exports.ParserImplementation = exports.Parser = exports.bindingMode = exports.ExpressionCloner = exports.Unparser = exports.LiteralObject = exports.LiteralArray = exports.LiteralTemplate = exports.LiteralString = exports.LiteralPrimitive = exports.Unary = exports.Binary = exports.CallFunction = exports.CallMember = exports.CallScope = exports.AccessKeyed = exports.AccessMember = exports.AccessScope = exports.AccessThis = exports.Conditional = exports.Assign = exports.ValueConverter = exports.BindingBehavior = exports.Expression = exports.getArrayObserver = exports.CollectionLengthObserver = exports.ModifyCollectionObserver = exports.ExpressionObserver = exports.sourceContext = exports.targetContext = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _dec, _dec2, _class, _dec3, _class2, _dec4, _class3, _dec5, _class5, _dec6, _class7, _dec7, _class8, _dec8, _class9, _dec9, _class10, _class12, _temp, _dec10, _class13, _class14, _temp2;

exports.camelCase = camelCase;
exports.createOverrideContext = createOverrideContext;
exports.getContextFor = getContextFor;
exports.createScopeForTest = createScopeForTest;
exports.connectable = connectable;
exports.enqueueBindingConnect = enqueueBindingConnect;
exports.setConnectQueueThreshold = setConnectQueueThreshold;
exports.enableConnectQueue = enableConnectQueue;
exports.disableConnectQueue = disableConnectQueue;
exports.getConnectQueueSize = getConnectQueueSize;
exports.subscriberCollection = subscriberCollection;
exports.calcSplices = calcSplices;
exports.mergeSplice = mergeSplice;
exports.projectArraySplices = projectArraySplices;
exports.getChangeRecords = getChangeRecords;
exports.cloneExpression = cloneExpression;
exports.hasDeclaredDependencies = hasDeclaredDependencies;
exports.declarePropertyDependencies = declarePropertyDependencies;
exports.computedFrom = computedFrom;
exports.createComputedObserver = createComputedObserver;
exports.valueConverter = valueConverter;
exports.bindingBehavior = bindingBehavior;
exports.observable = observable;
exports.connectBindingToSignal = connectBindingToSignal;
exports.signalBindings = signalBindings;

var _aureliaLogging = require('aurelia-logging');

var LogManager = _interopRequireWildcard(_aureliaLogging);

var _aureliaPal = require('aurelia-pal');

var _aureliaTaskQueue = require('aurelia-task-queue');

var _aureliaMetadata = require('aurelia-metadata');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var targetContext = exports.targetContext = 'Binding:target';
var sourceContext = exports.sourceContext = 'Binding:source';

var map = Object.create(null);

function camelCase(name) {
  if (name in map) {
    return map[name];
  }
  var result = name.charAt(0).toLowerCase() + name.slice(1).replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
  map[name] = result;
  return result;
}

function createOverrideContext(bindingContext, parentOverrideContext) {
  return {
    bindingContext: bindingContext,
    parentOverrideContext: parentOverrideContext || null
  };
}

function getContextFor(name, scope, ancestor) {
  var oc = scope.overrideContext;

  if (ancestor) {
    while (ancestor && oc) {
      ancestor--;
      oc = oc.parentOverrideContext;
    }
    if (ancestor || !oc) {
      return undefined;
    }
    return name in oc ? oc : oc.bindingContext;
  }

  while (oc && !(name in oc) && !(oc.bindingContext && name in oc.bindingContext)) {
    oc = oc.parentOverrideContext;
  }
  if (oc) {
    return name in oc ? oc : oc.bindingContext;
  }

  return scope.bindingContext || scope.overrideContext;
}

function createScopeForTest(bindingContext, parentBindingContext) {
  if (parentBindingContext) {
    return {
      bindingContext: bindingContext,
      overrideContext: createOverrideContext(bindingContext, createOverrideContext(parentBindingContext))
    };
  }
  return {
    bindingContext: bindingContext,
    overrideContext: createOverrideContext(bindingContext)
  };
}

var slotNames = [];
var versionSlotNames = [];
var lastSlot = -1;
function ensureEnoughSlotNames(currentSlot) {
  if (currentSlot === lastSlot) {
    lastSlot += 5;
    var ii = slotNames.length = versionSlotNames.length = lastSlot + 1;
    for (var i = currentSlot + 1; i < ii; ++i) {
      slotNames[i] = '_observer' + i;
      versionSlotNames[i] = '_observerVersion' + i;
    }
  }
}
ensureEnoughSlotNames(-1);

function addObserver(observer) {
  var observerSlots = this._observerSlots === undefined ? 0 : this._observerSlots;
  var i = observerSlots;
  while (i-- && this[slotNames[i]] !== observer) {}

  if (i === -1) {
    i = 0;
    while (this[slotNames[i]]) {
      i++;
    }
    this[slotNames[i]] = observer;
    observer.subscribe(sourceContext, this);

    if (i === observerSlots) {
      this._observerSlots = i + 1;
    }
  }

  if (this._version === undefined) {
    this._version = 0;
  }
  this[versionSlotNames[i]] = this._version;
  ensureEnoughSlotNames(i);
}

function observeProperty(obj, propertyName) {
  var observer = this.observerLocator.getObserver(obj, propertyName);
  addObserver.call(this, observer);
}

function observeArray(array) {
  var observer = this.observerLocator.getArrayObserver(array);
  addObserver.call(this, observer);
}

function unobserve(all) {
  var i = this._observerSlots;
  while (i--) {
    if (all || this[versionSlotNames[i]] !== this._version) {
      var observer = this[slotNames[i]];
      this[slotNames[i]] = null;
      if (observer) {
        observer.unsubscribe(sourceContext, this);
      }
    }
  }
}

function connectable() {
  return function (target) {
    target.prototype.observeProperty = observeProperty;
    target.prototype.observeArray = observeArray;
    target.prototype.unobserve = unobserve;
    target.prototype.addObserver = addObserver;
  };
}

var queue = [];
var queued = {};
var nextId = 0;
var minimumImmediate = 100;
var frameBudget = 15;

var isFlushRequested = false;
var immediate = 0;

function flush(animationFrameStart) {
  var length = queue.length;
  var i = 0;
  while (i < length) {
    var binding = queue[i];
    queued[binding.__connectQueueId] = false;
    binding.connect(true);
    i++;

    if (i % 100 === 0 && _aureliaPal.PLATFORM.performance.now() - animationFrameStart > frameBudget) {
      break;
    }
  }
  queue.splice(0, i);

  if (queue.length) {
    _aureliaPal.PLATFORM.requestAnimationFrame(flush);
  } else {
    isFlushRequested = false;
    immediate = 0;
  }
}

function enqueueBindingConnect(binding) {
  if (immediate < minimumImmediate) {
    immediate++;
    binding.connect(false);
  } else {
    var id = binding.__connectQueueId;
    if (id === undefined) {
      id = nextId;
      nextId++;
      binding.__connectQueueId = id;
    }

    if (!queued[id]) {
      queue.push(binding);
      queued[id] = true;
    }
  }
  if (!isFlushRequested) {
    isFlushRequested = true;
    _aureliaPal.PLATFORM.requestAnimationFrame(flush);
  }
}

function setConnectQueueThreshold(value) {
  minimumImmediate = value;
}

function enableConnectQueue() {
  setConnectQueueThreshold(100);
}

function disableConnectQueue() {
  setConnectQueueThreshold(Number.MAX_SAFE_INTEGER);
}

function getConnectQueueSize() {
  return queue.length;
}

function addSubscriber(context, callable) {
  if (this.hasSubscriber(context, callable)) {
    return false;
  }
  if (!this._context0) {
    this._context0 = context;
    this._callable0 = callable;
    return true;
  }
  if (!this._context1) {
    this._context1 = context;
    this._callable1 = callable;
    return true;
  }
  if (!this._context2) {
    this._context2 = context;
    this._callable2 = callable;
    return true;
  }
  if (!this._contextsRest) {
    this._contextsRest = [context];
    this._callablesRest = [callable];
    return true;
  }
  this._contextsRest.push(context);
  this._callablesRest.push(callable);
  return true;
}

function removeSubscriber(context, callable) {
  if (this._context0 === context && this._callable0 === callable) {
    this._context0 = null;
    this._callable0 = null;
    return true;
  }
  if (this._context1 === context && this._callable1 === callable) {
    this._context1 = null;
    this._callable1 = null;
    return true;
  }
  if (this._context2 === context && this._callable2 === callable) {
    this._context2 = null;
    this._callable2 = null;
    return true;
  }
  var callables = this._callablesRest;
  if (callables === undefined || callables.length === 0) {
    return false;
  }
  var contexts = this._contextsRest;
  var i = 0;
  while (!(callables[i] === callable && contexts[i] === context) && callables.length > i) {
    i++;
  }
  if (i >= callables.length) {
    return false;
  }
  contexts.splice(i, 1);
  callables.splice(i, 1);
  return true;
}

var arrayPool1 = [];
var arrayPool2 = [];
var poolUtilization = [];

function callSubscribers(newValue, oldValue) {
  var context0 = this._context0;
  var callable0 = this._callable0;
  var context1 = this._context1;
  var callable1 = this._callable1;
  var context2 = this._context2;
  var callable2 = this._callable2;
  var length = this._contextsRest ? this._contextsRest.length : 0;
  var contextsRest = void 0;
  var callablesRest = void 0;
  var poolIndex = void 0;
  var i = void 0;
  if (length) {
    poolIndex = poolUtilization.length;
    while (poolIndex-- && poolUtilization[poolIndex]) {}
    if (poolIndex < 0) {
      poolIndex = poolUtilization.length;
      contextsRest = [];
      callablesRest = [];
      poolUtilization.push(true);
      arrayPool1.push(contextsRest);
      arrayPool2.push(callablesRest);
    } else {
      poolUtilization[poolIndex] = true;
      contextsRest = arrayPool1[poolIndex];
      callablesRest = arrayPool2[poolIndex];
    }

    i = length;
    while (i--) {
      contextsRest[i] = this._contextsRest[i];
      callablesRest[i] = this._callablesRest[i];
    }
  }

  if (context0) {
    if (callable0) {
      callable0.call(context0, newValue, oldValue);
    } else {
      context0(newValue, oldValue);
    }
  }
  if (context1) {
    if (callable1) {
      callable1.call(context1, newValue, oldValue);
    } else {
      context1(newValue, oldValue);
    }
  }
  if (context2) {
    if (callable2) {
      callable2.call(context2, newValue, oldValue);
    } else {
      context2(newValue, oldValue);
    }
  }
  if (length) {
    for (i = 0; i < length; i++) {
      var callable = callablesRest[i];
      var context = contextsRest[i];
      if (callable) {
        callable.call(context, newValue, oldValue);
      } else {
        context(newValue, oldValue);
      }
      contextsRest[i] = null;
      callablesRest[i] = null;
    }
    poolUtilization[poolIndex] = false;
  }
}

function hasSubscribers() {
  return !!(this._context0 || this._context1 || this._context2 || this._contextsRest && this._contextsRest.length);
}

function hasSubscriber(context, callable) {
  var has = this._context0 === context && this._callable0 === callable || this._context1 === context && this._callable1 === callable || this._context2 === context && this._callable2 === callable;
  if (has) {
    return true;
  }
  var index = void 0;
  var contexts = this._contextsRest;
  if (!contexts || (index = contexts.length) === 0) {
    return false;
  }
  var callables = this._callablesRest;
  while (index--) {
    if (contexts[index] === context && callables[index] === callable) {
      return true;
    }
  }
  return false;
}

function subscriberCollection() {
  return function (target) {
    target.prototype.addSubscriber = addSubscriber;
    target.prototype.removeSubscriber = removeSubscriber;
    target.prototype.callSubscribers = callSubscribers;
    target.prototype.hasSubscribers = hasSubscribers;
    target.prototype.hasSubscriber = hasSubscriber;
  };
}

var ExpressionObserver = exports.ExpressionObserver = (_dec = connectable(), _dec2 = subscriberCollection(), _dec(_class = _dec2(_class = function () {
  function ExpressionObserver(scope, expression, observerLocator, lookupFunctions) {
    

    this.scope = scope;
    this.expression = expression;
    this.observerLocator = observerLocator;
    this.lookupFunctions = lookupFunctions;
  }

  ExpressionObserver.prototype.getValue = function getValue() {
    return this.expression.evaluate(this.scope, this.lookupFunctions);
  };

  ExpressionObserver.prototype.setValue = function setValue(newValue) {
    this.expression.assign(this.scope, newValue);
  };

  ExpressionObserver.prototype.subscribe = function subscribe(context, callable) {
    var _this = this;

    if (!this.hasSubscribers()) {
      this.oldValue = this.expression.evaluate(this.scope, this.lookupFunctions);
      this.expression.connect(this, this.scope);
    }
    this.addSubscriber(context, callable);
    if (arguments.length === 1 && context instanceof Function) {
      return {
        dispose: function dispose() {
          _this.unsubscribe(context, callable);
        }
      };
    }
  };

  ExpressionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.unobserve(true);
      this.oldValue = undefined;
    }
  };

  ExpressionObserver.prototype.call = function call() {
    var newValue = this.expression.evaluate(this.scope, this.lookupFunctions);
    var oldValue = this.oldValue;
    if (newValue !== oldValue) {
      this.oldValue = newValue;
      this.callSubscribers(newValue, oldValue);
    }
    this._version++;
    this.expression.connect(this, this.scope);
    this.unobserve(false);
  };

  return ExpressionObserver;
}()) || _class) || _class);


function isIndex(s) {
  return +s === s >>> 0;
}

function toNumber(s) {
  return +s;
}

function newSplice(index, removed, addedCount) {
  return {
    index: index,
    removed: removed,
    addedCount: addedCount
  };
}

var EDIT_LEAVE = 0;
var EDIT_UPDATE = 1;
var EDIT_ADD = 2;
var EDIT_DELETE = 3;

function ArraySplice() {}

ArraySplice.prototype = {
  calcEditDistances: function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var rowCount = oldEnd - oldStart + 1;
    var columnCount = currentEnd - currentStart + 1;
    var distances = new Array(rowCount);
    var north = void 0;
    var west = void 0;

    for (var i = 0; i < rowCount; ++i) {
      distances[i] = new Array(columnCount);
      distances[i][0] = i;
    }

    for (var j = 0; j < columnCount; ++j) {
      distances[0][j] = j;
    }

    for (var _i = 1; _i < rowCount; ++_i) {
      for (var _j = 1; _j < columnCount; ++_j) {
        if (this.equals(current[currentStart + _j - 1], old[oldStart + _i - 1])) {
          distances[_i][_j] = distances[_i - 1][_j - 1];
        } else {
          north = distances[_i - 1][_j] + 1;
          west = distances[_i][_j - 1] + 1;
          distances[_i][_j] = north < west ? north : west;
        }
      }
    }

    return distances;
  },

  spliceOperationsFromEditDistances: function spliceOperationsFromEditDistances(distances) {
    var i = distances.length - 1;
    var j = distances[0].length - 1;
    var current = distances[i][j];
    var edits = [];
    while (i > 0 || j > 0) {
      if (i === 0) {
        edits.push(EDIT_ADD);
        j--;
        continue;
      }
      if (j === 0) {
        edits.push(EDIT_DELETE);
        i--;
        continue;
      }
      var northWest = distances[i - 1][j - 1];
      var west = distances[i - 1][j];
      var north = distances[i][j - 1];

      var min = void 0;
      if (west < north) {
        min = west < northWest ? west : northWest;
      } else {
        min = north < northWest ? north : northWest;
      }

      if (min === northWest) {
        if (northWest === current) {
          edits.push(EDIT_LEAVE);
        } else {
          edits.push(EDIT_UPDATE);
          current = northWest;
        }
        i--;
        j--;
      } else if (min === west) {
        edits.push(EDIT_DELETE);
        i--;
        current = west;
      } else {
        edits.push(EDIT_ADD);
        j--;
        current = north;
      }
    }

    edits.reverse();
    return edits;
  },

  calcSplices: function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var prefixCount = 0;
    var suffixCount = 0;

    var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
    if (currentStart === 0 && oldStart === 0) {
      prefixCount = this.sharedPrefix(current, old, minLength);
    }

    if (currentEnd === current.length && oldEnd === old.length) {
      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
    }

    currentStart += prefixCount;
    oldStart += prefixCount;
    currentEnd -= suffixCount;
    oldEnd -= suffixCount;

    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
      return [];
    }

    if (currentStart === currentEnd) {
      var _splice = newSplice(currentStart, [], 0);
      while (oldStart < oldEnd) {
        _splice.removed.push(old[oldStart++]);
      }

      return [_splice];
    } else if (oldStart === oldEnd) {
      return [newSplice(currentStart, [], currentEnd - currentStart)];
    }

    var ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));

    var splice = undefined;
    var splices = [];
    var index = currentStart;
    var oldIndex = oldStart;
    for (var i = 0; i < ops.length; ++i) {
      switch (ops[i]) {
        case EDIT_LEAVE:
          if (splice) {
            splices.push(splice);
            splice = undefined;
          }

          index++;
          oldIndex++;
          break;
        case EDIT_UPDATE:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.addedCount++;
          index++;

          splice.removed.push(old[oldIndex]);
          oldIndex++;
          break;
        case EDIT_ADD:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.addedCount++;
          index++;
          break;
        case EDIT_DELETE:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.removed.push(old[oldIndex]);
          oldIndex++;
          break;
      }
    }

    if (splice) {
      splices.push(splice);
    }
    return splices;
  },

  sharedPrefix: function sharedPrefix(current, old, searchLength) {
    for (var i = 0; i < searchLength; ++i) {
      if (!this.equals(current[i], old[i])) {
        return i;
      }
    }

    return searchLength;
  },

  sharedSuffix: function sharedSuffix(current, old, searchLength) {
    var index1 = current.length;
    var index2 = old.length;
    var count = 0;
    while (count < searchLength && this.equals(current[--index1], old[--index2])) {
      count++;
    }

    return count;
  },

  calculateSplices: function calculateSplices(current, previous) {
    return this.calcSplices(current, 0, current.length, previous, 0, previous.length);
  },

  equals: function equals(currentValue, previousValue) {
    return currentValue === previousValue;
  }
};

var arraySplice = new ArraySplice();

function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  return arraySplice.calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd);
}

function intersect(start1, end1, start2, end2) {
  if (end1 < start2 || end2 < start1) {
    return -1;
  }

  if (end1 === start2 || end2 === start1) {
    return 0;
  }

  if (start1 < start2) {
    if (end1 < end2) {
      return end1 - start2;
    }

    return end2 - start2;
  }

  if (end2 < end1) {
    return end2 - start1;
  }

  return end1 - start1;
}

function mergeSplice(splices, index, removed, addedCount) {
  var splice = newSplice(index, removed, addedCount);

  var inserted = false;
  var insertionOffset = 0;

  for (var i = 0; i < splices.length; i++) {
    var current = splices[i];
    current.index += insertionOffset;

    if (inserted) {
      continue;
    }

    var intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);

    if (intersectCount >= 0) {

      splices.splice(i, 1);
      i--;

      insertionOffset -= current.addedCount - current.removed.length;

      splice.addedCount += current.addedCount - intersectCount;
      var deleteCount = splice.removed.length + current.removed.length - intersectCount;

      if (!splice.addedCount && !deleteCount) {
        inserted = true;
      } else {
        var currentRemoved = current.removed;

        if (splice.index < current.index) {
          var prepend = splice.removed.slice(0, current.index - splice.index);
          Array.prototype.push.apply(prepend, currentRemoved);
          currentRemoved = prepend;
        }

        if (splice.index + splice.removed.length > current.index + current.addedCount) {
          var append = splice.removed.slice(current.index + current.addedCount - splice.index);
          Array.prototype.push.apply(currentRemoved, append);
        }

        splice.removed = currentRemoved;
        if (current.index < splice.index) {
          splice.index = current.index;
        }
      }
    } else if (splice.index < current.index) {

      inserted = true;

      splices.splice(i, 0, splice);
      i++;

      var offset = splice.addedCount - splice.removed.length;
      current.index += offset;
      insertionOffset += offset;
    }
  }

  if (!inserted) {
    splices.push(splice);
  }
}

function createInitialSplices(array, changeRecords) {
  var splices = [];

  for (var i = 0; i < changeRecords.length; i++) {
    var record = changeRecords[i];
    switch (record.type) {
      case 'splice':
        mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
        break;
      case 'add':
      case 'update':
      case 'delete':
        if (!isIndex(record.name)) {
          continue;
        }

        var index = toNumber(record.name);
        if (index < 0) {
          continue;
        }

        mergeSplice(splices, index, [record.oldValue], record.type === 'delete' ? 0 : 1);
        break;
      default:
        console.error('Unexpected record type: ' + JSON.stringify(record));
        break;
    }
  }

  return splices;
}

function projectArraySplices(array, changeRecords) {
  var splices = [];

  createInitialSplices(array, changeRecords).forEach(function (splice) {
    if (splice.addedCount === 1 && splice.removed.length === 1) {
      if (splice.removed[0] !== array[splice.index]) {
        splices.push(splice);
      }

      return;
    }

    splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));
  });

  return splices;
}

function newRecord(type, object, key, oldValue) {
  return {
    type: type,
    object: object,
    key: key,
    oldValue: oldValue
  };
}

function getChangeRecords(map) {
  var entries = new Array(map.size);
  var keys = map.keys();
  var i = 0;
  var item = void 0;

  while (item = keys.next()) {
    if (item.done) {
      break;
    }

    entries[i] = newRecord('added', map, item.value);
    i++;
  }

  return entries;
}

var ModifyCollectionObserver = exports.ModifyCollectionObserver = (_dec3 = subscriberCollection(), _dec3(_class2 = function () {
  function ModifyCollectionObserver(taskQueue, collection) {
    

    this.taskQueue = taskQueue;
    this.queued = false;
    this.changeRecords = null;
    this.oldCollection = null;
    this.collection = collection;
    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
  }

  ModifyCollectionObserver.prototype.subscribe = function subscribe(context, callable) {
    this.addSubscriber(context, callable);
  };

  ModifyCollectionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  ModifyCollectionObserver.prototype.addChangeRecord = function addChangeRecord(changeRecord) {
    if (!this.hasSubscribers() && !this.lengthObserver) {
      return;
    }

    if (changeRecord.type === 'splice') {
      var index = changeRecord.index;
      var arrayLength = changeRecord.object.length;
      if (index > arrayLength) {
        index = arrayLength - changeRecord.addedCount;
      } else if (index < 0) {
        index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
      }
      if (index < 0) {
        index = 0;
      }
      changeRecord.index = index;
    }

    if (this.changeRecords === null) {
      this.changeRecords = [changeRecord];
    } else {
      this.changeRecords.push(changeRecord);
    }

    if (!this.queued) {
      this.queued = true;
      this.taskQueue.queueMicroTask(this);
    }
  };

  ModifyCollectionObserver.prototype.flushChangeRecords = function flushChangeRecords() {
    if (this.changeRecords && this.changeRecords.length || this.oldCollection) {
      this.call();
    }
  };

  ModifyCollectionObserver.prototype.reset = function reset(oldCollection) {
    this.oldCollection = oldCollection;

    if (this.hasSubscribers() && !this.queued) {
      this.queued = true;
      this.taskQueue.queueMicroTask(this);
    }
  };

  ModifyCollectionObserver.prototype.getLengthObserver = function getLengthObserver() {
    return this.lengthObserver || (this.lengthObserver = new CollectionLengthObserver(this.collection));
  };

  ModifyCollectionObserver.prototype.call = function call() {
    var changeRecords = this.changeRecords;
    var oldCollection = this.oldCollection;
    var records = void 0;

    this.queued = false;
    this.changeRecords = [];
    this.oldCollection = null;

    if (this.hasSubscribers()) {
      if (oldCollection) {
        if (this.collection instanceof Map || this.collection instanceof Set) {
          records = getChangeRecords(oldCollection);
        } else {
          records = calcSplices(this.collection, 0, this.collection.length, oldCollection, 0, oldCollection.length);
        }
      } else {
        if (this.collection instanceof Map || this.collection instanceof Set) {
          records = changeRecords;
        } else {
          records = projectArraySplices(this.collection, changeRecords);
        }
      }

      this.callSubscribers(records);
    }

    if (this.lengthObserver) {
      this.lengthObserver.call(this.collection[this.lengthPropertyName]);
    }
  };

  return ModifyCollectionObserver;
}()) || _class2);
var CollectionLengthObserver = exports.CollectionLengthObserver = (_dec4 = subscriberCollection(), _dec4(_class3 = function () {
  function CollectionLengthObserver(collection) {
    

    this.collection = collection;
    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
    this.currentValue = collection[this.lengthPropertyName];
  }

  CollectionLengthObserver.prototype.getValue = function getValue() {
    return this.collection[this.lengthPropertyName];
  };

  CollectionLengthObserver.prototype.setValue = function setValue(newValue) {
    this.collection[this.lengthPropertyName] = newValue;
  };

  CollectionLengthObserver.prototype.subscribe = function subscribe(context, callable) {
    this.addSubscriber(context, callable);
  };

  CollectionLengthObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  CollectionLengthObserver.prototype.call = function call(newValue) {
    var oldValue = this.currentValue;
    this.callSubscribers(newValue, oldValue);
    this.currentValue = newValue;
  };

  return CollectionLengthObserver;
}()) || _class3);

var arrayProto = Array.prototype;
var pop = arrayProto.pop;
var push = arrayProto.push;
var reverse = arrayProto.reverse;
var shift = arrayProto.shift;
var sort = arrayProto.sort;
var splice = arrayProto.splice;
var unshift = arrayProto.unshift;

if (arrayProto.__au_patched__) {
  LogManager.getLogger('array-observation').warn('Detected 2nd attempt of patching array from Aurelia binding.' + ' This is probably caused by dependency mismatch between core modules and a 3rd party plugin.' + ' Please see https://github.com/aurelia/cli/pull/906 if you are using webpack.');
} else {
  Reflect.defineProperty(arrayProto, '__au_patched__', { value: 1 });
  arrayProto.pop = function () {
    var notEmpty = this.length > 0;
    var methodCallResult = pop.apply(this, arguments);
    if (notEmpty && this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: this.length,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };

  arrayProto.push = function () {
    var methodCallResult = push.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: this.length - arguments.length,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };

  arrayProto.reverse = function () {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = reverse.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };

  arrayProto.shift = function () {
    var notEmpty = this.length > 0;
    var methodCallResult = shift.apply(this, arguments);
    if (notEmpty && this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: 0,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };

  arrayProto.sort = function () {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = sort.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };

  arrayProto.splice = function () {
    var methodCallResult = splice.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: +arguments[0],
        removed: methodCallResult,
        addedCount: arguments.length > 2 ? arguments.length - 2 : 0
      });
    }
    return methodCallResult;
  };

  arrayProto.unshift = function () {
    var methodCallResult = unshift.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: 0,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };
}

function _getArrayObserver(taskQueue, array) {
  return ModifyArrayObserver.for(taskQueue, array);
}

exports.getArrayObserver = _getArrayObserver;

var ModifyArrayObserver = function (_ModifyCollectionObse) {
  _inherits(ModifyArrayObserver, _ModifyCollectionObse);

  function ModifyArrayObserver(taskQueue, array) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse.call(this, taskQueue, array));
  }

  ModifyArrayObserver.for = function _for(taskQueue, array) {
    if (!('__array_observer__' in array)) {
      Reflect.defineProperty(array, '__array_observer__', {
        value: ModifyArrayObserver.create(taskQueue, array),
        enumerable: false, configurable: false
      });
    }
    return array.__array_observer__;
  };

  ModifyArrayObserver.create = function create(taskQueue, array) {
    return new ModifyArrayObserver(taskQueue, array);
  };

  return ModifyArrayObserver;
}(ModifyCollectionObserver);

var Expression = exports.Expression = function () {
  function Expression() {
    

    this.isAssignable = false;
  }

  Expression.prototype.evaluate = function evaluate(scope, lookupFunctions, args) {
    throw new Error('Binding expression "' + this + '" cannot be evaluated.');
  };

  Expression.prototype.assign = function assign(scope, value, lookupFunctions) {
    throw new Error('Binding expression "' + this + '" cannot be assigned to.');
  };

  Expression.prototype.toString = function toString() {
    return typeof FEATURE_NO_UNPARSER === 'undefined' ? _Unparser.unparse(this) : Function.prototype.toString.call(this);
  };

  return Expression;
}();

var BindingBehavior = exports.BindingBehavior = function (_Expression) {
  _inherits(BindingBehavior, _Expression);

  function BindingBehavior(expression, name, args) {
    

    var _this3 = _possibleConstructorReturn(this, _Expression.call(this));

    _this3.expression = expression;
    _this3.name = name;
    _this3.args = args;
    return _this3;
  }

  BindingBehavior.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.expression.evaluate(scope, lookupFunctions);
  };

  BindingBehavior.prototype.assign = function assign(scope, value, lookupFunctions) {
    return this.expression.assign(scope, value, lookupFunctions);
  };

  BindingBehavior.prototype.accept = function accept(visitor) {
    return visitor.visitBindingBehavior(this);
  };

  BindingBehavior.prototype.connect = function connect(binding, scope) {
    this.expression.connect(binding, scope);
  };

  BindingBehavior.prototype.bind = function bind(binding, scope, lookupFunctions) {
    if (this.expression.expression && this.expression.bind) {
      this.expression.bind(binding, scope, lookupFunctions);
    }
    var behavior = lookupFunctions.bindingBehaviors(this.name);
    if (!behavior) {
      throw new Error('No BindingBehavior named "' + this.name + '" was found!');
    }
    var behaviorKey = 'behavior-' + this.name;
    if (binding[behaviorKey]) {
      throw new Error('A binding behavior named "' + this.name + '" has already been applied to "' + this.expression + '"');
    }
    binding[behaviorKey] = behavior;
    behavior.bind.apply(behavior, [binding, scope].concat(evalList(scope, this.args, binding.lookupFunctions)));
  };

  BindingBehavior.prototype.unbind = function unbind(binding, scope) {
    var behaviorKey = 'behavior-' + this.name;
    binding[behaviorKey].unbind(binding, scope);
    binding[behaviorKey] = null;
    if (this.expression.expression && this.expression.unbind) {
      this.expression.unbind(binding, scope);
    }
  };

  return BindingBehavior;
}(Expression);

var ValueConverter = exports.ValueConverter = function (_Expression2) {
  _inherits(ValueConverter, _Expression2);

  function ValueConverter(expression, name, args) {
    

    var _this4 = _possibleConstructorReturn(this, _Expression2.call(this));

    _this4.expression = expression;
    _this4.name = name;
    _this4.args = args;
    _this4.allArgs = [expression].concat(args);
    return _this4;
  }

  ValueConverter.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var converter = lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }

    if ('toView' in converter) {
      return converter.toView.apply(converter, evalList(scope, this.allArgs, lookupFunctions));
    }

    return this.allArgs[0].evaluate(scope, lookupFunctions);
  };

  ValueConverter.prototype.assign = function assign(scope, value, lookupFunctions) {
    var converter = lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }

    if ('fromView' in converter) {
      value = converter.fromView.apply(converter, [value].concat(evalList(scope, this.args, lookupFunctions)));
    }

    return this.allArgs[0].assign(scope, value, lookupFunctions);
  };

  ValueConverter.prototype.accept = function accept(visitor) {
    return visitor.visitValueConverter(this);
  };

  ValueConverter.prototype.connect = function connect(binding, scope) {
    var expressions = this.allArgs;
    var i = expressions.length;
    while (i--) {
      expressions[i].connect(binding, scope);
    }
    var converter = binding.lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }
    var signals = converter.signals;
    if (signals === undefined) {
      return;
    }
    i = signals.length;
    while (i--) {
      connectBindingToSignal(binding, signals[i]);
    }
  };

  return ValueConverter;
}(Expression);

var Assign = exports.Assign = function (_Expression3) {
  _inherits(Assign, _Expression3);

  function Assign(target, value) {
    

    var _this5 = _possibleConstructorReturn(this, _Expression3.call(this));

    _this5.target = target;
    _this5.value = value;
    _this5.isAssignable = true;
    return _this5;
  }

  Assign.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.target.assign(scope, this.value.evaluate(scope, lookupFunctions));
  };

  Assign.prototype.accept = function accept(vistor) {
    vistor.visitAssign(this);
  };

  Assign.prototype.connect = function connect(binding, scope) {};

  Assign.prototype.assign = function assign(scope, value) {
    this.value.assign(scope, value);
    this.target.assign(scope, value);
  };

  return Assign;
}(Expression);

var Conditional = exports.Conditional = function (_Expression4) {
  _inherits(Conditional, _Expression4);

  function Conditional(condition, yes, no) {
    

    var _this6 = _possibleConstructorReturn(this, _Expression4.call(this));

    _this6.condition = condition;
    _this6.yes = yes;
    _this6.no = no;
    return _this6;
  }

  Conditional.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return !!this.condition.evaluate(scope, lookupFunctions) ? this.yes.evaluate(scope, lookupFunctions) : this.no.evaluate(scope, lookupFunctions);
  };

  Conditional.prototype.accept = function accept(visitor) {
    return visitor.visitConditional(this);
  };

  Conditional.prototype.connect = function connect(binding, scope) {
    this.condition.connect(binding, scope);
    if (this.condition.evaluate(scope)) {
      this.yes.connect(binding, scope);
    } else {
      this.no.connect(binding, scope);
    }
  };

  return Conditional;
}(Expression);

var AccessThis = exports.AccessThis = function (_Expression5) {
  _inherits(AccessThis, _Expression5);

  function AccessThis(ancestor) {
    

    var _this7 = _possibleConstructorReturn(this, _Expression5.call(this));

    _this7.ancestor = ancestor;
    return _this7;
  }

  AccessThis.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var oc = scope.overrideContext;
    var i = this.ancestor;
    while (i-- && oc) {
      oc = oc.parentOverrideContext;
    }
    return i < 1 && oc ? oc.bindingContext : undefined;
  };

  AccessThis.prototype.accept = function accept(visitor) {
    return visitor.visitAccessThis(this);
  };

  AccessThis.prototype.connect = function connect(binding, scope) {};

  return AccessThis;
}(Expression);

var AccessScope = exports.AccessScope = function (_Expression6) {
  _inherits(AccessScope, _Expression6);

  function AccessScope(name, ancestor) {
    

    var _this8 = _possibleConstructorReturn(this, _Expression6.call(this));

    _this8.name = name;
    _this8.ancestor = ancestor;
    _this8.isAssignable = true;
    return _this8;
  }

  AccessScope.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var context = getContextFor(this.name, scope, this.ancestor);
    return context[this.name];
  };

  AccessScope.prototype.assign = function assign(scope, value) {
    var context = getContextFor(this.name, scope, this.ancestor);
    return context ? context[this.name] = value : undefined;
  };

  AccessScope.prototype.accept = function accept(visitor) {
    return visitor.visitAccessScope(this);
  };

  AccessScope.prototype.connect = function connect(binding, scope) {
    var context = getContextFor(this.name, scope, this.ancestor);
    binding.observeProperty(context, this.name);
  };

  return AccessScope;
}(Expression);

var AccessMember = exports.AccessMember = function (_Expression7) {
  _inherits(AccessMember, _Expression7);

  function AccessMember(object, name) {
    

    var _this9 = _possibleConstructorReturn(this, _Expression7.call(this));

    _this9.object = object;
    _this9.name = name;
    _this9.isAssignable = true;
    return _this9;
  }

  AccessMember.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    return instance === null || instance === undefined ? instance : instance[this.name];
  };

  AccessMember.prototype.assign = function assign(scope, value) {
    var instance = this.object.evaluate(scope);

    if (instance === null || instance === undefined) {
      instance = {};
      this.object.assign(scope, instance);
    }

    instance[this.name] = value;
    return value;
  };

  AccessMember.prototype.accept = function accept(visitor) {
    return visitor.visitAccessMember(this);
  };

  AccessMember.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (obj) {
      binding.observeProperty(obj, this.name);
    }
  };

  return AccessMember;
}(Expression);

var AccessKeyed = exports.AccessKeyed = function (_Expression8) {
  _inherits(AccessKeyed, _Expression8);

  function AccessKeyed(object, key) {
    

    var _this10 = _possibleConstructorReturn(this, _Expression8.call(this));

    _this10.object = object;
    _this10.key = key;
    _this10.isAssignable = true;
    return _this10;
  }

  AccessKeyed.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    var lookup = this.key.evaluate(scope, lookupFunctions);
    return getKeyed(instance, lookup);
  };

  AccessKeyed.prototype.assign = function assign(scope, value) {
    var instance = this.object.evaluate(scope);
    var lookup = this.key.evaluate(scope);
    return setKeyed(instance, lookup, value);
  };

  AccessKeyed.prototype.accept = function accept(visitor) {
    return visitor.visitAccessKeyed(this);
  };

  AccessKeyed.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (obj instanceof Object) {
      this.key.connect(binding, scope);
      var key = this.key.evaluate(scope);

      if (key !== null && key !== undefined && !(Array.isArray(obj) && typeof key === 'number')) {
        binding.observeProperty(obj, key);
      }
    }
  };

  return AccessKeyed;
}(Expression);

var CallScope = exports.CallScope = function (_Expression9) {
  _inherits(CallScope, _Expression9);

  function CallScope(name, args, ancestor) {
    

    var _this11 = _possibleConstructorReturn(this, _Expression9.call(this));

    _this11.name = name;
    _this11.args = args;
    _this11.ancestor = ancestor;
    return _this11;
  }

  CallScope.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var args = evalList(scope, this.args, lookupFunctions);
    var context = getContextFor(this.name, scope, this.ancestor);
    var func = getFunction(context, this.name, mustEvaluate);
    if (func) {
      return func.apply(context, args);
    }
    return undefined;
  };

  CallScope.prototype.accept = function accept(visitor) {
    return visitor.visitCallScope(this);
  };

  CallScope.prototype.connect = function connect(binding, scope) {
    var args = this.args;
    var i = args.length;
    while (i--) {
      args[i].connect(binding, scope);
    }
  };

  return CallScope;
}(Expression);

var CallMember = exports.CallMember = function (_Expression10) {
  _inherits(CallMember, _Expression10);

  function CallMember(object, name, args) {
    

    var _this12 = _possibleConstructorReturn(this, _Expression10.call(this));

    _this12.object = object;
    _this12.name = name;
    _this12.args = args;
    return _this12;
  }

  CallMember.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    var args = evalList(scope, this.args, lookupFunctions);
    var func = getFunction(instance, this.name, mustEvaluate);
    if (func) {
      return func.apply(instance, args);
    }
    return undefined;
  };

  CallMember.prototype.accept = function accept(visitor) {
    return visitor.visitCallMember(this);
  };

  CallMember.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (getFunction(obj, this.name, false)) {
      var args = this.args;
      var i = args.length;
      while (i--) {
        args[i].connect(binding, scope);
      }
    }
  };

  return CallMember;
}(Expression);

var CallFunction = exports.CallFunction = function (_Expression11) {
  _inherits(CallFunction, _Expression11);

  function CallFunction(func, args) {
    

    var _this13 = _possibleConstructorReturn(this, _Expression11.call(this));

    _this13.func = func;
    _this13.args = args;
    return _this13;
  }

  CallFunction.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var func = this.func.evaluate(scope, lookupFunctions);
    if (typeof func === 'function') {
      return func.apply(null, evalList(scope, this.args, lookupFunctions));
    }
    if (!mustEvaluate && (func === null || func === undefined)) {
      return undefined;
    }
    throw new Error(this.func + ' is not a function');
  };

  CallFunction.prototype.accept = function accept(visitor) {
    return visitor.visitCallFunction(this);
  };

  CallFunction.prototype.connect = function connect(binding, scope) {
    this.func.connect(binding, scope);
    var func = this.func.evaluate(scope);
    if (typeof func === 'function') {
      var args = this.args;
      var i = args.length;
      while (i--) {
        args[i].connect(binding, scope);
      }
    }
  };

  return CallFunction;
}(Expression);

var Binary = exports.Binary = function (_Expression12) {
  _inherits(Binary, _Expression12);

  function Binary(operation, left, right) {
    

    var _this14 = _possibleConstructorReturn(this, _Expression12.call(this));

    _this14.operation = operation;
    _this14.left = left;
    _this14.right = right;
    return _this14;
  }

  Binary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var left = this.left.evaluate(scope, lookupFunctions);

    switch (this.operation) {
      case '&&':
        return left && this.right.evaluate(scope, lookupFunctions);
      case '||':
        return left || this.right.evaluate(scope, lookupFunctions);
    }

    var right = this.right.evaluate(scope, lookupFunctions);

    switch (this.operation) {
      case '==':
        return left == right;
      case '===':
        return left === right;
      case '!=':
        return left != right;
      case '!==':
        return left !== right;
      case 'instanceof':
        return typeof right === 'function' && left instanceof right;
      case 'in':
        return (typeof right === 'undefined' ? 'undefined' : _typeof(right)) === 'object' && right !== null && left in right;
    }

    if (left === null || right === null || left === undefined || right === undefined) {
      switch (this.operation) {
        case '+':
          if (left !== null && left !== undefined) return left;
          if (right !== null && right !== undefined) return right;
          return 0;
        case '-':
          if (left !== null && left !== undefined) return left;
          if (right !== null && right !== undefined) return 0 - right;
          return 0;
      }

      return null;
    }

    switch (this.operation) {
      case '+':
        return autoConvertAdd(left, right);
      case '-':
        return left - right;
      case '*':
        return left * right;
      case '/':
        return left / right;
      case '%':
        return left % right;
      case '<':
        return left < right;
      case '>':
        return left > right;
      case '<=':
        return left <= right;
      case '>=':
        return left >= right;
      case '^':
        return left ^ right;
    }

    throw new Error('Internal error [' + this.operation + '] not handled');
  };

  Binary.prototype.accept = function accept(visitor) {
    return visitor.visitBinary(this);
  };

  Binary.prototype.connect = function connect(binding, scope) {
    this.left.connect(binding, scope);
    var left = this.left.evaluate(scope);
    if (this.operation === '&&' && !left || this.operation === '||' && left) {
      return;
    }
    this.right.connect(binding, scope);
  };

  return Binary;
}(Expression);

var Unary = exports.Unary = function (_Expression13) {
  _inherits(Unary, _Expression13);

  function Unary(operation, expression) {
    

    var _this15 = _possibleConstructorReturn(this, _Expression13.call(this));

    _this15.operation = operation;
    _this15.expression = expression;
    return _this15;
  }

  Unary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    switch (this.operation) {
      case '!':
        return !this.expression.evaluate(scope, lookupFunctions);
      case 'typeof':
        return _typeof(this.expression.evaluate(scope, lookupFunctions));
      case 'void':
        return void this.expression.evaluate(scope, lookupFunctions);
    }

    throw new Error('Internal error [' + this.operation + '] not handled');
  };

  Unary.prototype.accept = function accept(visitor) {
    return visitor.visitPrefix(this);
  };

  Unary.prototype.connect = function connect(binding, scope) {
    this.expression.connect(binding, scope);
  };

  return Unary;
}(Expression);

var LiteralPrimitive = exports.LiteralPrimitive = function (_Expression14) {
  _inherits(LiteralPrimitive, _Expression14);

  function LiteralPrimitive(value) {
    

    var _this16 = _possibleConstructorReturn(this, _Expression14.call(this));

    _this16.value = value;
    return _this16;
  }

  LiteralPrimitive.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.value;
  };

  LiteralPrimitive.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralPrimitive(this);
  };

  LiteralPrimitive.prototype.connect = function connect(binding, scope) {};

  return LiteralPrimitive;
}(Expression);

var LiteralString = exports.LiteralString = function (_Expression15) {
  _inherits(LiteralString, _Expression15);

  function LiteralString(value) {
    

    var _this17 = _possibleConstructorReturn(this, _Expression15.call(this));

    _this17.value = value;
    return _this17;
  }

  LiteralString.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.value;
  };

  LiteralString.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralString(this);
  };

  LiteralString.prototype.connect = function connect(binding, scope) {};

  return LiteralString;
}(Expression);

var LiteralTemplate = exports.LiteralTemplate = function (_Expression16) {
  _inherits(LiteralTemplate, _Expression16);

  function LiteralTemplate(cooked, expressions, raw, tag) {
    

    var _this18 = _possibleConstructorReturn(this, _Expression16.call(this));

    _this18.cooked = cooked;
    _this18.expressions = expressions || [];
    _this18.length = _this18.expressions.length;
    _this18.tagged = tag !== undefined;
    if (_this18.tagged) {
      _this18.cooked.raw = raw;
      _this18.tag = tag;
      if (tag instanceof AccessScope) {
        _this18.contextType = 'Scope';
      } else if (tag instanceof AccessMember || tag instanceof AccessKeyed) {
        _this18.contextType = 'Object';
      } else {
        throw new Error(_this18.tag + ' is not a valid template tag');
      }
    }
    return _this18;
  }

  LiteralTemplate.prototype.getScopeContext = function getScopeContext(scope, lookupFunctions) {
    return getContextFor(this.tag.name, scope, this.tag.ancestor);
  };

  LiteralTemplate.prototype.getObjectContext = function getObjectContext(scope, lookupFunctions) {
    return this.tag.object.evaluate(scope, lookupFunctions);
  };

  LiteralTemplate.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var results = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      results[i] = this.expressions[i].evaluate(scope, lookupFunctions);
    }
    if (this.tagged) {
      var func = this.tag.evaluate(scope, lookupFunctions);
      if (typeof func === 'function') {
        var context = this['get' + this.contextType + 'Context'](scope, lookupFunctions);
        return func.call.apply(func, [context, this.cooked].concat(results));
      }
      if (!mustEvaluate) {
        return null;
      }
      throw new Error(this.tag + ' is not a function');
    }
    var result = this.cooked[0];
    for (var _i2 = 0; _i2 < this.length; _i2++) {
      result = String.prototype.concat(result, results[_i2], this.cooked[_i2 + 1]);
    }
    return result;
  };

  LiteralTemplate.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralTemplate(this);
  };

  LiteralTemplate.prototype.connect = function connect(binding, scope) {
    for (var i = 0; i < this.length; i++) {
      this.expressions[i].connect(binding, scope);
    }
    if (this.tagged) {
      this.tag.connect(binding, scope);
    }
  };

  return LiteralTemplate;
}(Expression);

var LiteralArray = exports.LiteralArray = function (_Expression17) {
  _inherits(LiteralArray, _Expression17);

  function LiteralArray(elements) {
    

    var _this19 = _possibleConstructorReturn(this, _Expression17.call(this));

    _this19.elements = elements;
    return _this19;
  }

  LiteralArray.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var elements = this.elements;
    var result = [];

    for (var i = 0, length = elements.length; i < length; ++i) {
      result[i] = elements[i].evaluate(scope, lookupFunctions);
    }

    return result;
  };

  LiteralArray.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralArray(this);
  };

  LiteralArray.prototype.connect = function connect(binding, scope) {
    var length = this.elements.length;
    for (var i = 0; i < length; i++) {
      this.elements[i].connect(binding, scope);
    }
  };

  return LiteralArray;
}(Expression);

var LiteralObject = exports.LiteralObject = function (_Expression18) {
  _inherits(LiteralObject, _Expression18);

  function LiteralObject(keys, values) {
    

    var _this20 = _possibleConstructorReturn(this, _Expression18.call(this));

    _this20.keys = keys;
    _this20.values = values;
    return _this20;
  }

  LiteralObject.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = {};
    var keys = this.keys;
    var values = this.values;

    for (var i = 0, length = keys.length; i < length; ++i) {
      instance[keys[i]] = values[i].evaluate(scope, lookupFunctions);
    }

    return instance;
  };

  LiteralObject.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralObject(this);
  };

  LiteralObject.prototype.connect = function connect(binding, scope) {
    var length = this.keys.length;
    for (var i = 0; i < length; i++) {
      this.values[i].connect(binding, scope);
    }
  };

  return LiteralObject;
}(Expression);

function evalList(scope, list, lookupFunctions) {
  var length = list.length;
  var result = [];
  for (var i = 0; i < length; i++) {
    result[i] = list[i].evaluate(scope, lookupFunctions);
  }
  return result;
}

function autoConvertAdd(a, b) {
  if (a !== null && b !== null) {
    if (typeof a === 'string' && typeof b !== 'string') {
      return a + b.toString();
    }

    if (typeof a !== 'string' && typeof b === 'string') {
      return a.toString() + b;
    }

    return a + b;
  }

  if (a !== null) {
    return a;
  }

  if (b !== null) {
    return b;
  }

  return 0;
}

function getFunction(obj, name, mustExist) {
  var func = obj === null || obj === undefined ? null : obj[name];
  if (typeof func === 'function') {
    return func;
  }
  if (!mustExist && (func === null || func === undefined)) {
    return null;
  }
  throw new Error(name + ' is not a function');
}

function getKeyed(obj, key) {
  if (Array.isArray(obj)) {
    return obj[parseInt(key, 10)];
  } else if (obj) {
    return obj[key];
  } else if (obj === null || obj === undefined) {
    return undefined;
  }

  return obj[key];
}

function setKeyed(obj, key, value) {
  if (Array.isArray(obj)) {
    var index = parseInt(key, 10);

    if (obj.length <= index) {
      obj.length = index + 1;
    }

    obj[index] = value;
  } else {
    obj[key] = value;
  }

  return value;
}

var _Unparser = null;

exports.Unparser = _Unparser;
if (typeof FEATURE_NO_UNPARSER === 'undefined') {
  exports.Unparser = _Unparser = function () {
    function Unparser(buffer) {
      

      this.buffer = buffer;
    }

    Unparser.unparse = function unparse(expression) {
      var buffer = [];
      var visitor = new _Unparser(buffer);

      expression.accept(visitor);

      return buffer.join('');
    };

    Unparser.prototype.write = function write(text) {
      this.buffer.push(text);
    };

    Unparser.prototype.writeArgs = function writeArgs(args) {
      this.write('(');

      for (var i = 0, length = args.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        args[i].accept(this);
      }

      this.write(')');
    };

    Unparser.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
      var args = behavior.args;

      behavior.expression.accept(this);
      this.write('&' + behavior.name);

      for (var i = 0, length = args.length; i < length; ++i) {
        this.write(':');
        args[i].accept(this);
      }
    };

    Unparser.prototype.visitValueConverter = function visitValueConverter(converter) {
      var args = converter.args;

      converter.expression.accept(this);
      this.write('|' + converter.name);

      for (var i = 0, length = args.length; i < length; ++i) {
        this.write(':');
        args[i].accept(this);
      }
    };

    Unparser.prototype.visitAssign = function visitAssign(assign) {
      assign.target.accept(this);
      this.write('=');
      assign.value.accept(this);
    };

    Unparser.prototype.visitConditional = function visitConditional(conditional) {
      conditional.condition.accept(this);
      this.write('?');
      conditional.yes.accept(this);
      this.write(':');
      conditional.no.accept(this);
    };

    Unparser.prototype.visitAccessThis = function visitAccessThis(access) {
      if (access.ancestor === 0) {
        this.write('$this');
        return;
      }
      this.write('$parent');
      var i = access.ancestor - 1;
      while (i--) {
        this.write('.$parent');
      }
    };

    Unparser.prototype.visitAccessScope = function visitAccessScope(access) {
      var i = access.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(access.name);
    };

    Unparser.prototype.visitAccessMember = function visitAccessMember(access) {
      access.object.accept(this);
      this.write('.' + access.name);
    };

    Unparser.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
      access.object.accept(this);
      this.write('[');
      access.key.accept(this);
      this.write(']');
    };

    Unparser.prototype.visitCallScope = function visitCallScope(call) {
      var i = call.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(call.name);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitCallFunction = function visitCallFunction(call) {
      call.func.accept(this);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitCallMember = function visitCallMember(call) {
      call.object.accept(this);
      this.write('.' + call.name);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitPrefix = function visitPrefix(prefix) {
      this.write('(' + prefix.operation);
      if (prefix.operation.charCodeAt(0) >= 97) {
        this.write(' ');
      }
      prefix.expression.accept(this);
      this.write(')');
    };

    Unparser.prototype.visitBinary = function visitBinary(binary) {
      binary.left.accept(this);
      if (binary.operation.charCodeAt(0) === 105) {
        this.write(' ' + binary.operation + ' ');
      } else {
        this.write(binary.operation);
      }
      binary.right.accept(this);
    };

    Unparser.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
      this.write('' + literal.value);
    };

    Unparser.prototype.visitLiteralArray = function visitLiteralArray(literal) {
      var elements = literal.elements;

      this.write('[');

      for (var i = 0, length = elements.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        elements[i].accept(this);
      }

      this.write(']');
    };

    Unparser.prototype.visitLiteralObject = function visitLiteralObject(literal) {
      var keys = literal.keys;
      var values = literal.values;

      this.write('{');

      for (var i = 0, length = keys.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        this.write('\'' + keys[i] + '\':');
        values[i].accept(this);
      }

      this.write('}');
    };

    Unparser.prototype.visitLiteralString = function visitLiteralString(literal) {
      var escaped = literal.value.replace(/'/g, "\'");
      this.write('\'' + escaped + '\'');
    };

    Unparser.prototype.visitLiteralTemplate = function visitLiteralTemplate(literal) {
      var cooked = literal.cooked,
          expressions = literal.expressions;

      var length = expressions.length;
      this.write('`');
      this.write(cooked[0]);
      for (var i = 0; i < length; i++) {
        expressions[i].accept(this);
        this.write(cooked[i + 1]);
      }
      this.write('`');
    };

    return Unparser;
  }();
}

var ExpressionCloner = exports.ExpressionCloner = function () {
  function ExpressionCloner() {
    
  }

  ExpressionCloner.prototype.cloneExpressionArray = function cloneExpressionArray(array) {
    var clonedArray = [];
    var i = array.length;
    while (i--) {
      clonedArray[i] = array[i].accept(this);
    }
    return clonedArray;
  };

  ExpressionCloner.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
    return new BindingBehavior(behavior.expression.accept(this), behavior.name, this.cloneExpressionArray(behavior.args));
  };

  ExpressionCloner.prototype.visitValueConverter = function visitValueConverter(converter) {
    return new ValueConverter(converter.expression.accept(this), converter.name, this.cloneExpressionArray(converter.args));
  };

  ExpressionCloner.prototype.visitAssign = function visitAssign(assign) {
    return new Assign(assign.target.accept(this), assign.value.accept(this));
  };

  ExpressionCloner.prototype.visitConditional = function visitConditional(conditional) {
    return new Conditional(conditional.condition.accept(this), conditional.yes.accept(this), conditional.no.accept(this));
  };

  ExpressionCloner.prototype.visitAccessThis = function visitAccessThis(access) {
    return new AccessThis(access.ancestor);
  };

  ExpressionCloner.prototype.visitAccessScope = function visitAccessScope(access) {
    return new AccessScope(access.name, access.ancestor);
  };

  ExpressionCloner.prototype.visitAccessMember = function visitAccessMember(access) {
    return new AccessMember(access.object.accept(this), access.name);
  };

  ExpressionCloner.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
    return new AccessKeyed(access.object.accept(this), access.key.accept(this));
  };

  ExpressionCloner.prototype.visitCallScope = function visitCallScope(call) {
    return new CallScope(call.name, this.cloneExpressionArray(call.args), call.ancestor);
  };

  ExpressionCloner.prototype.visitCallFunction = function visitCallFunction(call) {
    return new CallFunction(call.func.accept(this), this.cloneExpressionArray(call.args));
  };

  ExpressionCloner.prototype.visitCallMember = function visitCallMember(call) {
    return new CallMember(call.object.accept(this), call.name, this.cloneExpressionArray(call.args));
  };

  ExpressionCloner.prototype.visitUnary = function visitUnary(unary) {
    return new Unary(prefix.operation, prefix.expression.accept(this));
  };

  ExpressionCloner.prototype.visitBinary = function visitBinary(binary) {
    return new Binary(binary.operation, binary.left.accept(this), binary.right.accept(this));
  };

  ExpressionCloner.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
    return new LiteralPrimitive(literal);
  };

  ExpressionCloner.prototype.visitLiteralArray = function visitLiteralArray(literal) {
    return new LiteralArray(this.cloneExpressionArray(literal.elements));
  };

  ExpressionCloner.prototype.visitLiteralObject = function visitLiteralObject(literal) {
    return new LiteralObject(literal.keys, this.cloneExpressionArray(literal.values));
  };

  ExpressionCloner.prototype.visitLiteralString = function visitLiteralString(literal) {
    return new LiteralString(literal.value);
  };

  ExpressionCloner.prototype.visitLiteralTemplate = function visitLiteralTemplate(literal) {
    return new LiteralTemplate(literal.cooked, this.cloneExpressionArray(literal.expressions), literal.raw, literal.tag && literal.tag.accept(this));
  };

  return ExpressionCloner;
}();

function cloneExpression(expression) {
  var visitor = new ExpressionCloner();
  return expression.accept(visitor);
}

var bindingMode = exports.bindingMode = {
  oneTime: 0,
  toView: 1,
  oneWay: 1,
  twoWay: 2,
  fromView: 3
};

var Parser = exports.Parser = function () {
  function Parser() {
    

    this.cache = Object.create(null);
  }

  Parser.prototype.parse = function parse(src) {
    src = src || '';

    return this.cache[src] || (this.cache[src] = new ParserImplementation(src).parseBindingBehavior());
  };

  return Parser;
}();

var fromCharCode = String.fromCharCode;

var ParserImplementation = exports.ParserImplementation = function () {
  _createClass(ParserImplementation, [{
    key: 'raw',
    get: function get() {
      return this.src.slice(this.start, this.idx);
    }
  }]);

  function ParserImplementation(src) {
    

    this.idx = 0;

    this.start = 0;

    this.src = src;
    this.len = src.length;

    this.tkn = T$EOF;

    this.val = undefined;

    this.ch = src.charCodeAt(0);
  }

  ParserImplementation.prototype.parseBindingBehavior = function parseBindingBehavior() {
    this.nextToken();
    if (this.tkn & T$ExpressionTerminal) {
      this.err('Invalid start of expression');
    }
    var result = this.parseValueConverter();
    while (this.opt(T$Ampersand)) {
      result = new BindingBehavior(result, this.val, this.parseVariadicArgs());
    }
    if (this.tkn !== T$EOF) {
      this.err('Unconsumed token ' + this.raw);
    }
    return result;
  };

  ParserImplementation.prototype.parseValueConverter = function parseValueConverter() {
    var result = this.parseExpression();
    while (this.opt(T$Bar)) {
      result = new ValueConverter(result, this.val, this.parseVariadicArgs());
    }
    return result;
  };

  ParserImplementation.prototype.parseVariadicArgs = function parseVariadicArgs() {
    this.nextToken();
    var result = [];
    while (this.opt(T$Colon)) {
      result.push(this.parseExpression());
    }
    return result;
  };

  ParserImplementation.prototype.parseExpression = function parseExpression() {
    var exprStart = this.idx;
    var result = this.parseConditional();

    while (this.tkn === T$Eq) {
      if (!result.isAssignable) {
        this.err('Expression ' + this.src.slice(exprStart, this.start) + ' is not assignable');
      }
      this.nextToken();
      exprStart = this.idx;
      result = new Assign(result, this.parseConditional());
    }
    return result;
  };

  ParserImplementation.prototype.parseConditional = function parseConditional() {
    var result = this.parseBinary(0);

    if (this.opt(T$Question)) {
      var yes = this.parseExpression();
      this.expect(T$Colon);
      result = new Conditional(result, yes, this.parseExpression());
    }
    return result;
  };

  ParserImplementation.prototype.parseBinary = function parseBinary(minPrecedence) {
    var left = this.parseLeftHandSide(0);

    while (this.tkn & T$BinaryOp) {
      var opToken = this.tkn;
      if ((opToken & T$Precedence) <= minPrecedence) {
        break;
      }
      this.nextToken();
      left = new Binary(TokenValues[opToken & T$TokenMask], left, this.parseBinary(opToken & T$Precedence));
    }
    return left;
  };

  ParserImplementation.prototype.parseLeftHandSide = function parseLeftHandSide(context) {
    var result = void 0;

    primary: switch (this.tkn) {
      case T$Plus:
        this.nextToken();
        return this.parseLeftHandSide(0);
      case T$Minus:
        this.nextToken();
        return new Binary('-', new LiteralPrimitive(0), this.parseLeftHandSide(0));
      case T$Bang:
      case T$TypeofKeyword:
      case T$VoidKeyword:
        var op = TokenValues[this.tkn & T$TokenMask];
        this.nextToken();
        return new Unary(op, this.parseLeftHandSide(0));
      case T$ParentScope:
        {
          do {
            this.nextToken();
            context++;
            if (this.opt(T$Period)) {
              if (this.tkn === T$Period) {
                this.err();
              }
              continue;
            } else if (this.tkn & T$AccessScopeTerminal) {
              result = new AccessThis(context & C$Ancestor);

              context = context & C$ShorthandProp | C$This;
              break primary;
            } else {
              this.err();
            }
          } while (this.tkn === T$ParentScope);
        }

      case T$Identifier:
        {
          result = new AccessScope(this.val, context & C$Ancestor);
          this.nextToken();
          context = context & C$ShorthandProp | C$Scope;
          break;
        }
      case T$ThisScope:
        this.nextToken();
        result = new AccessThis(0);
        context = context & C$ShorthandProp | C$This;
        break;
      case T$LParen:
        this.nextToken();
        result = this.parseExpression();
        this.expect(T$RParen);
        context = C$Primary;
        break;
      case T$LBracket:
        {
          this.nextToken();
          var _elements = [];
          if (this.tkn !== T$RBracket) {
            do {
              _elements.push(this.parseExpression());
            } while (this.opt(T$Comma));
          }
          this.expect(T$RBracket);
          result = new LiteralArray(_elements);
          context = C$Primary;
          break;
        }
      case T$LBrace:
        {
          var keys = [];
          var values = [];
          this.nextToken();
          while (this.tkn !== T$RBrace) {
            if (this.tkn & T$IdentifierOrKeyword) {
              var ch = this.ch,
                  tkn = this.tkn,
                  idx = this.idx;

              keys.push(this.val);
              this.nextToken();
              if (this.opt(T$Colon)) {
                values.push(this.parseExpression());
              } else {
                this.ch = ch;
                this.tkn = tkn;
                this.idx = idx;
                values.push(this.parseLeftHandSide(C$ShorthandProp));
              }
            } else if (this.tkn & T$Literal) {
              keys.push(this.val);
              this.nextToken();
              this.expect(T$Colon);
              values.push(this.parseExpression());
            } else {
              this.err();
            }
            if (this.tkn !== T$RBrace) {
              this.expect(T$Comma);
            }
          }
          this.expect(T$RBrace);
          result = new LiteralObject(keys, values);
          context = C$Primary;
          break;
        }
      case T$StringLiteral:
        result = new LiteralString(this.val);
        this.nextToken();
        context = C$Primary;
        break;
      case T$TemplateTail:
        result = new LiteralTemplate([this.val]);
        this.nextToken();
        context = C$Primary;
        break;
      case T$TemplateContinuation:
        result = this.parseTemplate(0);
        context = C$Primary;
        break;
      case T$NumericLiteral:
        {
          result = new LiteralPrimitive(this.val);
          this.nextToken();

          break;
        }
      case T$NullKeyword:
      case T$UndefinedKeyword:
      case T$TrueKeyword:
      case T$FalseKeyword:
        result = new LiteralPrimitive(TokenValues[this.tkn & T$TokenMask]);
        this.nextToken();
        context = C$Primary;
        break;
      default:
        if (this.idx >= this.len) {
          this.err('Unexpected end of expression');
        } else {
          this.err();
        }
    }

    if (context & C$ShorthandProp) {
      return result;
    }

    var name = this.val;
    while (this.tkn & T$MemberOrCallExpression) {
      switch (this.tkn) {
        case T$Period:
          this.nextToken();
          if (!(this.tkn & T$IdentifierOrKeyword)) {
            this.err();
          }
          name = this.val;
          this.nextToken();

          context = context & C$Primary | (context & (C$This | C$Scope)) << 1 | context & C$Member | (context & C$Keyed) >> 1 | (context & C$Call) >> 2;
          if (this.tkn === T$LParen) {
            continue;
          }
          if (context & C$Scope) {
            result = new AccessScope(name, result.ancestor);
          } else {
            result = new AccessMember(result, name);
          }
          continue;
        case T$LBracket:
          this.nextToken();
          context = C$Keyed;
          result = new AccessKeyed(result, this.parseExpression());
          this.expect(T$RBracket);
          break;
        case T$LParen:
          this.nextToken();
          var args = [];
          while (this.tkn !== T$RParen) {
            args.push(this.parseExpression());
            if (!this.opt(T$Comma)) {
              break;
            }
          }
          this.expect(T$RParen);
          if (context & C$Scope) {
            result = new CallScope(name, args, result.ancestor);
          } else if (context & (C$Member | C$Primary)) {
            result = new CallMember(result, name, args);
          } else {
            result = new CallFunction(result, args);
          }
          context = C$Call;
          break;
        case T$TemplateTail:
          result = new LiteralTemplate([this.val], [], [this.raw], result);
          this.nextToken();
          break;
        case T$TemplateContinuation:
          result = this.parseTemplate(context | C$Tagged, result);
      }
    }

    return result;
  };

  ParserImplementation.prototype.parseTemplate = function parseTemplate(context, func) {
    var cooked = [this.val];
    var raw = context & C$Tagged ? [this.raw] : undefined;
    this.expect(T$TemplateContinuation);
    var expressions = [this.parseExpression()];

    while ((this.tkn = this.scanTemplateTail()) !== T$TemplateTail) {
      cooked.push(this.val);
      if (context & C$Tagged) {
        raw.push(this.raw);
      }
      this.expect(T$TemplateContinuation);
      expressions.push(this.parseExpression());
    }

    cooked.push(this.val);
    if (context & C$Tagged) {
      raw.push(this.raw);
    }
    this.nextToken();
    return new LiteralTemplate(cooked, expressions, raw, func);
  };

  ParserImplementation.prototype.nextToken = function nextToken() {
    while (this.idx < this.len) {
      if (this.ch <= 0x20) {
        this.next();
        continue;
      }
      this.start = this.idx;
      if (this.ch === 0x24 || this.ch >= 0x61 && this.ch <= 0x7A) {
        this.tkn = this.scanIdentifier();
        return;
      }

      if ((this.tkn = CharScanners[this.ch](this)) !== null) {
        return;
      }
    }
    this.tkn = T$EOF;
  };

  ParserImplementation.prototype.next = function next() {
    return this.ch = this.src.charCodeAt(++this.idx);
  };

  ParserImplementation.prototype.scanIdentifier = function scanIdentifier() {
    while (AsciiIdParts.has(this.next()) || this.ch > 0x7F && IdParts[this.ch]) {}

    return KeywordLookup[this.val = this.raw] || T$Identifier;
  };

  ParserImplementation.prototype.scanNumber = function scanNumber(isFloat) {
    if (isFloat) {
      this.val = 0;
    } else {
      this.val = this.ch - 0x30;
      while (this.next() <= 0x39 && this.ch >= 0x30) {
        this.val = this.val * 10 + this.ch - 0x30;
      }
    }

    if (isFloat || this.ch === 0x2E) {
      if (!isFloat) {
        this.next();
      }
      var start = this.idx;
      var value = this.ch - 0x30;
      while (this.next() <= 0x39 && this.ch >= 0x30) {
        value = value * 10 + this.ch - 0x30;
      }
      this.val = this.val + value / Math.pow(10, this.idx - start);
    }

    if (this.ch === 0x65 || this.ch === 0x45) {
      var _start = this.idx;

      this.next();
      if (this.ch === 0x2D || this.ch === 0x2B) {
        this.next();
      }

      if (!(this.ch >= 0x30 && this.ch <= 0x39)) {
        this.idx = _start;
        this.err('Invalid exponent');
      }
      while (this.next() <= 0x39 && this.ch >= 0x30) {}
      this.val = parseFloat(this.src.slice(this.start, this.idx));
    }

    return T$NumericLiteral;
  };

  ParserImplementation.prototype.scanString = function scanString() {
    var quote = this.ch;
    this.next();

    var buffer = void 0;
    var marker = this.idx;

    while (this.ch !== quote) {
      if (this.ch === 0x5C) {
        if (!buffer) {
          buffer = [];
        }

        buffer.push(this.src.slice(marker, this.idx));

        this.next();

        var _unescaped = void 0;

        if (this.ch === 0x75) {
          this.next();

          if (this.idx + 4 < this.len) {
            var hex = this.src.slice(this.idx, this.idx + 4);

            if (!/[A-Z0-9]{4}/i.test(hex)) {
              this.err('Invalid unicode escape [\\u' + hex + ']');
            }

            _unescaped = parseInt(hex, 16);
            this.idx += 4;
            this.ch = this.src.charCodeAt(this.idx);
          } else {
            this.err();
          }
        } else {
          _unescaped = unescape(this.ch);
          this.next();
        }

        buffer.push(fromCharCode(_unescaped));
        marker = this.idx;
      } else if (this.ch === 0 || this.idx >= this.len) {
        this.err('Unterminated quote');
      } else {
        this.next();
      }
    }

    var last = this.src.slice(marker, this.idx);
    this.next();
    var unescaped = last;

    if (buffer !== null && buffer !== undefined) {
      buffer.push(last);
      unescaped = buffer.join('');
    }

    this.val = unescaped;
    return T$StringLiteral;
  };

  ParserImplementation.prototype.scanTemplate = function scanTemplate() {
    var tail = true;
    var result = '';

    while (this.next() !== 0x60) {
      if (this.ch === 0x24) {
        if (this.idx + 1 < this.len && this.src.charCodeAt(this.idx + 1) === 0x7B) {
          this.idx++;
          tail = false;
          break;
        } else {
          result += '$';
        }
      } else if (this.ch === 0x5C) {
        result += fromCharCode(unescape(this.next()));
      } else if (this.ch === 0 || this.idx >= this.len) {
        this.err('Unterminated template literal');
      } else {
        result += fromCharCode(this.ch);
      }
    }

    this.next();
    this.val = result;
    if (tail) {
      return T$TemplateTail;
    }
    return T$TemplateContinuation;
  };

  ParserImplementation.prototype.scanTemplateTail = function scanTemplateTail() {
    if (this.idx >= this.len) {
      this.err('Unterminated template');
    }
    this.idx--;
    return this.scanTemplate();
  };

  ParserImplementation.prototype.err = function err() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Unexpected token ' + this.raw;
    var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.start;

    throw new Error('Parser Error: ' + message + ' at column ' + column + ' in expression [' + this.src + ']');
  };

  ParserImplementation.prototype.opt = function opt(token) {
    if (this.tkn === token) {
      this.nextToken();
      return true;
    }

    return false;
  };

  ParserImplementation.prototype.expect = function expect(token) {
    if (this.tkn === token) {
      this.nextToken();
    } else {
      this.err('Missing expected token ' + TokenValues[token & T$TokenMask], this.idx);
    }
  };

  return ParserImplementation;
}();

function unescape(code) {
  switch (code) {
    case 0x66:
      return 0xC;
    case 0x6E:
      return 0xA;
    case 0x72:
      return 0xD;
    case 0x74:
      return 0x9;
    case 0x76:
      return 0xB;
    default:
      return code;
  }
}

var C$This = 1 << 10;
var C$Scope = 1 << 11;
var C$Member = 1 << 12;
var C$Keyed = 1 << 13;
var C$Call = 1 << 14;
var C$Primary = 1 << 15;
var C$ShorthandProp = 1 << 16;
var C$Tagged = 1 << 17;

var C$Ancestor = (1 << 9) - 1;

var T$TokenMask = (1 << 6) - 1;

var T$PrecShift = 6;

var T$Precedence = 7 << T$PrecShift;

var T$ExpressionTerminal = 1 << 11;

var T$ClosingToken = 1 << 12;

var T$OpeningToken = 1 << 13;

var T$AccessScopeTerminal = 1 << 14;
var T$Keyword = 1 << 15;
var T$EOF = 1 << 16 | T$AccessScopeTerminal | T$ExpressionTerminal;
var T$Identifier = 1 << 17;
var T$IdentifierOrKeyword = T$Identifier | T$Keyword;
var T$Literal = 1 << 18;
var T$NumericLiteral = 1 << 19 | T$Literal;
var T$StringLiteral = 1 << 20 | T$Literal;
var T$BinaryOp = 1 << 21;

var T$UnaryOp = 1 << 22;

var T$MemberExpression = 1 << 23;

var T$MemberOrCallExpression = 1 << 24;
var T$TemplateTail = 1 << 25 | T$MemberOrCallExpression;
var T$TemplateContinuation = 1 << 26 | T$MemberOrCallExpression;

var T$FalseKeyword = 0 | T$Keyword | T$Literal;
var T$TrueKeyword = 1 | T$Keyword | T$Literal;
var T$NullKeyword = 2 | T$Keyword | T$Literal;
var T$UndefinedKeyword = 3 | T$Keyword | T$Literal;
var T$ThisScope = 4 | T$IdentifierOrKeyword;
var T$ParentScope = 5 | T$IdentifierOrKeyword;

var T$LParen = 6 | T$OpeningToken | T$AccessScopeTerminal | T$MemberOrCallExpression;
var T$LBrace = 7 | T$OpeningToken;
var T$Period = 8 | T$MemberExpression | T$MemberOrCallExpression;
var T$RBrace = 9 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;
var T$RParen = 10 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;
var T$Comma = 11 | T$AccessScopeTerminal;
var T$LBracket = 12 | T$OpeningToken | T$AccessScopeTerminal | T$MemberExpression | T$MemberOrCallExpression;
var T$RBracket = 13 | T$ClosingToken | T$ExpressionTerminal;
var T$Colon = 14 | T$AccessScopeTerminal;
var T$Question = 15;

var T$Ampersand = 18 | T$AccessScopeTerminal;
var T$Bar = 19 | T$AccessScopeTerminal;
var T$BarBar = 20 | 1 << T$PrecShift | T$BinaryOp;
var T$AmpersandAmpersand = 21 | 2 << T$PrecShift | T$BinaryOp;
var T$Caret = 22 | 3 << T$PrecShift | T$BinaryOp;
var T$EqEq = 23 | 4 << T$PrecShift | T$BinaryOp;
var T$BangEq = 24 | 4 << T$PrecShift | T$BinaryOp;
var T$EqEqEq = 25 | 4 << T$PrecShift | T$BinaryOp;
var T$BangEqEq = 26 | 4 << T$PrecShift | T$BinaryOp;
var T$Lt = 27 | 5 << T$PrecShift | T$BinaryOp;
var T$Gt = 28 | 5 << T$PrecShift | T$BinaryOp;
var T$LtEq = 29 | 5 << T$PrecShift | T$BinaryOp;
var T$GtEq = 30 | 5 << T$PrecShift | T$BinaryOp;
var T$InKeyword = 31 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;
var T$InstanceOfKeyword = 32 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;
var T$Plus = 33 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;
var T$Minus = 34 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;
var T$TypeofKeyword = 35 | T$UnaryOp | T$Keyword;
var T$VoidKeyword = 36 | T$UnaryOp | T$Keyword;
var T$Star = 37 | 7 << T$PrecShift | T$BinaryOp;
var T$Percent = 38 | 7 << T$PrecShift | T$BinaryOp;
var T$Slash = 39 | 7 << T$PrecShift | T$BinaryOp;
var T$Eq = 40;
var T$Bang = 41 | T$UnaryOp;

var KeywordLookup = Object.create(null);
KeywordLookup.true = T$TrueKeyword;
KeywordLookup.null = T$NullKeyword;
KeywordLookup.false = T$FalseKeyword;
KeywordLookup.undefined = T$UndefinedKeyword;
KeywordLookup.$this = T$ThisScope;
KeywordLookup.$parent = T$ParentScope;
KeywordLookup.in = T$InKeyword;
KeywordLookup.instanceof = T$InstanceOfKeyword;
KeywordLookup.typeof = T$TypeofKeyword;
KeywordLookup.void = T$VoidKeyword;

var TokenValues = [false, true, null, undefined, '$this', '$parent', '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\'', '"', '&', '|', '||', '&&', '^', '==', '!=', '===', '!==', '<', '>', '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!'];

var codes = {
  AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],
  IdStart: [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],
  Digit: [0x30, 0x3A],
  Skip: [0, 0x21, 0x7F, 0xA1]
};

function decompress(lookup, set, compressed, value) {
  var rangeCount = compressed.length;
  for (var i = 0; i < rangeCount; i += 2) {
    var start = compressed[i];
    var end = compressed[i + 1];
    end = end > 0 ? end : start + 1;
    if (lookup) {
      var j = start;
      while (j < end) {
        lookup[j] = value;
        j++;
      }
    }
    if (set) {
      for (var ch = start; ch < end; ch++) {
        set.add(ch);
      }
    }
  }
}

function returnToken(token) {
  return function (p) {
    p.next();
    return token;
  };
}
function unexpectedCharacter(p) {
  p.err('Unexpected character [' + fromCharCode(p.ch) + ']');
  return null;
}

var AsciiIdParts = new Set();
decompress(null, AsciiIdParts, codes.AsciiIdPart, true);

var IdParts = new Uint8Array(0xFFFF);
decompress(IdParts, null, codes.IdStart, 1);
decompress(IdParts, null, codes.Digit, 1);

var CharScanners = new Array(0xFFFF);
var ci = 0;
while (ci < 0xFFFF) {
  CharScanners[ci] = unexpectedCharacter;
  ci++;
}

decompress(CharScanners, null, codes.Skip, function (p) {
  p.next();
  return null;
});
decompress(CharScanners, null, codes.IdStart, function (p) {
  return p.scanIdentifier();
});
decompress(CharScanners, null, codes.Digit, function (p) {
  return p.scanNumber(false);
});

CharScanners[0x22] = CharScanners[0x27] = function (p) {
  return p.scanString();
};
CharScanners[0x60] = function (p) {
  return p.scanTemplate();
};

CharScanners[0x21] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Bang;
  }
  if (p.next() !== 0x3D) {
    return T$BangEq;
  }
  p.next();
  return T$BangEqEq;
};

CharScanners[0x3D] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Eq;
  }
  if (p.next() !== 0x3D) {
    return T$EqEq;
  }
  p.next();
  return T$EqEqEq;
};

CharScanners[0x26] = function (p) {
  if (p.next() !== 0x26) {
    return T$Ampersand;
  }
  p.next();
  return T$AmpersandAmpersand;
};

CharScanners[0x7C] = function (p) {
  if (p.next() !== 0x7C) {
    return T$Bar;
  }
  p.next();
  return T$BarBar;
};

CharScanners[0x2E] = function (p) {
  if (p.next() <= 0x39 && p.ch >= 0x30) {
    return p.scanNumber(true);
  }
  return T$Period;
};

CharScanners[0x3C] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Lt;
  }
  p.next();
  return T$LtEq;
};

CharScanners[0x3E] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Gt;
  }
  p.next();
  return T$GtEq;
};

CharScanners[0x25] = returnToken(T$Percent);
CharScanners[0x28] = returnToken(T$LParen);
CharScanners[0x29] = returnToken(T$RParen);
CharScanners[0x2A] = returnToken(T$Star);
CharScanners[0x2B] = returnToken(T$Plus);
CharScanners[0x2C] = returnToken(T$Comma);
CharScanners[0x2D] = returnToken(T$Minus);
CharScanners[0x2F] = returnToken(T$Slash);
CharScanners[0x3A] = returnToken(T$Colon);
CharScanners[0x3F] = returnToken(T$Question);
CharScanners[0x5B] = returnToken(T$LBracket);
CharScanners[0x5D] = returnToken(T$RBracket);
CharScanners[0x5E] = returnToken(T$Caret);
CharScanners[0x7B] = returnToken(T$LBrace);
CharScanners[0x7D] = returnToken(T$RBrace);

var mapProto = Map.prototype;

function _getMapObserver(taskQueue, map) {
  return ModifyMapObserver.for(taskQueue, map);
}

exports.getMapObserver = _getMapObserver;

var ModifyMapObserver = function (_ModifyCollectionObse2) {
  _inherits(ModifyMapObserver, _ModifyCollectionObse2);

  function ModifyMapObserver(taskQueue, map) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse2.call(this, taskQueue, map));
  }

  ModifyMapObserver.for = function _for(taskQueue, map) {
    if (!('__map_observer__' in map)) {
      Reflect.defineProperty(map, '__map_observer__', {
        value: ModifyMapObserver.create(taskQueue, map),
        enumerable: false, configurable: false
      });
    }
    return map.__map_observer__;
  };

  ModifyMapObserver.create = function create(taskQueue, map) {
    var observer = new ModifyMapObserver(taskQueue, map);

    var proto = mapProto;
    if (proto.set !== map.set || proto.delete !== map.delete || proto.clear !== map.clear) {
      proto = {
        set: map.set,
        delete: map.delete,
        clear: map.clear
      };
    }

    map.set = function () {
      var hasValue = map.has(arguments[0]);
      var type = hasValue ? 'update' : 'add';
      var oldValue = map.get(arguments[0]);
      var methodCallResult = proto.set.apply(map, arguments);
      if (!hasValue || oldValue !== map.get(arguments[0])) {
        observer.addChangeRecord({
          type: type,
          object: map,
          key: arguments[0],
          oldValue: oldValue
        });
      }
      return methodCallResult;
    };

    map.delete = function () {
      var hasValue = map.has(arguments[0]);
      var oldValue = map.get(arguments[0]);
      var methodCallResult = proto.delete.apply(map, arguments);
      if (hasValue) {
        observer.addChangeRecord({
          type: 'delete',
          object: map,
          key: arguments[0],
          oldValue: oldValue
        });
      }
      return methodCallResult;
    };

    map.clear = function () {
      var methodCallResult = proto.clear.apply(map, arguments);
      observer.addChangeRecord({
        type: 'clear',
        object: map
      });
      return methodCallResult;
    };

    return observer;
  };

  return ModifyMapObserver;
}(ModifyCollectionObserver);

var emLogger = LogManager.getLogger('event-manager');

function findOriginalEventTarget(event) {
  return event.composedPath && event.composedPath()[0] || event.deepPath && event.deepPath()[0] || event.path && event.path[0] || event.target;
}

function stopPropagation() {
  this.standardStopPropagation();
  this.propagationStopped = true;
}

function handleCapturedEvent(event) {
  event.propagationStopped = false;
  var target = findOriginalEventTarget(event);

  var orderedCallbacks = [];

  while (target) {
    if (target.capturedCallbacks) {
      var callback = target.capturedCallbacks[event.type];
      if (callback) {
        if (event.stopPropagation !== stopPropagation) {
          event.standardStopPropagation = event.stopPropagation;
          event.stopPropagation = stopPropagation;
        }
        orderedCallbacks.push(callback);
      }
    }
    target = target.parentNode;
  }
  for (var i = orderedCallbacks.length - 1; i >= 0 && !event.propagationStopped; i--) {
    var orderedCallback = orderedCallbacks[i];
    if ('handleEvent' in orderedCallback) {
      orderedCallback.handleEvent(event);
    } else {
      orderedCallback(event);
    }
  }
}

var CapturedHandlerEntry = function () {
  function CapturedHandlerEntry(eventName) {
    

    this.eventName = eventName;
    this.count = 0;
  }

  CapturedHandlerEntry.prototype.increment = function increment() {
    this.count++;

    if (this.count === 1) {
      _aureliaPal.DOM.addEventListener(this.eventName, handleCapturedEvent, true);
    }
  };

  CapturedHandlerEntry.prototype.decrement = function decrement() {
    if (this.count === 0) {
      emLogger.warn('The same EventListener was disposed multiple times.');
    } else if (--this.count === 0) {
      _aureliaPal.DOM.removeEventListener(this.eventName, handleCapturedEvent, true);
    }
  };

  return CapturedHandlerEntry;
}();

var DelegateHandlerEntry = function () {
  function DelegateHandlerEntry(eventName, eventManager) {
    

    this.eventName = eventName;
    this.count = 0;
    this.eventManager = eventManager;
  }

  DelegateHandlerEntry.prototype.handleEvent = function handleEvent(event) {
    event.propagationStopped = false;
    var target = findOriginalEventTarget(event);

    while (target && !event.propagationStopped) {
      if (target.delegatedCallbacks) {
        var callback = target.delegatedCallbacks[event.type];
        if (callback) {
          if (event.stopPropagation !== stopPropagation) {
            event.standardStopPropagation = event.stopPropagation;
            event.stopPropagation = stopPropagation;
          }
          if ('handleEvent' in callback) {
            callback.handleEvent(event);
          } else {
            callback(event);
          }
        }
      }

      var parent = target.parentNode;
      var shouldEscapeShadowRoot = this.eventManager.escapeShadowRoot && parent instanceof ShadowRoot;

      target = shouldEscapeShadowRoot ? parent.host : parent;
    }
  };

  DelegateHandlerEntry.prototype.increment = function increment() {
    this.count++;

    if (this.count === 1) {
      _aureliaPal.DOM.addEventListener(this.eventName, this, false);
    }
  };

  DelegateHandlerEntry.prototype.decrement = function decrement() {
    if (this.count === 0) {
      emLogger.warn('The same EventListener was disposed multiple times.');
    } else if (--this.count === 0) {
      _aureliaPal.DOM.removeEventListener(this.eventName, this, false);
    }
  };

  return DelegateHandlerEntry;
}();

var DelegationEntryHandler = function () {
  function DelegationEntryHandler(entry, lookup, targetEvent) {
    

    this.entry = entry;
    this.lookup = lookup;
    this.targetEvent = targetEvent;
  }

  DelegationEntryHandler.prototype.dispose = function dispose() {
    if (this.lookup[this.targetEvent]) {
      this.entry.decrement();
      this.lookup[this.targetEvent] = null;
    } else {
      emLogger.warn('Calling .dispose() on already disposed eventListener');
    }
  };

  return DelegationEntryHandler;
}();

var EventHandler = function () {
  function EventHandler(target, targetEvent, callback) {
    

    this.target = target;
    this.targetEvent = targetEvent;
    this.callback = callback;
  }

  EventHandler.prototype.dispose = function dispose() {
    this.target.removeEventListener(this.targetEvent, this.callback);
  };

  return EventHandler;
}();

var DefaultEventStrategy = function () {
  function DefaultEventStrategy(eventManager) {
    

    this.delegatedHandlers = {};
    this.capturedHandlers = {};

    this.eventManager = eventManager;
  }

  DefaultEventStrategy.prototype.subscribe = function subscribe(target, targetEvent, callback, strategy, disposable) {
    var delegatedHandlers = void 0;
    var capturedHandlers = void 0;
    var handlerEntry = void 0;

    if (strategy === delegationStrategy.bubbling) {
      delegatedHandlers = this.delegatedHandlers;
      handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new DelegateHandlerEntry(targetEvent, this.eventManager));
      var delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});
      if (!delegatedCallbacks[targetEvent]) {
        handlerEntry.increment();
      } else {
        emLogger.warn('Overriding previous callback for event listener', { event: targetEvent, callback: callback, previousCallback: delegatedCallbacks[targetEvent] });
      }
      delegatedCallbacks[targetEvent] = callback;

      if (disposable === true) {
        return new DelegationEntryHandler(handlerEntry, delegatedCallbacks, targetEvent);
      }

      return function () {
        handlerEntry.decrement();
        delegatedCallbacks[targetEvent] = null;
      };
    }
    if (strategy === delegationStrategy.capturing) {
      capturedHandlers = this.capturedHandlers;
      handlerEntry = capturedHandlers[targetEvent] || (capturedHandlers[targetEvent] = new CapturedHandlerEntry(targetEvent));
      var capturedCallbacks = target.capturedCallbacks || (target.capturedCallbacks = {});
      if (!capturedCallbacks[targetEvent]) {
        handlerEntry.increment();
      } else {
        emLogger.error('already have a callback for event', { event: targetEvent, callback: callback });
      }
      capturedCallbacks[targetEvent] = callback;

      if (disposable === true) {
        return new DelegationEntryHandler(handlerEntry, capturedCallbacks, targetEvent);
      }

      return function () {
        handlerEntry.decrement();
        capturedCallbacks[targetEvent] = null;
      };
    }

    target.addEventListener(targetEvent, callback);

    if (disposable === true) {
      return new EventHandler(target, targetEvent, callback);
    }

    return function () {
      target.removeEventListener(targetEvent, callback);
    };
  };

  return DefaultEventStrategy;
}();

var delegationStrategy = exports.delegationStrategy = {
  none: 0,
  capturing: 1,
  bubbling: 2
};

var EventManager = exports.EventManager = function () {
  function EventManager() {
    var escapeShadowRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    

    this.elementHandlerLookup = {};
    this.eventStrategyLookup = {};
    this.escapeShadowRoot = escapeShadowRoot;

    this.registerElementConfig({
      tagName: 'input',
      properties: {
        value: ['change', 'input'],
        checked: ['change', 'input'],
        files: ['change', 'input']
      }
    });

    this.registerElementConfig({
      tagName: 'textarea',
      properties: {
        value: ['change', 'input']
      }
    });

    this.registerElementConfig({
      tagName: 'select',
      properties: {
        value: ['change']
      }
    });

    this.registerElementConfig({
      tagName: 'content editable',
      properties: {
        value: ['change', 'input', 'blur', 'keyup', 'paste']
      }
    });

    this.registerElementConfig({
      tagName: 'scrollable element',
      properties: {
        scrollTop: ['scroll'],
        scrollLeft: ['scroll']
      }
    });

    this.defaultEventStrategy = new DefaultEventStrategy(this);
  }

  EventManager.prototype.registerElementConfig = function registerElementConfig(config) {
    var tagName = config.tagName.toLowerCase();
    var properties = config.properties;
    var propertyName = void 0;

    var lookup = this.elementHandlerLookup[tagName] = {};

    for (propertyName in properties) {
      if (properties.hasOwnProperty(propertyName)) {
        lookup[propertyName] = properties[propertyName];
      }
    }
  };

  EventManager.prototype.registerEventStrategy = function registerEventStrategy(eventName, strategy) {
    this.eventStrategyLookup[eventName] = strategy;
  };

  EventManager.prototype.getElementHandler = function getElementHandler(target, propertyName) {
    var tagName = void 0;
    var lookup = this.elementHandlerLookup;

    if (target.tagName) {
      tagName = target.tagName.toLowerCase();

      if (lookup[tagName] && lookup[tagName][propertyName]) {
        return new EventSubscriber(lookup[tagName][propertyName]);
      }

      if (propertyName === 'textContent' || propertyName === 'innerHTML') {
        return new EventSubscriber(lookup['content editable'].value);
      }

      if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {
        return new EventSubscriber(lookup['scrollable element'][propertyName]);
      }
    }

    return null;
  };

  EventManager.prototype.addEventListener = function addEventListener(target, targetEvent, callbackOrListener, delegate, disposable) {
    return (this.eventStrategyLookup[targetEvent] || this.defaultEventStrategy).subscribe(target, targetEvent, callbackOrListener, delegate, disposable);
  };

  return EventManager;
}();

var EventSubscriber = exports.EventSubscriber = function () {
  function EventSubscriber(events) {
    

    this.events = events;
    this.element = null;
    this.handler = null;
  }

  EventSubscriber.prototype.subscribe = function subscribe(element, callbackOrListener) {
    this.element = element;
    this.handler = callbackOrListener;

    var events = this.events;
    for (var i = 0, ii = events.length; ii > i; ++i) {
      element.addEventListener(events[i], callbackOrListener);
    }
  };

  EventSubscriber.prototype.dispose = function dispose() {
    if (this.element === null) {
      return;
    }
    var element = this.element;
    var callbackOrListener = this.handler;
    var events = this.events;
    for (var i = 0, ii = events.length; ii > i; ++i) {
      element.removeEventListener(events[i], callbackOrListener);
    }
    this.element = this.handler = null;
  };

  return EventSubscriber;
}();

var DirtyChecker = exports.DirtyChecker = function () {
  function DirtyChecker() {
    

    this.tracked = [];
    this.checkDelay = 120;
  }

  DirtyChecker.prototype.addProperty = function addProperty(property) {
    var tracked = this.tracked;

    tracked.push(property);

    if (tracked.length === 1) {
      this.scheduleDirtyCheck();
    }
  };

  DirtyChecker.prototype.removeProperty = function removeProperty(property) {
    var tracked = this.tracked;
    tracked.splice(tracked.indexOf(property), 1);
  };

  DirtyChecker.prototype.scheduleDirtyCheck = function scheduleDirtyCheck() {
    var _this22 = this;

    setTimeout(function () {
      return _this22.check();
    }, this.checkDelay);
  };

  DirtyChecker.prototype.check = function check() {
    var tracked = this.tracked;
    var i = tracked.length;

    while (i--) {
      var current = tracked[i];

      if (current.isDirty()) {
        current.call();
      }
    }

    if (tracked.length) {
      this.scheduleDirtyCheck();
    }
  };

  return DirtyChecker;
}();

var DirtyCheckProperty = exports.DirtyCheckProperty = (_dec5 = subscriberCollection(), _dec5(_class5 = function () {
  function DirtyCheckProperty(dirtyChecker, obj, propertyName) {
    

    this.dirtyChecker = dirtyChecker;
    this.obj = obj;
    this.propertyName = propertyName;
  }

  DirtyCheckProperty.prototype.getValue = function getValue() {
    return this.obj[this.propertyName];
  };

  DirtyCheckProperty.prototype.setValue = function setValue(newValue) {
    this.obj[this.propertyName] = newValue;
  };

  DirtyCheckProperty.prototype.call = function call() {
    var oldValue = this.oldValue;
    var newValue = this.getValue();

    this.callSubscribers(newValue, oldValue);

    this.oldValue = newValue;
  };

  DirtyCheckProperty.prototype.isDirty = function isDirty() {
    return this.oldValue !== this.obj[this.propertyName];
  };

  DirtyCheckProperty.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.oldValue = this.getValue();
      this.dirtyChecker.addProperty(this);
    }
    this.addSubscriber(context, callable);
  };

  DirtyCheckProperty.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.dirtyChecker.removeProperty(this);
    }
  };

  return DirtyCheckProperty;
}()) || _class5);


var logger = LogManager.getLogger('property-observation');

var propertyAccessor = exports.propertyAccessor = {
  getValue: function getValue(obj, propertyName) {
    return obj[propertyName];
  },
  setValue: function setValue(value, obj, propertyName) {
    obj[propertyName] = value;
  }
};

var PrimitiveObserver = exports.PrimitiveObserver = function () {
  function PrimitiveObserver(primitive, propertyName) {
    

    this.doNotCache = true;

    this.primitive = primitive;
    this.propertyName = propertyName;
  }

  PrimitiveObserver.prototype.getValue = function getValue() {
    return this.primitive[this.propertyName];
  };

  PrimitiveObserver.prototype.setValue = function setValue() {
    var type = _typeof(this.primitive);
    throw new Error('The ' + this.propertyName + ' property of a ' + type + ' (' + this.primitive + ') cannot be assigned.');
  };

  PrimitiveObserver.prototype.subscribe = function subscribe() {};

  PrimitiveObserver.prototype.unsubscribe = function unsubscribe() {};

  return PrimitiveObserver;
}();

var SetterObserver = exports.SetterObserver = (_dec6 = subscriberCollection(), _dec6(_class7 = function () {
  function SetterObserver(taskQueue, obj, propertyName) {
    

    this.taskQueue = taskQueue;
    this.obj = obj;
    this.propertyName = propertyName;
    this.queued = false;
    this.observing = false;
  }

  SetterObserver.prototype.getValue = function getValue() {
    return this.obj[this.propertyName];
  };

  SetterObserver.prototype.setValue = function setValue(newValue) {
    this.obj[this.propertyName] = newValue;
  };

  SetterObserver.prototype.getterValue = function getterValue() {
    return this.currentValue;
  };

  SetterObserver.prototype.setterValue = function setterValue(newValue) {
    var oldValue = this.currentValue;

    if (oldValue !== newValue) {
      if (!this.queued) {
        this.oldValue = oldValue;
        this.queued = true;
        this.taskQueue.queueMicroTask(this);
      }

      this.currentValue = newValue;
    }
  };

  SetterObserver.prototype.call = function call() {
    var oldValue = this.oldValue;
    var newValue = this.currentValue;

    this.queued = false;

    this.callSubscribers(newValue, oldValue);
  };

  SetterObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.observing) {
      this.convertProperty();
    }
    this.addSubscriber(context, callable);
  };

  SetterObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  SetterObserver.prototype.convertProperty = function convertProperty() {
    this.observing = true;
    this.currentValue = this.obj[this.propertyName];
    this.setValue = this.setterValue;
    this.getValue = this.getterValue;

    if (!Reflect.defineProperty(this.obj, this.propertyName, {
      configurable: true,
      enumerable: this.propertyName in this.obj ? this.obj.propertyIsEnumerable(this.propertyName) : true,
      get: this.getValue.bind(this),
      set: this.setValue.bind(this)
    })) {
      logger.warn('Cannot observe property \'' + this.propertyName + '\' of object', this.obj);
    }
  };

  return SetterObserver;
}()) || _class7);

var XLinkAttributeObserver = exports.XLinkAttributeObserver = function () {
  function XLinkAttributeObserver(element, propertyName, attributeName) {
    

    this.element = element;
    this.propertyName = propertyName;
    this.attributeName = attributeName;
  }

  XLinkAttributeObserver.prototype.getValue = function getValue() {
    return this.element.getAttributeNS('http://www.w3.org/1999/xlink', this.attributeName);
  };

  XLinkAttributeObserver.prototype.setValue = function setValue(newValue) {
    return this.element.setAttributeNS('http://www.w3.org/1999/xlink', this.attributeName, newValue);
  };

  XLinkAttributeObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return XLinkAttributeObserver;
}();

var dataAttributeAccessor = exports.dataAttributeAccessor = {
  getValue: function getValue(obj, propertyName) {
    return obj.getAttribute(propertyName);
  },
  setValue: function setValue(value, obj, propertyName) {
    if (value === null || value === undefined) {
      obj.removeAttribute(propertyName);
    } else {
      obj.setAttribute(propertyName, value);
    }
  }
};

var DataAttributeObserver = exports.DataAttributeObserver = function () {
  function DataAttributeObserver(element, propertyName) {
    

    this.element = element;
    this.propertyName = propertyName;
  }

  DataAttributeObserver.prototype.getValue = function getValue() {
    return this.element.getAttribute(this.propertyName);
  };

  DataAttributeObserver.prototype.setValue = function setValue(newValue) {
    if (newValue === null || newValue === undefined) {
      return this.element.removeAttribute(this.propertyName);
    }
    return this.element.setAttribute(this.propertyName, newValue);
  };

  DataAttributeObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return DataAttributeObserver;
}();

var StyleObserver = exports.StyleObserver = function () {
  function StyleObserver(element, propertyName) {
    

    this.element = element;
    this.propertyName = propertyName;

    this.styles = null;
    this.version = 0;
  }

  StyleObserver.prototype.getValue = function getValue() {
    return this.element.style.cssText;
  };

  StyleObserver.prototype._setProperty = function _setProperty(style, value) {
    var priority = '';

    if (value !== null && value !== undefined && typeof value.indexOf === 'function' && value.indexOf('!important') !== -1) {
      priority = 'important';
      value = value.replace('!important', '');
    }
    this.element.style.setProperty(style, value, priority);
  };

  StyleObserver.prototype.setValue = function setValue(newValue) {
    var styles = this.styles || {};
    var style = void 0;
    var version = this.version;

    if (newValue !== null && newValue !== undefined) {
      if (newValue instanceof Object) {
        var value = void 0;
        for (style in newValue) {
          if (newValue.hasOwnProperty(style)) {
            value = newValue[style];
            style = style.replace(/([A-Z])/g, function (m) {
              return '-' + m.toLowerCase();
            });
            styles[style] = version;
            this._setProperty(style, value);
          }
        }
      } else if (newValue.length) {
        var rx = /\s*([\w\-]+)\s*:\s*((?:(?:[\w\-]+\(\s*(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[\w\-]+\(\s*(?:^"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^\)]*)\),?|[^\)]*)\),?|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^;]*),?\s*)+);?/g;
        var pair = void 0;
        while ((pair = rx.exec(newValue)) !== null) {
          style = pair[1];
          if (!style) {
            continue;
          }

          styles[style] = version;
          this._setProperty(style, pair[2]);
        }
      }
    }

    this.styles = styles;
    this.version += 1;

    if (version === 0) {
      return;
    }

    version -= 1;
    for (style in styles) {
      if (!styles.hasOwnProperty(style) || styles[style] !== version) {
        continue;
      }

      this.element.style.removeProperty(style);
    }
  };

  StyleObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return StyleObserver;
}();

var ValueAttributeObserver = exports.ValueAttributeObserver = (_dec7 = subscriberCollection(), _dec7(_class8 = function () {
  function ValueAttributeObserver(element, propertyName, handler) {
    

    this.element = element;
    this.propertyName = propertyName;
    this.handler = handler;
    if (propertyName === 'files') {
      this.setValue = function () {};
    }
  }

  ValueAttributeObserver.prototype.getValue = function getValue() {
    return this.element[this.propertyName];
  };

  ValueAttributeObserver.prototype.setValue = function setValue(newValue) {
    newValue = newValue === undefined || newValue === null ? '' : newValue;
    if (this.element[this.propertyName] !== newValue) {
      this.element[this.propertyName] = newValue;
      this.notify();
    }
  };

  ValueAttributeObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.getValue();

    this.callSubscribers(newValue, oldValue);

    this.oldValue = newValue;
  };

  ValueAttributeObserver.prototype.handleEvent = function handleEvent() {
    this.notify();
  };

  ValueAttributeObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.oldValue = this.getValue();
      this.handler.subscribe(this.element, this);
    }

    this.addSubscriber(context, callable);
  };

  ValueAttributeObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  return ValueAttributeObserver;
}()) || _class8);


var checkedArrayContext = 'CheckedObserver:array';
var checkedValueContext = 'CheckedObserver:value';

var CheckedObserver = exports.CheckedObserver = (_dec8 = subscriberCollection(), _dec8(_class9 = function () {
  function CheckedObserver(element, handler, observerLocator) {
    

    this.element = element;
    this.handler = handler;
    this.observerLocator = observerLocator;
  }

  CheckedObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  CheckedObserver.prototype.setValue = function setValue(newValue) {
    if (this.initialSync && this.value === newValue) {
      return;
    }

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(checkedArrayContext, this);
      this.arrayObserver = null;
    }

    if (this.element.type === 'checkbox' && Array.isArray(newValue)) {
      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
      this.arrayObserver.subscribe(checkedArrayContext, this);
    }

    this.oldValue = this.value;
    this.value = newValue;
    this.synchronizeElement();
    this.notify();

    if (!this.initialSync) {
      this.initialSync = true;
      this.observerLocator.taskQueue.queueMicroTask(this);
    }
  };

  CheckedObserver.prototype.call = function call(context, splices) {
    this.synchronizeElement();

    if (!this.valueObserver) {
      this.valueObserver = this.element.__observers__.model || this.element.__observers__.value;
      if (this.valueObserver) {
        this.valueObserver.subscribe(checkedValueContext, this);
      }
    }
  };

  CheckedObserver.prototype.synchronizeElement = function synchronizeElement() {
    var value = this.value;
    var element = this.element;
    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
    var isRadio = element.type === 'radio';
    var matcher = element.matcher || function (a, b) {
      return a === b;
    };

    element.checked = isRadio && !!matcher(value, elementValue) || !isRadio && value === true || !isRadio && Array.isArray(value) && value.findIndex(function (item) {
      return !!matcher(item, elementValue);
    }) !== -1;
  };

  CheckedObserver.prototype.synchronizeValue = function synchronizeValue() {
    var value = this.value;
    var element = this.element;
    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
    var index = void 0;
    var matcher = element.matcher || function (a, b) {
      return a === b;
    };

    if (element.type === 'checkbox') {
      if (Array.isArray(value)) {
        index = value.findIndex(function (item) {
          return !!matcher(item, elementValue);
        });
        if (element.checked && index === -1) {
          value.push(elementValue);
        } else if (!element.checked && index !== -1) {
          value.splice(index, 1);
        }

        return;
      }

      value = element.checked;
    } else if (element.checked) {
      value = elementValue;
    } else {
      return;
    }

    this.oldValue = this.value;
    this.value = value;
    this.notify();
  };

  CheckedObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.value;

    if (newValue === oldValue) {
      return;
    }

    this.callSubscribers(newValue, oldValue);
  };

  CheckedObserver.prototype.handleEvent = function handleEvent() {
    this.synchronizeValue();
  };

  CheckedObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.handler.subscribe(this.element, this);
    }
    this.addSubscriber(context, callable);
  };

  CheckedObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  CheckedObserver.prototype.unbind = function unbind() {
    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(checkedArrayContext, this);
      this.arrayObserver = null;
    }
    if (this.valueObserver) {
      this.valueObserver.unsubscribe(checkedValueContext, this);
    }
  };

  return CheckedObserver;
}()) || _class9);


var selectArrayContext = 'SelectValueObserver:array';

var SelectValueObserver = exports.SelectValueObserver = (_dec9 = subscriberCollection(), _dec9(_class10 = function () {
  function SelectValueObserver(element, handler, observerLocator) {
    

    this.element = element;
    this.handler = handler;
    this.observerLocator = observerLocator;
  }

  SelectValueObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  SelectValueObserver.prototype.setValue = function setValue(newValue) {
    if (newValue !== null && newValue !== undefined && this.element.multiple && !Array.isArray(newValue)) {
      throw new Error('Only null or Array instances can be bound to a multi-select.');
    }
    if (this.value === newValue) {
      return;
    }

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(selectArrayContext, this);
      this.arrayObserver = null;
    }

    if (Array.isArray(newValue)) {
      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
      this.arrayObserver.subscribe(selectArrayContext, this);
    }

    this.oldValue = this.value;
    this.value = newValue;
    this.synchronizeOptions();
    this.notify();

    if (!this.initialSync) {
      this.initialSync = true;
      this.observerLocator.taskQueue.queueMicroTask(this);
    }
  };

  SelectValueObserver.prototype.call = function call(context, splices) {
    this.synchronizeOptions();
  };

  SelectValueObserver.prototype.synchronizeOptions = function synchronizeOptions() {
    var value = this.value;
    var isArray = void 0;

    if (Array.isArray(value)) {
      isArray = true;
    }

    var options = this.element.options;
    var i = options.length;
    var matcher = this.element.matcher || function (a, b) {
      return a === b;
    };

    var _loop = function _loop() {
      var option = options.item(i);
      var optionValue = option.hasOwnProperty('model') ? option.model : option.value;
      if (isArray) {
        option.selected = value.findIndex(function (item) {
          return !!matcher(optionValue, item);
        }) !== -1;
        return 'continue';
      }
      option.selected = !!matcher(optionValue, value);
    };

    while (i--) {
      var _ret = _loop();

      if (_ret === 'continue') continue;
    }
  };

  SelectValueObserver.prototype.synchronizeValue = function synchronizeValue() {
    var _this23 = this;

    var options = this.element.options;
    var count = 0;
    var value = [];

    for (var i = 0, ii = options.length; i < ii; i++) {
      var _option = options.item(i);
      if (!_option.selected) {
        continue;
      }
      value.push(_option.hasOwnProperty('model') ? _option.model : _option.value);
      count++;
    }

    if (this.element.multiple) {
      if (Array.isArray(this.value)) {
        var _ret2 = function () {
          var matcher = _this23.element.matcher || function (a, b) {
            return a === b;
          };

          var i = 0;

          var _loop2 = function _loop2() {
            var a = _this23.value[i];
            if (value.findIndex(function (b) {
              return matcher(a, b);
            }) === -1) {
              _this23.value.splice(i, 1);
            } else {
              i++;
            }
          };

          while (i < _this23.value.length) {
            _loop2();
          }

          i = 0;

          var _loop3 = function _loop3() {
            var a = value[i];
            if (_this23.value.findIndex(function (b) {
              return matcher(a, b);
            }) === -1) {
              _this23.value.push(a);
            }
            i++;
          };

          while (i < value.length) {
            _loop3();
          }
          return {
            v: void 0
          };
        }();

        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
      }
    } else {
      if (count === 0) {
        value = null;
      } else {
        value = value[0];
      }
    }

    if (value !== this.value) {
      this.oldValue = this.value;
      this.value = value;
      this.notify();
    }
  };

  SelectValueObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.value;

    this.callSubscribers(newValue, oldValue);
  };

  SelectValueObserver.prototype.handleEvent = function handleEvent() {
    this.synchronizeValue();
  };

  SelectValueObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.handler.subscribe(this.element, this);
    }
    this.addSubscriber(context, callable);
  };

  SelectValueObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  SelectValueObserver.prototype.bind = function bind() {
    var _this24 = this;

    this.domObserver = _aureliaPal.DOM.createMutationObserver(function () {
      _this24.synchronizeOptions();
      _this24.synchronizeValue();
    });
    this.domObserver.observe(this.element, { childList: true, subtree: true, characterData: true });
  };

  SelectValueObserver.prototype.unbind = function unbind() {
    this.domObserver.disconnect();
    this.domObserver = null;

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(selectArrayContext, this);
      this.arrayObserver = null;
    }
  };

  return SelectValueObserver;
}()) || _class10);

var ClassObserver = exports.ClassObserver = function () {
  function ClassObserver(element) {
    

    this.element = element;
    this.doNotCache = true;
    this.value = '';
    this.version = 0;
  }

  ClassObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  ClassObserver.prototype.setValue = function setValue(newValue) {
    var nameIndex = this.nameIndex || {};
    var version = this.version;
    var names = void 0;
    var name = void 0;

    if (newValue !== null && newValue !== undefined && newValue.length) {
      names = newValue.split(/\s+/);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];
        if (name === '') {
          continue;
        }
        nameIndex[name] = version;
        this.element.classList.add(name);
      }
    }

    this.value = newValue;
    this.nameIndex = nameIndex;
    this.version += 1;

    if (version === 0) {
      return;
    }

    version -= 1;
    for (name in nameIndex) {
      if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {
        continue;
      }
      this.element.classList.remove(name);
    }
  };

  ClassObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "class" property is not supported.');
  };

  return ClassObserver;
}();

function hasDeclaredDependencies(descriptor) {
  return !!(descriptor && descriptor.get && descriptor.get.dependencies);
}

function declarePropertyDependencies(ctor, propertyName, dependencies) {
  var descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, propertyName);
  descriptor.get.dependencies = dependencies;
}

function computedFrom() {
  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
    rest[_key] = arguments[_key];
  }

  return function (target, key, descriptor) {
    descriptor.get.dependencies = rest;
    return descriptor;
  };
}

var ComputedExpression = exports.ComputedExpression = function (_Expression19) {
  _inherits(ComputedExpression, _Expression19);

  function ComputedExpression(name, dependencies) {
    

    var _this25 = _possibleConstructorReturn(this, _Expression19.call(this));

    _this25.name = name;
    _this25.dependencies = dependencies;
    _this25.isAssignable = true;
    return _this25;
  }

  ComputedExpression.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return scope.bindingContext[this.name];
  };

  ComputedExpression.prototype.assign = function assign(scope, value) {
    scope.bindingContext[this.name] = value;
  };

  ComputedExpression.prototype.accept = function accept(visitor) {
    throw new Error('not implemented');
  };

  ComputedExpression.prototype.connect = function connect(binding, scope) {
    var dependencies = this.dependencies;
    var i = dependencies.length;
    while (i--) {
      dependencies[i].connect(binding, scope);
    }
  };

  return ComputedExpression;
}(Expression);

function createComputedObserver(obj, propertyName, descriptor, observerLocator) {
  var dependencies = descriptor.get.dependencies;
  if (!(dependencies instanceof ComputedExpression)) {
    var i = dependencies.length;
    while (i--) {
      dependencies[i] = observerLocator.parser.parse(dependencies[i]);
    }
    dependencies = descriptor.get.dependencies = new ComputedExpression(propertyName, dependencies);
  }

  var scope = { bindingContext: obj, overrideContext: createOverrideContext(obj) };
  return new ExpressionObserver(scope, dependencies, observerLocator);
}

var svgElements = void 0;
var svgPresentationElements = void 0;
var svgPresentationAttributes = void 0;
var svgAnalyzer = void 0;

if (typeof FEATURE_NO_SVG === 'undefined') {
  svgElements = {
    a: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'target', 'transform', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyph: ['class', 'dx', 'dy', 'externalResourcesRequired', 'format', 'glyphRef', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    altGlyphDef: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyphItem: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    animate: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateColor: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateMotion: ['accumulate', 'additive', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keyPoints', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'origin', 'path', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'rotate', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateTransform: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'type', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    circle: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'r', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    clipPath: ['class', 'clipPathUnits', 'externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    'color-profile': ['id', 'local', 'name', 'rendering-intent', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    cursor: ['externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    defs: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    desc: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    ellipse: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    feBlend: ['class', 'height', 'id', 'in', 'in2', 'mode', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feColorMatrix: ['class', 'height', 'id', 'in', 'result', 'style', 'type', 'values', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComponentTransfer: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComposite: ['class', 'height', 'id', 'in', 'in2', 'k1', 'k2', 'k3', 'k4', 'operator', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feConvolveMatrix: ['bias', 'class', 'divisor', 'edgeMode', 'height', 'id', 'in', 'kernelMatrix', 'kernelUnitLength', 'order', 'preserveAlpha', 'result', 'style', 'targetX', 'targetY', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDiffuseLighting: ['class', 'diffuseConstant', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDisplacementMap: ['class', 'height', 'id', 'in', 'in2', 'result', 'scale', 'style', 'width', 'x', 'xChannelSelector', 'xml:base', 'xml:lang', 'xml:space', 'y', 'yChannelSelector'],
    feDistantLight: ['azimuth', 'elevation', 'id', 'xml:base', 'xml:lang', 'xml:space'],
    feFlood: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feFuncA: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncB: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncG: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncR: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feGaussianBlur: ['class', 'height', 'id', 'in', 'result', 'stdDeviation', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feImage: ['class', 'externalResourcesRequired', 'height', 'id', 'preserveAspectRatio', 'result', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMerge: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMergeNode: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    feMorphology: ['class', 'height', 'id', 'in', 'operator', 'radius', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feOffset: ['class', 'dx', 'dy', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    fePointLight: ['id', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feSpecularLighting: ['class', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'specularConstant', 'specularExponent', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feSpotLight: ['id', 'limitingConeAngle', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'specularExponent', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feTile: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feTurbulence: ['baseFrequency', 'class', 'height', 'id', 'numOctaves', 'result', 'seed', 'stitchTiles', 'style', 'type', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    filter: ['class', 'externalResourcesRequired', 'filterRes', 'filterUnits', 'height', 'id', 'primitiveUnits', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    font: ['class', 'externalResourcesRequired', 'horiz-adv-x', 'horiz-origin-x', 'horiz-origin-y', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face': ['accent-height', 'alphabetic', 'ascent', 'bbox', 'cap-height', 'descent', 'font-family', 'font-size', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'hanging', 'id', 'ideographic', 'mathematical', 'overline-position', 'overline-thickness', 'panose-1', 'slope', 'stemh', 'stemv', 'strikethrough-position', 'strikethrough-thickness', 'underline-position', 'underline-thickness', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'widths', 'x-height', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-format': ['id', 'string', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-name': ['id', 'name', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-src': ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-uri': ['id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    foreignObject: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    g: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    glyph: ['arabic-form', 'class', 'd', 'glyph-name', 'horiz-adv-x', 'id', 'lang', 'orientation', 'style', 'unicode', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    glyphRef: ['class', 'dx', 'dy', 'format', 'glyphRef', 'id', 'style', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    hkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space'],
    image: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    line: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'x1', 'x2', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    linearGradient: ['class', 'externalResourcesRequired', 'gradientTransform', 'gradientUnits', 'id', 'spreadMethod', 'style', 'x1', 'x2', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    marker: ['class', 'externalResourcesRequired', 'id', 'markerHeight', 'markerUnits', 'markerWidth', 'orient', 'preserveAspectRatio', 'refX', 'refY', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    mask: ['class', 'externalResourcesRequired', 'height', 'id', 'maskContentUnits', 'maskUnits', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    metadata: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'missing-glyph': ['class', 'd', 'horiz-adv-x', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    mpath: ['externalResourcesRequired', 'id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    path: ['class', 'd', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'pathLength', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    pattern: ['class', 'externalResourcesRequired', 'height', 'id', 'patternContentUnits', 'patternTransform', 'patternUnits', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'viewBox', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    polygon: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    polyline: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    radialGradient: ['class', 'cx', 'cy', 'externalResourcesRequired', 'fx', 'fy', 'gradientTransform', 'gradientUnits', 'id', 'r', 'spreadMethod', 'style', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    rect: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    script: ['externalResourcesRequired', 'id', 'type', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    set: ['attributeName', 'attributeType', 'begin', 'dur', 'end', 'externalResourcesRequired', 'fill', 'id', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    stop: ['class', 'id', 'offset', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    style: ['id', 'media', 'title', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    svg: ['baseProfile', 'class', 'contentScriptType', 'contentStyleType', 'externalResourcesRequired', 'height', 'id', 'onabort', 'onactivate', 'onclick', 'onerror', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onresize', 'onscroll', 'onunload', 'onzoom', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'version', 'viewBox', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'zoomAndPan'],
    switch: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    symbol: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    text: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'transform', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    textPath: ['class', 'externalResourcesRequired', 'id', 'lengthAdjust', 'method', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'spacing', 'startOffset', 'style', 'systemLanguage', 'textLength', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    title: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    tref: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    tspan: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    use: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    view: ['externalResourcesRequired', 'id', 'preserveAspectRatio', 'viewBox', 'viewTarget', 'xml:base', 'xml:lang', 'xml:space', 'zoomAndPan'],
    vkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']
  };


  svgPresentationElements = {
    'a': true,
    'altGlyph': true,
    'animate': true,
    'animateColor': true,
    'circle': true,
    'clipPath': true,
    'defs': true,
    'ellipse': true,
    'feBlend': true,
    'feColorMatrix': true,
    'feComponentTransfer': true,
    'feComposite': true,
    'feConvolveMatrix': true,
    'feDiffuseLighting': true,
    'feDisplacementMap': true,
    'feFlood': true,
    'feGaussianBlur': true,
    'feImage': true,
    'feMerge': true,
    'feMorphology': true,
    'feOffset': true,
    'feSpecularLighting': true,
    'feTile': true,
    'feTurbulence': true,
    'filter': true,
    'font': true,
    'foreignObject': true,
    'g': true,
    'glyph': true,
    'glyphRef': true,
    'image': true,
    'line': true,
    'linearGradient': true,
    'marker': true,
    'mask': true,
    'missing-glyph': true,
    'path': true,
    'pattern': true,
    'polygon': true,
    'polyline': true,
    'radialGradient': true,
    'rect': true,
    'stop': true,
    'svg': true,
    'switch': true,
    'symbol': true,
    'text': true,
    'textPath': true,
    'tref': true,
    'tspan': true,
    'use': true
  };

  svgPresentationAttributes = {
    'alignment-baseline': true,
    'baseline-shift': true,
    'clip-path': true,
    'clip-rule': true,
    'clip': true,
    'color-interpolation-filters': true,
    'color-interpolation': true,
    'color-profile': true,
    'color-rendering': true,
    'color': true,
    'cursor': true,
    'direction': true,
    'display': true,
    'dominant-baseline': true,
    'enable-background': true,
    'fill-opacity': true,
    'fill-rule': true,
    'fill': true,
    'filter': true,
    'flood-color': true,
    'flood-opacity': true,
    'font-family': true,
    'font-size-adjust': true,
    'font-size': true,
    'font-stretch': true,
    'font-style': true,
    'font-variant': true,
    'font-weight': true,
    'glyph-orientation-horizontal': true,
    'glyph-orientation-vertical': true,
    'image-rendering': true,
    'kerning': true,
    'letter-spacing': true,
    'lighting-color': true,
    'marker-end': true,
    'marker-mid': true,
    'marker-start': true,
    'mask': true,
    'opacity': true,
    'overflow': true,
    'pointer-events': true,
    'shape-rendering': true,
    'stop-color': true,
    'stop-opacity': true,
    'stroke-dasharray': true,
    'stroke-dashoffset': true,
    'stroke-linecap': true,
    'stroke-linejoin': true,
    'stroke-miterlimit': true,
    'stroke-opacity': true,
    'stroke-width': true,
    'stroke': true,
    'text-anchor': true,
    'text-decoration': true,
    'text-rendering': true,
    'unicode-bidi': true,
    'visibility': true,
    'word-spacing': true,
    'writing-mode': true
  };

  var createElement = function createElement(html) {
    var div = _aureliaPal.DOM.createElement('div');
    div.innerHTML = html;
    return div.firstChild;
  };

  svgAnalyzer = function () {
    function SVGAnalyzer() {
      

      if (createElement('<svg><altGlyph /></svg>').firstElementChild.nodeName === 'altglyph' && elements.altGlyph) {
        elements.altglyph = elements.altGlyph;
        delete elements.altGlyph;
        elements.altglyphdef = elements.altGlyphDef;
        delete elements.altGlyphDef;
        elements.altglyphitem = elements.altGlyphItem;
        delete elements.altGlyphItem;
        elements.glyphref = elements.glyphRef;
        delete elements.glyphRef;
      }
    }

    SVGAnalyzer.prototype.isStandardSvgAttribute = function isStandardSvgAttribute(nodeName, attributeName) {
      return presentationElements[nodeName] && presentationAttributes[attributeName] || elements[nodeName] && elements[nodeName].indexOf(attributeName) !== -1;
    };

    return SVGAnalyzer;
  }();
}

var elements = exports.elements = svgElements;
var presentationElements = exports.presentationElements = svgPresentationElements;
var presentationAttributes = exports.presentationAttributes = svgPresentationAttributes;
var SVGAnalyzer = exports.SVGAnalyzer = svgAnalyzer || function () {
  function _class11() {
    
  }

  _class11.prototype.isStandardSvgAttribute = function isStandardSvgAttribute() {
    return false;
  };

  return _class11;
}();

var ObserverLocator = exports.ObserverLocator = (_temp = _class12 = function () {
  function ObserverLocator(taskQueue, eventManager, dirtyChecker, svgAnalyzer, parser) {
    

    this.taskQueue = taskQueue;
    this.eventManager = eventManager;
    this.dirtyChecker = dirtyChecker;
    this.svgAnalyzer = svgAnalyzer;
    this.parser = parser;

    this.adapters = [];
    this.logger = LogManager.getLogger('observer-locator');
  }

  ObserverLocator.prototype.getObserver = function getObserver(obj, propertyName) {
    var observersLookup = obj.__observers__;
    var observer = void 0;

    if (observersLookup && propertyName in observersLookup) {
      return observersLookup[propertyName];
    }

    observer = this.createPropertyObserver(obj, propertyName);

    if (!observer.doNotCache) {
      if (observersLookup === undefined) {
        observersLookup = this.getOrCreateObserversLookup(obj);
      }

      observersLookup[propertyName] = observer;
    }

    return observer;
  };

  ObserverLocator.prototype.getOrCreateObserversLookup = function getOrCreateObserversLookup(obj) {
    return obj.__observers__ || this.createObserversLookup(obj);
  };

  ObserverLocator.prototype.createObserversLookup = function createObserversLookup(obj) {
    var value = {};

    if (!Reflect.defineProperty(obj, '__observers__', {
      enumerable: false,
      configurable: false,
      writable: false,
      value: value
    })) {
      this.logger.warn('Cannot add observers to object', obj);
    }

    return value;
  };

  ObserverLocator.prototype.addAdapter = function addAdapter(adapter) {
    this.adapters.push(adapter);
  };

  ObserverLocator.prototype.getAdapterObserver = function getAdapterObserver(obj, propertyName, descriptor) {
    for (var i = 0, ii = this.adapters.length; i < ii; i++) {
      var adapter = this.adapters[i];
      var observer = adapter.getObserver(obj, propertyName, descriptor);
      if (observer) {
        return observer;
      }
    }
    return null;
  };

  ObserverLocator.prototype.createPropertyObserver = function createPropertyObserver(obj, propertyName) {
    var descriptor = void 0;
    var handler = void 0;
    var xlinkResult = void 0;

    if (!(obj instanceof Object)) {
      return new PrimitiveObserver(obj, propertyName);
    }

    if (obj instanceof _aureliaPal.DOM.Element) {
      if (propertyName === 'class') {
        return new ClassObserver(obj);
      }
      if (propertyName === 'style' || propertyName === 'css') {
        return new StyleObserver(obj, propertyName);
      }
      handler = this.eventManager.getElementHandler(obj, propertyName);
      if (propertyName === 'value' && obj.tagName.toLowerCase() === 'select') {
        return new SelectValueObserver(obj, handler, this);
      }
      if (propertyName === 'checked' && obj.tagName.toLowerCase() === 'input') {
        return new CheckedObserver(obj, handler, this);
      }
      if (handler) {
        return new ValueAttributeObserver(obj, propertyName, handler);
      }
      xlinkResult = /^xlink:(.+)$/.exec(propertyName);
      if (xlinkResult) {
        return new XLinkAttributeObserver(obj, propertyName, xlinkResult[1]);
      }
      if (propertyName === 'role' && (obj instanceof _aureliaPal.DOM.Element || obj instanceof _aureliaPal.DOM.SVGElement) || /^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
        return new DataAttributeObserver(obj, propertyName);
      }
    }

    descriptor = Object.getPropertyDescriptor(obj, propertyName);

    if (hasDeclaredDependencies(descriptor)) {
      return createComputedObserver(obj, propertyName, descriptor, this);
    }

    if (descriptor) {
      var existingGetterOrSetter = descriptor.get || descriptor.set;
      if (existingGetterOrSetter) {
        if (existingGetterOrSetter.getObserver) {
          return existingGetterOrSetter.getObserver(obj);
        }

        var adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);
        if (adapterObserver) {
          return adapterObserver;
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      }
    }

    if (obj instanceof Array) {
      if (propertyName === 'length') {
        return this.getArrayObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    } else if (obj instanceof Map) {
      if (propertyName === 'size') {
        return this.getMapObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    } else if (obj instanceof Set) {
      if (propertyName === 'size') {
        return this.getSetObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    }

    return new SetterObserver(this.taskQueue, obj, propertyName);
  };

  ObserverLocator.prototype.getAccessor = function getAccessor(obj, propertyName) {
    if (obj instanceof _aureliaPal.DOM.Element) {
      if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css' || propertyName === 'value' && (obj.tagName.toLowerCase() === 'input' || obj.tagName.toLowerCase() === 'select') || propertyName === 'checked' && obj.tagName.toLowerCase() === 'input' || propertyName === 'model' && obj.tagName.toLowerCase() === 'input' || /^xlink:.+$/.exec(propertyName)) {
        return this.getObserver(obj, propertyName);
      }
      if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName) || obj.tagName.toLowerCase() === 'img' && propertyName === 'src' || obj.tagName.toLowerCase() === 'a' && propertyName === 'href') {
        return dataAttributeAccessor;
      }
    }
    return propertyAccessor;
  };

  ObserverLocator.prototype.getArrayObserver = function getArrayObserver(array) {
    return _getArrayObserver(this.taskQueue, array);
  };

  ObserverLocator.prototype.getMapObserver = function getMapObserver(map) {
    return _getMapObserver(this.taskQueue, map);
  };

  ObserverLocator.prototype.getSetObserver = function getSetObserver(set) {
    return _getSetObserver(this.taskQueue, set);
  };

  return ObserverLocator;
}(), _class12.inject = [_aureliaTaskQueue.TaskQueue, EventManager, DirtyChecker, SVGAnalyzer, Parser], _temp);

var ObjectObservationAdapter = exports.ObjectObservationAdapter = function () {
  function ObjectObservationAdapter() {
    
  }

  ObjectObservationAdapter.prototype.getObserver = function getObserver(object, propertyName, descriptor) {
    throw new Error('BindingAdapters must implement getObserver(object, propertyName).');
  };

  return ObjectObservationAdapter;
}();

var BindingExpression = exports.BindingExpression = function () {
  function BindingExpression(observerLocator, targetProperty, sourceExpression, mode, lookupFunctions, attribute) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.sourceExpression = sourceExpression;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
    this.attribute = attribute;
    this.discrete = false;
  }

  BindingExpression.prototype.createBinding = function createBinding(target) {
    return new Binding(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.mode, this.lookupFunctions);
  };

  return BindingExpression;
}();

var Binding = exports.Binding = (_dec10 = connectable(), _dec10(_class13 = function () {
  function Binding(observerLocator, sourceExpression, target, targetProperty, mode, lookupFunctions) {
    

    this.observerLocator = observerLocator;
    this.sourceExpression = sourceExpression;
    this.target = target;
    this.targetProperty = targetProperty;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
  }

  Binding.prototype.updateTarget = function updateTarget(value) {
    this.targetObserver.setValue(value, this.target, this.targetProperty);
  };

  Binding.prototype.updateSource = function updateSource(value) {
    this.sourceExpression.assign(this.source, value, this.lookupFunctions);
  };

  Binding.prototype.call = function call(context, newValue, oldValue) {
    if (!this.isBound) {
      return;
    }
    if (context === sourceContext) {
      oldValue = this.targetObserver.getValue(this.target, this.targetProperty);
      newValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      if (newValue !== oldValue) {
        this.updateTarget(newValue);
      }
      if (this.mode !== bindingMode.oneTime) {
        this._version++;
        this.sourceExpression.connect(this, this.source);
        this.unobserve(false);
      }
      return;
    }
    if (context === targetContext) {
      if (newValue !== this.sourceExpression.evaluate(this.source, this.lookupFunctions)) {
        this.updateSource(newValue);
      }
      return;
    }
    throw new Error('Unexpected call context ' + context);
  };

  Binding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }

    var mode = this.mode;
    if (!this.targetObserver) {
      var method = mode === bindingMode.twoWay || mode === bindingMode.fromView ? 'getObserver' : 'getAccessor';
      this.targetObserver = this.observerLocator[method](this.target, this.targetProperty);
    }

    if ('bind' in this.targetObserver) {
      this.targetObserver.bind();
    }
    if (this.mode !== bindingMode.fromView) {
      var value = this.sourceExpression.evaluate(source, this.lookupFunctions);
      this.updateTarget(value);
    }

    if (mode === bindingMode.oneTime) {
      return;
    } else if (mode === bindingMode.toView) {
      enqueueBindingConnect(this);
    } else if (mode === bindingMode.twoWay) {
      this.sourceExpression.connect(this, source);
      this.targetObserver.subscribe(targetContext, this);
    } else if (mode === bindingMode.fromView) {
      this.targetObserver.subscribe(targetContext, this);
    }
  };

  Binding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    if ('unbind' in this.targetObserver) {
      this.targetObserver.unbind();
    }
    if (this.targetObserver.unsubscribe) {
      this.targetObserver.unsubscribe(targetContext, this);
    }
    this.unobserve(true);
  };

  Binding.prototype.connect = function connect(evaluate) {
    if (!this.isBound) {
      return;
    }
    if (evaluate) {
      var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      this.updateTarget(value);
    }
    this.sourceExpression.connect(this, this.source);
  };

  return Binding;
}()) || _class13);

var CallExpression = exports.CallExpression = function () {
  function CallExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.sourceExpression = sourceExpression;
    this.lookupFunctions = lookupFunctions;
  }

  CallExpression.prototype.createBinding = function createBinding(target) {
    return new Call(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.lookupFunctions);
  };

  return CallExpression;
}();

var Call = exports.Call = function () {
  function Call(observerLocator, sourceExpression, target, targetProperty, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.target = target;
    this.targetProperty = observerLocator.getObserver(target, targetProperty);
    this.lookupFunctions = lookupFunctions;
  }

  Call.prototype.callSource = function callSource($event) {
    var overrideContext = this.source.overrideContext;
    Object.assign(overrideContext, $event);
    overrideContext.$event = $event;
    var mustEvaluate = true;
    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
    delete overrideContext.$event;
    for (var prop in $event) {
      delete overrideContext[prop];
    }
    return result;
  };

  Call.prototype.bind = function bind(source) {
    var _this26 = this;

    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this.targetProperty.setValue(function ($event) {
      return _this26.callSource($event);
    });
  };

  Call.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this.targetProperty.setValue(null);
  };

  return Call;
}();

var ValueConverterResource = exports.ValueConverterResource = function () {
  function ValueConverterResource(name) {
    

    this.name = name;
  }

  ValueConverterResource.convention = function convention(name) {
    if (name.endsWith('ValueConverter')) {
      return new ValueConverterResource(camelCase(name.substring(0, name.length - 14)));
    }
  };

  ValueConverterResource.prototype.initialize = function initialize(container, target) {
    this.instance = container.get(target);
  };

  ValueConverterResource.prototype.register = function register(registry, name) {
    registry.registerValueConverter(name || this.name, this.instance);
  };

  ValueConverterResource.prototype.load = function load(container, target) {};

  return ValueConverterResource;
}();

function valueConverter(nameOrTarget) {
  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
    return function (target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(nameOrTarget), target);
    };
  }

  _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(), nameOrTarget);
}

var BindingBehaviorResource = exports.BindingBehaviorResource = function () {
  function BindingBehaviorResource(name) {
    

    this.name = name;
  }

  BindingBehaviorResource.convention = function convention(name) {
    if (name.endsWith('BindingBehavior')) {
      return new BindingBehaviorResource(camelCase(name.substring(0, name.length - 15)));
    }
  };

  BindingBehaviorResource.prototype.initialize = function initialize(container, target) {
    this.instance = container.get(target);
  };

  BindingBehaviorResource.prototype.register = function register(registry, name) {
    registry.registerBindingBehavior(name || this.name, this.instance);
  };

  BindingBehaviorResource.prototype.load = function load(container, target) {};

  return BindingBehaviorResource;
}();

function bindingBehavior(nameOrTarget) {
  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
    return function (target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(nameOrTarget), target);
    };
  }

  _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(), nameOrTarget);
}

var ListenerExpression = exports.ListenerExpression = function () {
  function ListenerExpression(eventManager, targetEvent, sourceExpression, delegationStrategy, preventDefault, lookupFunctions) {
    

    this.eventManager = eventManager;
    this.targetEvent = targetEvent;
    this.sourceExpression = sourceExpression;
    this.delegationStrategy = delegationStrategy;
    this.discrete = true;
    this.preventDefault = preventDefault;
    this.lookupFunctions = lookupFunctions;
  }

  ListenerExpression.prototype.createBinding = function createBinding(target) {
    return new Listener(this.eventManager, this.targetEvent, this.delegationStrategy, this.sourceExpression, target, this.preventDefault, this.lookupFunctions);
  };

  return ListenerExpression;
}();

var Listener = exports.Listener = function () {
  function Listener(eventManager, targetEvent, delegationStrategy, sourceExpression, target, preventDefault, lookupFunctions) {
    

    this.eventManager = eventManager;
    this.targetEvent = targetEvent;
    this.delegationStrategy = delegationStrategy;
    this.sourceExpression = sourceExpression;
    this.target = target;
    this.preventDefault = preventDefault;
    this.lookupFunctions = lookupFunctions;
  }

  Listener.prototype.callSource = function callSource(event) {
    var overrideContext = this.source.overrideContext;
    overrideContext.$event = event;
    var mustEvaluate = true;
    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
    delete overrideContext.$event;
    if (result !== true && this.preventDefault) {
      event.preventDefault();
    }
    return result;
  };

  Listener.prototype.handleEvent = function handleEvent(event) {
    this.callSource(event);
  };

  Listener.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this._handler = this.eventManager.addEventListener(this.target, this.targetEvent, this, this.delegationStrategy, true);
  };

  Listener.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this._handler.dispose();
    this._handler = null;
  };

  return Listener;
}();

function getAU(element) {
  var au = element.au;

  if (au === undefined) {
    throw new Error('No Aurelia APIs are defined for the element: "' + element.tagName + '".');
  }

  return au;
}

var NameExpression = exports.NameExpression = function () {
  function NameExpression(sourceExpression, apiName, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.apiName = apiName;
    this.lookupFunctions = lookupFunctions;
    this.discrete = true;
  }

  NameExpression.prototype.createBinding = function createBinding(target) {
    return new NameBinder(this.sourceExpression, NameExpression.locateAPI(target, this.apiName), this.lookupFunctions);
  };

  NameExpression.locateAPI = function locateAPI(element, apiName) {
    switch (apiName) {
      case 'element':
        return element;
      case 'controller':
        return getAU(element).controller;
      case 'view-model':
        return getAU(element).controller.viewModel;
      case 'view':
        return getAU(element).controller.view;
      default:
        var target = getAU(element)[apiName];

        if (target === undefined) {
          throw new Error('Attempted to reference "' + apiName + '", but it was not found amongst the target\'s API.');
        }

        return target.viewModel;
    }
  };

  return NameExpression;
}();

var NameBinder = function () {
  function NameBinder(sourceExpression, target, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.target = target;
    this.lookupFunctions = lookupFunctions;
  }

  NameBinder.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;
    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this.sourceExpression.assign(this.source, this.target, this.lookupFunctions);
  };

  NameBinder.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.evaluate(this.source, this.lookupFunctions) === this.target) {
      this.sourceExpression.assign(this.source, null, this.lookupFunctions);
    }
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
  };

  return NameBinder;
}();

var LookupFunctions = {
  bindingBehaviors: function bindingBehaviors(name) {
    return null;
  },
  valueConverters: function valueConverters(name) {
    return null;
  }
};

var BindingEngine = exports.BindingEngine = (_temp2 = _class14 = function () {
  function BindingEngine(observerLocator, parser) {
    

    this.observerLocator = observerLocator;
    this.parser = parser;
  }

  BindingEngine.prototype.createBindingExpression = function createBindingExpression(targetProperty, sourceExpression) {
    var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : bindingMode.toView;
    var lookupFunctions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : LookupFunctions;

    return new BindingExpression(this.observerLocator, targetProperty, this.parser.parse(sourceExpression), mode, lookupFunctions);
  };

  BindingEngine.prototype.propertyObserver = function propertyObserver(obj, propertyName) {
    var _this27 = this;

    return {
      subscribe: function subscribe(callback) {
        var observer = _this27.observerLocator.getObserver(obj, propertyName);
        observer.subscribe(callback);
        return {
          dispose: function dispose() {
            return observer.unsubscribe(callback);
          }
        };
      }
    };
  };

  BindingEngine.prototype.collectionObserver = function collectionObserver(collection) {
    var _this28 = this;

    return {
      subscribe: function subscribe(callback) {
        var observer = void 0;
        if (collection instanceof Array) {
          observer = _this28.observerLocator.getArrayObserver(collection);
        } else if (collection instanceof Map) {
          observer = _this28.observerLocator.getMapObserver(collection);
        } else if (collection instanceof Set) {
          observer = _this28.observerLocator.getSetObserver(collection);
        } else {
          throw new Error('collection must be an instance of Array, Map or Set.');
        }
        observer.subscribe(callback);
        return {
          dispose: function dispose() {
            return observer.unsubscribe(callback);
          }
        };
      }
    };
  };

  BindingEngine.prototype.expressionObserver = function expressionObserver(bindingContext, expression) {
    var scope = { bindingContext: bindingContext, overrideContext: createOverrideContext(bindingContext) };
    return new ExpressionObserver(scope, this.parser.parse(expression), this.observerLocator, LookupFunctions);
  };

  BindingEngine.prototype.parseExpression = function parseExpression(expression) {
    return this.parser.parse(expression);
  };

  BindingEngine.prototype.registerAdapter = function registerAdapter(adapter) {
    this.observerLocator.addAdapter(adapter);
  };

  return BindingEngine;
}(), _class14.inject = [ObserverLocator, Parser], _temp2);


var setProto = Set.prototype;

function _getSetObserver(taskQueue, set) {
  return ModifySetObserver.for(taskQueue, set);
}

exports.getSetObserver = _getSetObserver;

var ModifySetObserver = function (_ModifyCollectionObse3) {
  _inherits(ModifySetObserver, _ModifyCollectionObse3);

  function ModifySetObserver(taskQueue, set) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse3.call(this, taskQueue, set));
  }

  ModifySetObserver.for = function _for(taskQueue, set) {
    if (!('__set_observer__' in set)) {
      Reflect.defineProperty(set, '__set_observer__', {
        value: ModifySetObserver.create(taskQueue, set),
        enumerable: false, configurable: false
      });
    }
    return set.__set_observer__;
  };

  ModifySetObserver.create = function create(taskQueue, set) {
    var observer = new ModifySetObserver(taskQueue, set);

    var proto = setProto;
    if (proto.add !== set.add || proto.delete !== set.delete || proto.clear !== set.clear) {
      proto = {
        add: set.add,
        delete: set.delete,
        clear: set.clear
      };
    }

    set.add = function () {
      var type = 'add';
      var oldSize = set.size;
      var methodCallResult = proto.add.apply(set, arguments);
      var hasValue = set.size === oldSize;
      if (!hasValue) {
        observer.addChangeRecord({
          type: type,
          object: set,
          value: Array.from(set).pop()
        });
      }
      return methodCallResult;
    };

    set.delete = function () {
      var hasValue = set.has(arguments[0]);
      var methodCallResult = proto.delete.apply(set, arguments);
      if (hasValue) {
        observer.addChangeRecord({
          type: 'delete',
          object: set,
          value: arguments[0]
        });
      }
      return methodCallResult;
    };

    set.clear = function () {
      var methodCallResult = proto.clear.apply(set, arguments);
      observer.addChangeRecord({
        type: 'clear',
        object: set
      });
      return methodCallResult;
    };

    return observer;
  };

  return ModifySetObserver;
}(ModifyCollectionObserver);

function observable(targetOrConfig, key, descriptor) {
  function deco(target, key, descriptor, config) {
    var isClassDecorator = key === undefined;
    if (isClassDecorator) {
      target = target.prototype;
      key = typeof config === 'string' ? config : config.name;
    }

    var innerPropertyName = '_' + key;
    var innerPropertyDescriptor = {
      configurable: true,
      enumerable: false,
      writable: true
    };

    var callbackName = config && config.changeHandler || key + 'Changed';

    if (descriptor) {
      if (typeof descriptor.initializer === 'function') {
        innerPropertyDescriptor.value = descriptor.initializer();
      }
    } else {
      descriptor = {};
    }

    if (!('enumerable' in descriptor)) {
      descriptor.enumerable = true;
    }

    delete descriptor.value;
    delete descriptor.writable;
    delete descriptor.initializer;

    Reflect.defineProperty(target, innerPropertyName, innerPropertyDescriptor);

    descriptor.get = function () {
      return this[innerPropertyName];
    };
    descriptor.set = function (newValue) {
      var oldValue = this[innerPropertyName];
      if (newValue === oldValue) {
        return;
      }

      this[innerPropertyName] = newValue;
      Reflect.defineProperty(this, innerPropertyName, { enumerable: false });

      if (this[callbackName]) {
        this[callbackName](newValue, oldValue, key);
      }
    };

    descriptor.get.dependencies = [innerPropertyName];

    if (isClassDecorator) {
      Reflect.defineProperty(target, key, descriptor);
    } else {
      return descriptor;
    }
  }

  if (key === undefined) {
    return function (t, k, d) {
      return deco(t, k, d, targetOrConfig);
    };
  }
  return deco(targetOrConfig, key, descriptor);
}

var signals = {};

function connectBindingToSignal(binding, name) {
  if (!signals.hasOwnProperty(name)) {
    signals[name] = 0;
  }
  binding.observeProperty(signals, name);
}

function signalBindings(name) {
  if (signals.hasOwnProperty(name)) {
    signals[name]++;
  }
}
});
;
define('aurelia-bootstrapper/dist/commonjs/aurelia-bootstrapper',['require','exports','module','aurelia-polyfills','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.starting = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.bootstrap = bootstrap;

require('aurelia-polyfills');

var _aureliaPal = require('aurelia-pal');

var bootstrapPromises = [];
var startResolve = void 0;

var startPromise = new Promise(function (resolve) {
  return startResolve = resolve;
});
var host = _aureliaPal.PLATFORM.global;
var isNodeLike = typeof process !== 'undefined' && !process.browser;

function ready() {
  if (!host.document || host.document.readyState === 'complete') {
    return Promise.resolve();
  }

  return new Promise(function (resolve) {
    host.document.addEventListener('DOMContentLoaded', completed);
    host.addEventListener('load', completed);

    function completed() {
      host.document.removeEventListener('DOMContentLoaded', completed);
      host.removeEventListener('load', completed);
      resolve();
    }
  });
}

function createLoader() {
  if (_aureliaPal.PLATFORM.Loader) {
    return Promise.resolve(new _aureliaPal.PLATFORM.Loader());
  }

  if (typeof AURELIA_WEBPACK_2_0 === 'undefined') {
    if (typeof __webpack_require__ !== 'undefined') {
      var m = __webpack_require__(require.resolve('aurelia-loader-webpack'));
      return Promise.resolve(new m.WebpackLoader());
    }

    if (host.System && typeof host.System.config === 'function') {
      return host.System.normalize('aurelia-bootstrapper').then(function (bsn) {
        return host.System.normalize('aurelia-loader-default', bsn);
      }).then(function (loaderName) {
        return host.System.import(loaderName).then(function (m) {
          return new m.DefaultLoader();
        });
      });
    }

    if (typeof host.require === 'function' && typeof host.define === 'function' && _typeof(host.define.amd) === 'object') {
      return new Promise(function (resolve, reject) {
        return host.require(['aurelia-loader-default'], function (m) {
          return resolve(new m.DefaultLoader());
        }, reject);
      });
    }

    if (isNodeLike && typeof module !== 'undefined' && typeof module.require !== 'undefined') {
      var _m = module.require('aurelia-loader-nodejs');
      return Promise.resolve(new _m.NodeJsLoader());
    }
  }

  return Promise.reject('No PLATFORM.Loader is defined and there is neither a System API (ES6) or a Require API (AMD) globally available to load your app.');
}

function initializePal(loader) {
  if (_aureliaPal.isInitialized) return Promise.resolve();

  var type = void 0;

  var isRenderer = isNodeLike && (process.type === 'renderer' || process.versions['node-webkit']);

  if (isNodeLike && !isRenderer) {
    type = 'nodejs';
  } else if (typeof window !== 'undefined') {
    type = 'browser';
  } else if (typeof self !== 'undefined') {
    type = 'worker';
  } else {
    throw new Error('Could not determine platform implementation to load.');
  }

  return loader.loadModule('aurelia-pal-' + type).then(function (palModule) {
    return type === 'nodejs' && !_aureliaPal.isInitialized && palModule.globalize() || palModule.initialize();
  });
}

function preparePlatform(loader) {
  var map = function map(moduleId, relativeTo) {
    return loader.normalize(moduleId, relativeTo).then(function (normalized) {
      loader.map(moduleId, normalized);
      return normalized;
    });
  };

  return initializePal(loader).then(function () {
    return loader.normalize('aurelia-bootstrapper');
  }).then(function (bootstrapperName) {
    var frameworkPromise = map(_aureliaPal.PLATFORM.moduleName('aurelia-framework', { exports: ['Aurelia'] }), bootstrapperName);

    return Promise.all([frameworkPromise, frameworkPromise.then(function (frameworkName) {
      return map('aurelia-dependency-injection', frameworkName);
    }), map('aurelia-router', bootstrapperName), map('aurelia-logging-console', bootstrapperName)]);
  }).then(function (_ref) {
    var frameworkName = _ref[0];
    return loader.loadModule(frameworkName);
  }).then(function (fx) {
    return startResolve(function () {
      return new fx.Aurelia(loader);
    });
  });
}

function config(appHost, configModuleId, aurelia) {
  aurelia.host = appHost;
  aurelia.configModuleId = configModuleId || null;

  if (configModuleId) {
    return aurelia.loader.loadModule(configModuleId).then(function (customConfig) {
      if (!customConfig.configure) {
        throw new Error('Cannot initialize module \'' + configModuleId + '\' without a configure function.');
      }

      return customConfig.configure(aurelia);
    });
  }

  aurelia.use.standardConfiguration().developmentLogging();

  return aurelia.start().then(function () {
    return aurelia.setRoot();
  });
}

function run() {
  return ready().then(createLoader).then(preparePlatform).then(function () {
    var appHosts = host.document.querySelectorAll('[aurelia-app],[data-aurelia-app]');
    for (var i = 0, ii = appHosts.length; i < ii; ++i) {
      var appHost = appHosts[i];
      var moduleId = appHost.getAttribute('aurelia-app') || appHost.getAttribute('data-aurelia-app');
      bootstrap(config.bind(null, appHost, moduleId));
    }

    var toConsole = console.error.bind(console);
    var bootstraps = bootstrapPromises.map(function (p) {
      return p.catch(toConsole);
    });
    bootstrapPromises = null;
    return Promise.all(bootstraps);
  });
}

function bootstrap(configure) {
  var p = startPromise.then(function (factory) {
    return configure(factory());
  });
  if (bootstrapPromises) bootstrapPromises.push(p);
  return p;
}

var starting = exports.starting = run();
});
;
define('aurelia-dependency-injection/dist/commonjs/aurelia-dependency-injection',['require','exports','module','aurelia-metadata','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aureliaMetadata = require('aurelia-metadata');
var aureliaPal = require('aurelia-pal');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function isInjectable(potentialTarget) {
    return !!potentialTarget;
}
function autoinject(potentialTarget) {
    var deco = function (target) {
        if (!target.hasOwnProperty('inject')) {
            target.inject = (aureliaMetadata.metadata.getOwn(aureliaMetadata.metadata.paramTypes, target) ||
                _emptyParameters).slice();
            if (target.inject && target.inject.length > 0) {
                if (target.inject[target.inject.length - 1] === Object) {
                    target.inject.splice(-1, 1);
                }
            }
        }
    };
    if (isInjectable(potentialTarget)) {
        return deco(potentialTarget);
    }
    return deco;
}
function inject() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return function (target, _key, descriptor) {
        if (typeof descriptor === 'number') {
            autoinject(target);
            if (rest.length === 1) {
                target.inject[descriptor] = rest[0];
            }
            return;
        }
        if (descriptor) {
            var fn = descriptor.value;
            fn.inject = rest;
        }
        else {
            target.inject = rest;
        }
    };
}

var resolver = aureliaMetadata.protocol.create('aurelia:resolver', function (target) {
    if (!(typeof target.get === 'function')) {
        return 'Resolvers must implement: get(container: Container, key: any): any';
    }
    return true;
});
(function (Strategy) {
    Strategy[Strategy["instance"] = 0] = "instance";
    Strategy[Strategy["singleton"] = 1] = "singleton";
    Strategy[Strategy["transient"] = 2] = "transient";
    Strategy[Strategy["function"] = 3] = "function";
    Strategy[Strategy["array"] = 4] = "array";
    Strategy[Strategy["alias"] = 5] = "alias";
})(exports.Strategy || (exports.Strategy = {}));
function isStrategy(actual, expected, state) {
    return actual === expected;
}
var StrategyResolver = (function () {
    function StrategyResolver(strategy, state) {
        this.strategy = strategy;
        this.state = state;
    }
    StrategyResolver.prototype.get = function (container, key) {
        if (isStrategy(this.strategy, exports.Strategy.instance, this.state)) {
            return this.state;
        }
        if (isStrategy(this.strategy, exports.Strategy.singleton, this.state)) {
            var singleton = container.invoke(this.state);
            this.state = singleton;
            this.strategy = 0;
            return singleton;
        }
        if (isStrategy(this.strategy, exports.Strategy.transient, this.state)) {
            return container.invoke(this.state);
        }
        if (isStrategy(this.strategy, exports.Strategy.function, this.state)) {
            return this.state(container, key, this);
        }
        if (isStrategy(this.strategy, exports.Strategy.array, this.state)) {
            return this.state[0].get(container, key);
        }
        if (isStrategy(this.strategy, exports.Strategy.alias, this.state)) {
            return container.get(this.state);
        }
        throw new Error('Invalid strategy: ' + this.strategy);
    };
    StrategyResolver = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Number, Object])
    ], StrategyResolver);
    return StrategyResolver;
}());
var Lazy = (function () {
    function Lazy(key) {
        this._key = key;
    }
    Lazy_1 = Lazy;
    Lazy.prototype.get = function (container) {
        var _this = this;
        return function () { return container.get(_this._key); };
    };
    Lazy.of = function (key) {
        return new Lazy_1(key);
    };
    var Lazy_1;
    Lazy = Lazy_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Lazy);
    return Lazy;
}());
var All = (function () {
    function All(key) {
        this._key = key;
    }
    All_1 = All;
    All.prototype.get = function (container) {
        return container.getAll(this._key);
    };
    All.of = function (key) {
        return new All_1(key);
    };
    var All_1;
    All = All_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], All);
    return All;
}());
var Optional = (function () {
    function Optional(key, checkParent) {
        if (checkParent === void 0) { checkParent = true; }
        this._key = key;
        this._checkParent = checkParent;
    }
    Optional_1 = Optional;
    Optional.prototype.get = function (container) {
        if (container.hasResolver(this._key, this._checkParent)) {
            return container.get(this._key);
        }
        return null;
    };
    Optional.of = function (key, checkParent) {
        if (checkParent === void 0) { checkParent = true; }
        return new Optional_1(key, checkParent);
    };
    var Optional_1;
    Optional = Optional_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object, Boolean])
    ], Optional);
    return Optional;
}());
var Parent = (function () {
    function Parent(key) {
        this._key = key;
    }
    Parent_1 = Parent;
    Parent.prototype.get = function (container) {
        return container.parent ? container.parent.get(this._key) : null;
    };
    Parent.of = function (key) {
        return new Parent_1(key);
    };
    var Parent_1;
    Parent = Parent_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Parent);
    return Parent;
}());
var Factory = (function () {
    function Factory(key) {
        this._key = key;
    }
    Factory_1 = Factory;
    Factory.prototype.get = function (container) {
        var fn = this._key;
        var resolver = container.getResolver(fn);
        if (resolver && resolver.strategy === exports.Strategy.function) {
            fn = resolver.state;
        }
        return function () {
            var rest = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                rest[_i] = arguments[_i];
            }
            return container.invoke(fn, rest);
        };
    };
    Factory.of = function (key) {
        return new Factory_1(key);
    };
    var Factory_1;
    Factory = Factory_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Factory);
    return Factory;
}());
var NewInstance = (function () {
    function NewInstance(key) {
        var dynamicDependencies = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            dynamicDependencies[_i - 1] = arguments[_i];
        }
        this.key = key;
        this.asKey = key;
        this.dynamicDependencies = dynamicDependencies;
    }
    NewInstance_1 = NewInstance;
    NewInstance.prototype.get = function (container) {
        var dynamicDependencies = this.dynamicDependencies.length > 0
            ? this.dynamicDependencies.map(function (dependency) {
                return dependency['protocol:aurelia:resolver']
                    ? dependency.get(container)
                    : container.get(dependency);
            })
            : undefined;
        var fn = this.key;
        var resolver = container.getResolver(fn);
        if (resolver && resolver.strategy === 3) {
            fn = resolver.state;
        }
        var instance = container.invoke(fn, dynamicDependencies);
        container.registerInstance(this.asKey, instance);
        return instance;
    };
    NewInstance.prototype.as = function (key) {
        this.asKey = key;
        return this;
    };
    NewInstance.of = function (key) {
        var dynamicDependencies = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            dynamicDependencies[_i - 1] = arguments[_i];
        }
        return new (NewInstance_1.bind.apply(NewInstance_1, [void 0, key].concat(dynamicDependencies)))();
    };
    var NewInstance_1;
    NewInstance = NewInstance_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object, Object])
    ], NewInstance);
    return NewInstance;
}());
function getDecoratorDependencies(target) {
    autoinject(target);
    return target.inject;
}
function lazy(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = Lazy.of(keyValue);
    };
}
function all(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = All.of(keyValue);
    };
}
function optional(checkParentOrTarget) {
    if (checkParentOrTarget === void 0) { checkParentOrTarget = true; }
    var deco = function (checkParent) {
        return function (target, _key, index) {
            var inject$$1 = getDecoratorDependencies(target);
            inject$$1[index] = Optional.of(inject$$1[index], checkParent);
        };
    };
    if (typeof checkParentOrTarget === 'boolean') {
        return deco(checkParentOrTarget);
    }
    return deco(true);
}
function parent(target, _key, index) {
    var inject$$1 = getDecoratorDependencies(target);
    inject$$1[index] = Parent.of(inject$$1[index]);
}
function factory(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = Factory.of(keyValue);
    };
}
function newInstance(asKeyOrTarget) {
    var dynamicDependencies = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        dynamicDependencies[_i - 1] = arguments[_i];
    }
    var deco = function (asKey) {
        return function (target, _key, index) {
            var inject$$1 = getDecoratorDependencies(target);
            inject$$1[index] = NewInstance.of.apply(NewInstance, [inject$$1[index]].concat(dynamicDependencies));
            if (!!asKey) {
                inject$$1[index].as(asKey);
            }
        };
    };
    if (arguments.length >= 1) {
        return deco(asKeyOrTarget);
    }
    return deco();
}

function validateKey(key) {
    if (key === null || key === undefined) {
        throw new Error('key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?');
    }
}
var _emptyParameters = Object.freeze([]);
aureliaMetadata.metadata.registration = 'aurelia:registration';
aureliaMetadata.metadata.invoker = 'aurelia:invoker';
var resolverDecorates = resolver.decorates;
var InvocationHandler = (function () {
    function InvocationHandler(fn, invoker, dependencies) {
        this.fn = fn;
        this.invoker = invoker;
        this.dependencies = dependencies;
    }
    InvocationHandler.prototype.invoke = function (container, dynamicDependencies) {
        return dynamicDependencies !== undefined
            ? this.invoker.invokeWithDynamicDependencies(container, this.fn, this.dependencies, dynamicDependencies)
            : this.invoker.invoke(container, this.fn, this.dependencies);
    };
    return InvocationHandler;
}());
function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
    var i = staticDependencies.length;
    var args = new Array(i);
    var lookup;
    while (i--) {
        lookup = staticDependencies[i];
        if (lookup === null || lookup === undefined) {
            throw new Error('Constructor Parameter with index ' +
                i +
                ' cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?');
        }
        else {
            args[i] = container.get(lookup);
        }
    }
    if (dynamicDependencies !== undefined) {
        args = args.concat(dynamicDependencies);
    }
    return Reflect.construct(fn, args);
}
var classInvoker = {
    invoke: function (container, Type, deps) {
        var instances = deps.map(function (dep) { return container.get(dep); });
        return Reflect.construct(Type, instances);
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
};
function getDependencies(f) {
    if (!f.hasOwnProperty('inject')) {
        return [];
    }
    if (typeof f.inject === 'function') {
        return f.inject();
    }
    return f.inject;
}
var Container = (function () {
    function Container(configuration) {
        if (configuration === undefined) {
            configuration = {};
        }
        this._configuration = configuration;
        this._onHandlerCreated = configuration.onHandlerCreated;
        this._handlers =
            configuration.handlers || (configuration.handlers = new Map());
        this._resolvers = new Map();
        this.root = this;
        this.parent = null;
    }
    Container.prototype.makeGlobal = function () {
        Container.instance = this;
        return this;
    };
    Container.prototype.setHandlerCreatedCallback = function (onHandlerCreated) {
        this._onHandlerCreated = onHandlerCreated;
        this._configuration.onHandlerCreated = onHandlerCreated;
    };
    Container.prototype.registerInstance = function (key, instance) {
        return this.registerResolver(key, new StrategyResolver(0, instance === undefined ? key : instance));
    };
    Container.prototype.registerSingleton = function (key, fn) {
        return this.registerResolver(key, new StrategyResolver(1, fn === undefined ? key : fn));
    };
    Container.prototype.registerTransient = function (key, fn) {
        return this.registerResolver(key, new StrategyResolver(2, fn === undefined ? key : fn));
    };
    Container.prototype.registerHandler = function (key, handler) {
        return this.registerResolver(key, new StrategyResolver(3, handler));
    };
    Container.prototype.registerAlias = function (originalKey, aliasKey) {
        return this.registerResolver(aliasKey, new StrategyResolver(5, originalKey));
    };
    Container.prototype.registerResolver = function (key, resolver$$1) {
        validateKey(key);
        var allResolvers = this._resolvers;
        var result = allResolvers.get(key);
        if (result === undefined) {
            allResolvers.set(key, resolver$$1);
        }
        else if (result.strategy === 4) {
            result.state.push(resolver$$1);
        }
        else {
            allResolvers.set(key, new StrategyResolver(4, [result, resolver$$1]));
        }
        return resolver$$1;
    };
    Container.prototype.autoRegister = function (key, fn) {
        fn = fn === undefined ? key : fn;
        if (typeof fn === 'function') {
            var registration = aureliaMetadata.metadata.get(aureliaMetadata.metadata.registration, fn);
            if (registration === undefined) {
                return this.registerResolver(key, new StrategyResolver(1, fn));
            }
            return registration.registerResolver(this, key, fn);
        }
        return this.registerResolver(key, new StrategyResolver(0, fn));
    };
    Container.prototype.autoRegisterAll = function (fns) {
        var i = fns.length;
        while (i--) {
            this.autoRegister(fns[i]);
        }
    };
    Container.prototype.unregister = function (key) {
        this._resolvers.delete(key);
    };
    Container.prototype.hasResolver = function (key, checkParent) {
        if (checkParent === void 0) { checkParent = false; }
        validateKey(key);
        return (this._resolvers.has(key) ||
            (checkParent &&
                this.parent !== null &&
                this.parent.hasResolver(key, checkParent)));
    };
    Container.prototype.getResolver = function (key) {
        return this._resolvers.get(key);
    };
    Container.prototype.get = function (key) {
        validateKey(key);
        if (key === Container) {
            return this;
        }
        if (resolverDecorates(key)) {
            return key.get(this, key);
        }
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return this.autoRegister(key).get(this, key);
            }
            var registration = aureliaMetadata.metadata.get(aureliaMetadata.metadata.registration, key);
            if (registration === undefined) {
                return this.parent._get(key);
            }
            return registration.registerResolver(this, key, key).get(this, key);
        }
        return resolver$$1.get(this, key);
    };
    Container.prototype._get = function (key) {
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return this.autoRegister(key).get(this, key);
            }
            return this.parent._get(key);
        }
        return resolver$$1.get(this, key);
    };
    Container.prototype.getAll = function (key) {
        validateKey(key);
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return _emptyParameters;
            }
            return this.parent.getAll(key);
        }
        if (resolver$$1.strategy === 4) {
            var state = resolver$$1.state;
            var i = state.length;
            var results = new Array(i);
            while (i--) {
                results[i] = state[i].get(this, key);
            }
            return results;
        }
        return [resolver$$1.get(this, key)];
    };
    Container.prototype.createChild = function () {
        var child = new Container(this._configuration);
        child.root = this.root;
        child.parent = this;
        return child;
    };
    Container.prototype.invoke = function (fn, dynamicDependencies) {
        try {
            var handler = this._handlers.get(fn);
            if (handler === undefined) {
                handler = this._createInvocationHandler(fn);
                this._handlers.set(fn, handler);
            }
            return handler.invoke(this, dynamicDependencies);
        }
        catch (e) {
            throw new aureliaPal.AggregateError("Error invoking " + fn.name + ". Check the inner error for details.", e, true);
        }
    };
    Container.prototype._createInvocationHandler = function (fn) {
        var dependencies;
        if (fn.inject === undefined) {
            dependencies =
                aureliaMetadata.metadata.getOwn(aureliaMetadata.metadata.paramTypes, fn) || _emptyParameters;
        }
        else {
            dependencies = [];
            var ctor = fn;
            while (typeof ctor === 'function') {
                dependencies.push.apply(dependencies, getDependencies(ctor));
                ctor = Object.getPrototypeOf(ctor);
            }
        }
        var invoker = aureliaMetadata.metadata.getOwn(aureliaMetadata.metadata.invoker, fn) || classInvoker;
        var handler = new InvocationHandler(fn, invoker, dependencies);
        return this._onHandlerCreated !== undefined
            ? this._onHandlerCreated(handler)
            : handler;
    };
    return Container;
}());

function invoker(value) {
    return function (target) {
        aureliaMetadata.metadata.define(aureliaMetadata.metadata.invoker, value, target);
    };
}
function invokeAsFactory(potentialTarget) {
    var deco = function (target) {
        aureliaMetadata.metadata.define(aureliaMetadata.metadata.invoker, FactoryInvoker.instance, target);
    };
    return potentialTarget ? deco(potentialTarget) : deco;
}
var FactoryInvoker = (function () {
    function FactoryInvoker() {
    }
    FactoryInvoker.prototype.invoke = function (container, fn, dependencies) {
        var i = dependencies.length;
        var args = new Array(i);
        while (i--) {
            args[i] = container.get(dependencies[i]);
        }
        return fn.apply(undefined, args);
    };
    FactoryInvoker.prototype.invokeWithDynamicDependencies = function (container, fn, staticDependencies, dynamicDependencies) {
        var i = staticDependencies.length;
        var args = new Array(i);
        while (i--) {
            args[i] = container.get(staticDependencies[i]);
        }
        if (dynamicDependencies !== undefined) {
            args = args.concat(dynamicDependencies);
        }
        return fn.apply(undefined, args);
    };
    return FactoryInvoker;
}());
FactoryInvoker.instance = new FactoryInvoker();

function registration(value) {
    return function (target) {
        aureliaMetadata.metadata.define(aureliaMetadata.metadata.registration, value, target);
    };
}
function transient(key) {
    return registration(new TransientRegistration(key));
}
function singleton(keyOrRegisterInChild, registerInChild) {
    if (registerInChild === void 0) { registerInChild = false; }
    return registration(new SingletonRegistration(keyOrRegisterInChild, registerInChild));
}
var TransientRegistration = (function () {
    function TransientRegistration(key) {
        this._key = key;
    }
    TransientRegistration.prototype.registerResolver = function (container, key, fn) {
        var existingResolver = container.getResolver(this._key || key);
        return existingResolver === undefined
            ? container.registerTransient((this._key || key), fn)
            : existingResolver;
    };
    return TransientRegistration;
}());
var SingletonRegistration = (function () {
    function SingletonRegistration(keyOrRegisterInChild, registerInChild) {
        if (registerInChild === void 0) { registerInChild = false; }
        if (typeof keyOrRegisterInChild === 'boolean') {
            this._registerInChild = keyOrRegisterInChild;
        }
        else {
            this._key = keyOrRegisterInChild;
            this._registerInChild = registerInChild;
        }
    }
    SingletonRegistration.prototype.registerResolver = function (container, key, fn) {
        var targetContainer = this._registerInChild ? container : container.root;
        var existingResolver = targetContainer.getResolver(this._key || key);
        return existingResolver === undefined
            ? targetContainer.registerSingleton(this._key || key, fn)
            : existingResolver;
    };
    return SingletonRegistration;
}());

exports._emptyParameters = _emptyParameters;
exports.InvocationHandler = InvocationHandler;
exports.Container = Container;
exports.autoinject = autoinject;
exports.inject = inject;
exports.invoker = invoker;
exports.invokeAsFactory = invokeAsFactory;
exports.FactoryInvoker = FactoryInvoker;
exports.registration = registration;
exports.transient = transient;
exports.singleton = singleton;
exports.TransientRegistration = TransientRegistration;
exports.SingletonRegistration = SingletonRegistration;
exports.resolver = resolver;
exports.StrategyResolver = StrategyResolver;
exports.Lazy = Lazy;
exports.All = All;
exports.Optional = Optional;
exports.Parent = Parent;
exports.Factory = Factory;
exports.NewInstance = NewInstance;
exports.getDecoratorDependencies = getDecoratorDependencies;
exports.lazy = lazy;
exports.all = all;
exports.optional = optional;
exports.parent = parent;
exports.factory = factory;
exports.newInstance = newInstance;

});
;
define('aurelia-event-aggregator/dist/commonjs/aurelia-event-aggregator',['require','exports','module','aurelia-logging'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventAggregator = undefined;
exports.includeEventsIn = includeEventsIn;
exports.configure = configure;

var _aureliaLogging = require('aurelia-logging');

var LogManager = _interopRequireWildcard(_aureliaLogging);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }



var logger = LogManager.getLogger('event-aggregator');

var Handler = function () {
  function Handler(messageType, callback) {
    

    this.messageType = messageType;
    this.callback = callback;
  }

  Handler.prototype.handle = function handle(message) {
    if (message instanceof this.messageType) {
      this.callback.call(null, message);
    }
  };

  return Handler;
}();

function invokeCallback(callback, data, event) {
  try {
    callback(data, event);
  } catch (e) {
    logger.error(e);
  }
}

function invokeHandler(handler, data) {
  try {
    handler.handle(data);
  } catch (e) {
    logger.error(e);
  }
}

var EventAggregator = exports.EventAggregator = function () {
  function EventAggregator() {
    

    this.eventLookup = {};
    this.messageHandlers = [];
  }

  EventAggregator.prototype.publish = function publish(event, data) {
    var subscribers = void 0;
    var i = void 0;

    if (!event) {
      throw new Error('Event was invalid.');
    }

    if (typeof event === 'string') {
      subscribers = this.eventLookup[event];
      if (subscribers) {
        subscribers = subscribers.slice();
        i = subscribers.length;

        while (i--) {
          invokeCallback(subscribers[i], data, event);
        }
      }
    } else {
      subscribers = this.messageHandlers.slice();
      i = subscribers.length;

      while (i--) {
        invokeHandler(subscribers[i], event);
      }
    }
  };

  EventAggregator.prototype.subscribe = function subscribe(event, callback) {
    var handler = void 0;
    var subscribers = void 0;

    if (!event) {
      throw new Error('Event channel/type was invalid.');
    }

    if (typeof event === 'string') {
      handler = callback;
      subscribers = this.eventLookup[event] || (this.eventLookup[event] = []);
    } else {
      handler = new Handler(event, callback);
      subscribers = this.messageHandlers;
    }

    subscribers.push(handler);

    return {
      dispose: function dispose() {
        var idx = subscribers.indexOf(handler);
        if (idx !== -1) {
          subscribers.splice(idx, 1);
        }
      }
    };
  };

  EventAggregator.prototype.subscribeOnce = function subscribeOnce(event, callback) {
    var sub = this.subscribe(event, function (a, b) {
      sub.dispose();
      return callback(a, b);
    });

    return sub;
  };

  return EventAggregator;
}();

function includeEventsIn(obj) {
  var ea = new EventAggregator();

  obj.subscribeOnce = function (event, callback) {
    return ea.subscribeOnce(event, callback);
  };

  obj.subscribe = function (event, callback) {
    return ea.subscribe(event, callback);
  };

  obj.publish = function (event, data) {
    ea.publish(event, data);
  };

  return ea;
}

function configure(config) {
  config.instance(EventAggregator, includeEventsIn(config.aurelia));
}
});
;
define('aurelia-framework/dist/commonjs/aurelia-framework',['require','exports','module','aurelia-dependency-injection','aurelia-binding','aurelia-metadata','aurelia-templating','aurelia-loader','aurelia-task-queue','aurelia-path','aurelia-pal','aurelia-logging'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogManager = exports.FrameworkConfiguration = exports.Aurelia = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _aureliaDependencyInjection = require('aurelia-dependency-injection');

Object.keys(_aureliaDependencyInjection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaDependencyInjection[key];
    }
  });
});

var _aureliaBinding = require('aurelia-binding');

Object.keys(_aureliaBinding).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaBinding[key];
    }
  });
});

var _aureliaMetadata = require('aurelia-metadata');

Object.keys(_aureliaMetadata).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaMetadata[key];
    }
  });
});

var _aureliaTemplating = require('aurelia-templating');

Object.keys(_aureliaTemplating).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaTemplating[key];
    }
  });
});

var _aureliaLoader = require('aurelia-loader');

Object.keys(_aureliaLoader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaLoader[key];
    }
  });
});

var _aureliaTaskQueue = require('aurelia-task-queue');

Object.keys(_aureliaTaskQueue).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaTaskQueue[key];
    }
  });
});

var _aureliaPath = require('aurelia-path');

Object.keys(_aureliaPath).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaPath[key];
    }
  });
});

var _aureliaPal = require('aurelia-pal');

Object.keys(_aureliaPal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _aureliaPal[key];
    }
  });
});

var _aureliaLogging = require('aurelia-logging');

var TheLogManager = _interopRequireWildcard(_aureliaLogging);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }



function preventActionlessFormSubmit() {
  _aureliaPal.DOM.addEventListener('submit', function (evt) {
    var target = evt.target;
    var action = target.action;

    if (target.tagName.toLowerCase() === 'form' && !action) {
      evt.preventDefault();
    }
  });
}

var Aurelia = exports.Aurelia = function () {
  function Aurelia(loader, container, resources) {
    

    this.loader = loader || new _aureliaPal.PLATFORM.Loader();
    this.container = container || new _aureliaDependencyInjection.Container().makeGlobal();
    this.resources = resources || new _aureliaTemplating.ViewResources();
    this.use = new FrameworkConfiguration(this);
    this.logger = TheLogManager.getLogger('aurelia');
    this.hostConfigured = false;
    this.host = null;

    this.use.instance(Aurelia, this);
    this.use.instance(_aureliaLoader.Loader, this.loader);
    this.use.instance(_aureliaTemplating.ViewResources, this.resources);
  }

  Aurelia.prototype.start = function start() {
    var _this = this;

    if (this._started) {
      return this._started;
    }

    this.logger.info('Aurelia Starting');
    return this._started = this.use.apply().then(function () {
      preventActionlessFormSubmit();

      if (!_this.container.hasResolver(_aureliaTemplating.BindingLanguage)) {
        var message = 'You must configure Aurelia with a BindingLanguage implementation.';
        _this.logger.error(message);
        throw new Error(message);
      }

      _this.logger.info('Aurelia Started');
      var evt = _aureliaPal.DOM.createCustomEvent('aurelia-started', { bubbles: true, cancelable: true });
      _aureliaPal.DOM.dispatchEvent(evt);
      return _this;
    });
  };

  Aurelia.prototype.enhance = function enhance() {
    var _this2 = this;

    var bindingContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var applicationHost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    this._configureHost(applicationHost || _aureliaPal.DOM.querySelectorAll('body')[0]);

    return new Promise(function (resolve) {
      var engine = _this2.container.get(_aureliaTemplating.TemplatingEngine);
      _this2.root = engine.enhance({ container: _this2.container, element: _this2.host, resources: _this2.resources, bindingContext: bindingContext });
      _this2.root.attached();
      _this2._onAureliaComposed();
      resolve(_this2);
    });
  };

  Aurelia.prototype.setRoot = function setRoot() {
    var _this3 = this;

    var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var applicationHost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var instruction = {};

    if (this.root && this.root.viewModel && this.root.viewModel.router) {
      this.root.viewModel.router.deactivate();
      this.root.viewModel.router.reset();
    }

    this._configureHost(applicationHost);

    var engine = this.container.get(_aureliaTemplating.TemplatingEngine);
    var transaction = this.container.get(_aureliaTemplating.CompositionTransaction);
    delete transaction.initialComposition;

    if (!root) {
      if (this.configModuleId) {
        root = (0, _aureliaPath.relativeToFile)('./app', this.configModuleId);
      } else {
        root = 'app';
      }
    }

    instruction.viewModel = root;
    instruction.container = instruction.childContainer = this.container;
    instruction.viewSlot = this.hostSlot;
    instruction.host = this.host;

    return engine.compose(instruction).then(function (r) {
      _this3.root = r;
      instruction.viewSlot.attached();
      _this3._onAureliaComposed();
      return _this3;
    });
  };

  Aurelia.prototype._configureHost = function _configureHost(applicationHost) {
    if (this.hostConfigured) {
      return;
    }
    applicationHost = applicationHost || this.host;

    if (!applicationHost || typeof applicationHost === 'string') {
      this.host = _aureliaPal.DOM.getElementById(applicationHost || 'applicationHost');
    } else {
      this.host = applicationHost;
    }

    if (!this.host) {
      throw new Error('No applicationHost was specified.');
    }

    this.hostConfigured = true;
    this.host.aurelia = this;
    this.hostSlot = new _aureliaTemplating.ViewSlot(this.host, true);
    this.hostSlot.transformChildNodesIntoView();
    this.container.registerInstance(_aureliaPal.DOM.boundary, this.host);
  };

  Aurelia.prototype._onAureliaComposed = function _onAureliaComposed() {
    var evt = _aureliaPal.DOM.createCustomEvent('aurelia-composed', { bubbles: true, cancelable: true });
    setTimeout(function () {
      return _aureliaPal.DOM.dispatchEvent(evt);
    }, 1);
  };

  return Aurelia;
}();

var logger = TheLogManager.getLogger('aurelia');
var extPattern = /\.[^/.]+$/;

function runTasks(config, tasks) {
  var current = void 0;
  var next = function next() {
    current = tasks.shift();
    if (current) {
      return Promise.resolve(current(config)).then(next);
    }

    return Promise.resolve();
  };

  return next();
}

function loadPlugin(fwConfig, loader, info) {
  logger.debug('Loading plugin ' + info.moduleId + '.');
  if (typeof info.moduleId === 'string') {
    fwConfig.resourcesRelativeTo = info.resourcesRelativeTo;

    var id = info.moduleId;

    if (info.resourcesRelativeTo.length > 1) {
      return loader.normalize(info.moduleId, info.resourcesRelativeTo[1]).then(function (normalizedId) {
        return _loadPlugin(normalizedId);
      });
    }

    return _loadPlugin(id);
  } else if (typeof info.configure === 'function') {
    if (fwConfig.configuredPlugins.indexOf(info.configure) !== -1) {
      return Promise.resolve();
    }
    fwConfig.configuredPlugins.push(info.configure);

    return Promise.resolve(info.configure.call(null, fwConfig, info.config || {}));
  }
  throw new Error(invalidConfigMsg(info.moduleId || info.configure, 'plugin'));

  function _loadPlugin(moduleId) {
    return loader.loadModule(moduleId).then(function (m) {
      if ('configure' in m) {
        if (fwConfig.configuredPlugins.indexOf(m.configure) !== -1) {
          return Promise.resolve();
        }
        return Promise.resolve(m.configure(fwConfig, info.config || {})).then(function () {
          fwConfig.configuredPlugins.push(m.configure);
          fwConfig.resourcesRelativeTo = null;
          logger.debug('Configured plugin ' + info.moduleId + '.');
        });
      }

      fwConfig.resourcesRelativeTo = null;
      logger.debug('Loaded plugin ' + info.moduleId + '.');
    });
  }
}

function loadResources(aurelia, resourcesToLoad, appResources) {
  if (Object.keys(resourcesToLoad).length === 0) {
    return Promise.resolve();
  }
  var viewEngine = aurelia.container.get(_aureliaTemplating.ViewEngine);

  return Promise.all(Object.keys(resourcesToLoad).map(function (n) {
    return _normalize(resourcesToLoad[n]);
  })).then(function (loads) {
    var names = [];
    var importIds = [];

    loads.forEach(function (l) {
      names.push(undefined);
      importIds.push(l.importId);
    });

    return viewEngine.importViewResources(importIds, names, appResources);
  });

  function _normalize(load) {
    var moduleId = load.moduleId;
    var ext = getExt(moduleId);

    if (isOtherResource(moduleId)) {
      moduleId = removeExt(moduleId);
    }

    return aurelia.loader.normalize(moduleId, load.relativeTo).then(function (normalized) {
      return {
        name: load.moduleId,
        importId: isOtherResource(load.moduleId) ? addOriginalExt(normalized, ext) : normalized
      };
    });
  }

  function isOtherResource(name) {
    var ext = getExt(name);
    if (!ext) return false;
    if (ext === '') return false;
    if (ext === '.js' || ext === '.ts') return false;
    return true;
  }

  function removeExt(name) {
    return name.replace(extPattern, '');
  }

  function addOriginalExt(normalized, ext) {
    return removeExt(normalized) + '.' + ext;
  }
}

function getExt(name) {
  var match = name.match(extPattern);
  if (match && match.length > 0) {
    return match[0].split('.')[1];
  }
}

function loadBehaviors(config) {
  return Promise.all(config.behaviorsToLoad.map(function (m) {
    return m.load(config.container, m.target);
  })).then(function () {
    config.behaviorsToLoad = null;
  });
}

function assertProcessed(plugins) {
  if (plugins.processed) {
    throw new Error('This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.');
  }
}

function invalidConfigMsg(cfg, type) {
  return 'Invalid ' + type + ' [' + cfg + '], ' + type + ' must be specified as functions or relative module IDs.';
}

var FrameworkConfiguration = function () {
  function FrameworkConfiguration(aurelia) {
    var _this4 = this;

    

    this.aurelia = aurelia;
    this.container = aurelia.container;

    this.info = [];
    this.processed = false;
    this.preTasks = [];
    this.postTasks = [];

    this.behaviorsToLoad = [];

    this.configuredPlugins = [];
    this.resourcesToLoad = {};
    this.preTask(function () {
      return aurelia.loader.normalize('aurelia-bootstrapper').then(function (name) {
        return _this4.bootstrapperName = name;
      });
    });
    this.postTask(function () {
      return loadResources(aurelia, _this4.resourcesToLoad, aurelia.resources);
    });
  }

  FrameworkConfiguration.prototype.instance = function instance(type, _instance) {
    this.container.registerInstance(type, _instance);
    return this;
  };

  FrameworkConfiguration.prototype.singleton = function singleton(type, implementation) {
    this.container.registerSingleton(type, implementation);
    return this;
  };

  FrameworkConfiguration.prototype.transient = function transient(type, implementation) {
    this.container.registerTransient(type, implementation);
    return this;
  };

  FrameworkConfiguration.prototype.preTask = function preTask(task) {
    assertProcessed(this);
    this.preTasks.push(task);
    return this;
  };

  FrameworkConfiguration.prototype.postTask = function postTask(task) {
    assertProcessed(this);
    this.postTasks.push(task);
    return this;
  };

  FrameworkConfiguration.prototype.feature = function feature(plugin) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    switch (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) {
      case 'string':
        var hasIndex = /\/index$/i.test(plugin);
        var _moduleId = hasIndex || getExt(plugin) ? plugin : plugin + '/index';
        var root = hasIndex ? plugin.substr(0, plugin.length - 6) : plugin;
        this.info.push({ moduleId: _moduleId, resourcesRelativeTo: [root, ''], config: config });
        break;

      case 'function':
        this.info.push({ configure: plugin, config: config || {} });
        break;
      default:
        throw new Error(invalidConfigMsg(plugin, 'feature'));
    }
    return this;
  };

  FrameworkConfiguration.prototype.globalResources = function globalResources(resources) {
    var _this5 = this;

    assertProcessed(this);

    var toAdd = Array.isArray(resources) ? resources : arguments;
    var resource = void 0;
    var resourcesRelativeTo = this.resourcesRelativeTo || ['', ''];

    for (var i = 0, ii = toAdd.length; i < ii; ++i) {
      resource = toAdd[i];
      switch (typeof resource === 'undefined' ? 'undefined' : _typeof(resource)) {
        case 'string':
          var parent = resourcesRelativeTo[0];
          var grandParent = resourcesRelativeTo[1];
          var name = resource;

          if ((resource.startsWith('./') || resource.startsWith('../')) && parent !== '') {
            name = (0, _aureliaPath.join)(parent, resource);
          }

          this.resourcesToLoad[name] = { moduleId: name, relativeTo: grandParent };
          break;
        case 'function':
          var meta = this.aurelia.resources.autoRegister(this.container, resource);
          if (meta instanceof _aureliaTemplating.HtmlBehaviorResource && meta.elementName !== null) {
            if (this.behaviorsToLoad.push(meta) === 1) {
              this.postTask(function () {
                return loadBehaviors(_this5);
              });
            }
          }
          break;
        default:
          throw new Error(invalidConfigMsg(resource, 'resource'));
      }
    }

    return this;
  };

  FrameworkConfiguration.prototype.globalName = function globalName(resourcePath, newName) {
    assertProcessed(this);
    this.resourcesToLoad[resourcePath] = { moduleId: newName, relativeTo: '' };
    return this;
  };

  FrameworkConfiguration.prototype.plugin = function plugin(_plugin, pluginConfig) {
    assertProcessed(this);

    var info = void 0;
    switch (typeof _plugin === 'undefined' ? 'undefined' : _typeof(_plugin)) {
      case 'string':
        info = { moduleId: _plugin, resourcesRelativeTo: [_plugin, ''], config: pluginConfig || {} };
        break;
      case 'function':
        info = { configure: _plugin, config: pluginConfig || {} };
        break;
      default:
        throw new Error(invalidConfigMsg(_plugin, 'plugin'));
    }
    this.info.push(info);
    return this;
  };

  FrameworkConfiguration.prototype._addNormalizedPlugin = function _addNormalizedPlugin(name, config) {
    var _this6 = this;

    var plugin = { moduleId: name, resourcesRelativeTo: [name, ''], config: config || {} };
    this.info.push(plugin);

    this.preTask(function () {
      var relativeTo = [name, _this6.bootstrapperName];
      plugin.moduleId = name;
      plugin.resourcesRelativeTo = relativeTo;
      return Promise.resolve();
    });

    return this;
  };

  FrameworkConfiguration.prototype.defaultBindingLanguage = function defaultBindingLanguage() {
    return this._addNormalizedPlugin('aurelia-templating-binding');
  };

  FrameworkConfiguration.prototype.router = function router() {
    return this._addNormalizedPlugin('aurelia-templating-router');
  };

  FrameworkConfiguration.prototype.history = function history() {
    return this._addNormalizedPlugin('aurelia-history-browser');
  };

  FrameworkConfiguration.prototype.defaultResources = function defaultResources() {
    return this._addNormalizedPlugin('aurelia-templating-resources');
  };

  FrameworkConfiguration.prototype.eventAggregator = function eventAggregator() {
    return this._addNormalizedPlugin('aurelia-event-aggregator');
  };

  FrameworkConfiguration.prototype.basicConfiguration = function basicConfiguration() {
    return this.defaultBindingLanguage().defaultResources().eventAggregator();
  };

  FrameworkConfiguration.prototype.standardConfiguration = function standardConfiguration() {
    return this.basicConfiguration().history().router();
  };

  FrameworkConfiguration.prototype.developmentLogging = function developmentLogging(level) {
    var _this7 = this;

    var logLevel = level ? TheLogManager.logLevel[level] : undefined;

    if (logLevel === undefined) {
      logLevel = TheLogManager.logLevel.debug;
    }

    this.preTask(function () {
      return _this7.aurelia.loader.normalize('aurelia-logging-console', _this7.bootstrapperName).then(function (name) {
        return _this7.aurelia.loader.loadModule(name).then(function (m) {
          TheLogManager.addAppender(new m.ConsoleAppender());
          TheLogManager.setLevel(logLevel);
        });
      });
    });

    return this;
  };

  FrameworkConfiguration.prototype.apply = function apply() {
    var _this8 = this;

    if (this.processed) {
      return Promise.resolve();
    }

    return runTasks(this, this.preTasks).then(function () {
      var loader = _this8.aurelia.loader;
      var info = _this8.info;
      var current = void 0;

      var next = function next() {
        current = info.shift();
        if (current) {
          return loadPlugin(_this8, loader, current).then(next);
        }

        _this8.processed = true;
        _this8.configuredPlugins = null;
        return Promise.resolve();
      };

      return next().then(function () {
        return runTasks(_this8, _this8.postTasks);
      });
    });
  };

  return FrameworkConfiguration;
}();

exports.FrameworkConfiguration = FrameworkConfiguration;
var LogManager = exports.LogManager = TheLogManager;
});
;
define('aurelia-history-browser/dist/commonjs/aurelia-history-browser',['require','exports','module','aurelia-history','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aureliaHistory = require('aurelia-history');
var aureliaPal = require('aurelia-pal');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var LinkHandler = (function () {
    function LinkHandler() {
    }
    LinkHandler.prototype.activate = function (history) { };
    LinkHandler.prototype.deactivate = function () { };
    return LinkHandler;
}());
var DefaultLinkHandler = (function (_super) {
    __extends(DefaultLinkHandler, _super);
    function DefaultLinkHandler() {
        var _this = _super.call(this) || this;
        _this.handler = function (e) {
            var _a = DefaultLinkHandler.getEventInfo(e), shouldHandleEvent = _a.shouldHandleEvent, href = _a.href;
            if (shouldHandleEvent) {
                e.preventDefault();
                _this.history.navigate(href);
            }
        };
        return _this;
    }
    DefaultLinkHandler.prototype.activate = function (history) {
        if (history._hasPushState) {
            this.history = history;
            aureliaPal.DOM.addEventListener('click', this.handler, true);
        }
    };
    DefaultLinkHandler.prototype.deactivate = function () {
        aureliaPal.DOM.removeEventListener('click', this.handler, true);
    };
    DefaultLinkHandler.getEventInfo = function (event) {
        var $event = event;
        var info = {
            shouldHandleEvent: false,
            href: null,
            anchor: null
        };
        var target = DefaultLinkHandler.findClosestAnchor($event.target);
        if (!target || !DefaultLinkHandler.targetIsThisWindow(target)) {
            return info;
        }
        if (hasAttribute(target, 'download')
            || hasAttribute(target, 'router-ignore')
            || hasAttribute(target, 'data-router-ignore')) {
            return info;
        }
        if ($event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey) {
            return info;
        }
        var href = target.getAttribute('href');
        info.anchor = target;
        info.href = href;
        var leftButtonClicked = $event.which === 1;
        var isRelative = href && !(href.charAt(0) === '#' || (/^[a-z]+:/i).test(href));
        info.shouldHandleEvent = leftButtonClicked && isRelative;
        return info;
    };
    DefaultLinkHandler.findClosestAnchor = function (el) {
        while (el) {
            if (el.tagName === 'A') {
                return el;
            }
            el = el.parentNode;
        }
    };
    DefaultLinkHandler.targetIsThisWindow = function (target) {
        var targetWindow = target.getAttribute('target');
        var win = aureliaPal.PLATFORM.global;
        return !targetWindow ||
            targetWindow === win.name ||
            targetWindow === '_self';
    };
    return DefaultLinkHandler;
}(LinkHandler));
var hasAttribute = function (el, attr) { return el.hasAttribute(attr); };

var BrowserHistory = (function (_super) {
    __extends(BrowserHistory, _super);
    function BrowserHistory(linkHandler) {
        var _this = _super.call(this) || this;
        _this._isActive = false;
        _this._checkUrlCallback = _this._checkUrl.bind(_this);
        _this.location = aureliaPal.PLATFORM.location;
        _this.history = aureliaPal.PLATFORM.history;
        _this.linkHandler = linkHandler;
        return _this;
    }
    BrowserHistory.prototype.activate = function (options) {
        if (this._isActive) {
            throw new Error('History has already been activated.');
        }
        var $history = this.history;
        var wantsPushState = !!options.pushState;
        this._isActive = true;
        var normalizedOptions = this.options = Object.assign({}, { root: '/' }, this.options, options);
        var rootUrl = this.root = ('/' + normalizedOptions.root + '/').replace(rootStripper, '/');
        var wantsHashChange = this._wantsHashChange = normalizedOptions.hashChange !== false;
        var hasPushState = this._hasPushState = !!(normalizedOptions.pushState && $history && $history.pushState);
        var eventName;
        if (hasPushState) {
            eventName = 'popstate';
        }
        else if (wantsHashChange) {
            eventName = 'hashchange';
        }
        aureliaPal.PLATFORM.addEventListener(eventName, this._checkUrlCallback);
        if (wantsHashChange && wantsPushState) {
            var $location = this.location;
            var atRoot = $location.pathname.replace(/[^\/]$/, '$&/') === rootUrl;
            if (!hasPushState && !atRoot) {
                var fragment = this.fragment = this._getFragment(null, true);
                $location.replace(rootUrl + $location.search + '#' + fragment);
                return true;
            }
            else if (hasPushState && atRoot && $location.hash) {
                var fragment = this.fragment = this._getHash().replace(routeStripper, '');
                $history.replaceState({}, aureliaPal.DOM.title, rootUrl + fragment + $location.search);
            }
        }
        if (!this.fragment) {
            this.fragment = this._getFragment('');
        }
        this.linkHandler.activate(this);
        if (!normalizedOptions.silent) {
            return this._loadUrl('');
        }
    };
    BrowserHistory.prototype.deactivate = function () {
        var handler = this._checkUrlCallback;
        aureliaPal.PLATFORM.removeEventListener('popstate', handler);
        aureliaPal.PLATFORM.removeEventListener('hashchange', handler);
        this._isActive = false;
        this.linkHandler.deactivate();
    };
    BrowserHistory.prototype.getAbsoluteRoot = function () {
        var $location = this.location;
        var origin = createOrigin($location.protocol, $location.hostname, $location.port);
        return "" + origin + this.root;
    };
    BrowserHistory.prototype.navigate = function (fragment, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.trigger, trigger = _c === void 0 ? true : _c, _d = _b.replace, replace = _d === void 0 ? false : _d;
        var location = this.location;
        if (fragment && absoluteUrl.test(fragment)) {
            location.href = fragment;
            return true;
        }
        if (!this._isActive) {
            return false;
        }
        fragment = this._getFragment(fragment || '');
        if (this.fragment === fragment && !replace) {
            return false;
        }
        this.fragment = fragment;
        var url = this.root + fragment;
        if (fragment === '' && url !== '/') {
            url = url.slice(0, -1);
        }
        if (this._hasPushState) {
            url = url.replace('//', '/');
            this.history[replace ? 'replaceState' : 'pushState']({}, aureliaPal.DOM.title, url);
        }
        else if (this._wantsHashChange) {
            updateHash(location, fragment, replace);
        }
        else {
            location.assign(url);
        }
        if (trigger) {
            return this._loadUrl(fragment);
        }
        return true;
    };
    BrowserHistory.prototype.navigateBack = function () {
        this.history.back();
    };
    BrowserHistory.prototype.setTitle = function (title) {
        aureliaPal.DOM.title = title;
    };
    BrowserHistory.prototype.setState = function (key, value) {
        var $history = this.history;
        var state = Object.assign({}, $history.state);
        var _a = this.location, pathname = _a.pathname, search = _a.search, hash = _a.hash;
        state[key] = value;
        $history.replaceState(state, null, "" + pathname + search + hash);
    };
    BrowserHistory.prototype.getState = function (key) {
        var state = Object.assign({}, this.history.state);
        return state[key];
    };
    BrowserHistory.prototype.getHistoryIndex = function () {
        var historyIndex = this.getState('HistoryIndex');
        if (historyIndex === undefined) {
            historyIndex = this.history.length - 1;
            this.setState('HistoryIndex', historyIndex);
        }
        return historyIndex;
    };
    BrowserHistory.prototype.go = function (movement) {
        this.history.go(movement);
    };
    BrowserHistory.prototype._getHash = function () {
        return this.location.hash.substr(1);
    };
    BrowserHistory.prototype._getFragment = function (fragment, forcePushState) {
        var rootUrl;
        if (!fragment) {
            if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                var location_1 = this.location;
                fragment = location_1.pathname + location_1.search;
                rootUrl = this.root.replace(trailingSlash, '');
                if (!fragment.indexOf(rootUrl)) {
                    fragment = fragment.substr(rootUrl.length);
                }
            }
            else {
                fragment = this._getHash();
            }
        }
        return '/' + fragment.replace(routeStripper, '');
    };
    BrowserHistory.prototype._checkUrl = function () {
        var current = this._getFragment('');
        if (current !== this.fragment) {
            this._loadUrl('');
        }
    };
    BrowserHistory.prototype._loadUrl = function (fragmentOverride) {
        var fragment = this.fragment = this._getFragment(fragmentOverride);
        return this.options.routeHandler ?
            this.options.routeHandler(fragment) :
            false;
    };
    BrowserHistory.inject = [LinkHandler];
    return BrowserHistory;
}(aureliaHistory.History));
var routeStripper = /^#?\/*|\s+$/g;
var rootStripper = /^\/+|\/+$/g;
var trailingSlash = /\/$/;
var absoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
function updateHash($location, fragment, replace) {
    if (replace) {
        var href = $location.href.replace(/(javascript:|#).*$/, '');
        $location.replace(href + '#' + fragment);
    }
    else {
        $location.hash = '#' + fragment;
    }
}
function createOrigin(protocol, hostname, port) {
    return protocol + "//" + hostname + (port ? ':' + port : '');
}

function configure(config) {
    var $config = config;
    $config.singleton(aureliaHistory.History, BrowserHistory);
    $config.transient(LinkHandler, DefaultLinkHandler);
}

exports.BrowserHistory = BrowserHistory;
exports.DefaultLinkHandler = DefaultLinkHandler;
exports.LinkHandler = LinkHandler;
exports.configure = configure;


});
;
define('aurelia-history/dist/commonjs/aurelia-history',['require','exports','module'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});



function mi(name) {
  throw new Error('History must implement ' + name + '().');
}

var History = exports.History = function () {
  function History() {
    
  }

  History.prototype.activate = function activate(options) {
    mi('activate');
  };

  History.prototype.deactivate = function deactivate() {
    mi('deactivate');
  };

  History.prototype.getAbsoluteRoot = function getAbsoluteRoot() {
    mi('getAbsoluteRoot');
  };

  History.prototype.navigate = function navigate(fragment, options) {
    mi('navigate');
  };

  History.prototype.navigateBack = function navigateBack() {
    mi('navigateBack');
  };

  History.prototype.setTitle = function setTitle(title) {
    mi('setTitle');
  };

  History.prototype.setState = function setState(key, value) {
    mi('setState');
  };

  History.prototype.getState = function getState(key) {
    mi('getState');
  };

  History.prototype.getHistoryIndex = function getHistoryIndex() {
    mi('getHistoryIndex');
  };

  History.prototype.go = function go(movement) {
    mi('go');
  };

  return History;
}();
});
;
define('aurelia-loader-default/dist/commonjs/aurelia-loader-default',['require','exports','module','aurelia-loader','aurelia-pal','aurelia-metadata'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultLoader = exports.TextTemplateLoader = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _aureliaLoader = require('aurelia-loader');

var _aureliaPal = require('aurelia-pal');

var _aureliaMetadata = require('aurelia-metadata');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var TextTemplateLoader = exports.TextTemplateLoader = function () {
  function TextTemplateLoader() {
    
  }

  TextTemplateLoader.prototype.loadTemplate = function loadTemplate(loader, entry) {
    return loader.loadText(entry.address).then(function (text) {
      entry.template = _aureliaPal.DOM.createTemplateFromMarkup(text);
    });
  };

  return TextTemplateLoader;
}();

function ensureOriginOnExports(executed, name) {
  var target = executed;
  var key = void 0;
  var exportedValue = void 0;

  if (target.__useDefault) {
    target = target['default'];
  }

  _aureliaMetadata.Origin.set(target, new _aureliaMetadata.Origin(name, 'default'));

  for (key in target) {
    exportedValue = target[key];

    if (typeof exportedValue === 'function') {
      _aureliaMetadata.Origin.set(exportedValue, new _aureliaMetadata.Origin(name, key));
    }
  }

  return executed;
}

var DefaultLoader = exports.DefaultLoader = function (_Loader) {
  _inherits(DefaultLoader, _Loader);

  function DefaultLoader() {
    

    var _this = _possibleConstructorReturn(this, _Loader.call(this));

    _this.textPluginName = 'text';


    _this.moduleRegistry = Object.create(null);
    _this.useTemplateLoader(new TextTemplateLoader());

    var that = _this;

    _this.addPlugin('template-registry-entry', {
      'fetch': function fetch(address) {
        var entry = that.getOrCreateTemplateRegistryEntry(address);
        return entry.templateIsLoaded ? entry : that.templateLoader.loadTemplate(that, entry).then(function (x) {
          return entry;
        });
      }
    });
    return _this;
  }

  DefaultLoader.prototype.useTemplateLoader = function useTemplateLoader(templateLoader) {
    this.templateLoader = templateLoader;
  };

  DefaultLoader.prototype.loadAllModules = function loadAllModules(ids) {
    var loads = [];

    for (var i = 0, ii = ids.length; i < ii; ++i) {
      loads.push(this.loadModule(ids[i]));
    }

    return Promise.all(loads);
  };

  DefaultLoader.prototype.loadTemplate = function loadTemplate(url) {
    return this._import(this.applyPluginToUrl(url, 'template-registry-entry'));
  };

  DefaultLoader.prototype.loadText = function loadText(url) {
    return this._import(this.applyPluginToUrl(url, this.textPluginName)).then(function (textOrModule) {
      if (typeof textOrModule === 'string') {
        return textOrModule;
      }

      return textOrModule['default'];
    });
  };

  return DefaultLoader;
}(_aureliaLoader.Loader);

_aureliaPal.PLATFORM.Loader = DefaultLoader;

if (!_aureliaPal.PLATFORM.global.System || !_aureliaPal.PLATFORM.global.System.import) {
  if (_aureliaPal.PLATFORM.global.requirejs) {
    var getDefined = void 0;
    if (_typeof(_aureliaPal.PLATFORM.global.requirejs.s) === 'object') {
      getDefined = function getDefined() {
        return _aureliaPal.PLATFORM.global.requirejs.s.contexts._.defined;
      };
    } else if (_typeof(_aureliaPal.PLATFORM.global.requirejs.contexts) === 'object') {
      getDefined = function getDefined() {
        return _aureliaPal.PLATFORM.global.requirejs.contexts._.defined;
      };
    } else if (typeof _aureliaPal.PLATFORM.global.requirejs.definedValues === 'function') {
      getDefined = function getDefined() {
        return _aureliaPal.PLATFORM.global.requirejs.definedValues();
      };
    } else {
      getDefined = function getDefined() {
        return {};
      };
    }
    _aureliaPal.PLATFORM.eachModule = function (callback) {
      var defined = getDefined();
      for (var key in defined) {
        try {
          if (callback(key, defined[key])) return;
        } catch (e) {}
      }
    };
  } else {
    _aureliaPal.PLATFORM.eachModule = function (callback) {};
  }

  DefaultLoader.prototype._import = function (moduleId) {
    return new Promise(function (resolve, reject) {
      _aureliaPal.PLATFORM.global.require([moduleId], resolve, reject);
    });
  };

  DefaultLoader.prototype.loadModule = function (id) {
    var _this2 = this;

    var existing = this.moduleRegistry[id];
    if (existing !== undefined) {
      return Promise.resolve(existing);
    }

    return new Promise(function (resolve, reject) {
      _aureliaPal.PLATFORM.global.require([id], function (m) {
        _this2.moduleRegistry[id] = m;
        resolve(ensureOriginOnExports(m, id));
      }, reject);
    });
  };

  DefaultLoader.prototype.map = function (id, source) {};

  DefaultLoader.prototype.normalize = function (moduleId, relativeTo) {
    return Promise.resolve(moduleId);
  };

  DefaultLoader.prototype.normalizeSync = function (moduleId, relativeTo) {
    return moduleId;
  };

  DefaultLoader.prototype.applyPluginToUrl = function (url, pluginName) {
    return pluginName + '!' + url;
  };

  DefaultLoader.prototype.addPlugin = function (pluginName, implementation) {
    var nonAnonDefine = define;
    nonAnonDefine(pluginName, [], {
      'load': function load(name, req, onload) {
        var result = implementation.fetch(name);
        Promise.resolve(result).then(onload);
      }
    });
  };
} else {
  _aureliaPal.PLATFORM.eachModule = function (callback) {
    if (System.registry) {
      var keys = Array.from(System.registry.keys());
      for (var i = 0; i < keys.length; i++) {
        try {
          var key = keys[i];
          if (callback(key, System.registry.get(key))) {
            return;
          }
        } catch (e) {}
      }
      return;
    }

    var modules = System._loader.modules;

    for (var _key in modules) {
      try {
        if (callback(_key, modules[_key].module)) return;
      } catch (e) {}
    }
  };

  DefaultLoader.prototype._import = function (moduleId) {
    return System.import(moduleId);
  };

  DefaultLoader.prototype.loadModule = function (id) {
    var _this3 = this;

    return System.normalize(id).then(function (newId) {
      var existing = _this3.moduleRegistry[newId];
      if (existing !== undefined) {
        return Promise.resolve(existing);
      }

      return System.import(newId).then(function (m) {
        _this3.moduleRegistry[newId] = m;
        return ensureOriginOnExports(m, newId);
      });
    });
  };

  DefaultLoader.prototype.map = function (id, source) {
    var _map;

    System.config({ map: (_map = {}, _map[id] = source, _map) });
  };

  DefaultLoader.prototype.normalizeSync = function (moduleId, relativeTo) {
    return System.normalizeSync(moduleId, relativeTo);
  };

  DefaultLoader.prototype.normalize = function (moduleId, relativeTo) {
    return System.normalize(moduleId, relativeTo);
  };

  DefaultLoader.prototype.applyPluginToUrl = function (url, pluginName) {
    return url + '!' + pluginName;
  };

  DefaultLoader.prototype.addPlugin = function (pluginName, implementation) {
    System.set(pluginName, System.newModule({
      'fetch': function fetch(load, _fetch) {
        var result = implementation.fetch(load.address);
        return Promise.resolve(result).then(function (x) {
          load.metadata.result = x;
          return '';
        });
      },
      'instantiate': function instantiate(load) {
        return load.metadata.result;
      }
    }));
  };
}
});
;
define('aurelia-loader/dist/commonjs/aurelia-loader',['require','exports','module','aurelia-path','aurelia-metadata'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Loader = exports.TemplateRegistryEntry = exports.TemplateDependency = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _aureliaPath = require('aurelia-path');

var _aureliaMetadata = require('aurelia-metadata');



var TemplateDependency = exports.TemplateDependency = function TemplateDependency(src, name) {
  

  this.src = src;
  this.name = name;
};

var TemplateRegistryEntry = exports.TemplateRegistryEntry = function () {
  function TemplateRegistryEntry(address) {
    

    this.templateIsLoaded = false;
    this.factoryIsReady = false;
    this.resources = null;
    this.dependencies = null;

    this.address = address;
    this.onReady = null;
    this._template = null;
    this._factory = null;
  }

  TemplateRegistryEntry.prototype.addDependency = function addDependency(src, name) {
    var finalSrc = typeof src === 'string' ? (0, _aureliaPath.relativeToFile)(src, this.address) : _aureliaMetadata.Origin.get(src).moduleId;

    this.dependencies.push(new TemplateDependency(finalSrc, name));
  };

  _createClass(TemplateRegistryEntry, [{
    key: 'template',
    get: function get() {
      return this._template;
    },
    set: function set(value) {
      var address = this.address;
      var requires = void 0;
      var current = void 0;
      var src = void 0;
      var dependencies = void 0;

      this._template = value;
      this.templateIsLoaded = true;

      requires = value.content.querySelectorAll('require');
      dependencies = this.dependencies = new Array(requires.length);

      for (var i = 0, ii = requires.length; i < ii; ++i) {
        current = requires[i];
        src = current.getAttribute('from');

        if (!src) {
          throw new Error('<require> element in ' + address + ' has no "from" attribute.');
        }

        dependencies[i] = new TemplateDependency((0, _aureliaPath.relativeToFile)(src, address), current.getAttribute('as'));

        if (current.parentNode) {
          current.parentNode.removeChild(current);
        }
      }
    }
  }, {
    key: 'factory',
    get: function get() {
      return this._factory;
    },
    set: function set(value) {
      this._factory = value;
      this.factoryIsReady = true;
    }
  }]);

  return TemplateRegistryEntry;
}();

var Loader = exports.Loader = function () {
  function Loader() {
    

    this.templateRegistry = {};
  }

  Loader.prototype.map = function map(id, source) {
    throw new Error('Loaders must implement map(id, source).');
  };

  Loader.prototype.normalizeSync = function normalizeSync(moduleId, relativeTo) {
    throw new Error('Loaders must implement normalizeSync(moduleId, relativeTo).');
  };

  Loader.prototype.normalize = function normalize(moduleId, relativeTo) {
    throw new Error('Loaders must implement normalize(moduleId: string, relativeTo: string): Promise<string>.');
  };

  Loader.prototype.loadModule = function loadModule(id) {
    throw new Error('Loaders must implement loadModule(id).');
  };

  Loader.prototype.loadAllModules = function loadAllModules(ids) {
    throw new Error('Loader must implement loadAllModules(ids).');
  };

  Loader.prototype.loadTemplate = function loadTemplate(url) {
    throw new Error('Loader must implement loadTemplate(url).');
  };

  Loader.prototype.loadText = function loadText(url) {
    throw new Error('Loader must implement loadText(url).');
  };

  Loader.prototype.applyPluginToUrl = function applyPluginToUrl(url, pluginName) {
    throw new Error('Loader must implement applyPluginToUrl(url, pluginName).');
  };

  Loader.prototype.addPlugin = function addPlugin(pluginName, implementation) {
    throw new Error('Loader must implement addPlugin(pluginName, implementation).');
  };

  Loader.prototype.getOrCreateTemplateRegistryEntry = function getOrCreateTemplateRegistryEntry(address) {
    return this.templateRegistry[address] || (this.templateRegistry[address] = new TemplateRegistryEntry(address));
  };

  return Loader;
}();
});
;
define('aurelia-logging-console/dist/commonjs/aurelia-logging-console',['require','exports','module'],function (require, exports, module) {"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});



var ConsoleAppender = exports.ConsoleAppender = function () {
  function ConsoleAppender() {
    
  }

  ConsoleAppender.prototype.debug = function debug(logger) {
    var _console;

    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    (_console = console).debug.apply(_console, ["DEBUG [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.info = function info(logger) {
    var _console2;

    for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }

    (_console2 = console).info.apply(_console2, ["INFO [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.warn = function warn(logger) {
    var _console3;

    for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }

    (_console3 = console).warn.apply(_console3, ["WARN [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.error = function error(logger) {
    var _console4;

    for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      rest[_key4 - 1] = arguments[_key4];
    }

    (_console4 = console).error.apply(_console4, ["ERROR [" + logger.id + "]"].concat(rest));
  };

  return ConsoleAppender;
}();
});
;
define('aurelia-logging/dist/commonjs/aurelia-logging',['require','exports','module'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogger = getLogger;
exports.addAppender = addAppender;
exports.removeAppender = removeAppender;
exports.getAppenders = getAppenders;
exports.clearAppenders = clearAppenders;
exports.addCustomLevel = addCustomLevel;
exports.removeCustomLevel = removeCustomLevel;
exports.setLevel = setLevel;
exports.getLevel = getLevel;



var logLevel = exports.logLevel = {
  none: 0,
  error: 10,
  warn: 20,
  info: 30,
  debug: 40
};

var loggers = {};
var appenders = [];
var globalDefaultLevel = logLevel.none;

var standardLevels = ['none', 'error', 'warn', 'info', 'debug'];
function isStandardLevel(level) {
  return standardLevels.filter(function (l) {
    return l === level;
  }).length > 0;
}

function appendArgs() {
  return [this].concat(Array.prototype.slice.call(arguments));
}

function logFactory(level) {
  var threshold = logLevel[level];
  return function () {
    if (this.level < threshold) {
      return;
    }

    var args = appendArgs.apply(this, arguments);
    var i = appenders.length;
    while (i--) {
      var _appenders$i;

      (_appenders$i = appenders[i])[level].apply(_appenders$i, args);
    }
  };
}

function logFactoryCustom(level) {
  var threshold = logLevel[level];
  return function () {
    if (this.level < threshold) {
      return;
    }

    var args = appendArgs.apply(this, arguments);
    var i = appenders.length;
    while (i--) {
      var appender = appenders[i];
      if (appender[level] !== undefined) {
        appender[level].apply(appender, args);
      }
    }
  };
}

function connectLoggers() {
  var proto = Logger.prototype;
  for (var _level in logLevel) {
    if (isStandardLevel(_level)) {
      if (_level !== 'none') {
        proto[_level] = logFactory(_level);
      }
    } else {
      proto[_level] = logFactoryCustom(_level);
    }
  }
}

function disconnectLoggers() {
  var proto = Logger.prototype;
  for (var _level2 in logLevel) {
    if (_level2 !== 'none') {
      proto[_level2] = function () {};
    }
  }
}

function getLogger(id) {
  return loggers[id] || new Logger(id);
}

function addAppender(appender) {
  if (appenders.push(appender) === 1) {
    connectLoggers();
  }
}

function removeAppender(appender) {
  appenders = appenders.filter(function (a) {
    return a !== appender;
  });
}

function getAppenders() {
  return [].concat(appenders);
}

function clearAppenders() {
  appenders = [];
  disconnectLoggers();
}

function addCustomLevel(name, value) {
  if (logLevel[name] !== undefined) {
    throw Error('Log level "' + name + '" already exists.');
  }

  if (isNaN(value)) {
    throw Error('Value must be a number.');
  }

  logLevel[name] = value;

  if (appenders.length > 0) {
    connectLoggers();
  } else {
    Logger.prototype[name] = function () {};
  }
}

function removeCustomLevel(name) {
  if (logLevel[name] === undefined) {
    return;
  }

  if (isStandardLevel(name)) {
    throw Error('Built-in log level "' + name + '" cannot be removed.');
  }

  delete logLevel[name];
  delete Logger.prototype[name];
}

function setLevel(level) {
  globalDefaultLevel = level;
  for (var key in loggers) {
    loggers[key].setLevel(level);
  }
}

function getLevel() {
  return globalDefaultLevel;
}

var Logger = exports.Logger = function () {
  function Logger(id) {
    

    var cached = loggers[id];
    if (cached) {
      return cached;
    }

    loggers[id] = this;
    this.id = id;
    this.level = globalDefaultLevel;
  }

  Logger.prototype.debug = function debug(message) {};

  Logger.prototype.info = function info(message) {};

  Logger.prototype.warn = function warn(message) {};

  Logger.prototype.error = function error(message) {};

  Logger.prototype.setLevel = function setLevel(level) {
    this.level = level;
  };

  Logger.prototype.isDebugEnabled = function isDebugEnabled() {
    return this.level === logLevel.debug;
  };

  return Logger;
}();
});
;
define('aurelia-metadata/dist/commonjs/aurelia-metadata',['require','exports','module','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Origin = exports.metadata = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.decorators = decorators;
exports.deprecated = deprecated;
exports.mixin = mixin;
exports.protocol = protocol;

var _aureliaPal = require('aurelia-pal');



function isObject(val) {
  return val && (typeof val === 'function' || (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object');
}

var metadata = exports.metadata = {
  resource: 'aurelia:resource',
  paramTypes: 'design:paramtypes',
  propertyType: 'design:type',
  properties: 'design:properties',
  get: function get(metadataKey, target, targetKey) {
    if (!isObject(target)) {
      return undefined;
    }
    var result = metadata.getOwn(metadataKey, target, targetKey);
    return result === undefined ? metadata.get(metadataKey, Object.getPrototypeOf(target), targetKey) : result;
  },
  getOwn: function getOwn(metadataKey, target, targetKey) {
    if (!isObject(target)) {
      return undefined;
    }
    return Reflect.getOwnMetadata(metadataKey, target, targetKey);
  },
  define: function define(metadataKey, metadataValue, target, targetKey) {
    Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);
  },
  getOrCreateOwn: function getOrCreateOwn(metadataKey, Type, target, targetKey) {
    var result = metadata.getOwn(metadataKey, target, targetKey);

    if (result === undefined) {
      result = new Type();
      Reflect.defineMetadata(metadataKey, result, target, targetKey);
    }

    return result;
  }
};

var originStorage = new Map();
var unknownOrigin = Object.freeze({ moduleId: undefined, moduleMember: undefined });

var Origin = exports.Origin = function () {
  function Origin(moduleId, moduleMember) {
    

    this.moduleId = moduleId;
    this.moduleMember = moduleMember;
  }

  Origin.get = function get(fn) {
    var origin = originStorage.get(fn);

    if (origin === undefined) {
      _aureliaPal.PLATFORM.eachModule(function (key, value) {
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
          for (var name in value) {
            try {
              var exp = value[name];
              if (exp === fn) {
                originStorage.set(fn, origin = new Origin(key, name));
                return true;
              }
            } catch (e) {}
          }
        }

        if (value === fn) {
          originStorage.set(fn, origin = new Origin(key, 'default'));
          return true;
        }

        return false;
      });
    }

    return origin || unknownOrigin;
  };

  Origin.set = function set(fn, origin) {
    originStorage.set(fn, origin);
  };

  return Origin;
}();

function decorators() {
  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
    rest[_key] = arguments[_key];
  }

  var applicator = function applicator(target, key, descriptor) {
    var i = rest.length;

    if (key) {
      descriptor = descriptor || {
        value: target[key],
        writable: true,
        configurable: true,
        enumerable: true
      };

      while (i--) {
        descriptor = rest[i](target, key, descriptor) || descriptor;
      }

      Object.defineProperty(target, key, descriptor);
    } else {
      while (i--) {
        target = rest[i](target) || target;
      }
    }

    return target;
  };

  applicator.on = applicator;
  return applicator;
}

function deprecated(optionsOrTarget, maybeKey, maybeDescriptor) {
  function decorator(target, key, descriptor) {
    var methodSignature = target.constructor.name + '#' + key;
    var options = maybeKey ? {} : optionsOrTarget || {};
    var message = 'DEPRECATION - ' + methodSignature;

    if (typeof descriptor.value !== 'function') {
      throw new SyntaxError('Only methods can be marked as deprecated.');
    }

    if (options.message) {
      message += ' - ' + options.message;
    }

    return _extends({}, descriptor, {
      value: function deprecationWrapper() {
        if (options.error) {
          throw new Error(message);
        } else {
          console.warn(message);
        }

        return descriptor.value.apply(this, arguments);
      }
    });
  }

  return maybeKey ? decorator(optionsOrTarget, maybeKey, maybeDescriptor) : decorator;
}

function mixin(behavior) {
  var instanceKeys = Object.keys(behavior);

  function _mixin(possible) {
    var decorator = function decorator(target) {
      var resolvedTarget = typeof target === 'function' ? target.prototype : target;

      var i = instanceKeys.length;
      while (i--) {
        var property = instanceKeys[i];
        Object.defineProperty(resolvedTarget, property, {
          value: behavior[property],
          writable: true
        });
      }
    };

    return possible ? decorator(possible) : decorator;
  }

  return _mixin;
}

function alwaysValid() {
  return true;
}
function noCompose() {}

function ensureProtocolOptions(options) {
  if (options === undefined) {
    options = {};
  } else if (typeof options === 'function') {
    options = {
      validate: options
    };
  }

  if (!options.validate) {
    options.validate = alwaysValid;
  }

  if (!options.compose) {
    options.compose = noCompose;
  }

  return options;
}

function createProtocolValidator(validate) {
  return function (target) {
    var result = validate(target);
    return result === true;
  };
}

function createProtocolAsserter(name, validate) {
  return function (target) {
    var result = validate(target);
    if (result !== true) {
      throw new Error(result || name + ' was not correctly implemented.');
    }
  };
}

function protocol(name, options) {
  options = ensureProtocolOptions(options);

  var result = function result(target) {
    var resolvedTarget = typeof target === 'function' ? target.prototype : target;

    options.compose(resolvedTarget);
    result.assert(resolvedTarget);

    Object.defineProperty(resolvedTarget, 'protocol:' + name, {
      enumerable: false,
      configurable: false,
      writable: false,
      value: true
    });
  };

  result.validate = createProtocolValidator(options.validate);
  result.assert = createProtocolAsserter(name, options.validate);

  return result;
}

protocol.create = function (name, options) {
  options = ensureProtocolOptions(options);
  var hidden = 'protocol:' + name;
  var result = function result(target) {
    var decorator = protocol(name, options);
    return target ? decorator(target) : decorator;
  };

  result.decorates = function (obj) {
    return obj[hidden] === true;
  };
  result.validate = createProtocolValidator(options.validate);
  result.assert = createProtocolAsserter(name, options.validate);

  return result;
};
});
;
define('aurelia-pal-browser/dist/commonjs/aurelia-pal-browser',['require','exports','module','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._DOM = exports._FEATURE = exports._PLATFORM = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.initialize = initialize;

var _aureliaPal = require('aurelia-pal');

var _PLATFORM = exports._PLATFORM = {
  location: window.location,
  history: window.history,
  addEventListener: function addEventListener(eventName, callback, capture) {
    this.global.addEventListener(eventName, callback, capture);
  },
  removeEventListener: function removeEventListener(eventName, callback, capture) {
    this.global.removeEventListener(eventName, callback, capture);
  },

  performance: window.performance,
  requestAnimationFrame: function requestAnimationFrame(callback) {
    return this.global.requestAnimationFrame(callback);
  }
};

if (typeof FEATURE_NO_IE === 'undefined') {
  var test = function test() {};

  if (test.name === undefined) {
    Object.defineProperty(Function.prototype, 'name', {
      get: function get() {
        var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];

        Object.defineProperty(this, 'name', { value: name });
        return name;
      }
    });
  }
}

if (typeof FEATURE_NO_IE === 'undefined') {
  if (!('classList' in document.createElement('_')) || document.createElementNS && !('classList' in document.createElementNS('http://www.w3.org/2000/svg', 'g'))) {
    var protoProp = 'prototype';
    var strTrim = String.prototype.trim;
    var arrIndexOf = Array.prototype.indexOf;
    var emptyArray = [];

    var DOMEx = function DOMEx(type, message) {
      this.name = type;
      this.code = DOMException[type];
      this.message = message;
    };

    var checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
      if (token === '') {
        throw new DOMEx('SYNTAX_ERR', 'An invalid or illegal string was specified');
      }

      if (/\s/.test(token)) {
        throw new DOMEx('INVALID_CHARACTER_ERR', 'String contains an invalid character');
      }

      return arrIndexOf.call(classList, token);
    };

    var ClassList = function ClassList(elem) {
      var trimmedClasses = strTrim.call(elem.getAttribute('class') || '');
      var classes = trimmedClasses ? trimmedClasses.split(/\s+/) : emptyArray;

      for (var i = 0, ii = classes.length; i < ii; ++i) {
        this.push(classes[i]);
      }

      this._updateClassName = function () {
        elem.setAttribute('class', this.toString());
      };
    };

    var classListProto = ClassList[protoProp] = [];

    DOMEx[protoProp] = Error[protoProp];

    classListProto.item = function (i) {
      return this[i] || null;
    };

    classListProto.contains = function (token) {
      token += '';
      return checkTokenAndGetIndex(this, token) !== -1;
    };

    classListProto.add = function () {
      var tokens = arguments;
      var i = 0;
      var ii = tokens.length;
      var token = void 0;
      var updated = false;

      do {
        token = tokens[i] + '';
        if (checkTokenAndGetIndex(this, token) === -1) {
          this.push(token);
          updated = true;
        }
      } while (++i < ii);

      if (updated) {
        this._updateClassName();
      }
    };

    classListProto.remove = function () {
      var tokens = arguments;
      var i = 0;
      var ii = tokens.length;
      var token = void 0;
      var updated = false;
      var index = void 0;

      do {
        token = tokens[i] + '';
        index = checkTokenAndGetIndex(this, token);
        while (index !== -1) {
          this.splice(index, 1);
          updated = true;
          index = checkTokenAndGetIndex(this, token);
        }
      } while (++i < ii);

      if (updated) {
        this._updateClassName();
      }
    };

    classListProto.toggle = function (token, force) {
      token += '';

      var result = this.contains(token);
      var method = result ? force !== true && 'remove' : force !== false && 'add';

      if (method) {
        this[method](token);
      }

      if (force === true || force === false) {
        return force;
      }

      return !result;
    };

    classListProto.toString = function () {
      return this.join(' ');
    };

    Object.defineProperty(Element.prototype, 'classList', {
      get: function get() {
        return new ClassList(this);
      },
      enumerable: true,
      configurable: true
    });
  } else {
    var testElement = document.createElement('_');
    testElement.classList.add('c1', 'c2');

    if (!testElement.classList.contains('c2')) {
      var createMethod = function createMethod(method) {
        var original = DOMTokenList.prototype[method];

        DOMTokenList.prototype[method] = function (token) {
          for (var i = 0, ii = arguments.length; i < ii; ++i) {
            token = arguments[i];
            original.call(this, token);
          }
        };
      };

      createMethod('add');
      createMethod('remove');
    }

    testElement.classList.toggle('c3', false);

    if (testElement.classList.contains('c3')) {
      var _toggle = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function (token, force) {
        if (1 in arguments && !this.contains(token) === !force) {
          return force;
        }

        return _toggle.call(this, token);
      };
    }

    testElement = null;
  }
}

if (typeof FEATURE_NO_IE === 'undefined') {
  var _filterEntries = function _filterEntries(key, value) {
    var i = 0,
        n = _entries.length,
        result = [];
    for (; i < n; i++) {
      if (_entries[i][key] == value) {
        result.push(_entries[i]);
      }
    }
    return result;
  };

  var _clearEntries = function _clearEntries(type, name) {
    var i = _entries.length,
        entry;
    while (i--) {
      entry = _entries[i];
      if (entry.entryType == type && (name === void 0 || entry.name == name)) {
        _entries.splice(i, 1);
      }
    }
  };

  // @license http://opensource.org/licenses/MIT
  if ('performance' in window === false) {
    window.performance = {};
  }

  if ('now' in window.performance === false) {
    var nowOffset = Date.now();

    if (performance.timing && performance.timing.navigationStart) {
      nowOffset = performance.timing.navigationStart;
    }

    window.performance.now = function now() {
      return Date.now() - nowOffset;
    };
  }

  var startOffset = Date.now ? Date.now() : +new Date();
  var _entries = [];
  var _marksIndex = {};

  ;

  if (!window.performance.mark) {
    window.performance.mark = window.performance.webkitMark || function (name) {
      var mark = {
        name: name,
        entryType: "mark",
        startTime: window.performance.now(),
        duration: 0
      };

      _entries.push(mark);
      _marksIndex[name] = mark;
    };
  }

  if (!window.performance.measure) {
    window.performance.measure = window.performance.webkitMeasure || function (name, startMark, endMark) {
      startMark = _marksIndex[startMark].startTime;
      endMark = _marksIndex[endMark].startTime;

      _entries.push({
        name: name,
        entryType: "measure",
        startTime: startMark,
        duration: endMark - startMark
      });
    };
  }

  if (!window.performance.getEntriesByType) {
    window.performance.getEntriesByType = window.performance.webkitGetEntriesByType || function (type) {
      return _filterEntries("entryType", type);
    };
  }

  if (!window.performance.getEntriesByName) {
    window.performance.getEntriesByName = window.performance.webkitGetEntriesByName || function (name) {
      return _filterEntries("name", name);
    };
  }

  if (!window.performance.clearMarks) {
    window.performance.clearMarks = window.performance.webkitClearMarks || function (name) {
      _clearEntries("mark", name);
    };
  }

  if (!window.performance.clearMeasures) {
    window.performance.clearMeasures = window.performance.webkitClearMeasures || function (name) {
      _clearEntries("measure", name);
    };
  }

  _PLATFORM.performance = window.performance;
}

if (typeof FEATURE_NO_IE === 'undefined') {
  var con = window.console = window.console || {};
  var nop = function nop() {};

  if (!con.memory) con.memory = {};
  ('assert,clear,count,debug,dir,dirxml,error,exception,group,' + 'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' + 'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',').forEach(function (m) {
    if (!con[m]) con[m] = nop;
  });

  if (_typeof(con.log) === 'object') {
    'log,info,warn,error,assert,dir,clear,profile,profileEnd'.split(',').forEach(function (method) {
      console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
  }
}

if (typeof FEATURE_NO_IE === 'undefined') {
  if (!window.CustomEvent || typeof window.CustomEvent !== 'function') {
    var _CustomEvent = function _CustomEvent(event, params) {
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: undefined
      };

      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    };

    _CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = _CustomEvent;
  }
}

if (Element && !Element.prototype.matches) {
  var proto = Element.prototype;
  proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
}

var _FEATURE = exports._FEATURE = {
  shadowDOM: !!HTMLElement.prototype.attachShadow,
  scopedCSS: 'scoped' in document.createElement('style'),
  htmlTemplateElement: function () {
    var d = document.createElement('div');
    d.innerHTML = '<template></template>';
    return 'content' in d.children[0];
  }(),
  mutationObserver: !!(window.MutationObserver || window.WebKitMutationObserver),
  ensureHTMLTemplateElement: function ensureHTMLTemplateElement(t) {
    return t;
  }
};

if (typeof FEATURE_NO_IE === 'undefined') {
  var isSVGTemplate = function isSVGTemplate(el) {
    return el.tagName === 'template' && el.namespaceURI === 'http://www.w3.org/2000/svg';
  };

  var fixSVGTemplateElement = function fixSVGTemplateElement(el) {
    var template = el.ownerDocument.createElement('template');
    var attrs = el.attributes;
    var length = attrs.length;
    var attr = void 0;

    el.parentNode.insertBefore(template, el);

    while (length-- > 0) {
      attr = attrs[length];
      template.setAttribute(attr.name, attr.value);
      el.removeAttribute(attr.name);
    }

    el.parentNode.removeChild(el);

    return fixHTMLTemplateElement(template);
  };

  var fixHTMLTemplateElement = function fixHTMLTemplateElement(template) {
    var content = template.content = document.createDocumentFragment();
    var child = void 0;

    while (child = template.firstChild) {
      content.appendChild(child);
    }

    return template;
  };

  var fixHTMLTemplateElementRoot = function fixHTMLTemplateElementRoot(template) {
    var content = fixHTMLTemplateElement(template).content;
    var childTemplates = content.querySelectorAll('template');

    for (var i = 0, ii = childTemplates.length; i < ii; ++i) {
      var child = childTemplates[i];

      if (isSVGTemplate(child)) {
        fixSVGTemplateElement(child);
      } else {
        fixHTMLTemplateElement(child);
      }
    }

    return template;
  };

  if (!_FEATURE.htmlTemplateElement) {
    _FEATURE.ensureHTMLTemplateElement = fixHTMLTemplateElementRoot;
  }
}

var shadowPoly = window.ShadowDOMPolyfill || null;

var _DOM = exports._DOM = {
  Element: Element,
  NodeList: NodeList,
  SVGElement: SVGElement,
  boundary: 'aurelia-dom-boundary',
  addEventListener: function addEventListener(eventName, callback, capture) {
    document.addEventListener(eventName, callback, capture);
  },
  removeEventListener: function removeEventListener(eventName, callback, capture) {
    document.removeEventListener(eventName, callback, capture);
  },
  adoptNode: function adoptNode(node) {
    return document.adoptNode(node);
  },
  createAttribute: function createAttribute(name) {
    return document.createAttribute(name);
  },
  createElement: function createElement(tagName) {
    return document.createElement(tagName);
  },
  createTextNode: function createTextNode(text) {
    return document.createTextNode(text);
  },
  createComment: function createComment(text) {
    return document.createComment(text);
  },
  createDocumentFragment: function createDocumentFragment() {
    return document.createDocumentFragment();
  },
  createTemplateElement: function createTemplateElement() {
    var template = document.createElement('template');
    return _FEATURE.ensureHTMLTemplateElement(template);
  },
  createMutationObserver: function createMutationObserver(callback) {
    return new (window.MutationObserver || window.WebKitMutationObserver)(callback);
  },
  createCustomEvent: function createCustomEvent(eventType, options) {
    return new window.CustomEvent(eventType, options);
  },
  dispatchEvent: function dispatchEvent(evt) {
    document.dispatchEvent(evt);
  },
  getComputedStyle: function getComputedStyle(element) {
    return window.getComputedStyle(element);
  },
  getElementById: function getElementById(id) {
    return document.getElementById(id);
  },
  querySelector: function querySelector(query) {
    return document.querySelector(query);
  },
  querySelectorAll: function querySelectorAll(query) {
    return document.querySelectorAll(query);
  },
  nextElementSibling: function nextElementSibling(element) {
    if (element.nextElementSibling) {
      return element.nextElementSibling;
    }
    do {
      element = element.nextSibling;
    } while (element && element.nodeType !== 1);
    return element;
  },
  createTemplateFromMarkup: function createTemplateFromMarkup(markup) {
    var parser = document.createElement('div');
    parser.innerHTML = markup;

    var temp = parser.firstElementChild;
    if (!temp || temp.nodeName !== 'TEMPLATE') {
      throw new Error('Template markup must be wrapped in a <template> element e.g. <template> <!-- markup here --> </template>');
    }

    return _FEATURE.ensureHTMLTemplateElement(temp);
  },
  appendNode: function appendNode(newNode, parentNode) {
    (parentNode || document.body).appendChild(newNode);
  },
  replaceNode: function replaceNode(newNode, node, parentNode) {
    if (node.parentNode) {
      node.parentNode.replaceChild(newNode, node);
    } else if (shadowPoly !== null) {
      shadowPoly.unwrap(parentNode).replaceChild(shadowPoly.unwrap(newNode), shadowPoly.unwrap(node));
    } else {
      parentNode.replaceChild(newNode, node);
    }
  },
  removeNode: function removeNode(node, parentNode) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    } else if (parentNode) {
      if (shadowPoly !== null) {
        shadowPoly.unwrap(parentNode).removeChild(shadowPoly.unwrap(node));
      } else {
        parentNode.removeChild(node);
      }
    }
  },
  injectStyles: function injectStyles(styles, destination, prepend, id) {
    if (id) {
      var oldStyle = document.getElementById(id);
      if (oldStyle) {
        var isStyleTag = oldStyle.tagName.toLowerCase() === 'style';

        if (isStyleTag) {
          oldStyle.innerHTML = styles;
          return;
        }

        throw new Error('The provided id does not indicate a style tag.');
      }
    }

    var node = document.createElement('style');
    node.innerHTML = styles;
    node.type = 'text/css';

    if (id) {
      node.id = id;
    }

    destination = destination || document.head;

    if (prepend && destination.childNodes.length > 0) {
      destination.insertBefore(node, destination.childNodes[0]);
    } else {
      destination.appendChild(node);
    }

    return node;
  }
};

function initialize() {
  if (_aureliaPal.isInitialized) {
    return;
  }

  (0, _aureliaPal.initializePAL)(function (platform, feature, dom) {
    Object.assign(platform, _PLATFORM);
    Object.assign(feature, _FEATURE);
    Object.assign(dom, _DOM);

    Object.defineProperty(dom, 'title', {
      get: function get() {
        return document.title;
      },
      set: function set(value) {
        document.title = value;
      }
    });

    Object.defineProperty(dom, 'activeElement', {
      get: function get() {
        return document.activeElement;
      }
    });

    Object.defineProperty(platform, 'XMLHttpRequest', {
      get: function get() {
        return platform.global.XMLHttpRequest;
      }
    });
  });
}
});
;
define('aurelia-pal/dist/commonjs/aurelia-pal',['require','exports','module'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregateError = AggregateError;
exports.initializePAL = initializePAL;
exports.reset = reset;
function AggregateError(message, innerError, skipIfAlreadyAggregate) {
  if (innerError) {
    if (innerError.innerError && skipIfAlreadyAggregate) {
      return innerError;
    }

    var separator = '\n------------------------------------------------\n';

    message += separator + 'Inner Error:\n';

    if (typeof innerError === 'string') {
      message += 'Message: ' + innerError;
    } else {
      if (innerError.message) {
        message += 'Message: ' + innerError.message;
      } else {
        message += 'Unknown Inner Error Type. Displaying Inner Error as JSON:\n ' + JSON.stringify(innerError, null, '  ');
      }

      if (innerError.stack) {
        message += '\nInner Error Stack:\n' + innerError.stack;
        message += '\nEnd Inner Error Stack';
      }
    }

    message += separator;
  }

  var e = new Error(message);
  if (innerError) {
    e.innerError = innerError;
  }

  return e;
}

var FEATURE = exports.FEATURE = {};

var PLATFORM = exports.PLATFORM = {
  noop: function noop() {},
  eachModule: function eachModule() {},
  moduleName: function (_moduleName) {
    function moduleName(_x) {
      return _moduleName.apply(this, arguments);
    }

    moduleName.toString = function () {
      return _moduleName.toString();
    };

    return moduleName;
  }(function (moduleName) {
    return moduleName;
  })
};

PLATFORM.global = function () {
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  return new Function('return this')();
}();

var DOM = exports.DOM = {};
var isInitialized = exports.isInitialized = false;
function initializePAL(callback) {
  if (isInitialized) {
    return;
  }
  exports.isInitialized = isInitialized = true;
  if (typeof Object.getPropertyDescriptor !== 'function') {
    Object.getPropertyDescriptor = function (subject, name) {
      var pd = Object.getOwnPropertyDescriptor(subject, name);
      var proto = Object.getPrototypeOf(subject);
      while (typeof pd === 'undefined' && proto !== null) {
        pd = Object.getOwnPropertyDescriptor(proto, name);
        proto = Object.getPrototypeOf(proto);
      }
      return pd;
    };
  }

  callback(PLATFORM, FEATURE, DOM);
}
function reset() {
  exports.isInitialized = isInitialized = false;
}
});
;
define('aurelia-path/dist/commonjs/aurelia-path',['require','exports','module'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.relativeToFile = relativeToFile;
exports.join = join;
exports.buildQueryString = buildQueryString;
exports.parseQueryString = parseQueryString;

function trimDots(ary) {
  for (var i = 0; i < ary.length; ++i) {
    var part = ary[i];
    if (part === '.') {
      ary.splice(i, 1);
      i -= 1;
    } else if (part === '..') {
      if (i === 0 || i === 1 && ary[2] === '..' || ary[i - 1] === '..') {
        continue;
      } else if (i > 0) {
        ary.splice(i - 1, 2);
        i -= 2;
      }
    }
  }
}

function relativeToFile(name, file) {
  var fileParts = file && file.split('/');
  var nameParts = name.trim().split('/');

  if (nameParts[0].charAt(0) === '.' && fileParts) {
    var normalizedBaseParts = fileParts.slice(0, fileParts.length - 1);
    nameParts.unshift.apply(nameParts, normalizedBaseParts);
  }

  trimDots(nameParts);

  return nameParts.join('/');
}

function join(path1, path2) {
  if (!path1) {
    return path2;
  }

  if (!path2) {
    return path1;
  }

  var schemeMatch = path1.match(/^([^/]*?:)\//);
  var scheme = schemeMatch && schemeMatch.length > 0 ? schemeMatch[1] : '';
  path1 = path1.substr(scheme.length);

  var urlPrefix = void 0;
  if (path1.indexOf('///') === 0 && scheme === 'file:') {
    urlPrefix = '///';
  } else if (path1.indexOf('//') === 0) {
    urlPrefix = '//';
  } else if (path1.indexOf('/') === 0) {
    urlPrefix = '/';
  } else {
    urlPrefix = '';
  }

  var trailingSlash = path2.slice(-1) === '/' ? '/' : '';

  var url1 = path1.split('/');
  var url2 = path2.split('/');
  var url3 = [];

  for (var i = 0, ii = url1.length; i < ii; ++i) {
    if (url1[i] === '..') {
      if (url3.length && url3[url3.length - 1] !== '..') {
        url3.pop();
      } else {
        url3.push(url1[i]);
      }
    } else if (url1[i] === '.' || url1[i] === '') {
      continue;
    } else {
      url3.push(url1[i]);
    }
  }

  for (var _i = 0, _ii = url2.length; _i < _ii; ++_i) {
    if (url2[_i] === '..') {
      if (url3.length && url3[url3.length - 1] !== '..') {
        url3.pop();
      } else {
        url3.push(url2[_i]);
      }
    } else if (url2[_i] === '.' || url2[_i] === '') {
      continue;
    } else {
      url3.push(url2[_i]);
    }
  }

  return scheme + urlPrefix + url3.join('/') + trailingSlash;
}

var encode = encodeURIComponent;
var encodeKey = function encodeKey(k) {
  return encode(k).replace('%24', '$');
};

function buildParam(key, value, traditional) {
  var result = [];
  if (value === null || value === undefined) {
    return result;
  }
  if (Array.isArray(value)) {
    for (var i = 0, l = value.length; i < l; i++) {
      if (traditional) {
        result.push(encodeKey(key) + '=' + encode(value[i]));
      } else {
        var arrayKey = key + '[' + (_typeof(value[i]) === 'object' && value[i] !== null ? i : '') + ']';
        result = result.concat(buildParam(arrayKey, value[i]));
      }
    }
  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !traditional) {
    for (var propertyName in value) {
      result = result.concat(buildParam(key + '[' + propertyName + ']', value[propertyName]));
    }
  } else {
    result.push(encodeKey(key) + '=' + encode(value));
  }
  return result;
}

function buildQueryString(params, traditional) {
  var pairs = [];
  var keys = Object.keys(params || {}).sort();
  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    pairs = pairs.concat(buildParam(key, params[key], traditional));
  }

  if (pairs.length === 0) {
    return '';
  }

  return pairs.join('&');
}

function processScalarParam(existedParam, value) {
  if (Array.isArray(existedParam)) {
    existedParam.push(value);
    return existedParam;
  }
  if (existedParam !== undefined) {
    return [existedParam, value];
  }

  return value;
}

function parseComplexParam(queryParams, keys, value) {
  var currentParams = queryParams;
  var keysLastIndex = keys.length - 1;
  for (var j = 0; j <= keysLastIndex; j++) {
    var key = keys[j] === '' ? currentParams.length : keys[j];
    if (j < keysLastIndex) {
      var prevValue = !currentParams[key] || _typeof(currentParams[key]) === 'object' ? currentParams[key] : [currentParams[key]];
      currentParams = currentParams[key] = prevValue || (isNaN(keys[j + 1]) ? {} : []);
    } else {
      currentParams = currentParams[key] = value;
    }
  }
}

function parseQueryString(queryString) {
  var queryParams = {};
  if (!queryString || typeof queryString !== 'string') {
    return queryParams;
  }

  var query = queryString;
  if (query.charAt(0) === '?') {
    query = query.substr(1);
  }

  var pairs = query.replace(/\+/g, ' ').split('&');
  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i].split('=');
    var key = decodeURIComponent(pair[0]);
    if (!key) {
      continue;
    }

    var keys = key.split('][');
    var keysLastIndex = keys.length - 1;

    if (/\[/.test(keys[0]) && /\]$/.test(keys[keysLastIndex])) {
      keys[keysLastIndex] = keys[keysLastIndex].replace(/\]$/, '');
      keys = keys.shift().split('[').concat(keys);
      keysLastIndex = keys.length - 1;
    } else {
      keysLastIndex = 0;
    }

    if (pair.length >= 2) {
      var value = pair[1] ? decodeURIComponent(pair[1]) : '';
      if (keysLastIndex) {
        parseComplexParam(queryParams, keys, value);
      } else {
        queryParams[key] = processScalarParam(queryParams[key], value);
      }
    } else {
      queryParams[key] = true;
    }
  }
  return queryParams;
}
});
;
define('aurelia-polyfills/dist/commonjs/aurelia-polyfills',['require','exports','module','aurelia-pal'],function (require, exports, module) {'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _aureliaPal = require('aurelia-pal');

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  (function (Object, GOPS) {
    'use strict';

    if (GOPS in Object) return;

    var setDescriptor,
        G = _aureliaPal.PLATFORM.global,
        id = 0,
        random = '' + Math.random(),
        prefix = '__\x01symbol:',
        prefixLength = prefix.length,
        internalSymbol = '__\x01symbol@@' + random,
        DP = 'defineProperty',
        DPies = 'defineProperties',
        GOPN = 'getOwnPropertyNames',
        GOPD = 'getOwnPropertyDescriptor',
        PIE = 'propertyIsEnumerable',
        gOPN = Object[GOPN],
        gOPD = Object[GOPD],
        create = Object.create,
        keys = Object.keys,
        defineProperty = Object[DP],
        $defineProperties = Object[DPies],
        descriptor = gOPD(Object, GOPN),
        ObjectProto = Object.prototype,
        hOP = ObjectProto.hasOwnProperty,
        pIE = ObjectProto[PIE],
        toString = ObjectProto.toString,
        indexOf = Array.prototype.indexOf || function (v) {
      for (var i = this.length; i-- && this[i] !== v;) {}
      return i;
    },
        addInternalIfNeeded = function addInternalIfNeeded(o, uid, enumerable) {
      if (!hOP.call(o, internalSymbol)) {
        defineProperty(o, internalSymbol, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: {}
        });
      }
      o[internalSymbol]['@@' + uid] = enumerable;
    },
        createWithSymbols = function createWithSymbols(proto, descriptors) {
      var self = create(proto);
      if (descriptors !== null && (typeof descriptors === 'undefined' ? 'undefined' : _typeof(descriptors)) === 'object') {
        gOPN(descriptors).forEach(function (key) {
          if (propertyIsEnumerable.call(descriptors, key)) {
            $defineProperty(self, key, descriptors[key]);
          }
        });
      }
      return self;
    },
        copyAsNonEnumerable = function copyAsNonEnumerable(descriptor) {
      var newDescriptor = create(descriptor);
      newDescriptor.enumerable = false;
      return newDescriptor;
    },
        get = function get() {},
        onlyNonSymbols = function onlyNonSymbols(name) {
      return name != internalSymbol && !hOP.call(source, name);
    },
        onlySymbols = function onlySymbols(name) {
      return name != internalSymbol && hOP.call(source, name);
    },
        propertyIsEnumerable = function propertyIsEnumerable(key) {
      var uid = '' + key;
      return onlySymbols(uid) ? hOP.call(this, uid) && this[internalSymbol] && this[internalSymbol]['@@' + uid] : pIE.call(this, key);
    },
        setAndGetSymbol = function setAndGetSymbol(uid) {
      var descriptor = {
        enumerable: false,
        configurable: true,
        get: get,
        set: function set(value) {
          setDescriptor(this, uid, {
            enumerable: false,
            configurable: true,
            writable: true,
            value: value
          });
          addInternalIfNeeded(this, uid, true);
        }
      };
      defineProperty(ObjectProto, uid, descriptor);
      return source[uid] = defineProperty(Object(uid), 'constructor', sourceConstructor);
    },
        _Symbol = function _Symbol2(description) {
      if (this && this !== G) {
        throw new TypeError('Symbol is not a constructor');
      }
      return setAndGetSymbol(prefix.concat(description || '', random, ++id));
    },
        source = create(null),
        sourceConstructor = { value: _Symbol },
        sourceMap = function sourceMap(uid) {
      return source[uid];
    },
        $defineProperty = function defineProp(o, key, descriptor) {
      var uid = '' + key;
      if (onlySymbols(uid)) {
        setDescriptor(o, uid, descriptor.enumerable ? copyAsNonEnumerable(descriptor) : descriptor);
        addInternalIfNeeded(o, uid, !!descriptor.enumerable);
      } else {
        defineProperty(o, key, descriptor);
      }
      return o;
    },
        $getOwnPropertySymbols = function getOwnPropertySymbols(o) {
      var cof = toString.call(o);
      o = cof === '[object String]' ? o.split('') : Object(o);
      return gOPN(o).filter(onlySymbols).map(sourceMap);
    };

    descriptor.value = $defineProperty;
    defineProperty(Object, DP, descriptor);

    descriptor.value = $getOwnPropertySymbols;
    defineProperty(Object, GOPS, descriptor);

    var cachedWindowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? Object.getOwnPropertyNames(window) : [];
    var originalObjectGetOwnPropertyNames = Object.getOwnPropertyNames;
    descriptor.value = function getOwnPropertyNames(o) {
      if (toString.call(o) === '[object Window]') {
        try {
          return originalObjectGetOwnPropertyNames(o);
        } catch (e) {
          return [].concat([], cachedWindowNames);
        }
      }
      return gOPN(o).filter(onlyNonSymbols);
    };
    defineProperty(Object, GOPN, descriptor);

    descriptor.value = function defineProperties(o, descriptors) {
      var symbols = $getOwnPropertySymbols(descriptors);
      if (symbols.length) {
        keys(descriptors).concat(symbols).forEach(function (uid) {
          if (propertyIsEnumerable.call(descriptors, uid)) {
            $defineProperty(o, uid, descriptors[uid]);
          }
        });
      } else {
        $defineProperties(o, descriptors);
      }
      return o;
    };
    defineProperty(Object, DPies, descriptor);

    descriptor.value = propertyIsEnumerable;
    defineProperty(ObjectProto, PIE, descriptor);

    descriptor.value = _Symbol;
    defineProperty(G, 'Symbol', descriptor);

    descriptor.value = function (key) {
      var uid = prefix.concat(prefix, key, random);
      return uid in ObjectProto ? source[uid] : setAndGetSymbol(uid);
    };
    defineProperty(_Symbol, 'for', descriptor);

    descriptor.value = function (symbol) {
      return hOP.call(source, symbol) ? symbol.slice(prefixLength * 2, -random.length) : void 0;
    };
    defineProperty(_Symbol, 'keyFor', descriptor);

    descriptor.value = function getOwnPropertyDescriptor(o, key) {
      var descriptor = gOPD(o, key);
      if (descriptor && onlySymbols(key)) {
        descriptor.enumerable = propertyIsEnumerable.call(o, key);
      }
      return descriptor;
    };
    defineProperty(Object, GOPD, descriptor);

    descriptor.value = function (proto, descriptors) {
      return arguments.length === 1 ? create(proto) : createWithSymbols(proto, descriptors);
    };
    defineProperty(Object, 'create', descriptor);

    descriptor.value = function () {
      var str = toString.call(this);
      return str === '[object String]' && onlySymbols(this) ? '[object Symbol]' : str;
    };
    defineProperty(ObjectProto, 'toString', descriptor);

    try {
      setDescriptor = create(defineProperty({}, prefix, {
        get: function get() {
          return defineProperty(this, prefix, { value: false })[prefix];
        }
      }))[prefix] || defineProperty;
    } catch (o_O) {
      setDescriptor = function setDescriptor(o, key, descriptor) {
        var protoDescriptor = gOPD(ObjectProto, key);
        delete ObjectProto[key];
        defineProperty(o, key, descriptor);
        defineProperty(ObjectProto, key, protoDescriptor);
      };
    }
  })(Object, 'getOwnPropertySymbols');

  (function (O, S) {
    var dP = O.defineProperty,
        ObjectProto = O.prototype,
        toString = ObjectProto.toString,
        toStringTag = 'toStringTag',
        descriptor;
    ['iterator', 'match', 'replace', 'search', 'split', 'hasInstance', 'isConcatSpreadable', 'unscopables', 'species', 'toPrimitive', toStringTag].forEach(function (name) {
      if (!(name in Symbol)) {
        dP(Symbol, name, { value: Symbol(name) });
        switch (name) {
          case toStringTag:
            descriptor = O.getOwnPropertyDescriptor(ObjectProto, 'toString');
            descriptor.value = function () {
              var str = toString.call(this),
                  tst = typeof this === 'undefined' || this === null ? undefined : this[Symbol.toStringTag];
              return typeof tst === 'undefined' ? str : '[object ' + tst + ']';
            };
            dP(ObjectProto, 'toString', descriptor);
            break;
        }
      }
    });
  })(Object, Symbol);

  (function (Si, AP, SP) {

    function returnThis() {
      return this;
    }

    if (!AP[Si]) AP[Si] = function () {
      var i = 0,
          self = this,
          iterator = {
        next: function next() {
          var done = self.length <= i;
          return done ? { done: done } : { done: done, value: self[i++] };
        }
      };
      iterator[Si] = returnThis;
      return iterator;
    };

    if (!SP[Si]) SP[Si] = function () {
      var fromCodePoint = String.fromCodePoint,
          self = this,
          i = 0,
          length = self.length,
          iterator = {
        next: function next() {
          var done = length <= i,
              c = done ? '' : fromCodePoint(self.codePointAt(i));
          i += c.length;
          return done ? { done: done } : { done: done, value: c };
        }
      };
      iterator[Si] = returnThis;
      return iterator;
    };
  })(Symbol.iterator, Array.prototype, String.prototype);
}

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  Number.isNaN = Number.isNaN || function (value) {
    return value !== value;
  };

  Number.isFinite = Number.isFinite || function (value) {
    return typeof value === "number" && isFinite(value);
  };
}

if (!String.prototype.endsWith || function () {
  try {
    return !"ab".endsWith("a", 1);
  } catch (e) {
    return true;
  }
}()) {
  String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();
    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

if (!String.prototype.startsWith || function () {
  try {
    return !"ab".startsWith("b", 1);
  } catch (e) {
    return true;
  }
}()) {
  String.prototype.startsWith = function (searchString, position) {
    position = position || 0;
    return this.substr(position, searchString.length) === searchString;
  };
}

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  if (!Array.from) {
    Array.from = function () {
      var toInteger = function toInteger(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? Math.floor : Math.ceil)(it);
      };
      var toLength = function toLength(it) {
        return it > 0 ? Math.min(toInteger(it), 0x1fffffffffffff) : 0;
      };
      var iterCall = function iterCall(iter, fn, val, index) {
        try {
          return fn(val, index);
        } catch (E) {
          if (typeof iter.return == 'function') iter.return();
          throw E;
        }
      };

      return function from(arrayLike) {
        var O = Object(arrayLike),
            C = typeof this == 'function' ? this : Array,
            aLen = arguments.length,
            mapfn = aLen > 1 ? arguments[1] : undefined,
            mapping = mapfn !== undefined,
            index = 0,
            iterFn = O[Symbol.iterator],
            length,
            result,
            step,
            iterator;
        if (mapping) mapfn = mapfn.bind(aLen > 2 ? arguments[2] : undefined);
        if (iterFn != undefined && !Array.isArray(arrayLike)) {
          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
            result[index] = mapping ? iterCall(iterator, mapfn, step.value, index) : step.value;
          }
        } else {
          length = toLength(O.length);
          for (result = new C(length); length > index; index++) {
            result[index] = mapping ? mapfn(O[index], index) : O[index];
          }
        }
        result.length = index;
        return result;
      };
    }();
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return value;
          }
        }
        return undefined;
      }
    });
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.findIndex called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return i;
          }
        }
        return -1;
      }
    });
  }
}

if (typeof FEATURE_NO_ES2016 === 'undefined' && !Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    configurable: true,
    writable: true,
    enumerable: false,
    value: function value(searchElement) {
      var O = Object(this);
      var len = parseInt(O.length) || 0;
      if (len === 0) {
        return false;
      }
      var n = parseInt(arguments[1]) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
          return true;
        }
        k++;
      }
      return false;
    }
  });
}

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  (function () {
    var needsFix = false;

    try {
      var s = Object.keys('a');
      needsFix = s.length !== 1 || s[0] !== '0';
    } catch (e) {
      needsFix = true;
    }

    if (needsFix) {
      Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
          if (obj === undefined || obj === null) {
            throw TypeError('Cannot convert undefined or null to object');
          }

          obj = Object(obj);

          var result = [],
              prop,
              i;

          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }

          if (hasDontEnumBug) {
            for (i = 0; i < dontEnumsLength; i++) {
              if (hasOwnProperty.call(obj, dontEnums[i])) {
                result.push(dontEnums[i]);
              }
            }
          }

          return result;
        };
      }();
    }
  })();

  (function (O) {
    if ('assign' in O) {
      return;
    }

    O.defineProperty(O, 'assign', {
      configurable: true,
      writable: true,
      value: function () {
        var gOPS = O.getOwnPropertySymbols,
            pIE = O.propertyIsEnumerable,
            filterOS = gOPS ? function (self) {
          return gOPS(self).filter(pIE, self);
        } : function () {
          return Array.prototype;
        };

        return function assign(where) {
          if (gOPS && !(where instanceof O)) {
            console.warn('problematic Symbols', where);
          }

          function set(keyOrSymbol) {
            where[keyOrSymbol] = arg[keyOrSymbol];
          }

          for (var i = 1, ii = arguments.length; i < ii; ++i) {
            var arg = arguments[i];

            if (arg === null || arg === undefined) {
              continue;
            }

            O.keys(arg).concat(filterOS(arg)).forEach(set);
          }

          return where;
        };
      }()
    });
  })(Object);

  if (!Object.is) {
    Object.is = function (x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    };
  }
}

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  (function (global) {
    var i;

    var defineProperty = Object.defineProperty,
        is = function is(a, b) {
      return a === b || a !== a && b !== b;
    };

    if (typeof WeakMap == 'undefined') {
      global.WeakMap = createCollection({
        'delete': sharedDelete,

        clear: sharedClear,

        get: sharedGet,

        has: mapHas,

        set: sharedSet
      }, true);
    }

    if (typeof Map == 'undefined' || typeof new Map().values !== 'function' || !new Map().values().next) {
      var _createCollection;

      global.Map = createCollection((_createCollection = {
        'delete': sharedDelete,

        has: mapHas,

        get: sharedGet,

        set: sharedSet,

        keys: sharedKeys,

        values: sharedValues,

        entries: mapEntries,

        forEach: sharedForEach,

        clear: sharedClear
      }, _createCollection[Symbol.iterator] = mapEntries, _createCollection));
    }

    if (typeof Set == 'undefined' || typeof new Set().values !== 'function' || !new Set().values().next) {
      var _createCollection2;

      global.Set = createCollection((_createCollection2 = {
        has: setHas,

        add: sharedAdd,

        'delete': sharedDelete,

        clear: sharedClear,

        keys: sharedValues,
        values: sharedValues,

        entries: setEntries,

        forEach: sharedForEach
      }, _createCollection2[Symbol.iterator] = sharedValues, _createCollection2));
    }

    if (typeof WeakSet == 'undefined') {
      global.WeakSet = createCollection({
        'delete': sharedDelete,

        add: sharedAdd,

        clear: sharedClear,

        has: setHas
      }, true);
    }

    function createCollection(proto, objectOnly) {
      function Collection(a) {
        if (!this || this.constructor !== Collection) return new Collection(a);
        this._keys = [];
        this._values = [];
        this._itp = [];
        this.objectOnly = objectOnly;

        if (a) init.call(this, a);
      }

      if (!objectOnly) {
        defineProperty(proto, 'size', {
          get: sharedSize
        });
      }

      proto.constructor = Collection;
      Collection.prototype = proto;

      return Collection;
    }

    function init(a) {
      var i;

      if (this.add) a.forEach(this.add, this);else a.forEach(function (a) {
          this.set(a[0], a[1]);
        }, this);
    }

    function sharedDelete(key) {
      if (this.has(key)) {
        this._keys.splice(i, 1);
        this._values.splice(i, 1);

        this._itp.forEach(function (p) {
          if (i < p[0]) p[0]--;
        });
      }

      return -1 < i;
    };

    function sharedGet(key) {
      return this.has(key) ? this._values[i] : undefined;
    }

    function has(list, key) {
      if (this.objectOnly && key !== Object(key)) throw new TypeError("Invalid value used as weak collection key");

      if (key != key || key === 0) for (i = list.length; i-- && !is(list[i], key);) {} else i = list.indexOf(key);
      return -1 < i;
    }

    function setHas(value) {
      return has.call(this, this._values, value);
    }

    function mapHas(value) {
      return has.call(this, this._keys, value);
    }

    function sharedSet(key, value) {
      this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;
      return this;
    }

    function sharedAdd(value) {
      if (!this.has(value)) this._values.push(value);
      return this;
    }

    function sharedClear() {
      (this._keys || 0).length = this._values.length = 0;
    }

    function sharedKeys() {
      return sharedIterator(this._itp, this._keys);
    }

    function sharedValues() {
      return sharedIterator(this._itp, this._values);
    }

    function mapEntries() {
      return sharedIterator(this._itp, this._keys, this._values);
    }

    function setEntries() {
      return sharedIterator(this._itp, this._values, this._values);
    }

    function sharedIterator(itp, array, array2) {
      var _ref;

      var p = [0],
          done = false;
      itp.push(p);
      return _ref = {}, _ref[Symbol.iterator] = function () {
        return this;
      }, _ref.next = function next() {
        var v,
            k = p[0];
        if (!done && k < array.length) {
          v = array2 ? [array[k], array2[k]] : array[k];
          p[0]++;
        } else {
          done = true;
          itp.splice(itp.indexOf(p), 1);
        }
        return { done: done, value: v };
      }, _ref;
    }

    function sharedSize() {
      return this._values.length;
    }

    function sharedForEach(callback, context) {
      var it = this.entries();
      for (;;) {
        var r = it.next();
        if (r.done) break;
        callback.call(context, r.value[1], r.value[0], this);
      }
    }
  })(_aureliaPal.PLATFORM.global);
}

if (typeof FEATURE_NO_ES2015 === 'undefined') {

  var bind = Function.prototype.bind;

  if (typeof _aureliaPal.PLATFORM.global.Reflect === 'undefined') {
    _aureliaPal.PLATFORM.global.Reflect = {};
  }

  if (typeof Reflect.defineProperty !== 'function') {
    Reflect.defineProperty = function (target, propertyKey, descriptor) {
      if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' ? target === null : typeof target !== 'function') {
        throw new TypeError('Reflect.defineProperty called on non-object');
      }
      try {
        Object.defineProperty(target, propertyKey, descriptor);
        return true;
      } catch (e) {
        return false;
      }
    };
  }

  if (typeof Reflect.construct !== 'function') {
    Reflect.construct = function (Target, args) {
      if (args) {
        switch (args.length) {
          case 0:
            return new Target();
          case 1:
            return new Target(args[0]);
          case 2:
            return new Target(args[0], args[1]);
          case 3:
            return new Target(args[0], args[1], args[2]);
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        }
      }

      var a = [null];
      a.push.apply(a, args);
      return new (bind.apply(Target, a))();
    };
  }

  if (typeof Reflect.ownKeys !== 'function') {
    Reflect.ownKeys = function (o) {
      return Object.getOwnPropertyNames(o).concat(Object.getOwnPropertySymbols(o));
    };
  }
}

if (typeof FEATURE_NO_ESNEXT === 'undefined') {

  var emptyMetadata = Object.freeze({});
  var metadataContainerKey = '__metadata__';

  if (typeof Reflect.getOwnMetadata !== 'function') {
    Reflect.getOwnMetadata = function (metadataKey, target, targetKey) {
      if (target.hasOwnProperty(metadataContainerKey)) {
        return (target[metadataContainerKey][targetKey] || emptyMetadata)[metadataKey];
      }
    };
  }

  if (typeof Reflect.defineMetadata !== 'function') {
    Reflect.defineMetadata = function (metadataKey, metadataValue, target, targetKey) {
      var metadataContainer = target.hasOwnProperty(metadataContainerKey) ? target[metadataContainerKey] : target[metadataContainerKey] = {};
      var targetContainer = metadataContainer[targetKey] || (metadataContainer[targetKey] = {});
      targetContainer[metadataKey] = metadataValue;
    };
  }

  if (typeof Reflect.metadata !== 'function') {
    Reflect.metadata = function (metadataKey, metadataValue) {
      return function (target, targetKey) {
        Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);
      };
    };
  }
}
});
;
define('aurelia-route-recognizer/dist/commonjs/aurelia-route-recognizer',['require','exports','module','aurelia-path'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RouteRecognizer = exports.EpsilonSegment = exports.StarSegment = exports.DynamicSegment = exports.StaticSegment = exports.State = undefined;

var _aureliaPath = require('aurelia-path');



var State = exports.State = function () {
  function State(charSpec) {
    

    this.charSpec = charSpec;
    this.nextStates = [];
  }

  State.prototype.get = function get(charSpec) {
    for (var _iterator = this.nextStates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var child = _ref;

      var isEqual = child.charSpec.validChars === charSpec.validChars && child.charSpec.invalidChars === charSpec.invalidChars;

      if (isEqual) {
        return child;
      }
    }

    return undefined;
  };

  State.prototype.put = function put(charSpec) {
    var state = this.get(charSpec);

    if (state) {
      return state;
    }

    state = new State(charSpec);

    this.nextStates.push(state);

    if (charSpec.repeat) {
      state.nextStates.push(state);
    }

    return state;
  };

  State.prototype.match = function match(ch) {
    var nextStates = this.nextStates;
    var results = [];

    for (var i = 0, l = nextStates.length; i < l; i++) {
      var child = nextStates[i];
      var charSpec = child.charSpec;

      if (charSpec.validChars !== undefined) {
        if (charSpec.validChars.indexOf(ch) !== -1) {
          results.push(child);
        }
      } else if (charSpec.invalidChars !== undefined) {
        if (charSpec.invalidChars.indexOf(ch) === -1) {
          results.push(child);
        }
      }
    }

    return results;
  };

  return State;
}();

var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

var StaticSegment = exports.StaticSegment = function () {
  function StaticSegment(string, caseSensitive) {
    

    this.string = string;
    this.caseSensitive = caseSensitive;
  }

  StaticSegment.prototype.eachChar = function eachChar(callback) {
    var s = this.string;
    for (var i = 0, ii = s.length; i < ii; ++i) {
      var ch = s[i];
      callback({ validChars: this.caseSensitive ? ch : ch.toUpperCase() + ch.toLowerCase() });
    }
  };

  StaticSegment.prototype.regex = function regex() {
    return this.string.replace(escapeRegex, '\\$1');
  };

  StaticSegment.prototype.generate = function generate() {
    return this.string;
  };

  return StaticSegment;
}();

var DynamicSegment = exports.DynamicSegment = function () {
  function DynamicSegment(name, optional) {
    

    this.name = name;
    this.optional = optional;
  }

  DynamicSegment.prototype.eachChar = function eachChar(callback) {
    callback({ invalidChars: '/', repeat: true });
  };

  DynamicSegment.prototype.regex = function regex() {
    return '([^/]+)';
  };

  DynamicSegment.prototype.generate = function generate(params, consumed) {
    consumed[this.name] = true;
    return params[this.name];
  };

  return DynamicSegment;
}();

var StarSegment = exports.StarSegment = function () {
  function StarSegment(name) {
    

    this.name = name;
  }

  StarSegment.prototype.eachChar = function eachChar(callback) {
    callback({ invalidChars: '', repeat: true });
  };

  StarSegment.prototype.regex = function regex() {
    return '(.+)';
  };

  StarSegment.prototype.generate = function generate(params, consumed) {
    consumed[this.name] = true;
    return params[this.name];
  };

  return StarSegment;
}();

var EpsilonSegment = exports.EpsilonSegment = function () {
  function EpsilonSegment() {
    
  }

  EpsilonSegment.prototype.eachChar = function eachChar() {};

  EpsilonSegment.prototype.regex = function regex() {
    return '';
  };

  EpsilonSegment.prototype.generate = function generate() {
    return '';
  };

  return EpsilonSegment;
}();

var RouteRecognizer = exports.RouteRecognizer = function () {
  function RouteRecognizer() {
    

    this.rootState = new State();
    this.names = {};
    this.routes = new Map();
  }

  RouteRecognizer.prototype.add = function add(route) {
    var _this = this;

    if (Array.isArray(route)) {
      route.forEach(function (r) {
        return _this.add(r);
      });
      return undefined;
    }

    var currentState = this.rootState;
    var skippableStates = [];
    var regex = '^';
    var types = { statics: 0, dynamics: 0, stars: 0 };
    var names = [];
    var routeName = route.handler.name;
    var isEmpty = true;
    var segments = parse(route.path, names, types, route.caseSensitive);

    for (var i = 0, ii = segments.length; i < ii; i++) {
      var segment = segments[i];
      if (segment instanceof EpsilonSegment) {
        continue;
      }

      var _addSegment = addSegment(currentState, segment),
          firstState = _addSegment[0],
          nextState = _addSegment[1];

      for (var j = 0, jj = skippableStates.length; j < jj; j++) {
        skippableStates[j].nextStates.push(firstState);
      }

      if (segment.optional) {
        skippableStates.push(nextState);
        regex += '(?:/' + segment.regex() + ')?';
      } else {
        currentState = nextState;
        regex += '/' + segment.regex();
        skippableStates.length = 0;
        isEmpty = false;
      }
    }

    if (isEmpty) {
      currentState = currentState.put({ validChars: '/' });
      regex += '/?';
    }

    var handlers = [{ handler: route.handler, names: names }];

    this.routes.set(route.handler, { segments: segments, handlers: handlers });
    if (routeName) {
      var routeNames = Array.isArray(routeName) ? routeName : [routeName];
      for (var _i2 = 0; _i2 < routeNames.length; _i2++) {
        if (!(routeNames[_i2] in this.names)) {
          this.names[routeNames[_i2]] = { segments: segments, handlers: handlers };
        }
      }
    }

    for (var _i3 = 0; _i3 < skippableStates.length; _i3++) {
      var state = skippableStates[_i3];
      state.handlers = handlers;
      state.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');
      state.types = types;
    }

    currentState.handlers = handlers;
    currentState.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');
    currentState.types = types;

    return currentState;
  };

  RouteRecognizer.prototype.getRoute = function getRoute(nameOrRoute) {
    return typeof nameOrRoute === 'string' ? this.names[nameOrRoute] : this.routes.get(nameOrRoute);
  };

  RouteRecognizer.prototype.handlersFor = function handlersFor(nameOrRoute) {
    var route = this.getRoute(nameOrRoute);
    if (!route) {
      throw new Error('There is no route named ' + nameOrRoute);
    }

    return [].concat(route.handlers);
  };

  RouteRecognizer.prototype.hasRoute = function hasRoute(nameOrRoute) {
    return !!this.getRoute(nameOrRoute);
  };

  RouteRecognizer.prototype.generate = function generate(nameOrRoute, params) {
    var route = this.getRoute(nameOrRoute);
    if (!route) {
      throw new Error('There is no route named ' + nameOrRoute);
    }

    var handler = route.handlers[0].handler;
    if (handler.generationUsesHref) {
      return handler.href;
    }

    var routeParams = Object.assign({}, params);
    var segments = route.segments;
    var consumed = {};
    var output = '';

    for (var i = 0, l = segments.length; i < l; i++) {
      var segment = segments[i];

      if (segment instanceof EpsilonSegment) {
        continue;
      }

      var segmentValue = segment.generate(routeParams, consumed);
      if (segmentValue === null || segmentValue === undefined) {
        if (!segment.optional) {
          throw new Error('A value is required for route parameter \'' + segment.name + '\' in route \'' + nameOrRoute + '\'.');
        }
      } else {
        output += '/';
        output += segmentValue;
      }
    }

    if (output.charAt(0) !== '/') {
      output = '/' + output;
    }

    for (var param in consumed) {
      delete routeParams[param];
    }

    var queryString = (0, _aureliaPath.buildQueryString)(routeParams);
    output += queryString ? '?' + queryString : '';

    return output;
  };

  RouteRecognizer.prototype.recognize = function recognize(path) {
    var states = [this.rootState];
    var queryParams = {};
    var isSlashDropped = false;
    var normalizedPath = path;

    var queryStart = normalizedPath.indexOf('?');
    if (queryStart !== -1) {
      var queryString = normalizedPath.substr(queryStart + 1, normalizedPath.length);
      normalizedPath = normalizedPath.substr(0, queryStart);
      queryParams = (0, _aureliaPath.parseQueryString)(queryString);
    }

    normalizedPath = decodeURI(normalizedPath);

    if (normalizedPath.charAt(0) !== '/') {
      normalizedPath = '/' + normalizedPath;
    }

    var pathLen = normalizedPath.length;
    if (pathLen > 1 && normalizedPath.charAt(pathLen - 1) === '/') {
      normalizedPath = normalizedPath.substr(0, pathLen - 1);
      isSlashDropped = true;
    }

    for (var i = 0, l = normalizedPath.length; i < l; i++) {
      states = recognizeChar(states, normalizedPath.charAt(i));
      if (!states.length) {
        break;
      }
    }

    var solutions = [];
    for (var _i4 = 0, _l = states.length; _i4 < _l; _i4++) {
      if (states[_i4].handlers) {
        solutions.push(states[_i4]);
      }
    }

    states = sortSolutions(solutions);

    var state = solutions[0];
    if (state && state.handlers) {
      if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {
        normalizedPath = normalizedPath + '/';
      }

      return findHandler(state, normalizedPath, queryParams);
    }
  };

  return RouteRecognizer;
}();

var RecognizeResults = function RecognizeResults(queryParams) {
  

  this.splice = Array.prototype.splice;
  this.slice = Array.prototype.slice;
  this.push = Array.prototype.push;
  this.length = 0;
  this.queryParams = queryParams || {};
};

function parse(route, names, types, caseSensitive) {
  var normalizedRoute = route;
  if (route.charAt(0) === '/') {
    normalizedRoute = route.substr(1);
  }

  var results = [];

  var splitRoute = normalizedRoute.split('/');
  for (var i = 0, ii = splitRoute.length; i < ii; ++i) {
    var segment = splitRoute[i];

    var match = segment.match(/^:([^?]+)(\?)?$/);
    if (match) {
      var _match = match,
          _name = _match[1],
          optional = _match[2];

      if (_name.indexOf('=') !== -1) {
        throw new Error('Parameter ' + _name + ' in route ' + route + ' has a default value, which is not supported.');
      }
      results.push(new DynamicSegment(_name, !!optional));
      names.push(_name);
      types.dynamics++;
      continue;
    }

    match = segment.match(/^\*(.+)$/);
    if (match) {
      results.push(new StarSegment(match[1]));
      names.push(match[1]);
      types.stars++;
    } else if (segment === '') {
      results.push(new EpsilonSegment());
    } else {
      results.push(new StaticSegment(segment, caseSensitive));
      types.statics++;
    }
  }

  return results;
}

function sortSolutions(states) {
  return states.sort(function (a, b) {
    if (a.types.stars !== b.types.stars) {
      return a.types.stars - b.types.stars;
    }

    if (a.types.stars) {
      if (a.types.statics !== b.types.statics) {
        return b.types.statics - a.types.statics;
      }
      if (a.types.dynamics !== b.types.dynamics) {
        return b.types.dynamics - a.types.dynamics;
      }
    }

    if (a.types.dynamics !== b.types.dynamics) {
      return a.types.dynamics - b.types.dynamics;
    }

    if (a.types.statics !== b.types.statics) {
      return b.types.statics - a.types.statics;
    }

    return 0;
  });
}

function recognizeChar(states, ch) {
  var nextStates = [];

  for (var i = 0, l = states.length; i < l; i++) {
    var state = states[i];
    nextStates.push.apply(nextStates, state.match(ch));
  }

  return nextStates;
}

function findHandler(state, path, queryParams) {
  var handlers = state.handlers;
  var regex = state.regex;
  var captures = path.match(regex);
  var currentCapture = 1;
  var result = new RecognizeResults(queryParams);

  for (var i = 0, l = handlers.length; i < l; i++) {
    var _handler = handlers[i];
    var _names = _handler.names;
    var _params = {};

    for (var j = 0, m = _names.length; j < m; j++) {
      _params[_names[j]] = captures[currentCapture++];
    }

    result.push({ handler: _handler.handler, params: _params, isDynamic: !!_names.length });
  }

  return result;
}

function addSegment(currentState, segment) {
  var firstState = currentState.put({ validChars: '/' });
  var nextState = firstState;
  segment.eachChar(function (ch) {
    nextState = nextState.put(ch);
  });

  return [firstState, nextState];
}
});
;
define('aurelia-router/dist/commonjs/aurelia-router',['require','exports','module','aurelia-logging','aurelia-dependency-injection','aurelia-history','aurelia-route-recognizer','aurelia-event-aggregator'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var LogManager = require('aurelia-logging');
var aureliaDependencyInjection = require('aurelia-dependency-injection');
var aureliaHistory = require('aurelia-history');
var aureliaRouteRecognizer = require('aurelia-route-recognizer');
var aureliaEventAggregator = require('aurelia-event-aggregator');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * Class used to represent an instruction during a navigation.
 */
var NavigationInstruction = /** @class */ (function () {
    function NavigationInstruction(init) {
        /**
         * Current built viewport plan of this nav instruction
         */
        this.plan = null;
        this.options = {};
        Object.assign(this, init);
        this.params = this.params || {};
        this.viewPortInstructions = {};
        var ancestorParams = [];
        var current = this;
        do {
            var currentParams = Object.assign({}, current.params);
            if (current.config && current.config.hasChildRouter) {
                // remove the param for the injected child route segment
                delete currentParams[current.getWildCardName()];
            }
            ancestorParams.unshift(currentParams);
            current = current.parentInstruction;
        } while (current);
        var allParams = Object.assign.apply(Object, [{}, this.queryParams].concat(ancestorParams));
        this.lifecycleArgs = [allParams, this.config, this];
    }
    /**
     * Gets an array containing this instruction and all child instructions for the current navigation.
     */
    NavigationInstruction.prototype.getAllInstructions = function () {
        var instructions = [this];
        var viewPortInstructions = this.viewPortInstructions;
        for (var key in viewPortInstructions) {
            var childInstruction = viewPortInstructions[key].childNavigationInstruction;
            if (childInstruction) {
                instructions.push.apply(instructions, childInstruction.getAllInstructions());
            }
        }
        return instructions;
    };
    /**
     * Gets an array containing the instruction and all child instructions for the previous navigation.
     * Previous instructions are no longer available after navigation completes.
     */
    NavigationInstruction.prototype.getAllPreviousInstructions = function () {
        return this.getAllInstructions().map(function (c) { return c.previousInstruction; }).filter(function (c) { return c; });
    };
    NavigationInstruction.prototype.addViewPortInstruction = function (nameOrInitOptions, strategy, moduleId, component) {
        var viewPortInstruction;
        var viewPortName = typeof nameOrInitOptions === 'string' ? nameOrInitOptions : nameOrInitOptions.name;
        var lifecycleArgs = this.lifecycleArgs;
        var config = Object.assign({}, lifecycleArgs[1], { currentViewPort: viewPortName });
        if (typeof nameOrInitOptions === 'string') {
            viewPortInstruction = {
                name: nameOrInitOptions,
                strategy: strategy,
                moduleId: moduleId,
                component: component,
                childRouter: component.childRouter,
                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]
            };
        }
        else {
            viewPortInstruction = {
                name: viewPortName,
                strategy: nameOrInitOptions.strategy,
                component: nameOrInitOptions.component,
                moduleId: nameOrInitOptions.moduleId,
                childRouter: nameOrInitOptions.component.childRouter,
                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]
            };
        }
        return this.viewPortInstructions[viewPortName] = viewPortInstruction;
    };
    /**
     * Gets the name of the route pattern's wildcard parameter, if applicable.
     */
    NavigationInstruction.prototype.getWildCardName = function () {
        // todo: potential issue, or at least unsafe typings
        var configRoute = this.config.route;
        var wildcardIndex = configRoute.lastIndexOf('*');
        return configRoute.substr(wildcardIndex + 1);
    };
    /**
     * Gets the path and query string created by filling the route
     * pattern's wildcard parameter with the matching param.
     */
    NavigationInstruction.prototype.getWildcardPath = function () {
        var wildcardName = this.getWildCardName();
        var path = this.params[wildcardName] || '';
        var queryString = this.queryString;
        if (queryString) {
            path += '?' + queryString;
        }
        return path;
    };
    /**
     * Gets the instruction's base URL, accounting for wildcard route parameters.
     */
    NavigationInstruction.prototype.getBaseUrl = function () {
        var _this = this;
        var $encodeURI = encodeURI;
        var fragment = decodeURI(this.fragment);
        if (fragment === '') {
            var nonEmptyRoute = this.router.routes.find(function (route) {
                return route.name === _this.config.name &&
                    route.route !== '';
            });
            if (nonEmptyRoute) {
                fragment = nonEmptyRoute.route;
            }
        }
        if (!this.params) {
            return $encodeURI(fragment);
        }
        var wildcardName = this.getWildCardName();
        var path = this.params[wildcardName] || '';
        if (!path) {
            return $encodeURI(fragment);
        }
        return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));
    };
    /**
     * Finalize a viewport instruction
     * @internal
     */
    NavigationInstruction.prototype._commitChanges = function (waitToSwap) {
        var _this = this;
        var router = this.router;
        router.currentInstruction = this;
        var previousInstruction = this.previousInstruction;
        if (previousInstruction) {
            previousInstruction.config.navModel.isActive = false;
        }
        this.config.navModel.isActive = true;
        router.refreshNavigation();
        var loads = [];
        var delaySwaps = [];
        var viewPortInstructions = this.viewPortInstructions;
        var _loop_1 = function (viewPortName) {
            var viewPortInstruction = viewPortInstructions[viewPortName];
            var viewPort = router.viewPorts[viewPortName];
            if (!viewPort) {
                throw new Error("There was no router-view found in the view for " + viewPortInstruction.moduleId + ".");
            }
            var childNavInstruction = viewPortInstruction.childNavigationInstruction;
            if (viewPortInstruction.strategy === "replace" /* Replace */) {
                if (childNavInstruction && childNavInstruction.parentCatchHandler) {
                    loads.push(childNavInstruction._commitChanges(waitToSwap));
                }
                else {
                    if (waitToSwap) {
                        delaySwaps.push({ viewPort: viewPort, viewPortInstruction: viewPortInstruction });
                    }
                    loads.push(viewPort
                        .process(viewPortInstruction, waitToSwap)
                        .then(function () { return childNavInstruction
                        ? childNavInstruction._commitChanges(waitToSwap)
                        : Promise.resolve(); }));
                }
            }
            else {
                if (childNavInstruction) {
                    loads.push(childNavInstruction._commitChanges(waitToSwap));
                }
            }
        };
        for (var viewPortName in viewPortInstructions) {
            _loop_1(viewPortName);
        }
        return Promise
            .all(loads)
            .then(function () {
            delaySwaps.forEach(function (x) { return x.viewPort.swap(x.viewPortInstruction); });
            return null;
        })
            .then(function () { return prune(_this); });
    };
    /**@internal */
    NavigationInstruction.prototype._updateTitle = function () {
        var router = this.router;
        var title = this._buildTitle(router.titleSeparator);
        if (title) {
            router.history.setTitle(title);
        }
    };
    /**@internal */
    NavigationInstruction.prototype._buildTitle = function (separator) {
        if (separator === void 0) { separator = ' | '; }
        var title = '';
        var childTitles = [];
        var navModelTitle = this.config.navModel.title;
        var instructionRouter = this.router;
        var viewPortInstructions = this.viewPortInstructions;
        if (navModelTitle) {
            title = instructionRouter.transformTitle(navModelTitle);
        }
        for (var viewPortName in viewPortInstructions) {
            var viewPortInstruction = viewPortInstructions[viewPortName];
            var child_nav_instruction = viewPortInstruction.childNavigationInstruction;
            if (child_nav_instruction) {
                var childTitle = child_nav_instruction._buildTitle(separator);
                if (childTitle) {
                    childTitles.push(childTitle);
                }
            }
        }
        if (childTitles.length) {
            title = childTitles.join(separator) + (title ? separator : '') + title;
        }
        if (instructionRouter.title) {
            title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);
        }
        return title;
    };
    return NavigationInstruction;
}());
var prune = function (instruction) {
    instruction.previousInstruction = null;
    instruction.plan = null;
};

/**
* Class for storing and interacting with a route's navigation settings.
*/
var NavModel = /** @class */ (function () {
    function NavModel(router, relativeHref) {
        /**
        * True if this nav item is currently active.
        */
        this.isActive = false;
        /**
        * The title.
        */
        this.title = null;
        /**
        * This nav item's absolute href.
        */
        this.href = null;
        /**
        * This nav item's relative href.
        */
        this.relativeHref = null;
        /**
        * Data attached to the route at configuration time.
        */
        this.settings = {};
        /**
        * The route config.
        */
        this.config = null;
        this.router = router;
        this.relativeHref = relativeHref;
    }
    /**
    * Sets the route's title and updates document.title.
    *  If the a navigation is in progress, the change will be applied
    *  to document.title when the navigation completes.
    *
    * @param title The new title.
    */
    NavModel.prototype.setTitle = function (title) {
        this.title = title;
        if (this.isActive) {
            this.router.updateTitle();
        }
    };
    return NavModel;
}());

function _normalizeAbsolutePath(path, hasPushState, absolute) {
    if (absolute === void 0) { absolute = false; }
    if (!hasPushState && path[0] !== '#') {
        path = '#' + path;
    }
    if (hasPushState && absolute) {
        path = path.substring(1, path.length);
    }
    return path;
}
function _createRootedPath(fragment, baseUrl, hasPushState, absolute) {
    if (isAbsoluteUrl.test(fragment)) {
        return fragment;
    }
    var path = '';
    if (baseUrl.length && baseUrl[0] !== '/') {
        path += '/';
    }
    path += baseUrl;
    if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {
        path += '/';
    }
    if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {
        path = path.substring(0, path.length - 1);
    }
    return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);
}
function _resolveUrl(fragment, baseUrl, hasPushState) {
    if (isRootedPath.test(fragment)) {
        return _normalizeAbsolutePath(fragment, hasPushState);
    }
    return _createRootedPath(fragment, baseUrl, hasPushState);
}
function _ensureArrayWithSingleRoutePerConfig(config) {
    var routeConfigs = [];
    if (Array.isArray(config.route)) {
        for (var i = 0, ii = config.route.length; i < ii; ++i) {
            var current = Object.assign({}, config);
            current.route = config.route[i];
            routeConfigs.push(current);
        }
    }
    else {
        routeConfigs.push(Object.assign({}, config));
    }
    return routeConfigs;
}
var isRootedPath = /^#?\//;
var isAbsoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;

/**
 * Class used to configure a [[Router]] instance.
 *
 * @constructor
 */
var RouterConfiguration = /** @class */ (function () {
    function RouterConfiguration() {
        this.instructions = [];
        this.options = {};
        this.pipelineSteps = [];
    }
    /**
     * Adds a step to be run during the [[Router]]'s navigation pipeline.
     *
     * @param name The name of the pipeline slot to insert the step into.
     * @param step The pipeline step.
     * @chainable
     */
    RouterConfiguration.prototype.addPipelineStep = function (name, step) {
        if (step === null || step === undefined) {
            throw new Error('Pipeline step cannot be null or undefined.');
        }
        this.pipelineSteps.push({ name: name, step: step });
        return this;
    };
    /**
     * Adds a step to be run during the [[Router]]'s authorize pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    RouterConfiguration.prototype.addAuthorizeStep = function (step) {
        return this.addPipelineStep("authorize" /* Authorize */, step);
    };
    /**
     * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    RouterConfiguration.prototype.addPreActivateStep = function (step) {
        return this.addPipelineStep("preActivate" /* PreActivate */, step);
    };
    /**
     * Adds a step to be run during the [[Router]]'s preRender pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    RouterConfiguration.prototype.addPreRenderStep = function (step) {
        return this.addPipelineStep("preRender" /* PreRender */, step);
    };
    /**
     * Adds a step to be run during the [[Router]]'s postRender pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    RouterConfiguration.prototype.addPostRenderStep = function (step) {
        return this.addPipelineStep("postRender" /* PostRender */, step);
    };
    /**
     * Configures a route that will be used if there is no previous location available on navigation cancellation.
     *
     * @param fragment The URL fragment to use as the navigation destination.
     * @chainable
     */
    RouterConfiguration.prototype.fallbackRoute = function (fragment) {
        this._fallbackRoute = fragment;
        return this;
    };
    /**
     * Maps one or more routes to be registered with the router.
     *
     * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.
     * @chainable
     */
    RouterConfiguration.prototype.map = function (route) {
        var _this = this;
        if (Array.isArray(route)) {
            route.forEach(function (r) { return _this.map(r); });
            return this;
        }
        return this.mapRoute(route);
    };
    /**
     * Configures defaults to use for any view ports.
     *
     * @param viewPortConfig a view port configuration object to use as a
     *  default, of the form { viewPortName: { moduleId } }.
     * @chainable
     */
    RouterConfiguration.prototype.useViewPortDefaults = function (viewPortConfig) {
        this.viewPortDefaults = viewPortConfig;
        return this;
    };
    /**
     * Maps a single route to be registered with the router.
     *
     * @param route The [[RouteConfig]] to map.
     * @chainable
     */
    RouterConfiguration.prototype.mapRoute = function (config) {
        this.instructions.push(function (router) {
            var routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);
            var navModel;
            for (var i = 0, ii = routeConfigs.length; i < ii; ++i) {
                var routeConfig = routeConfigs[i];
                routeConfig.settings = routeConfig.settings || {};
                if (!navModel) {
                    navModel = router.createNavModel(routeConfig);
                }
                router.addRoute(routeConfig, navModel);
            }
        });
        return this;
    };
    /**
     * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.
     *
     * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the
     *  [[NavigationInstruction]] and selects a moduleId to load.
     * @chainable
     */
    RouterConfiguration.prototype.mapUnknownRoutes = function (config) {
        this.unknownRouteConfig = config;
        return this;
    };
    /**
     * Applies the current configuration to the specified [[Router]].
     *
     * @param router The [[Router]] to apply the configuration to.
     */
    RouterConfiguration.prototype.exportToRouter = function (router) {
        var instructions = this.instructions;
        for (var i = 0, ii = instructions.length; i < ii; ++i) {
            instructions[i](router);
        }
        var _a = this, title = _a.title, titleSeparator = _a.titleSeparator, unknownRouteConfig = _a.unknownRouteConfig, _fallbackRoute = _a._fallbackRoute, viewPortDefaults = _a.viewPortDefaults;
        if (title) {
            router.title = title;
        }
        if (titleSeparator) {
            router.titleSeparator = titleSeparator;
        }
        if (unknownRouteConfig) {
            router.handleUnknownRoutes(unknownRouteConfig);
        }
        if (_fallbackRoute) {
            router.fallbackRoute = _fallbackRoute;
        }
        if (viewPortDefaults) {
            router.useViewPortDefaults(viewPortDefaults);
        }
        Object.assign(router.options, this.options);
        var pipelineSteps = this.pipelineSteps;
        var pipelineStepCount = pipelineSteps.length;
        if (pipelineStepCount) {
            if (!router.isRoot) {
                throw new Error('Pipeline steps can only be added to the root router');
            }
            var pipelineProvider = router.pipelineProvider;
            for (var i = 0, ii = pipelineStepCount; i < ii; ++i) {
                var _b = pipelineSteps[i], name_1 = _b.name, step = _b.step;
                pipelineProvider.addStep(name_1, step);
            }
        }
    };
    return RouterConfiguration;
}());

/**
 * The primary class responsible for handling routing and navigation.
 */
var Router = /** @class */ (function () {
    /**
     * @param container The [[Container]] to use when child routers.
     * @param history The [[History]] implementation to delegate navigation requests to.
     */
    function Router(container, history) {
        var _this = this;
        /**
         * The parent router, or null if this instance is not a child router.
         */
        this.parent = null;
        this.options = {};
        /**
         * The defaults used when a viewport lacks specified content
         */
        this.viewPortDefaults = {};
        /**
         * Extension point to transform the document title before it is built and displayed.
         * By default, child routers delegate to the parent router, and the app router
         * returns the title unchanged.
         */
        this.transformTitle = function (title) {
            if (_this.parent) {
                return _this.parent.transformTitle(title);
            }
            return title;
        };
        this.container = container;
        this.history = history;
        this.reset();
    }
    /**
     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.
     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.
     */
    Router.prototype.reset = function () {
        var _this = this;
        this.viewPorts = {};
        this.routes = [];
        this.baseUrl = '';
        this.isConfigured = false;
        this.isNavigating = false;
        this.isExplicitNavigation = false;
        this.isExplicitNavigationBack = false;
        this.isNavigatingFirst = false;
        this.isNavigatingNew = false;
        this.isNavigatingRefresh = false;
        this.isNavigatingForward = false;
        this.isNavigatingBack = false;
        this.couldDeactivate = false;
        this.navigation = [];
        this.currentInstruction = null;
        this.viewPortDefaults = {};
        this._fallbackOrder = 100;
        this._recognizer = new aureliaRouteRecognizer.RouteRecognizer();
        this._childRecognizer = new aureliaRouteRecognizer.RouteRecognizer();
        this._configuredPromise = new Promise(function (resolve) {
            _this._resolveConfiguredPromise = resolve;
        });
    };
    Object.defineProperty(Router.prototype, "isRoot", {
        /**
         * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.
         */
        get: function () {
            return !this.parent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Registers a viewPort to be used as a rendering target for activated routes.
     *
     * @param viewPort The viewPort.
     * @param name The name of the viewPort. 'default' if unspecified.
     */
    Router.prototype.registerViewPort = function (viewPort, name) {
        name = name || 'default';
        this.viewPorts[name] = viewPort;
    };
    /**
     * Returns a Promise that resolves when the router is configured.
     */
    Router.prototype.ensureConfigured = function () {
        return this._configuredPromise;
    };
    /**
     * Configures the router.
     *
     * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].
     */
    Router.prototype.configure = function (callbackOrConfig) {
        var _this = this;
        this.isConfigured = true;
        var result = callbackOrConfig;
        var config;
        if (typeof callbackOrConfig === 'function') {
            config = new RouterConfiguration();
            result = callbackOrConfig(config);
        }
        return Promise
            .resolve(result)
            .then(function (c) {
            if (c && c.exportToRouter) {
                config = c;
            }
            config.exportToRouter(_this);
            _this.isConfigured = true;
            _this._resolveConfiguredPromise();
        });
    };
    /**
     * Navigates to a new location.
     *
     * @param fragment The URL fragment to use as the navigation destination.
     * @param options The navigation options.
     */
    Router.prototype.navigate = function (fragment, options) {
        if (!this.isConfigured && this.parent) {
            return this.parent.navigate(fragment, options);
        }
        this.isExplicitNavigation = true;
        return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);
    };
    /**
     * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed
     * by [[Router.navigate]].
     *
     * @param route The name of the route to use when generating the navigation location.
     * @param params The route parameters to be used when populating the route pattern.
     * @param options The navigation options.
     */
    Router.prototype.navigateToRoute = function (route, params, options) {
        var path = this.generate(route, params);
        return this.navigate(path, options);
    };
    /**
     * Navigates back to the most recent location in history.
     */
    Router.prototype.navigateBack = function () {
        this.isExplicitNavigationBack = true;
        this.history.navigateBack();
    };
    /**
     * Creates a child router of the current router.
     *
     * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.
     * @returns {Router} The new child Router.
     */
    Router.prototype.createChild = function (container) {
        var childRouter = new Router(container || this.container.createChild(), this.history);
        childRouter.parent = this;
        return childRouter;
    };
    /**
     * Generates a URL fragment matching the specified route pattern.
     *
     * @param name The name of the route whose pattern should be used to generate the fragment.
     * @param params The route params to be used to populate the route pattern.
     * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.
     * @returns {string} A string containing the generated URL fragment.
     */
    Router.prototype.generate = function (nameOrRoute, params, options) {
        if (params === void 0) { params = {}; }
        if (options === void 0) { options = {}; }
        // A child recognizer generates routes for potential child routes. Any potential child route is added
        // to the childRoute property of params for the childRouter to recognize. When generating routes, we
        // use the childRecognizer when childRoute params are available to generate a child router enabled route.
        var recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;
        var hasRoute = recognizer.hasRoute(nameOrRoute);
        if (!hasRoute) {
            if (this.parent) {
                return this.parent.generate(nameOrRoute, params, options);
            }
            throw new Error("A route with name '" + nameOrRoute + "' could not be found. Check that `name: '" + nameOrRoute + "'` was specified in the route's config.");
        }
        var path = recognizer.generate(nameOrRoute, params);
        var rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);
        return options.absolute ? "" + this.history.getAbsoluteRoot() + rootedPath : rootedPath;
    };
    /**
     * Creates a [[NavModel]] for the specified route config.
     *
     * @param config The route config.
     */
    Router.prototype.createNavModel = function (config) {
        var navModel = new NavModel(this, 'href' in config
            ? config.href
            // potential error when config.route is a string[] ?
            : config.route);
        navModel.title = config.title;
        navModel.order = config.nav;
        navModel.href = config.href;
        navModel.settings = config.settings;
        navModel.config = config;
        return navModel;
    };
    /**
     * Registers a new route with the router.
     *
     * @param config The [[RouteConfig]].
     * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.
     */
    Router.prototype.addRoute = function (config, navModel) {
        if (Array.isArray(config.route)) {
            var routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);
            // the following is wrong. todo: fix this after TS refactoring release
            routeConfigs.forEach(this.addRoute.bind(this));
            return;
        }
        validateRouteConfig(config);
        if (!('viewPorts' in config) && !config.navigationStrategy) {
            config.viewPorts = {
                'default': {
                    moduleId: config.moduleId,
                    view: config.view
                }
            };
        }
        if (!navModel) {
            navModel = this.createNavModel(config);
        }
        this.routes.push(config);
        var path = config.route;
        if (path.charAt(0) === '/') {
            path = path.substr(1);
        }
        var caseSensitive = config.caseSensitive === true;
        var state = this._recognizer.add({
            path: path,
            handler: config,
            caseSensitive: caseSensitive
        });
        if (path) {
            var settings = config.settings;
            delete config.settings;
            var withChild = JSON.parse(JSON.stringify(config));
            config.settings = settings;
            withChild.route = path + "/*childRoute";
            withChild.hasChildRouter = true;
            this._childRecognizer.add({
                path: withChild.route,
                handler: withChild,
                caseSensitive: caseSensitive
            });
            withChild.navModel = navModel;
            withChild.settings = config.settings;
            withChild.navigationStrategy = config.navigationStrategy;
        }
        config.navModel = navModel;
        var navigation = this.navigation;
        if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {
            if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {
                throw new Error('Invalid route config for "' + config.route + '" : dynamic routes must specify an "href:" to be included in the navigation model.');
            }
            if (typeof navModel.order !== 'number') {
                navModel.order = ++this._fallbackOrder;
            }
            navigation.push(navModel);
            // this is a potential error / inconsistency between browsers
            //
            // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
            // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,
            // but sorted with respect to all different elements.
            // Note: the ECMAscript standard does not guarantee this behaviour,
            // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
            navigation.sort(function (a, b) { return a.order - b.order; });
        }
    };
    /**
     * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.
     *
     * @param name The name of the route to check.
     */
    Router.prototype.hasRoute = function (name) {
        return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));
    };
    /**
     * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.
     *
     * @param name The name of the route to check.
     */
    Router.prototype.hasOwnRoute = function (name) {
        return this._recognizer.hasRoute(name);
    };
    /**
     * Register a handler to use when the incoming URL fragment doesn't match any registered routes.
     *
     * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].
     */
    Router.prototype.handleUnknownRoutes = function (config) {
        var _this = this;
        if (!config) {
            throw new Error('Invalid unknown route handler');
        }
        this.catchAllHandler = function (instruction) {
            return _this
                ._createRouteConfig(config, instruction)
                .then(function (c) {
                instruction.config = c;
                return instruction;
            });
        };
    };
    /**
     * Updates the document title using the current navigation instruction.
     */
    Router.prototype.updateTitle = function () {
        var parentRouter = this.parent;
        if (parentRouter) {
            return parentRouter.updateTitle();
        }
        var currentInstruction = this.currentInstruction;
        if (currentInstruction) {
            currentInstruction._updateTitle();
        }
        return undefined;
    };
    /**
     * Updates the navigation routes with hrefs relative to the current location.
     * Note: This method will likely move to a plugin in a future release.
     */
    Router.prototype.refreshNavigation = function () {
        var nav = this.navigation;
        for (var i = 0, length_1 = nav.length; i < length_1; i++) {
            var current = nav[i];
            if (!current.config.href) {
                current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);
            }
            else {
                current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);
            }
        }
    };
    /**
     * Sets the default configuration for the view ports. This specifies how to
     *  populate a view port for which no module is specified. The default is
     *  an empty view/view-model pair.
     */
    Router.prototype.useViewPortDefaults = function ($viewPortDefaults) {
        // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction
        var viewPortDefaults = $viewPortDefaults;
        for (var viewPortName in viewPortDefaults) {
            var viewPortConfig = viewPortDefaults[viewPortName];
            this.viewPortDefaults[viewPortName] = {
                moduleId: viewPortConfig.moduleId
            };
        }
    };
    /**@internal */
    Router.prototype._refreshBaseUrl = function () {
        var parentRouter = this.parent;
        if (parentRouter) {
            this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);
        }
    };
    /**@internal */
    Router.prototype._createNavigationInstruction = function (url, parentInstruction) {
        if (url === void 0) { url = ''; }
        if (parentInstruction === void 0) { parentInstruction = null; }
        var fragment = url;
        var queryString = '';
        var queryIndex = url.indexOf('?');
        if (queryIndex !== -1) {
            fragment = url.substr(0, queryIndex);
            queryString = url.substr(queryIndex + 1);
        }
        var urlRecognizationResults = this._recognizer.recognize(url);
        if (!urlRecognizationResults || !urlRecognizationResults.length) {
            urlRecognizationResults = this._childRecognizer.recognize(url);
        }
        var instructionInit = {
            fragment: fragment,
            queryString: queryString,
            config: null,
            parentInstruction: parentInstruction,
            previousInstruction: this.currentInstruction,
            router: this,
            options: {
                compareQueryParams: this.options.compareQueryParams
            }
        };
        var result;
        if (urlRecognizationResults && urlRecognizationResults.length) {
            var first = urlRecognizationResults[0];
            var instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                params: first.params,
                queryParams: first.queryParams || urlRecognizationResults.queryParams,
                config: first.config || first.handler
            }));
            if (typeof first.handler === 'function') {
                result = evaluateNavigationStrategy(instruction, first.handler, first);
            }
            else if (first.handler && typeof first.handler.navigationStrategy === 'function') {
                result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);
            }
            else {
                result = Promise.resolve(instruction);
            }
        }
        else if (this.catchAllHandler) {
            var instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                params: { path: fragment },
                queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},
                config: null // config will be created by the catchAllHandler
            }));
            result = evaluateNavigationStrategy(instruction, this.catchAllHandler);
        }
        else if (this.parent) {
            var router = this._parentCatchAllHandler(this.parent);
            if (router) {
                var newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);
                var instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                    params: { path: fragment },
                    queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},
                    router: router,
                    parentInstruction: newParentInstruction,
                    parentCatchHandler: true,
                    config: null // config will be created by the chained parent catchAllHandler
                }));
                result = evaluateNavigationStrategy(instruction, router.catchAllHandler);
            }
        }
        if (result && parentInstruction) {
            this.baseUrl = generateBaseUrl(this.parent, parentInstruction);
        }
        return result || Promise.reject(new Error("Route not found: " + url));
    };
    /**@internal */
    Router.prototype._findParentInstructionFromRouter = function (router, instruction) {
        if (instruction.router === router) {
            instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId
            return instruction;
        }
        else if (instruction.parentInstruction) {
            return this._findParentInstructionFromRouter(router, instruction.parentInstruction);
        }
        return undefined;
    };
    /**@internal */
    Router.prototype._parentCatchAllHandler = function (router) {
        if (router.catchAllHandler) {
            return router;
        }
        else if (router.parent) {
            return this._parentCatchAllHandler(router.parent);
        }
        return false;
    };
    /**
     * @internal
     */
    Router.prototype._createRouteConfig = function (config, instruction) {
        var _this = this;
        return Promise
            .resolve(config)
            .then(function (c) {
            if (typeof c === 'string') {
                return { moduleId: c };
            }
            else if (typeof c === 'function') {
                return c(instruction);
            }
            return c;
        })
            // typing here could be either RouteConfig or RedirectConfig
            // but temporarily treat both as RouteConfig
            // todo: improve typings precision
            .then(function (c) { return typeof c === 'string' ? { moduleId: c } : c; })
            .then(function (c) {
            c.route = instruction.params.path;
            validateRouteConfig(c);
            if (!c.navModel) {
                c.navModel = _this.createNavModel(c);
            }
            return c;
        });
    };
    return Router;
}());
/* @internal exported for unit testing */
var generateBaseUrl = function (router, instruction) {
    return "" + (router.baseUrl || '') + (instruction.getBaseUrl() || '');
};
/* @internal exported for unit testing */
var validateRouteConfig = function (config) {
    if (typeof config !== 'object') {
        throw new Error('Invalid Route Config');
    }
    if (typeof config.route !== 'string') {
        var name_1 = config.name || '(no name)';
        throw new Error('Invalid Route Config for "' + name_1 + '": You must specify a "route:" pattern.');
    }
    if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {
        throw new Error('Invalid Route Config for "' + config.route + '": You must specify a "moduleId:", "redirect:", "navigationStrategy:", or "viewPorts:".');
    }
};
/* @internal exported for unit testing */
var evaluateNavigationStrategy = function (instruction, evaluator, context) {
    return Promise
        .resolve(evaluator.call(context, instruction))
        .then(function () {
        if (!('viewPorts' in instruction.config)) {
            instruction.config.viewPorts = {
                'default': {
                    moduleId: instruction.config.moduleId
                }
            };
        }
        return instruction;
    });
};

/**@internal exported for unit testing */
var createNextFn = function (instruction, steps) {
    var index = -1;
    var next = function () {
        index++;
        if (index < steps.length) {
            var currentStep = steps[index];
            try {
                return currentStep(instruction, next);
            }
            catch (e) {
                return next.reject(e);
            }
        }
        else {
            return next.complete();
        }
    };
    next.complete = createCompletionHandler(next, "completed" /* Completed */);
    next.cancel = createCompletionHandler(next, "canceled" /* Canceled */);
    next.reject = createCompletionHandler(next, "rejected" /* Rejected */);
    return next;
};
/**@internal exported for unit testing */
var createCompletionHandler = function (next, status) {
    return function (output) { return Promise
        .resolve({
        status: status,
        output: output,
        completed: status === "completed" /* Completed */
    }); };
};

/**
 * The class responsible for managing and processing the navigation pipeline.
 */
var Pipeline = /** @class */ (function () {
    function Pipeline() {
        /**
         * The pipeline steps. And steps added via addStep will be converted to a function
         * The actualy running functions with correct step contexts of this pipeline
         */
        this.steps = [];
    }
    /**
     * Adds a step to the pipeline.
     *
     * @param step The pipeline step.
     */
    Pipeline.prototype.addStep = function (step) {
        var run;
        if (typeof step === 'function') {
            run = step;
        }
        else if (typeof step.getSteps === 'function') {
            // getSteps is to enable support open slots
            // where devs can add multiple steps into the same slot name
            var steps = step.getSteps();
            for (var i = 0, l = steps.length; i < l; i++) {
                this.addStep(steps[i]);
            }
            return this;
        }
        else {
            run = step.run.bind(step);
        }
        this.steps.push(run);
        return this;
    };
    /**
     * Runs the pipeline.
     *
     * @param instruction The navigation instruction to process.
     */
    Pipeline.prototype.run = function (instruction) {
        var nextFn = createNextFn(instruction, this.steps);
        return nextFn();
    };
    return Pipeline;
}());

/**
* Determines if the provided object is a navigation command.
* A navigation command is anything with a navigate method.
*
* @param obj The object to check.
*/
function isNavigationCommand(obj) {
    return obj && typeof obj.navigate === 'function';
}
/**
* Used during the activation lifecycle to cause a redirect.
*/
var Redirect = /** @class */ (function () {
    /**
     * @param url The URL fragment to use as the navigation destination.
     * @param options The navigation options.
     */
    function Redirect(url, options) {
        if (options === void 0) { options = {}; }
        this.url = url;
        this.options = Object.assign({ trigger: true, replace: true }, options);
        this.shouldContinueProcessing = false;
    }
    /**
     * Called by the activation system to set the child router.
     *
     * @param router The router.
     */
    Redirect.prototype.setRouter = function (router) {
        this.router = router;
    };
    /**
     * Called by the navigation pipeline to navigate.
     *
     * @param appRouter The router to be redirected.
     */
    Redirect.prototype.navigate = function (appRouter) {
        var navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);
        navigatingRouter.navigate(this.url, this.options);
    };
    return Redirect;
}());
/**
 * Used during the activation lifecycle to cause a redirect to a named route.
 */
var RedirectToRoute = /** @class */ (function () {
    /**
     * @param route The name of the route.
     * @param params The parameters to be sent to the activation method.
     * @param options The options to use for navigation.
     */
    function RedirectToRoute(route, params, options) {
        if (params === void 0) { params = {}; }
        if (options === void 0) { options = {}; }
        this.route = route;
        this.params = params;
        this.options = Object.assign({ trigger: true, replace: true }, options);
        this.shouldContinueProcessing = false;
    }
    /**
     * Called by the activation system to set the child router.
     *
     * @param router The router.
     */
    RedirectToRoute.prototype.setRouter = function (router) {
        this.router = router;
    };
    /**
     * Called by the navigation pipeline to navigate.
     *
     * @param appRouter The router to be redirected.
     */
    RedirectToRoute.prototype.navigate = function (appRouter) {
        var navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);
        navigatingRouter.navigateToRoute(this.route, this.params, this.options);
    };
    return RedirectToRoute;
}());

/**
 * @internal exported for unit testing
 */
function _buildNavigationPlan(instruction, forceLifecycleMinimum) {
    var config = instruction.config;
    if ('redirect' in config) {
        return buildRedirectPlan(instruction);
    }
    var prevInstruction = instruction.previousInstruction;
    var defaultViewPortConfigs = instruction.router.viewPortDefaults;
    if (prevInstruction) {
        return buildTransitionPlans(instruction, prevInstruction, defaultViewPortConfigs, forceLifecycleMinimum);
    }
    // first navigation, only need to prepare a few information for each viewport plan
    var viewPortPlans = {};
    var viewPortConfigs = config.viewPorts;
    for (var viewPortName in viewPortConfigs) {
        var viewPortConfig = viewPortConfigs[viewPortName];
        if (viewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {
            viewPortConfig = defaultViewPortConfigs[viewPortName];
        }
        viewPortPlans[viewPortName] = {
            name: viewPortName,
            strategy: "replace" /* Replace */,
            config: viewPortConfig
        };
    }
    return Promise.resolve(viewPortPlans);
}
/**
 * Build redirect plan based on config of a navigation instruction
 * @internal exported for unit testing
 */
var buildRedirectPlan = function (instruction) {
    var config = instruction.config;
    var router = instruction.router;
    return router
        ._createNavigationInstruction(config.redirect)
        .then(function (redirectInstruction) {
        var params = {};
        var originalInstructionParams = instruction.params;
        var redirectInstructionParams = redirectInstruction.params;
        for (var key in redirectInstructionParams) {
            // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }
            var val = redirectInstructionParams[key];
            if (typeof val === 'string' && val[0] === ':') {
                val = val.slice(1);
                // And if that param is found on the original instruction then use it
                if (val in originalInstructionParams) {
                    params[key] = originalInstructionParams[val];
                }
            }
            else {
                params[key] = redirectInstructionParams[key];
            }
        }
        var redirectLocation = router.generate(redirectInstruction.config, params, instruction.options);
        // Special handling for child routes
        for (var key in originalInstructionParams) {
            redirectLocation = redirectLocation.replace(":" + key, originalInstructionParams[key]);
        }
        var queryString = instruction.queryString;
        if (queryString) {
            redirectLocation += '?' + queryString;
        }
        return Promise.resolve(new Redirect(redirectLocation));
    });
};
/**
 * @param viewPortPlans the Plan record that holds information about built plans
 * @internal exported for unit testing
 */
var buildTransitionPlans = function (currentInstruction, previousInstruction, defaultViewPortConfigs, forceLifecycleMinimum) {
    var viewPortPlans = {};
    var newInstructionConfig = currentInstruction.config;
    var hasNewParams = hasDifferentParameterValues(previousInstruction, currentInstruction);
    var pending = [];
    var previousViewPortInstructions = previousInstruction.viewPortInstructions;
    var _loop_1 = function (viewPortName) {
        var prevViewPortInstruction = previousViewPortInstructions[viewPortName];
        var prevViewPortComponent = prevViewPortInstruction.component;
        var newInstructionViewPortConfigs = newInstructionConfig.viewPorts;
        // if this is invoked on a viewport without any changes, based on new url,
        // newViewPortConfig will be the existing viewport instruction
        var nextViewPortConfig = viewPortName in newInstructionViewPortConfigs
            ? newInstructionViewPortConfigs[viewPortName]
            : prevViewPortInstruction;
        if (nextViewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {
            nextViewPortConfig = defaultViewPortConfigs[viewPortName];
        }
        var viewPortActivationStrategy = determineActivationStrategy(currentInstruction, prevViewPortInstruction, nextViewPortConfig, hasNewParams, forceLifecycleMinimum);
        var viewPortPlan = viewPortPlans[viewPortName] = {
            name: viewPortName,
            // ViewPortInstruction can quack like a RouteConfig
            config: nextViewPortConfig,
            prevComponent: prevViewPortComponent,
            prevModuleId: prevViewPortInstruction.moduleId,
            strategy: viewPortActivationStrategy
        };
        // recursively build nav plans for all existing child routers/viewports of this viewport
        // this is possible because existing child viewports and routers already have necessary information
        // to process the wildcard path from parent instruction
        if (viewPortActivationStrategy !== "replace" /* Replace */ && prevViewPortInstruction.childRouter) {
            var path = currentInstruction.getWildcardPath();
            var task = prevViewPortInstruction
                .childRouter
                ._createNavigationInstruction(path, currentInstruction)
                .then(function (childInstruction) {
                viewPortPlan.childNavigationInstruction = childInstruction;
                return _buildNavigationPlan(childInstruction, 
                // is it safe to assume viewPortPlan has not been changed from previous assignment?
                // if so, can just use local variable viewPortPlanStrategy
                // there could be user code modifying viewport plan during _createNavigationInstruction?
                viewPortPlan.strategy === "invoke-lifecycle" /* InvokeLifecycle */)
                    .then(function (childPlan) {
                    if (childPlan instanceof Redirect) {
                        return Promise.reject(childPlan);
                    }
                    childInstruction.plan = childPlan;
                    // for bluebird ?
                    return null;
                });
            });
            pending.push(task);
        }
    };
    for (var viewPortName in previousViewPortInstructions) {
        _loop_1(viewPortName);
    }
    return Promise.all(pending).then(function () { return viewPortPlans; });
};
/**
 * @param newViewPortConfig if this is invoked on a viewport without any changes, based on new url, newViewPortConfig will be the existing viewport instruction
 * @internal exported for unit testing
 */
var determineActivationStrategy = function (currentNavInstruction, prevViewPortInstruction, newViewPortConfig, 
// indicates whether there is difference between old and new url params
hasNewParams, forceLifecycleMinimum) {
    var newInstructionConfig = currentNavInstruction.config;
    var prevViewPortViewModel = prevViewPortInstruction.component.viewModel;
    var viewPortPlanStrategy;
    if (prevViewPortInstruction.moduleId !== newViewPortConfig.moduleId) {
        viewPortPlanStrategy = "replace" /* Replace */;
    }
    else if ('determineActivationStrategy' in prevViewPortViewModel) {
        viewPortPlanStrategy = prevViewPortViewModel.determineActivationStrategy.apply(prevViewPortViewModel, currentNavInstruction.lifecycleArgs);
    }
    else if (newInstructionConfig.activationStrategy) {
        viewPortPlanStrategy = newInstructionConfig.activationStrategy;
    }
    else if (hasNewParams || forceLifecycleMinimum) {
        viewPortPlanStrategy = "invoke-lifecycle" /* InvokeLifecycle */;
    }
    else {
        viewPortPlanStrategy = "no-change" /* NoChange */;
    }
    return viewPortPlanStrategy;
};
/**@internal exported for unit testing */
var hasDifferentParameterValues = function (prev, next) {
    var prevParams = prev.params;
    var nextParams = next.params;
    var nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;
    for (var key in nextParams) {
        if (key === nextWildCardName) {
            continue;
        }
        if (prevParams[key] !== nextParams[key]) {
            return true;
        }
    }
    for (var key in prevParams) {
        if (key === nextWildCardName) {
            continue;
        }
        if (prevParams[key] !== nextParams[key]) {
            return true;
        }
    }
    if (!next.options.compareQueryParams) {
        return false;
    }
    var prevQueryParams = prev.queryParams;
    var nextQueryParams = next.queryParams;
    for (var key in nextQueryParams) {
        if (prevQueryParams[key] !== nextQueryParams[key]) {
            return true;
        }
    }
    for (var key in prevQueryParams) {
        if (prevQueryParams[key] !== nextQueryParams[key]) {
            return true;
        }
    }
    return false;
};

/**
 * Transform a navigation instruction into viewport plan record object,
 * or a redirect request if user viewmodel demands
 */
var BuildNavigationPlanStep = /** @class */ (function () {
    function BuildNavigationPlanStep() {
    }
    BuildNavigationPlanStep.prototype.run = function (navigationInstruction, next) {
        return _buildNavigationPlan(navigationInstruction)
            .then(function (plan) {
            if (plan instanceof Redirect) {
                return next.cancel(plan);
            }
            navigationInstruction.plan = plan;
            return next();
        })
            .catch(next.cancel);
    };
    return BuildNavigationPlanStep;
}());

/**
 * @internal Exported for unit testing
 */
var loadNewRoute = function (routeLoader, navigationInstruction) {
    var loadingPlans = determineLoadingPlans(navigationInstruction);
    var loadPromises = loadingPlans.map(function (loadingPlan) { return loadRoute(routeLoader, loadingPlan.navigationInstruction, loadingPlan.viewPortPlan); });
    return Promise.all(loadPromises);
};
/**
 * @internal Exported for unit testing
 */
var determineLoadingPlans = function (navigationInstruction, loadingPlans) {
    if (loadingPlans === void 0) { loadingPlans = []; }
    var viewPortPlans = navigationInstruction.plan;
    for (var viewPortName in viewPortPlans) {
        var viewPortPlan = viewPortPlans[viewPortName];
        var childNavInstruction = viewPortPlan.childNavigationInstruction;
        if (viewPortPlan.strategy === "replace" /* Replace */) {
            loadingPlans.push({ viewPortPlan: viewPortPlan, navigationInstruction: navigationInstruction });
            if (childNavInstruction) {
                determineLoadingPlans(childNavInstruction, loadingPlans);
            }
        }
        else {
            var viewPortInstruction = navigationInstruction.addViewPortInstruction({
                name: viewPortName,
                strategy: viewPortPlan.strategy,
                moduleId: viewPortPlan.prevModuleId,
                component: viewPortPlan.prevComponent
            });
            if (childNavInstruction) {
                viewPortInstruction.childNavigationInstruction = childNavInstruction;
                determineLoadingPlans(childNavInstruction, loadingPlans);
            }
        }
    }
    return loadingPlans;
};
/**
 * @internal Exported for unit testing
 */
var loadRoute = function (routeLoader, navigationInstruction, viewPortPlan) {
    var planConfig = viewPortPlan.config;
    var moduleId = planConfig ? planConfig.moduleId : null;
    return loadComponent(routeLoader, navigationInstruction, planConfig)
        .then(function (component) {
        var viewPortInstruction = navigationInstruction.addViewPortInstruction({
            name: viewPortPlan.name,
            strategy: viewPortPlan.strategy,
            moduleId: moduleId,
            component: component
        });
        var childRouter = component.childRouter;
        if (childRouter) {
            var path = navigationInstruction.getWildcardPath();
            return childRouter
                ._createNavigationInstruction(path, navigationInstruction)
                .then(function (childInstruction) {
                viewPortPlan.childNavigationInstruction = childInstruction;
                return _buildNavigationPlan(childInstruction)
                    .then(function (childPlan) {
                    if (childPlan instanceof Redirect) {
                        return Promise.reject(childPlan);
                    }
                    childInstruction.plan = childPlan;
                    viewPortInstruction.childNavigationInstruction = childInstruction;
                    return loadNewRoute(routeLoader, childInstruction);
                });
            });
        }
        // ts complains without this, though they are same
        return void 0;
    });
};
/**
 * Load a routed-component based on navigation instruction and route config
 * @internal exported for unit testing only
 */
var loadComponent = function (routeLoader, navigationInstruction, config) {
    var router = navigationInstruction.router;
    var lifecycleArgs = navigationInstruction.lifecycleArgs;
    return Promise.resolve()
        .then(function () { return routeLoader.loadRoute(router, config, navigationInstruction); })
        .then(
    /**
     * @param component an object carrying information about loaded route
     * typically contains information about view model, childContainer, view and router
     */
    function (component) {
        var viewModel = component.viewModel, childContainer = component.childContainer;
        component.router = router;
        component.config = config;
        if ('configureRouter' in viewModel) {
            var childRouter_1 = childContainer.getChildRouter();
            component.childRouter = childRouter_1;
            return childRouter_1
                .configure(function (c) { return viewModel.configureRouter(c, childRouter_1, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]); })
                .then(function () { return component; });
        }
        return component;
    });
};

/**
 * Abstract class that is responsible for loading view / view model from a route config
 * The default implementation can be found in `aurelia-templating-router`
 */
var RouteLoader = /** @class */ (function () {
    function RouteLoader() {
    }
    /**
     * Load a route config based on its viewmodel / view configuration
     */
    // return typing: return typings used to be never
    // as it was a throw. Changing it to Promise<any> should not cause any issues
    RouteLoader.prototype.loadRoute = function (router, config, navigationInstruction) {
        throw new Error('Route loaders must implement "loadRoute(router, config, navigationInstruction)".');
    };
    return RouteLoader;
}());

/**
 * A pipeline step responsible for loading a route config of a navigation instruction
 */
var LoadRouteStep = /** @class */ (function () {
    function LoadRouteStep(routeLoader) {
        this.routeLoader = routeLoader;
    }
    /**@internal */
    LoadRouteStep.inject = function () { return [RouteLoader]; };
    /**
     * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline
     */
    LoadRouteStep.prototype.run = function (navigationInstruction, next) {
        return loadNewRoute(this.routeLoader, navigationInstruction)
            .then(next, next.cancel);
    };
    return LoadRouteStep;
}());

/**
 * A pipeline step for instructing a piepline to commit changes on a navigation instruction
 */
var CommitChangesStep = /** @class */ (function () {
    function CommitChangesStep() {
    }
    CommitChangesStep.prototype.run = function (navigationInstruction, next) {
        return navigationInstruction
            ._commitChanges(/*wait to swap?*/ true)
            .then(function () {
            navigationInstruction._updateTitle();
            return next();
        });
    };
    return CommitChangesStep;
}());

/**
 * An optional interface describing the available activation strategies.
 * @internal Used internally.
 */
var InternalActivationStrategy;
(function (InternalActivationStrategy) {
    /**
     * Reuse the existing view model, without invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["NoChange"] = "no-change";
    /**
     * Reuse the existing view model, invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["InvokeLifecycle"] = "invoke-lifecycle";
    /**
     * Replace the existing view model, invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["Replace"] = "replace";
})(InternalActivationStrategy || (InternalActivationStrategy = {}));
/**
 * The strategy to use when activating modules during navigation.
 */
// kept for compat reason
var activationStrategy = {
    noChange: "no-change" /* NoChange */,
    invokeLifecycle: "invoke-lifecycle" /* InvokeLifecycle */,
    replace: "replace" /* Replace */
};

/**
 * Recursively find list of deactivate-able view models
 * and invoke the either 'canDeactivate' or 'deactivate' on each
 * @internal exported for unit testing
 */
var processDeactivatable = function (navigationInstruction, callbackName, next, ignoreResult) {
    var plan = navigationInstruction.plan;
    var infos = findDeactivatable(plan, callbackName);
    var i = infos.length; // query from inside out
    function inspect(val) {
        if (ignoreResult || shouldContinue(val)) {
            return iterate();
        }
        return next.cancel(val);
    }
    function iterate() {
        if (i--) {
            try {
                var viewModel = infos[i];
                var result = viewModel[callbackName](navigationInstruction);
                return processPotential(result, inspect, next.cancel);
            }
            catch (error) {
                return next.cancel(error);
            }
        }
        navigationInstruction.router.couldDeactivate = true;
        return next();
    }
    return iterate();
};
/**
 * Recursively find and returns a list of deactivate-able view models
 * @internal exported for unit testing
 */
var findDeactivatable = function (plan, callbackName, list) {
    if (list === void 0) { list = []; }
    for (var viewPortName in plan) {
        var viewPortPlan = plan[viewPortName];
        var prevComponent = viewPortPlan.prevComponent;
        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)
            && prevComponent) {
            var viewModel = prevComponent.viewModel;
            if (callbackName in viewModel) {
                list.push(viewModel);
            }
        }
        if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {
            addPreviousDeactivatable(prevComponent, callbackName, list);
        }
        else if (viewPortPlan.childNavigationInstruction) {
            findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);
        }
    }
    return list;
};
/**
 * @internal exported for unit testing
 */
var addPreviousDeactivatable = function (component, callbackName, list) {
    var childRouter = component.childRouter;
    if (childRouter && childRouter.currentInstruction) {
        var viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;
        for (var viewPortName in viewPortInstructions) {
            var viewPortInstruction = viewPortInstructions[viewPortName];
            var prevComponent = viewPortInstruction.component;
            var prevViewModel = prevComponent.viewModel;
            if (callbackName in prevViewModel) {
                list.push(prevViewModel);
            }
            addPreviousDeactivatable(prevComponent, callbackName, list);
        }
    }
};
/**
 * @internal exported for unit testing
 */
var processActivatable = function (navigationInstruction, callbackName, next, ignoreResult) {
    var infos = findActivatable(navigationInstruction, callbackName);
    var length = infos.length;
    var i = -1; // query from top down
    function inspect(val, router) {
        if (ignoreResult || shouldContinue(val, router)) {
            return iterate();
        }
        return next.cancel(val);
    }
    function iterate() {
        var _a;
        i++;
        if (i < length) {
            try {
                var current_1 = infos[i];
                var result = (_a = current_1.viewModel)[callbackName].apply(_a, current_1.lifecycleArgs);
                return processPotential(result, function (val) { return inspect(val, current_1.router); }, next.cancel);
            }
            catch (error) {
                return next.cancel(error);
            }
        }
        return next();
    }
    return iterate();
};
/**
 * Find list of activatable view model and add to list (3rd parameter)
 * @internal exported for unit testing
 */
var findActivatable = function (navigationInstruction, callbackName, list, router) {
    if (list === void 0) { list = []; }
    var plan = navigationInstruction.plan;
    Object
        .keys(plan)
        .forEach(function (viewPortName) {
        var viewPortPlan = plan[viewPortName];
        var viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName];
        var viewPortComponent = viewPortInstruction.component;
        var viewModel = viewPortComponent.viewModel;
        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle
            || viewPortPlan.strategy === activationStrategy.replace)
            && callbackName in viewModel) {
            list.push({
                viewModel: viewModel,
                lifecycleArgs: viewPortInstruction.lifecycleArgs,
                router: router
            });
        }
        var childNavInstruction = viewPortPlan.childNavigationInstruction;
        if (childNavInstruction) {
            findActivatable(childNavInstruction, callbackName, list, viewPortComponent.childRouter || router);
        }
    });
    return list;
};
var shouldContinue = function (output, router) {
    if (output instanceof Error) {
        return false;
    }
    if (isNavigationCommand(output)) {
        if (typeof output.setRouter === 'function') {
            output.setRouter(router);
        }
        return !!output.shouldContinueProcessing;
    }
    if (output === undefined) {
        return true;
    }
    return output;
};
/**
 * wraps a subscription, allowing unsubscribe calls even if
 * the first value comes synchronously
 */
var SafeSubscription = /** @class */ (function () {
    function SafeSubscription(subscriptionFunc) {
        this._subscribed = true;
        this._subscription = subscriptionFunc(this);
        if (!this._subscribed) {
            this.unsubscribe();
        }
    }
    Object.defineProperty(SafeSubscription.prototype, "subscribed", {
        get: function () {
            return this._subscribed;
        },
        enumerable: true,
        configurable: true
    });
    SafeSubscription.prototype.unsubscribe = function () {
        if (this._subscribed && this._subscription) {
            this._subscription.unsubscribe();
        }
        this._subscribed = false;
    };
    return SafeSubscription;
}());
/**
 * A function to process return value from `activate`/`canActivate` steps
 * Supports observable/promise
 *
 * For observable, resolve at first next() or on complete()
 */
var processPotential = function (obj, resolve, reject) {
    // if promise like
    if (obj && typeof obj.then === 'function') {
        return Promise.resolve(obj).then(resolve).catch(reject);
    }
    // if observable
    if (obj && typeof obj.subscribe === 'function') {
        var obs_1 = obj;
        return new SafeSubscription(function (sub) { return obs_1.subscribe({
            next: function () {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    resolve(obj);
                }
            },
            error: function (error) {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    reject(error);
                }
            },
            complete: function () {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    resolve(obj);
                }
            }
        }); });
    }
    // else just resolve
    try {
        return resolve(obj);
    }
    catch (error) {
        return reject(error);
    }
};

/**
 * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route
 */
var CanDeactivatePreviousStep = /** @class */ (function () {
    function CanDeactivatePreviousStep() {
    }
    CanDeactivatePreviousStep.prototype.run = function (navigationInstruction, next) {
        return processDeactivatable(navigationInstruction, 'canDeactivate', next);
    };
    return CanDeactivatePreviousStep;
}());
/**
 * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route
 */
var CanActivateNextStep = /** @class */ (function () {
    function CanActivateNextStep() {
    }
    CanActivateNextStep.prototype.run = function (navigationInstruction, next) {
        return processActivatable(navigationInstruction, 'canActivate', next);
    };
    return CanActivateNextStep;
}());
/**
 * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route
 */
var DeactivatePreviousStep = /** @class */ (function () {
    function DeactivatePreviousStep() {
    }
    DeactivatePreviousStep.prototype.run = function (navigationInstruction, next) {
        return processDeactivatable(navigationInstruction, 'deactivate', next, true);
    };
    return DeactivatePreviousStep;
}());
/**
 * A pipeline step responsible for finding and activating method `activate` on a view model of a route
 */
var ActivateNextStep = /** @class */ (function () {
    function ActivateNextStep() {
    }
    ActivateNextStep.prototype.run = function (navigationInstruction, next) {
        return processActivatable(navigationInstruction, 'activate', next, true);
    };
    return ActivateNextStep;
}());

/**
 * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution
 */
var PipelineSlot = /** @class */ (function () {
    function PipelineSlot(container, name, alias) {
        this.steps = [];
        this.container = container;
        this.slotName = name;
        this.slotAlias = alias;
    }
    PipelineSlot.prototype.getSteps = function () {
        var _this = this;
        return this.steps.map(function (x) { return _this.container.get(x); });
    };
    return PipelineSlot;
}());
/**
 * Class responsible for creating the navigation pipeline.
 */
var PipelineProvider = /** @class */ (function () {
    function PipelineProvider(container) {
        this.container = container;
        this.steps = [
            BuildNavigationPlanStep,
            CanDeactivatePreviousStep,
            LoadRouteStep,
            createPipelineSlot(container, "authorize" /* Authorize */),
            CanActivateNextStep,
            createPipelineSlot(container, "preActivate" /* PreActivate */, 'modelbind'),
            // NOTE: app state changes start below - point of no return
            DeactivatePreviousStep,
            ActivateNextStep,
            createPipelineSlot(container, "preRender" /* PreRender */, 'precommit'),
            CommitChangesStep,
            createPipelineSlot(container, "postRender" /* PostRender */, 'postcomplete')
        ];
    }
    /**@internal */
    PipelineProvider.inject = function () { return [aureliaDependencyInjection.Container]; };
    /**
     * Create the navigation pipeline.
     */
    PipelineProvider.prototype.createPipeline = function (useCanDeactivateStep) {
        var _this = this;
        if (useCanDeactivateStep === void 0) { useCanDeactivateStep = true; }
        var pipeline = new Pipeline();
        this.steps.forEach(function (step) {
            if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {
                pipeline.addStep(_this.container.get(step));
            }
        });
        return pipeline;
    };
    /**@internal */
    PipelineProvider.prototype._findStep = function (name) {
        // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.
        return this.steps.find(function (x) { return x.slotName === name || x.slotAlias === name; });
    };
    /**
     * Adds a step into the pipeline at a known slot location.
     */
    PipelineProvider.prototype.addStep = function (name, step) {
        var found = this._findStep(name);
        if (found) {
            var slotSteps = found.steps;
            // prevent duplicates
            if (!slotSteps.includes(step)) {
                slotSteps.push(step);
            }
        }
        else {
            throw new Error("Invalid pipeline slot name: " + name + ".");
        }
    };
    /**
     * Removes a step from a slot in the pipeline
     */
    PipelineProvider.prototype.removeStep = function (name, step) {
        var slot = this._findStep(name);
        if (slot) {
            var slotSteps = slot.steps;
            slotSteps.splice(slotSteps.indexOf(step), 1);
        }
    };
    /**
     * Clears all steps from a slot in the pipeline
     * @internal
     */
    PipelineProvider.prototype._clearSteps = function (name) {
        if (name === void 0) { name = ''; }
        var slot = this._findStep(name);
        if (slot) {
            slot.steps = [];
        }
    };
    /**
     * Resets all pipeline slots
     */
    PipelineProvider.prototype.reset = function () {
        this._clearSteps("authorize" /* Authorize */);
        this._clearSteps("preActivate" /* PreActivate */);
        this._clearSteps("preRender" /* PreRender */);
        this._clearSteps("postRender" /* PostRender */);
    };
    return PipelineProvider;
}());
/**@internal */
var createPipelineSlot = function (container, name, alias) {
    return new PipelineSlot(container, name, alias);
};

var logger = LogManager.getLogger('app-router');
/**
 * The main application router.
 */
var AppRouter = /** @class */ (function (_super) {
    __extends(AppRouter, _super);
    function AppRouter(container, history, pipelineProvider, events) {
        var _this = _super.call(this, container, history) || this;
        _this.pipelineProvider = pipelineProvider;
        _this.events = events;
        return _this;
    }
    /**@internal */
    AppRouter.inject = function () { return [aureliaDependencyInjection.Container, aureliaHistory.History, PipelineProvider, aureliaEventAggregator.EventAggregator]; };
    /**
     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.
     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.
     */
    AppRouter.prototype.reset = function () {
        _super.prototype.reset.call(this);
        this.maxInstructionCount = 10;
        if (!this._queue) {
            this._queue = [];
        }
        else {
            this._queue.length = 0;
        }
    };
    /**
     * Loads the specified URL.
     *
     * @param url The URL fragment to load.
     */
    AppRouter.prototype.loadUrl = function (url) {
        var _this = this;
        return this
            ._createNavigationInstruction(url)
            .then(function (instruction) { return _this._queueInstruction(instruction); })
            .catch(function (error) {
            logger.error(error);
            restorePreviousLocation(_this);
        });
    };
    /**
     * Registers a viewPort to be used as a rendering target for activated routes.
     *
     * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl
     * @param name The name of the viewPort. 'default' if unspecified.
     */
    AppRouter.prototype.registerViewPort = function (viewPort, name) {
        var _this = this;
        // having strong typing without changing public API
        var $viewPort = viewPort;
        _super.prototype.registerViewPort.call(this, $viewPort, name);
        // beside adding viewport to the registry of this instance
        // AppRouter also configure routing/history to start routing functionality
        // There are situation where there are more than 1 <router-view/> element at root view
        // in that case, still only activate once via the following guard
        if (!this.isActive) {
            var viewModel_1 = this._findViewModel($viewPort);
            if ('configureRouter' in viewModel_1) {
                // If there are more than one <router-view/> element at root view
                // use this flag to guard against configure method being invoked multiple times
                // this flag is set inside method configure
                if (!this.isConfigured) {
                    // replace the real resolve with a noop to guarantee that any action in base class Router
                    // won't resolve the configurePromise prematurely
                    var resolveConfiguredPromise_1 = this._resolveConfiguredPromise;
                    this._resolveConfiguredPromise = function () { };
                    return this
                        .configure(function (config) {
                        return Promise
                            .resolve(viewModel_1.configureRouter(config, _this))
                            // an issue with configure interface. Should be fixed there
                            // todo: fix this via configure interface in router
                            .then(function () { return config; });
                    })
                        .then(function () {
                        _this.activate();
                        resolveConfiguredPromise_1();
                    });
                }
            }
            else {
                this.activate();
            }
        }
        // when a viewport is added dynamically to a root view that is already activated
        // just process the navigation instruction
        else {
            this._dequeueInstruction();
        }
        return Promise.resolve();
    };
    /**
     * Activates the router. This instructs the router to begin listening for history changes and processing instructions.
     *
     * @params options The set of options to activate the router with.
     */
    AppRouter.prototype.activate = function (options) {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        // route handler property is responsible for handling url change
        // the interface of aurelia-history isn't clear on this perspective
        this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);
        this.history.activate(this.options);
        this._dequeueInstruction();
    };
    /**
     * Deactivates the router.
     */
    AppRouter.prototype.deactivate = function () {
        this.isActive = false;
        this.history.deactivate();
    };
    /**@internal */
    AppRouter.prototype._queueInstruction = function (instruction) {
        var _this = this;
        return new Promise(function (resolve) {
            instruction.resolve = resolve;
            _this._queue.unshift(instruction);
            _this._dequeueInstruction();
        });
    };
    /**@internal */
    AppRouter.prototype._dequeueInstruction = function (instructionCount) {
        var _this = this;
        if (instructionCount === void 0) { instructionCount = 0; }
        return Promise.resolve().then(function () {
            if (_this.isNavigating && !instructionCount) {
                // ts complains about inconsistent returns without void 0
                return void 0;
            }
            var instruction = _this._queue.shift();
            _this._queue.length = 0;
            if (!instruction) {
                // ts complains about inconsistent returns without void 0
                return void 0;
            }
            _this.isNavigating = true;
            var navtracker = _this.history.getState('NavigationTracker');
            var currentNavTracker = _this.currentNavigationTracker;
            if (!navtracker && !currentNavTracker) {
                _this.isNavigatingFirst = true;
                _this.isNavigatingNew = true;
            }
            else if (!navtracker) {
                _this.isNavigatingNew = true;
            }
            else if (!currentNavTracker) {
                _this.isNavigatingRefresh = true;
            }
            else if (currentNavTracker < navtracker) {
                _this.isNavigatingForward = true;
            }
            else if (currentNavTracker > navtracker) {
                _this.isNavigatingBack = true;
            }
            if (!navtracker) {
                navtracker = Date.now();
                _this.history.setState('NavigationTracker', navtracker);
            }
            _this.currentNavigationTracker = navtracker;
            instruction.previousInstruction = _this.currentInstruction;
            var maxInstructionCount = _this.maxInstructionCount;
            if (!instructionCount) {
                _this.events.publish("router:navigation:processing" /* Processing */, { instruction: instruction });
            }
            else if (instructionCount === maxInstructionCount - 1) {
                logger.error(instructionCount + 1 + " navigation instructions have been attempted without success. Restoring last known good location.");
                restorePreviousLocation(_this);
                return _this._dequeueInstruction(instructionCount + 1);
            }
            else if (instructionCount > maxInstructionCount) {
                throw new Error('Maximum navigation attempts exceeded. Giving up.');
            }
            var pipeline = _this.pipelineProvider.createPipeline(!_this.couldDeactivate);
            return pipeline
                .run(instruction)
                .then(function (result) { return processResult(instruction, result, instructionCount, _this); })
                .catch(function (error) {
                return { output: error instanceof Error ? error : new Error(error) };
            })
                .then(function (result) { return resolveInstruction(instruction, result, !!instructionCount, _this); });
        });
    };
    /**@internal */
    AppRouter.prototype._findViewModel = function (viewPort) {
        if (this.container.viewModel) {
            return this.container.viewModel;
        }
        if (viewPort.container) {
            var container = viewPort.container;
            while (container) {
                if (container.viewModel) {
                    this.container.viewModel = container.viewModel;
                    return container.viewModel;
                }
                container = container.parent;
            }
        }
        return undefined;
    };
    return AppRouter;
}(Router));
var processResult = function (instruction, result, instructionCount, router) {
    if (!(result && 'completed' in result && 'output' in result)) {
        result = result || {};
        result.output = new Error("Expected router pipeline to return a navigation result, but got [" + JSON.stringify(result) + "] instead.");
    }
    var finalResult = null;
    var navigationCommandResult = null;
    if (isNavigationCommand(result.output)) {
        navigationCommandResult = result.output.navigate(router);
    }
    else {
        finalResult = result;
        if (!result.completed) {
            if (result.output instanceof Error) {
                logger.error(result.output.toString());
            }
            restorePreviousLocation(router);
        }
    }
    return Promise.resolve(navigationCommandResult)
        .then(function (_) { return router._dequeueInstruction(instructionCount + 1); })
        .then(function (innerResult) { return finalResult || innerResult || result; });
};
var resolveInstruction = function (instruction, result, isInnerInstruction, router) {
    instruction.resolve(result);
    var eventAggregator = router.events;
    var eventArgs = { instruction: instruction, result: result };
    if (!isInnerInstruction) {
        router.isNavigating = false;
        router.isExplicitNavigation = false;
        router.isExplicitNavigationBack = false;
        router.isNavigatingFirst = false;
        router.isNavigatingNew = false;
        router.isNavigatingRefresh = false;
        router.isNavigatingForward = false;
        router.isNavigatingBack = false;
        router.couldDeactivate = false;
        var eventName = void 0;
        if (result.output instanceof Error) {
            eventName = "router:navigation:error" /* Error */;
        }
        else if (!result.completed) {
            eventName = "router:navigation:canceled" /* Canceled */;
        }
        else {
            var queryString = instruction.queryString ? ('?' + instruction.queryString) : '';
            router.history.previousLocation = instruction.fragment + queryString;
            eventName = "router:navigation:success" /* Success */;
        }
        eventAggregator.publish(eventName, eventArgs);
        eventAggregator.publish("router:navigation:complete" /* Complete */, eventArgs);
    }
    else {
        eventAggregator.publish("router:navigation:child:complete" /* ChildComplete */, eventArgs);
    }
    return result;
};
var restorePreviousLocation = function (router) {
    var previousLocation = router.history.previousLocation;
    if (previousLocation) {
        router.navigate(previousLocation, { trigger: false, replace: true });
    }
    else if (router.fallbackRoute) {
        router.navigate(router.fallbackRoute, { trigger: true, replace: true });
    }
    else {
        logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');
    }
};

/**
* The status of a Pipeline.
*/
(function (PipelineStatus) {
    PipelineStatus["Completed"] = "completed";
    PipelineStatus["Canceled"] = "canceled";
    PipelineStatus["Rejected"] = "rejected";
    PipelineStatus["Running"] = "running";
})(exports.PipelineStatus || (exports.PipelineStatus = {}));

/**
 * A list of known router events used by the Aurelia router
 * to signal the pipeline has come to a certain state
 */
(function (RouterEvent) {
    RouterEvent["Processing"] = "router:navigation:processing";
    RouterEvent["Error"] = "router:navigation:error";
    RouterEvent["Canceled"] = "router:navigation:canceled";
    RouterEvent["Complete"] = "router:navigation:complete";
    RouterEvent["Success"] = "router:navigation:success";
    RouterEvent["ChildComplete"] = "router:navigation:child:complete";
})(exports.RouterEvent || (exports.RouterEvent = {}));

/**
 * Available pipeline slot names to insert interceptor into router pipeline
 */
(function (PipelineSlotName) {
    /**
     * Authorization slot. Invoked early in the pipeline,
     * before `canActivate` hook of incoming route
     */
    PipelineSlotName["Authorize"] = "authorize";
    /**
     * Pre-activation slot. Invoked early in the pipeline,
     * Invoked timing:
     *   - after Authorization slot
     *   - after canActivate hook on new view model
     *   - before deactivate hook on old view model
     *   - before activate hook on new view model
     */
    PipelineSlotName["PreActivate"] = "preActivate";
    /**
     * Pre-render slot. Invoked later in the pipeline
     * Invokcation timing:
     *   - after activate hook on new view model
     *   - before commit step on new navigation instruction
     */
    PipelineSlotName["PreRender"] = "preRender";
    /**
     * Post-render slot. Invoked last in the pipeline
     */
    PipelineSlotName["PostRender"] = "postRender";
})(exports.PipelineSlotName || (exports.PipelineSlotName = {}));

exports.ActivateNextStep = ActivateNextStep;
exports.AppRouter = AppRouter;
exports.BuildNavigationPlanStep = BuildNavigationPlanStep;
exports.CanActivateNextStep = CanActivateNextStep;
exports.CanDeactivatePreviousStep = CanDeactivatePreviousStep;
exports.CommitChangesStep = CommitChangesStep;
exports.DeactivatePreviousStep = DeactivatePreviousStep;
exports.LoadRouteStep = LoadRouteStep;
exports.NavModel = NavModel;
exports.NavigationInstruction = NavigationInstruction;
exports.Pipeline = Pipeline;
exports.PipelineProvider = PipelineProvider;
exports.Redirect = Redirect;
exports.RedirectToRoute = RedirectToRoute;
exports.RouteLoader = RouteLoader;
exports.Router = Router;
exports.RouterConfiguration = RouterConfiguration;
exports.activationStrategy = activationStrategy;
exports.isNavigationCommand = isNavigationCommand;


});
;
define('aurelia-task-queue/dist/commonjs/aurelia-task-queue',['require','exports','module','aurelia-pal'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaskQueue = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _aureliaPal = require('aurelia-pal');



var stackSeparator = '\nEnqueued in TaskQueue by:\n';
var microStackSeparator = '\nEnqueued in MicroTaskQueue by:\n';

function makeRequestFlushFromMutationObserver(flush) {
  var observer = _aureliaPal.DOM.createMutationObserver(flush);
  var val = 'a';
  var node = _aureliaPal.DOM.createTextNode('a');
  var values = Object.create(null);
  values.a = 'b';
  values.b = 'a';
  observer.observe(node, { characterData: true });
  return function requestFlush() {
    node.data = val = values[val];
  };
}

function makeRequestFlushFromTimer(flush) {
  return function requestFlush() {
    var timeoutHandle = setTimeout(handleFlushTimer, 0);

    var intervalHandle = setInterval(handleFlushTimer, 50);
    function handleFlushTimer() {
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      flush();
    }
  };
}

function onError(error, task, longStacks) {
  if (longStacks && task.stack && (typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object' && error !== null) {
    error.stack = filterFlushStack(error.stack) + task.stack;
  }

  if ('onError' in task) {
    task.onError(error);
  } else {
    setTimeout(function () {
      throw error;
    }, 0);
  }
}

var TaskQueue = exports.TaskQueue = function () {
  function TaskQueue() {
    var _this = this;

    

    this.flushing = false;
    this.longStacks = false;

    this.microTaskQueue = [];
    this.microTaskQueueCapacity = 1024;
    this.taskQueue = [];

    if (_aureliaPal.FEATURE.mutationObserver) {
      this.requestFlushMicroTaskQueue = makeRequestFlushFromMutationObserver(function () {
        return _this.flushMicroTaskQueue();
      });
    } else {
      this.requestFlushMicroTaskQueue = makeRequestFlushFromTimer(function () {
        return _this.flushMicroTaskQueue();
      });
    }

    this.requestFlushTaskQueue = makeRequestFlushFromTimer(function () {
      return _this.flushTaskQueue();
    });
  }

  TaskQueue.prototype._flushQueue = function _flushQueue(queue, capacity) {
    var index = 0;
    var task = void 0;

    try {
      this.flushing = true;
      while (index < queue.length) {
        task = queue[index];
        if (this.longStacks) {
          this.stack = typeof task.stack === 'string' ? task.stack : undefined;
        }
        task.call();
        index++;

        if (index > capacity) {
          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
            queue[scan] = queue[scan + index];
          }

          queue.length -= index;
          index = 0;
        }
      }
    } catch (error) {
      onError(error, task, this.longStacks);
    } finally {
      this.flushing = false;
    }
  };

  TaskQueue.prototype.queueMicroTask = function queueMicroTask(task) {
    if (this.microTaskQueue.length < 1) {
      this.requestFlushMicroTaskQueue();
    }

    if (this.longStacks) {
      task.stack = this.prepareQueueStack(microStackSeparator);
    }

    this.microTaskQueue.push(task);
  };

  TaskQueue.prototype.queueTask = function queueTask(task) {
    if (this.taskQueue.length < 1) {
      this.requestFlushTaskQueue();
    }

    if (this.longStacks) {
      task.stack = this.prepareQueueStack(stackSeparator);
    }

    this.taskQueue.push(task);
  };

  TaskQueue.prototype.flushTaskQueue = function flushTaskQueue() {
    var queue = this.taskQueue;
    this.taskQueue = [];
    this._flushQueue(queue, Number.MAX_VALUE);
  };

  TaskQueue.prototype.flushMicroTaskQueue = function flushMicroTaskQueue() {
    var queue = this.microTaskQueue;
    this._flushQueue(queue, this.microTaskQueueCapacity);
    queue.length = 0;
  };

  TaskQueue.prototype.prepareQueueStack = function prepareQueueStack(separator) {
    var stack = separator + filterQueueStack(captureStack());

    if (typeof this.stack === 'string') {
      stack = filterFlushStack(stack) + this.stack;
    }

    return stack;
  };

  return TaskQueue;
}();

function captureStack() {
  var error = new Error();

  if (error.stack) {
    return error.stack;
  }

  try {
    throw error;
  } catch (e) {
    return e.stack;
  }
}

function filterQueueStack(stack) {
  return stack.replace(/^[\s\S]*?\bqueue(Micro)?Task\b[^\n]*\n/, '');
}

function filterFlushStack(stack) {
  var index = stack.lastIndexOf('flushMicroTaskQueue');

  if (index < 0) {
    index = stack.lastIndexOf('flushTaskQueue');
    if (index < 0) {
      return stack;
    }
  }

  index = stack.lastIndexOf('\n', index);

  return index < 0 ? stack : stack.substr(0, index);
}
});
;
define('aurelia-templating-binding/dist/commonjs/aurelia-templating-binding',['require','exports','module','aurelia-logging','aurelia-binding','aurelia-templating'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplatingBindingLanguage = exports.SyntaxInterpreter = exports.LetInterpolationBinding = exports.LetInterpolationBindingExpression = exports.LetBinding = exports.LetExpression = exports.ChildInterpolationBinding = exports.InterpolationBinding = exports.InterpolationBindingExpression = exports.AttributeMap = undefined;

var _class, _temp, _dec, _class2, _dec2, _class3, _class4, _temp2, _class5, _temp3;

exports.configure = configure;

var _aureliaLogging = require('aurelia-logging');

var LogManager = _interopRequireWildcard(_aureliaLogging);

var _aureliaBinding = require('aurelia-binding');

var _aureliaTemplating = require('aurelia-templating');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var AttributeMap = exports.AttributeMap = (_temp = _class = function () {
  function AttributeMap(svg) {
    

    this.elements = Object.create(null);
    this.allElements = Object.create(null);

    this.svg = svg;

    this.registerUniversal('accesskey', 'accessKey');
    this.registerUniversal('contenteditable', 'contentEditable');
    this.registerUniversal('tabindex', 'tabIndex');
    this.registerUniversal('textcontent', 'textContent');
    this.registerUniversal('innerhtml', 'innerHTML');
    this.registerUniversal('scrolltop', 'scrollTop');
    this.registerUniversal('scrollleft', 'scrollLeft');
    this.registerUniversal('readonly', 'readOnly');

    this.register('label', 'for', 'htmlFor');

    this.register('img', 'usemap', 'useMap');

    this.register('input', 'maxlength', 'maxLength');
    this.register('input', 'minlength', 'minLength');
    this.register('input', 'formaction', 'formAction');
    this.register('input', 'formenctype', 'formEncType');
    this.register('input', 'formmethod', 'formMethod');
    this.register('input', 'formnovalidate', 'formNoValidate');
    this.register('input', 'formtarget', 'formTarget');

    this.register('textarea', 'maxlength', 'maxLength');

    this.register('td', 'rowspan', 'rowSpan');
    this.register('td', 'colspan', 'colSpan');
    this.register('th', 'rowspan', 'rowSpan');
    this.register('th', 'colspan', 'colSpan');
  }

  AttributeMap.prototype.register = function register(elementName, attributeName, propertyName) {
    elementName = elementName.toLowerCase();
    attributeName = attributeName.toLowerCase();
    var element = this.elements[elementName] = this.elements[elementName] || Object.create(null);
    element[attributeName] = propertyName;
  };

  AttributeMap.prototype.registerUniversal = function registerUniversal(attributeName, propertyName) {
    attributeName = attributeName.toLowerCase();
    this.allElements[attributeName] = propertyName;
  };

  AttributeMap.prototype.map = function map(elementName, attributeName) {
    if (this.svg.isStandardSvgAttribute(elementName, attributeName)) {
      return attributeName;
    }
    elementName = elementName.toLowerCase();
    attributeName = attributeName.toLowerCase();
    var element = this.elements[elementName];
    if (element !== undefined && attributeName in element) {
      return element[attributeName];
    }
    if (attributeName in this.allElements) {
      return this.allElements[attributeName];
    }

    if (/(?:^data-)|(?:^aria-)|:/.test(attributeName)) {
      return attributeName;
    }
    return (0, _aureliaBinding.camelCase)(attributeName);
  };

  return AttributeMap;
}(), _class.inject = [_aureliaBinding.SVGAnalyzer], _temp);

var InterpolationBindingExpression = exports.InterpolationBindingExpression = function () {
  function InterpolationBindingExpression(observerLocator, targetProperty, parts, mode, lookupFunctions, attribute) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.parts = parts;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
    this.attribute = this.attrToRemove = attribute;
    this.discrete = false;
  }

  InterpolationBindingExpression.prototype.createBinding = function createBinding(target) {
    if (this.parts.length === 3) {
      return new ChildInterpolationBinding(target, this.observerLocator, this.parts[1], this.mode, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
    }
    return new InterpolationBinding(this.observerLocator, this.parts, target, this.targetProperty, this.mode, this.lookupFunctions);
  };

  return InterpolationBindingExpression;
}();

function validateTarget(target, propertyName) {
  if (propertyName === 'style') {
    LogManager.getLogger('templating-binding').info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');
  } else if (target.parentElement && target.parentElement.nodeName === 'TEXTAREA' && propertyName === 'textContent') {
    throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.');
  }
}

var InterpolationBinding = exports.InterpolationBinding = function () {
  function InterpolationBinding(observerLocator, parts, target, targetProperty, mode, lookupFunctions) {
    

    validateTarget(target, targetProperty);
    this.observerLocator = observerLocator;
    this.parts = parts;
    this.target = target;
    this.targetProperty = targetProperty;
    this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
  }

  InterpolationBinding.prototype.interpolate = function interpolate() {
    if (this.isBound) {
      var value = '';
      var parts = this.parts;
      for (var i = 0, ii = parts.length; i < ii; i++) {
        value += i % 2 === 0 ? parts[i] : this['childBinding' + i].value;
      }
      this.targetAccessor.setValue(value, this.target, this.targetProperty);
    }
  };

  InterpolationBinding.prototype.updateOneTimeBindings = function updateOneTimeBindings() {
    for (var i = 1, ii = this.parts.length; i < ii; i += 2) {
      var child = this['childBinding' + i];
      if (child.mode === _aureliaBinding.bindingMode.oneTime) {
        child.call();
      }
    }
  };

  InterpolationBinding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.source = source;

    var parts = this.parts;
    for (var i = 1, ii = parts.length; i < ii; i += 2) {
      var binding = new ChildInterpolationBinding(this, this.observerLocator, parts[i], this.mode, this.lookupFunctions);
      binding.bind(source);
      this['childBinding' + i] = binding;
    }

    this.isBound = true;
    this.interpolate();
  };

  InterpolationBinding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    this.source = null;
    var parts = this.parts;
    for (var i = 1, ii = parts.length; i < ii; i += 2) {
      var name = 'childBinding' + i;
      this[name].unbind();
    }
  };

  return InterpolationBinding;
}();

var ChildInterpolationBinding = exports.ChildInterpolationBinding = (_dec = (0, _aureliaBinding.connectable)(), _dec(_class2 = function () {
  function ChildInterpolationBinding(target, observerLocator, sourceExpression, mode, lookupFunctions, targetProperty, left, right) {
    

    if (target instanceof InterpolationBinding) {
      this.parent = target;
    } else {
      validateTarget(target, targetProperty);
      this.target = target;
      this.targetProperty = targetProperty;
      this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
    }
    this.observerLocator = observerLocator;
    this.sourceExpression = sourceExpression;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
    this.left = left;
    this.right = right;
  }

  ChildInterpolationBinding.prototype.updateTarget = function updateTarget(value) {
    value = value === null || value === undefined ? '' : value.toString();
    if (value !== this.value) {
      this.value = value;
      if (this.parent) {
        this.parent.interpolate();
      } else {
        this.targetAccessor.setValue(this.left + value + this.right, this.target, this.targetProperty);
      }
    }
  };

  ChildInterpolationBinding.prototype.call = function call() {
    if (!this.isBound) {
      return;
    }

    this.rawValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
    this.updateTarget(this.rawValue);

    if (this.mode !== _aureliaBinding.bindingMode.oneTime) {
      this._version++;
      this.sourceExpression.connect(this, this.source);
      if (this.rawValue instanceof Array) {
        this.observeArray(this.rawValue);
      }
      this.unobserve(false);
    }
  };

  ChildInterpolationBinding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    var sourceExpression = this.sourceExpression;
    if (sourceExpression.bind) {
      sourceExpression.bind(this, source, this.lookupFunctions);
    }

    this.rawValue = sourceExpression.evaluate(source, this.lookupFunctions);
    this.updateTarget(this.rawValue);

    if (this.mode === _aureliaBinding.bindingMode.oneWay) {
      (0, _aureliaBinding.enqueueBindingConnect)(this);
    }
  };

  ChildInterpolationBinding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    var sourceExpression = this.sourceExpression;
    if (sourceExpression.unbind) {
      sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this.value = null;
    this.rawValue = null;
    this.unobserve(true);
  };

  ChildInterpolationBinding.prototype.connect = function connect(evaluate) {
    if (!this.isBound) {
      return;
    }
    if (evaluate) {
      this.rawValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      this.updateTarget(this.rawValue);
    }
    this.sourceExpression.connect(this, this.source);
    if (this.rawValue instanceof Array) {
      this.observeArray(this.rawValue);
    }
  };

  return ChildInterpolationBinding;
}()) || _class2);

var LetExpression = exports.LetExpression = function () {
  function LetExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions, toBindingContext) {
    

    this.observerLocator = observerLocator;
    this.sourceExpression = sourceExpression;
    this.targetProperty = targetProperty;
    this.lookupFunctions = lookupFunctions;
    this.toBindingContext = toBindingContext;
  }

  LetExpression.prototype.createBinding = function createBinding() {
    return new LetBinding(this.observerLocator, this.sourceExpression, this.targetProperty, this.lookupFunctions, this.toBindingContext);
  };

  return LetExpression;
}();

var LetBinding = exports.LetBinding = (_dec2 = (0, _aureliaBinding.connectable)(), _dec2(_class3 = function () {
  function LetBinding(observerLocator, sourceExpression, targetProperty, lookupFunctions, toBindingContext) {
    

    this.observerLocator = observerLocator;
    this.sourceExpression = sourceExpression;
    this.targetProperty = targetProperty;
    this.lookupFunctions = lookupFunctions;
    this.source = null;
    this.target = null;
    this.toBindingContext = toBindingContext;
  }

  LetBinding.prototype.updateTarget = function updateTarget() {
    var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
    this.target[this.targetProperty] = value;
  };

  LetBinding.prototype.call = function call(context) {
    if (!this.isBound) {
      return;
    }
    if (context === _aureliaBinding.sourceContext) {
      this.updateTarget();
      return;
    }
    throw new Error('Unexpected call context ' + context);
  };

  LetBinding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }

    this.isBound = true;
    this.source = source;
    this.target = this.toBindingContext ? source.bindingContext : source.overrideContext;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }

    (0, _aureliaBinding.enqueueBindingConnect)(this);
  };

  LetBinding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this.target = null;
    this.unobserve(true);
  };

  LetBinding.prototype.connect = function connect() {
    if (!this.isBound) {
      return;
    }
    this.updateTarget();
    this.sourceExpression.connect(this, this.source);
  };

  return LetBinding;
}()) || _class3);

var LetInterpolationBindingExpression = exports.LetInterpolationBindingExpression = function () {
  function LetInterpolationBindingExpression(observerLocator, targetProperty, parts, lookupFunctions, toBindingContext) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.parts = parts;
    this.lookupFunctions = lookupFunctions;
    this.toBindingContext = toBindingContext;
  }

  LetInterpolationBindingExpression.prototype.createBinding = function createBinding() {
    return new LetInterpolationBinding(this.observerLocator, this.targetProperty, this.parts, this.lookupFunctions, this.toBindingContext);
  };

  return LetInterpolationBindingExpression;
}();

var LetInterpolationBinding = exports.LetInterpolationBinding = function () {
  function LetInterpolationBinding(observerLocator, targetProperty, parts, lookupFunctions, toBindingContext) {
    

    this.observerLocator = observerLocator;
    this.parts = parts;
    this.targetProperty = targetProperty;
    this.lookupFunctions = lookupFunctions;
    this.toBindingContext = toBindingContext;
    this.target = null;
  }

  LetInterpolationBinding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }

    this.isBound = true;
    this.source = source;
    this.target = this.toBindingContext ? source.bindingContext : source.overrideContext;

    this.interpolationBinding = this.createInterpolationBinding();
    this.interpolationBinding.bind(source);
  };

  LetInterpolationBinding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    this.source = null;
    this.target = null;
    this.interpolationBinding.unbind();
    this.interpolationBinding = null;
  };

  LetInterpolationBinding.prototype.createInterpolationBinding = function createInterpolationBinding() {
    if (this.parts.length === 3) {
      return new ChildInterpolationBinding(this.target, this.observerLocator, this.parts[1], _aureliaBinding.bindingMode.oneWay, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
    }
    return new InterpolationBinding(this.observerLocator, this.parts, this.target, this.targetProperty, _aureliaBinding.bindingMode.oneWay, this.lookupFunctions);
  };

  return LetInterpolationBinding;
}();

var SyntaxInterpreter = exports.SyntaxInterpreter = (_temp2 = _class4 = function () {
  function SyntaxInterpreter(parser, observerLocator, eventManager, attributeMap) {
    

    this.parser = parser;
    this.observerLocator = observerLocator;
    this.eventManager = eventManager;
    this.attributeMap = attributeMap;
  }

  SyntaxInterpreter.prototype.interpret = function interpret(resources, element, info, existingInstruction, context) {
    if (info.command in this) {
      return this[info.command](resources, element, info, existingInstruction, context);
    }

    return this.handleUnknownCommand(resources, element, info, existingInstruction, context);
  };

  SyntaxInterpreter.prototype.handleUnknownCommand = function handleUnknownCommand(resources, element, info, existingInstruction, context) {
    LogManager.getLogger('templating-binding').warn('Unknown binding command.', info);
    return existingInstruction;
  };

  SyntaxInterpreter.prototype.determineDefaultBindingMode = function determineDefaultBindingMode(element, attrName, context) {
    var tagName = element.tagName.toLowerCase();

    if (tagName === 'input' && (attrName === 'value' || attrName === 'files') && element.type !== 'checkbox' && element.type !== 'radio' || tagName === 'input' && attrName === 'checked' && (element.type === 'checkbox' || element.type === 'radio') || (tagName === 'textarea' || tagName === 'select') && attrName === 'value' || (attrName === 'textcontent' || attrName === 'innerhtml') && element.contentEditable === 'true' || attrName === 'scrolltop' || attrName === 'scrollleft') {
      return _aureliaBinding.bindingMode.twoWay;
    }

    if (context && attrName in context.attributes && context.attributes[attrName] && context.attributes[attrName].defaultBindingMode >= _aureliaBinding.bindingMode.oneTime) {
      return context.attributes[attrName].defaultBindingMode;
    }

    return _aureliaBinding.bindingMode.oneWay;
  };

  SyntaxInterpreter.prototype.bind = function bind(resources, element, info, existingInstruction, context) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), info.defaultBindingMode === undefined || info.defaultBindingMode === null ? this.determineDefaultBindingMode(element, info.attrName, context) : info.defaultBindingMode, resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype.trigger = function trigger(resources, element, info) {
    return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.delegationStrategy.none, true, resources.lookupFunctions);
  };

  SyntaxInterpreter.prototype.capture = function capture(resources, element, info) {
    return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.delegationStrategy.capturing, true, resources.lookupFunctions);
  };

  SyntaxInterpreter.prototype.delegate = function delegate(resources, element, info) {
    return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.delegationStrategy.bubbling, true, resources.lookupFunctions);
  };

  SyntaxInterpreter.prototype.call = function call(resources, element, info, existingInstruction) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.CallExpression(this.observerLocator, info.attrName, this.parser.parse(info.attrValue), resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype.options = function options(resources, element, info, existingInstruction, context) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
    var attrValue = info.attrValue;
    var language = this.language;
    var name = null;
    var target = '';
    var current = void 0;
    var i = void 0;
    var ii = void 0;
    var inString = false;
    var inEscape = false;
    var foundName = false;

    for (i = 0, ii = attrValue.length; i < ii; ++i) {
      current = attrValue[i];

      if (current === ';' && !inString) {
        if (!foundName) {
          name = this._getPrimaryPropertyName(resources, context);
        }
        info = language.inspectAttribute(resources, '?', name, target.trim());
        language.createAttributeInstruction(resources, element, info, instruction, context);

        if (!instruction.attributes[info.attrName]) {
          instruction.attributes[info.attrName] = info.attrValue;
        }

        target = '';
        name = null;
      } else if (current === ':' && name === null) {
        foundName = true;
        name = target.trim();
        target = '';
      } else if (current === '\\') {
        target += current;
        inEscape = true;
        continue;
      } else {
        target += current;

        if (name !== null && inEscape === false && current === '\'') {
          inString = !inString;
        }
      }

      inEscape = false;
    }

    if (!foundName) {
      name = this._getPrimaryPropertyName(resources, context);
    }

    if (name !== null) {
      info = language.inspectAttribute(resources, '?', name, target.trim());
      language.createAttributeInstruction(resources, element, info, instruction, context);

      if (!instruction.attributes[info.attrName]) {
        instruction.attributes[info.attrName] = info.attrValue;
      }
    }

    return instruction;
  };

  SyntaxInterpreter.prototype._getPrimaryPropertyName = function _getPrimaryPropertyName(resources, context) {
    var type = resources.getAttribute(context.attributeName);
    if (type && type.primaryProperty) {
      return type.primaryProperty.attribute;
    }
    return null;
  };

  SyntaxInterpreter.prototype['for'] = function _for(resources, element, info, existingInstruction) {
    var parts = void 0;
    var keyValue = void 0;
    var instruction = void 0;
    var attrValue = void 0;
    var isDestructuring = void 0;

    attrValue = info.attrValue;
    isDestructuring = attrValue.match(/^ *[[].+[\]]/);
    parts = isDestructuring ? attrValue.split('of ') : attrValue.split(' of ');

    if (parts.length !== 2) {
      throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');
    }

    instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    if (isDestructuring) {
      keyValue = parts[0].replace(/[[\]]/g, '').replace(/,/g, ' ').replace(/\s+/g, ' ').trim().split(' ');
      instruction.attributes.key = keyValue[0];
      instruction.attributes.value = keyValue[1];
    } else {
      instruction.attributes.local = parts[0];
    }

    instruction.attributes.items = new _aureliaBinding.BindingExpression(this.observerLocator, 'items', this.parser.parse(parts[1]), _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype['two-way'] = function twoWay(resources, element, info, existingInstruction) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.twoWay, resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype['to-view'] = function toView(resources, element, info, existingInstruction) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.toView, resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype['from-view'] = function fromView(resources, element, info, existingInstruction) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.fromView, resources.lookupFunctions);

    return instruction;
  };

  SyntaxInterpreter.prototype['one-time'] = function oneTime(resources, element, info, existingInstruction) {
    var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);

    instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.oneTime, resources.lookupFunctions);

    return instruction;
  };

  return SyntaxInterpreter;
}(), _class4.inject = [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, _aureliaBinding.EventManager, AttributeMap], _temp2);


SyntaxInterpreter.prototype['one-way'] = SyntaxInterpreter.prototype['to-view'];

var info = {};

var TemplatingBindingLanguage = exports.TemplatingBindingLanguage = (_temp3 = _class5 = function (_BindingLanguage) {
  _inherits(TemplatingBindingLanguage, _BindingLanguage);

  function TemplatingBindingLanguage(parser, observerLocator, syntaxInterpreter, attributeMap) {
    

    var _this = _possibleConstructorReturn(this, _BindingLanguage.call(this));

    _this.parser = parser;
    _this.observerLocator = observerLocator;
    _this.syntaxInterpreter = syntaxInterpreter;
    _this.emptyStringExpression = _this.parser.parse('\'\'');
    syntaxInterpreter.language = _this;
    _this.attributeMap = attributeMap;
    _this.toBindingContextAttr = 'to-binding-context';
    return _this;
  }

  TemplatingBindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, elementName, attrName, attrValue) {
    var parts = attrName.split('.');

    info.defaultBindingMode = null;

    if (parts.length === 2) {
      info.attrName = parts[0].trim();
      info.attrValue = attrValue;
      info.command = parts[1].trim();

      if (info.command === 'ref') {
        info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), info.attrName, resources.lookupFunctions);
        info.command = null;
        info.attrName = 'ref';
      } else {
        info.expression = null;
      }
    } else if (attrName === 'ref') {
      info.attrName = attrName;
      info.attrValue = attrValue;
      info.command = null;
      info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), 'element', resources.lookupFunctions);
    } else {
      info.attrName = attrName;
      info.attrValue = attrValue;
      info.command = null;
      var interpolationParts = this.parseInterpolation(resources, attrValue);
      if (interpolationParts === null) {
        info.expression = null;
      } else {
        info.expression = new InterpolationBindingExpression(this.observerLocator, this.attributeMap.map(elementName, attrName), interpolationParts, _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions, attrName);
      }
    }

    return info;
  };

  TemplatingBindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, theInfo, existingInstruction, context) {
    var instruction = void 0;

    if (theInfo.expression) {
      if (theInfo.attrName === 'ref') {
        return theInfo.expression;
      }

      instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(theInfo.attrName);
      instruction.attributes[theInfo.attrName] = theInfo.expression;
    } else if (theInfo.command) {
      instruction = this.syntaxInterpreter.interpret(resources, element, theInfo, existingInstruction, context);
    }

    return instruction;
  };

  TemplatingBindingLanguage.prototype.createLetExpressions = function createLetExpressions(resources, letElement) {
    var expressions = [];
    var attributes = letElement.attributes;

    var attr = void 0;

    var parts = void 0;
    var attrName = void 0;
    var attrValue = void 0;
    var command = void 0;
    var toBindingContextAttr = this.toBindingContextAttr;
    var toBindingContext = letElement.hasAttribute(toBindingContextAttr);
    for (var i = 0, ii = attributes.length; ii > i; ++i) {
      attr = attributes[i];
      attrName = attr.name;
      attrValue = attr.nodeValue;
      parts = attrName.split('.');

      if (attrName === toBindingContextAttr) {
        continue;
      }

      if (parts.length === 2) {
        command = parts[1];
        if (command !== 'bind') {
          LogManager.getLogger('templating-binding-language').warn('Detected invalid let command. Expected "' + parts[0] + '.bind", given "' + attrName + '"');
          continue;
        }
        expressions.push(new LetExpression(this.observerLocator, (0, _aureliaBinding.camelCase)(parts[0]), this.parser.parse(attrValue), resources.lookupFunctions, toBindingContext));
      } else {
        attrName = (0, _aureliaBinding.camelCase)(attrName);
        parts = this.parseInterpolation(resources, attrValue);
        if (parts === null) {
          LogManager.getLogger('templating-binding-language').warn('Detected string literal in let bindings. Did you mean "' + attrName + '.bind=' + attrValue + '" or "' + attrName + '=${' + attrValue + '}" ?');
        }
        if (parts) {
          expressions.push(new LetInterpolationBindingExpression(this.observerLocator, attrName, parts, resources.lookupFunctions, toBindingContext));
        } else {
          expressions.push(new LetExpression(this.observerLocator, attrName, new _aureliaBinding.LiteralString(attrValue), resources.lookupFunctions, toBindingContext));
        }
      }
    }
    return expressions;
  };

  TemplatingBindingLanguage.prototype.inspectTextContent = function inspectTextContent(resources, value) {
    var parts = this.parseInterpolation(resources, value);
    if (parts === null) {
      return null;
    }
    return new InterpolationBindingExpression(this.observerLocator, 'textContent', parts, _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions, 'textContent');
  };

  TemplatingBindingLanguage.prototype.parseInterpolation = function parseInterpolation(resources, value) {
    var i = value.indexOf('${', 0);
    var ii = value.length;
    var char = void 0;
    var pos = 0;
    var open = 0;
    var quote = null;
    var interpolationStart = void 0;
    var parts = void 0;
    var partIndex = 0;

    while (i >= 0 && i < ii - 2) {
      open = 1;
      interpolationStart = i;
      i += 2;

      do {
        char = value[i];
        i++;

        if (char === "'" || char === '"') {
          if (quote === null) {
            quote = char;
          } else if (quote === char) {
            quote = null;
          }
          continue;
        }

        if (char === '\\') {
          i++;
          continue;
        }

        if (quote !== null) {
          continue;
        }

        if (char === '{') {
          open++;
        } else if (char === '}') {
          open--;
        }
      } while (open > 0 && i < ii);

      if (open === 0) {
        parts = parts || [];
        if (value[interpolationStart - 1] === '\\' && value[interpolationStart - 2] !== '\\') {
          parts[partIndex] = value.substring(pos, interpolationStart - 1) + value.substring(interpolationStart, i);
          partIndex++;
          parts[partIndex] = this.emptyStringExpression;
          partIndex++;
        } else {
          parts[partIndex] = value.substring(pos, interpolationStart);
          partIndex++;
          parts[partIndex] = this.parser.parse(value.substring(interpolationStart + 2, i - 1));
          partIndex++;
        }
        pos = i;
        i = value.indexOf('${', i);
      } else {
        break;
      }
    }

    if (partIndex === 0) {
      return null;
    }

    parts[partIndex] = value.substr(pos);
    return parts;
  };

  return TemplatingBindingLanguage;
}(_aureliaTemplating.BindingLanguage), _class5.inject = [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, SyntaxInterpreter, AttributeMap], _temp3);
function configure(config) {
  config.container.registerSingleton(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
  config.container.registerAlias(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
}
});
;
define('aurelia-templating-resources/dist/commonjs/aurelia-templating-resources',['require','exports','module','aurelia-dependency-injection','aurelia-pal','aurelia-task-queue','aurelia-templating','aurelia-binding','aurelia-logging','aurelia-loader','aurelia-path','aurelia-metadata'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aureliaDependencyInjection = require('aurelia-dependency-injection');
var aureliaPal = require('aurelia-pal');
var aureliaTaskQueue = require('aurelia-task-queue');
var aureliaTemplating = require('aurelia-templating');
var aureliaBinding = require('aurelia-binding');
var aureliaLogging = require('aurelia-logging');
var aureliaLoader = require('aurelia-loader');
var aureliaPath = require('aurelia-path');
var aureliaMetadata = require('aurelia-metadata');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var ActivationStrategy;
(function (ActivationStrategy) {
    ActivationStrategy["InvokeLifecycle"] = "invoke-lifecycle";
    ActivationStrategy["Replace"] = "replace";
})(ActivationStrategy || (ActivationStrategy = {}));
var Compose = (function () {
    function Compose(element, container, compositionEngine, viewSlot, viewResources, taskQueue) {
        this.activationStrategy = ActivationStrategy.InvokeLifecycle;
        this.element = element;
        this.container = container;
        this.compositionEngine = compositionEngine;
        this.viewSlot = viewSlot;
        this.viewResources = viewResources;
        this.taskQueue = taskQueue;
        this.currentController = null;
        this.currentViewModel = null;
        this.changes = Object.create(null);
    }
    Compose.inject = function () {
        return [aureliaPal.DOM.Element, aureliaDependencyInjection.Container, aureliaTemplating.CompositionEngine, aureliaTemplating.ViewSlot, aureliaTemplating.ViewResources, aureliaTaskQueue.TaskQueue];
    };
    Compose.prototype.created = function (owningView) {
        this.owningView = owningView;
    };
    Compose.prototype.bind = function (bindingContext, overrideContext) {
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
        var changes = this.changes;
        changes.view = this.view;
        changes.viewModel = this.viewModel;
        changes.model = this.model;
        if (!this.pendingTask) {
            processChanges(this);
        }
    };
    Compose.prototype.unbind = function () {
        this.changes = Object.create(null);
        this.bindingContext = null;
        this.overrideContext = null;
        var returnToCache = true;
        var skipAnimation = true;
        this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Compose.prototype.modelChanged = function (newValue, oldValue) {
        this.changes.model = newValue;
        requestUpdate(this);
    };
    Compose.prototype.viewChanged = function (newValue, oldValue) {
        this.changes.view = newValue;
        requestUpdate(this);
    };
    Compose.prototype.viewModelChanged = function (newValue, oldValue) {
        this.changes.viewModel = newValue;
        requestUpdate(this);
    };
    __decorate([
        aureliaTemplating.bindable
    ], Compose.prototype, "model", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Compose.prototype, "view", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Compose.prototype, "viewModel", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Compose.prototype, "activationStrategy", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Compose.prototype, "swapOrder", void 0);
    Compose = __decorate([
        aureliaTemplating.noView,
        aureliaTemplating.customElement('compose')
    ], Compose);
    return Compose;
}());
function isEmpty(obj) {
    for (var _ in obj) {
        return false;
    }
    return true;
}
function tryActivateViewModel(vm, model) {
    if (vm && typeof vm.activate === 'function') {
        return Promise.resolve(vm.activate(model));
    }
}
function createInstruction(composer, instruction) {
    return Object.assign(instruction, {
        bindingContext: composer.bindingContext,
        overrideContext: composer.overrideContext,
        owningView: composer.owningView,
        container: composer.container,
        viewSlot: composer.viewSlot,
        viewResources: composer.viewResources,
        currentController: composer.currentController,
        host: composer.element,
        swapOrder: composer.swapOrder
    });
}
function processChanges(composer) {
    var changes = composer.changes;
    composer.changes = Object.create(null);
    if (needsReInitialization(composer, changes)) {
        var instruction = {
            view: composer.view,
            viewModel: composer.currentViewModel || composer.viewModel,
            model: composer.model
        };
        instruction = Object.assign(instruction, changes);
        instruction = createInstruction(composer, instruction);
        composer.pendingTask = composer.compositionEngine.compose(instruction).then(function (controller) {
            composer.currentController = controller;
            composer.currentViewModel = controller ? controller.viewModel : null;
        });
    }
    else {
        composer.pendingTask = tryActivateViewModel(composer.currentViewModel, changes.model);
        if (!composer.pendingTask) {
            return;
        }
    }
    composer.pendingTask = composer.pendingTask
        .then(function () {
        completeCompositionTask(composer);
    }, function (reason) {
        completeCompositionTask(composer);
        throw reason;
    });
}
function completeCompositionTask(composer) {
    composer.pendingTask = null;
    if (!isEmpty(composer.changes)) {
        processChanges(composer);
    }
}
function requestUpdate(composer) {
    if (composer.pendingTask || composer.updateRequested) {
        return;
    }
    composer.updateRequested = true;
    composer.taskQueue.queueMicroTask(function () {
        composer.updateRequested = false;
        processChanges(composer);
    });
}
function needsReInitialization(composer, changes) {
    var activationStrategy = composer.activationStrategy;
    var vm = composer.currentViewModel;
    if (vm && typeof vm.determineActivationStrategy === 'function') {
        activationStrategy = vm.determineActivationStrategy();
    }
    return 'view' in changes
        || 'viewModel' in changes
        || activationStrategy === ActivationStrategy.Replace;
}

var IfCore = (function () {
    function IfCore(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.view = null;
        this.bindingContext = null;
        this.overrideContext = null;
        this.showing = false;
        this.cache = true;
    }
    IfCore.prototype.bind = function (bindingContext, overrideContext) {
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
    };
    IfCore.prototype.unbind = function () {
        if (this.view === null) {
            return;
        }
        this.view.unbind();
        if (!this.viewFactory.isCaching) {
            return;
        }
        if (this.showing) {
            this.showing = false;
            this.viewSlot.remove(this.view, true, true);
        }
        else {
            this.view.returnToCache();
        }
        this.view = null;
    };
    IfCore.prototype._show = function () {
        if (this.showing) {
            if (!this.view.isBound) {
                this.view.bind(this.bindingContext, this.overrideContext);
            }
            return;
        }
        if (this.view === null) {
            this.view = this.viewFactory.create();
        }
        if (!this.view.isBound) {
            this.view.bind(this.bindingContext, this.overrideContext);
        }
        this.showing = true;
        return this.viewSlot.add(this.view);
    };
    IfCore.prototype._hide = function () {
        var _this = this;
        if (!this.showing) {
            return;
        }
        this.showing = false;
        var removed = this.viewSlot.remove(this.view);
        if (removed instanceof Promise) {
            return removed.then(function () {
                _this._unbindView();
            });
        }
        this._unbindView();
    };
    IfCore.prototype._unbindView = function () {
        var cache = this.cache === 'false' ? false : !!this.cache;
        this.view.unbind();
        if (!cache) {
            this.view = null;
        }
    };
    return IfCore;
}());

var If = (function (_super) {
    __extends(If, _super);
    function If() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cache = true;
        return _this;
    }
    If.prototype.bind = function (bindingContext, overrideContext) {
        _super.prototype.bind.call(this, bindingContext, overrideContext);
        if (this.condition) {
            this._show();
        }
        else {
            this._hide();
        }
    };
    If.prototype.conditionChanged = function (newValue) {
        this._update(newValue);
    };
    If.prototype._update = function (show) {
        var _this = this;
        if (this.animating) {
            return;
        }
        var promise;
        if (this.elseVm) {
            promise = show ? this._swap(this.elseVm, this) : this._swap(this, this.elseVm);
        }
        else {
            promise = show ? this._show() : this._hide();
        }
        if (promise) {
            this.animating = true;
            promise.then(function () {
                _this.animating = false;
                if (_this.condition !== _this.showing) {
                    _this._update(_this.condition);
                }
            });
        }
    };
    If.prototype._swap = function (remove, add) {
        switch (this.swapOrder) {
            case 'before':
                return Promise.resolve(add._show()).then(function () { return remove._hide(); });
            case 'with':
                return Promise.all([remove._hide(), add._show()]);
            default:
                var promise = remove._hide();
                return promise ? promise.then(function () { return add._show(); }) : add._show();
        }
    };
    __decorate([
        aureliaTemplating.bindable({ primaryProperty: true })
    ], If.prototype, "condition", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], If.prototype, "swapOrder", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], If.prototype, "cache", void 0);
    If = __decorate([
        aureliaTemplating.customAttribute('if'),
        aureliaTemplating.templateController,
        aureliaDependencyInjection.inject(aureliaTemplating.BoundViewFactory, aureliaTemplating.ViewSlot)
    ], If);
    return If;
}(IfCore));

var Else = (function (_super) {
    __extends(Else, _super);
    function Else(viewFactory, viewSlot) {
        var _this = _super.call(this, viewFactory, viewSlot) || this;
        _this._registerInIf();
        return _this;
    }
    Else.prototype.bind = function (bindingContext, overrideContext) {
        _super.prototype.bind.call(this, bindingContext, overrideContext);
        if (this.ifVm.condition) {
            this._hide();
        }
        else {
            this._show();
        }
    };
    Else.prototype._registerInIf = function () {
        var previous = this.viewSlot.anchor.previousSibling;
        while (previous && !previous.au) {
            previous = previous.previousSibling;
        }
        if (!previous || !previous.au.if) {
            throw new Error("Can't find matching If for Else custom attribute.");
        }
        this.ifVm = previous.au.if.viewModel;
        this.ifVm.elseVm = this;
    };
    Else = __decorate([
        aureliaTemplating.customAttribute('else'),
        aureliaTemplating.templateController,
        aureliaDependencyInjection.inject(aureliaTemplating.BoundViewFactory, aureliaTemplating.ViewSlot)
    ], Else);
    return Else;
}(IfCore));

var With = (function () {
    function With(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.parentOverrideContext = null;
        this.view = null;
    }
    With.prototype.bind = function (bindingContext, overrideContext) {
        this.parentOverrideContext = overrideContext;
        this.valueChanged(this.value);
    };
    With.prototype.valueChanged = function (newValue) {
        var overrideContext = aureliaBinding.createOverrideContext(newValue, this.parentOverrideContext);
        var view = this.view;
        if (!view) {
            view = this.view = this.viewFactory.create();
            view.bind(newValue, overrideContext);
            this.viewSlot.add(view);
        }
        else {
            view.bind(newValue, overrideContext);
        }
    };
    With.prototype.unbind = function () {
        var view = this.view;
        this.parentOverrideContext = null;
        if (view) {
            view.unbind();
        }
    };
    With = __decorate([
        aureliaTemplating.customAttribute('with'),
        aureliaTemplating.templateController,
        aureliaDependencyInjection.inject(aureliaTemplating.BoundViewFactory, aureliaTemplating.ViewSlot)
    ], With);
    return With;
}());

var oneTime = aureliaBinding.bindingMode.oneTime;
function updateOverrideContexts(views, startIndex) {
    var length = views.length;
    if (startIndex > 0) {
        startIndex = startIndex - 1;
    }
    for (; startIndex < length; ++startIndex) {
        updateOverrideContext(views[startIndex].overrideContext, startIndex, length);
    }
}
function createFullOverrideContext(repeat, data, index, length, key) {
    var bindingContext = {};
    var overrideContext = aureliaBinding.createOverrideContext(bindingContext, repeat.scope.overrideContext);
    if (typeof key !== 'undefined') {
        bindingContext[repeat.key] = key;
        bindingContext[repeat.value] = data;
    }
    else {
        bindingContext[repeat.local] = data;
    }
    updateOverrideContext(overrideContext, index, length);
    return overrideContext;
}
function updateOverrideContext(overrideContext, index, length) {
    var first = (index === 0);
    var last = (index === length - 1);
    var even = index % 2 === 0;
    overrideContext.$index = index;
    overrideContext.$first = first;
    overrideContext.$last = last;
    overrideContext.$middle = !(first || last);
    overrideContext.$odd = !even;
    overrideContext.$even = even;
}
function getItemsSourceExpression(instruction, attrName) {
    return instruction.behaviorInstructions
        .filter(function (bi) { return bi.originalAttrName === attrName; })[0]
        .attributes
        .items
        .sourceExpression;
}
function unwrapExpression(expression) {
    var unwrapped = false;
    while (expression instanceof aureliaBinding.BindingBehavior) {
        expression = expression.expression;
    }
    while (expression instanceof aureliaBinding.ValueConverter) {
        expression = expression.expression;
        unwrapped = true;
    }
    return unwrapped ? expression : null;
}
function isOneTime(expression) {
    while (expression instanceof aureliaBinding.BindingBehavior) {
        if (expression.name === 'oneTime') {
            return true;
        }
        expression = expression.expression;
    }
    return false;
}
function updateOneTimeBinding(binding) {
    if (binding.call && binding.mode === oneTime) {
        binding.call(aureliaBinding.sourceContext);
    }
    else if (binding.updateOneTimeBindings) {
        binding.updateOneTimeBindings();
    }
}
function indexOf(array, item, matcher, startIndex) {
    if (!matcher) {
        return array.indexOf(item);
    }
    var length = array.length;
    for (var index = startIndex || 0; index < length; index++) {
        if (matcher(array[index], item)) {
            return index;
        }
    }
    return -1;
}

var ArrayRepeatStrategy = (function () {
    function ArrayRepeatStrategy() {
    }
    ArrayRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getArrayObserver(items);
    };
    ArrayRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var $repeat = repeat;
        var itemsLength = items.length;
        if (!items || itemsLength === 0) {
            $repeat.removeAllViews(true, !$repeat.viewsRequireLifecycle);
            return;
        }
        var children = $repeat.views();
        var viewsLength = children.length;
        if (viewsLength === 0) {
            this._standardProcessInstanceChanged($repeat, items);
            return;
        }
        if ($repeat.viewsRequireLifecycle) {
            var childrenSnapshot = children.slice(0);
            var itemNameInBindingContext = $repeat.local;
            var matcher_1 = $repeat.matcher();
            var itemsPreviouslyInViews_1 = [];
            var viewsToRemove = [];
            for (var index = 0; index < viewsLength; index++) {
                var view = childrenSnapshot[index];
                var oldItem = view.bindingContext[itemNameInBindingContext];
                if (indexOf(items, oldItem, matcher_1) === -1) {
                    viewsToRemove.push(view);
                }
                else {
                    itemsPreviouslyInViews_1.push(oldItem);
                }
            }
            var updateViews = void 0;
            var removePromise = void 0;
            if (itemsPreviouslyInViews_1.length > 0) {
                removePromise = $repeat.removeViews(viewsToRemove, true, !$repeat.viewsRequireLifecycle);
                updateViews = function () {
                    for (var index = 0; index < itemsLength; index++) {
                        var item = items[index];
                        var indexOfView = indexOf(itemsPreviouslyInViews_1, item, matcher_1, index);
                        var view = void 0;
                        if (indexOfView === -1) {
                            var overrideContext = createFullOverrideContext($repeat, items[index], index, itemsLength);
                            $repeat.insertView(index, overrideContext.bindingContext, overrideContext);
                            itemsPreviouslyInViews_1.splice(index, 0, undefined);
                        }
                        else if (indexOfView === index) {
                            view = children[indexOfView];
                            itemsPreviouslyInViews_1[indexOfView] = undefined;
                        }
                        else {
                            view = children[indexOfView];
                            $repeat.moveView(indexOfView, index);
                            itemsPreviouslyInViews_1.splice(indexOfView, 1);
                            itemsPreviouslyInViews_1.splice(index, 0, undefined);
                        }
                        if (view) {
                            updateOverrideContext(view.overrideContext, index, itemsLength);
                        }
                    }
                    _this._inPlaceProcessItems($repeat, items);
                };
            }
            else {
                removePromise = $repeat.removeAllViews(true, !$repeat.viewsRequireLifecycle);
                updateViews = function () { return _this._standardProcessInstanceChanged($repeat, items); };
            }
            if (removePromise instanceof Promise) {
                removePromise.then(updateViews);
            }
            else {
                updateViews();
            }
        }
        else {
            this._inPlaceProcessItems($repeat, items);
        }
    };
    ArrayRepeatStrategy.prototype._standardProcessInstanceChanged = function (repeat, items) {
        for (var i = 0, ii = items.length; i < ii; i++) {
            var overrideContext = createFullOverrideContext(repeat, items[i], i, ii);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
    };
    ArrayRepeatStrategy.prototype._inPlaceProcessItems = function (repeat, items) {
        var itemsLength = items.length;
        var viewsLength = repeat.viewCount();
        while (viewsLength > itemsLength) {
            viewsLength--;
            repeat.removeView(viewsLength, true, !repeat.viewsRequireLifecycle);
        }
        var local = repeat.local;
        for (var i = 0; i < viewsLength; i++) {
            var view = repeat.view(i);
            var last = i === itemsLength - 1;
            var middle = i !== 0 && !last;
            var bindingContext = view.bindingContext;
            var overrideContext = view.overrideContext;
            if (bindingContext[local] === items[i]
                && overrideContext.$middle === middle
                && overrideContext.$last === last) {
                continue;
            }
            bindingContext[local] = items[i];
            overrideContext.$middle = middle;
            overrideContext.$last = last;
            repeat.updateBindings(view);
        }
        for (var i = viewsLength; i < itemsLength; i++) {
            var overrideContext = createFullOverrideContext(repeat, items[i], i, itemsLength);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
    };
    ArrayRepeatStrategy.prototype.instanceMutated = function (repeat, array, splices) {
        var _this = this;
        if (repeat.__queuedSplices) {
            for (var i = 0, ii = splices.length; i < ii; ++i) {
                var _a = splices[i], index = _a.index, removed = _a.removed, addedCount = _a.addedCount;
                aureliaBinding.mergeSplice(repeat.__queuedSplices, index, removed, addedCount);
            }
            repeat.__array = array.slice(0);
            return;
        }
        var maybePromise = this._runSplices(repeat, array.slice(0), splices);
        if (maybePromise instanceof Promise) {
            var queuedSplices_1 = repeat.__queuedSplices = [];
            var runQueuedSplices_1 = function () {
                if (!queuedSplices_1.length) {
                    repeat.__queuedSplices = undefined;
                    repeat.__array = undefined;
                    return;
                }
                var nextPromise = _this._runSplices(repeat, repeat.__array, queuedSplices_1) || Promise.resolve();
                queuedSplices_1 = repeat.__queuedSplices = [];
                nextPromise.then(runQueuedSplices_1);
            };
            maybePromise.then(runQueuedSplices_1);
        }
    };
    ArrayRepeatStrategy.prototype._runSplices = function (repeat, array, splices) {
        var _this = this;
        var removeDelta = 0;
        var rmPromises = [];
        for (var i = 0, ii = splices.length; i < ii; ++i) {
            var splice = splices[i];
            var removed = splice.removed;
            for (var j = 0, jj = removed.length; j < jj; ++j) {
                var viewOrPromise = repeat.removeView(splice.index + removeDelta + rmPromises.length, true);
                if (viewOrPromise instanceof Promise) {
                    rmPromises.push(viewOrPromise);
                }
            }
            removeDelta -= splice.addedCount;
        }
        if (rmPromises.length > 0) {
            return Promise.all(rmPromises).then(function () {
                var spliceIndexLow = _this._handleAddedSplices(repeat, array, splices);
                updateOverrideContexts(repeat.views(), spliceIndexLow);
            });
        }
        var spliceIndexLow = this._handleAddedSplices(repeat, array, splices);
        updateOverrideContexts(repeat.views(), spliceIndexLow);
        return undefined;
    };
    ArrayRepeatStrategy.prototype._handleAddedSplices = function (repeat, array, splices) {
        var spliceIndex;
        var spliceIndexLow;
        var arrayLength = array.length;
        for (var i = 0, ii = splices.length; i < ii; ++i) {
            var splice = splices[i];
            var addIndex = spliceIndex = splice.index;
            var end = splice.index + splice.addedCount;
            if (typeof spliceIndexLow === 'undefined' || spliceIndexLow === null || spliceIndexLow > splice.index) {
                spliceIndexLow = spliceIndex;
            }
            for (; addIndex < end; ++addIndex) {
                var overrideContext = createFullOverrideContext(repeat, array[addIndex], addIndex, arrayLength);
                repeat.insertView(addIndex, overrideContext.bindingContext, overrideContext);
            }
        }
        return spliceIndexLow;
    };
    return ArrayRepeatStrategy;
}());

var MapRepeatStrategy = (function () {
    function MapRepeatStrategy() {
    }
    MapRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getMapObserver(items);
    };
    MapRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, items); });
            return;
        }
        this._standardProcessItems(repeat, items);
    };
    MapRepeatStrategy.prototype._standardProcessItems = function (repeat, items) {
        var index = 0;
        var overrideContext;
        items.forEach(function (value, key) {
            overrideContext = createFullOverrideContext(repeat, value, index, items.size, key);
            repeat.addView(overrideContext.bindingContext, overrideContext);
            ++index;
        });
    };
    MapRepeatStrategy.prototype.instanceMutated = function (repeat, map, records) {
        var key;
        var i;
        var ii;
        var overrideContext;
        var removeIndex;
        var addIndex;
        var record;
        var rmPromises = [];
        var viewOrPromise;
        for (i = 0, ii = records.length; i < ii; ++i) {
            record = records[i];
            key = record.key;
            switch (record.type) {
                case 'update':
                    removeIndex = this._getViewIndexByKey(repeat, key);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    overrideContext = createFullOverrideContext(repeat, map.get(key), removeIndex, map.size, key);
                    repeat.insertView(removeIndex, overrideContext.bindingContext, overrideContext);
                    break;
                case 'add':
                    addIndex = repeat.viewCount() <= map.size - 1 ? repeat.viewCount() : map.size - 1;
                    overrideContext = createFullOverrideContext(repeat, map.get(key), addIndex, map.size, key);
                    repeat.insertView(map.size - 1, overrideContext.bindingContext, overrideContext);
                    break;
                case 'delete':
                    if (record.oldValue === undefined) {
                        return;
                    }
                    removeIndex = this._getViewIndexByKey(repeat, key);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    break;
                case 'clear':
                    repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
                    break;
                default:
                    continue;
            }
        }
        if (rmPromises.length > 0) {
            Promise.all(rmPromises).then(function () {
                updateOverrideContexts(repeat.views(), 0);
            });
        }
        else {
            updateOverrideContexts(repeat.views(), 0);
        }
    };
    MapRepeatStrategy.prototype._getViewIndexByKey = function (repeat, key) {
        var i;
        var ii;
        var child;
        for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
            child = repeat.view(i);
            if (child.bindingContext[repeat.key] === key) {
                return i;
            }
        }
        return undefined;
    };
    return MapRepeatStrategy;
}());

var NullRepeatStrategy = (function () {
    function NullRepeatStrategy() {
    }
    NullRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        repeat.removeAllViews(true);
    };
    NullRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
    };
    return NullRepeatStrategy;
}());

var NumberRepeatStrategy = (function () {
    function NumberRepeatStrategy() {
    }
    NumberRepeatStrategy.prototype.getCollectionObserver = function () {
        return null;
    };
    NumberRepeatStrategy.prototype.instanceChanged = function (repeat, value) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, value); });
            return;
        }
        this._standardProcessItems(repeat, value);
    };
    NumberRepeatStrategy.prototype._standardProcessItems = function (repeat, value) {
        var childrenLength = repeat.viewCount();
        var i;
        var ii;
        var overrideContext;
        var viewsToRemove;
        value = Math.floor(value);
        viewsToRemove = childrenLength - value;
        if (viewsToRemove > 0) {
            if (viewsToRemove > childrenLength) {
                viewsToRemove = childrenLength;
            }
            for (i = 0, ii = viewsToRemove; i < ii; ++i) {
                repeat.removeView(childrenLength - (i + 1), true, !repeat.viewsRequireLifecycle);
            }
            return;
        }
        for (i = childrenLength, ii = value; i < ii; ++i) {
            overrideContext = createFullOverrideContext(repeat, i, i, ii);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
        updateOverrideContexts(repeat.views(), 0);
    };
    return NumberRepeatStrategy;
}());

var SetRepeatStrategy = (function () {
    function SetRepeatStrategy() {
    }
    SetRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getSetObserver(items);
    };
    SetRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, items); });
            return;
        }
        this._standardProcessItems(repeat, items);
    };
    SetRepeatStrategy.prototype._standardProcessItems = function (repeat, items) {
        var index = 0;
        var overrideContext;
        items.forEach(function (value) {
            overrideContext = createFullOverrideContext(repeat, value, index, items.size);
            repeat.addView(overrideContext.bindingContext, overrideContext);
            ++index;
        });
    };
    SetRepeatStrategy.prototype.instanceMutated = function (repeat, set, records) {
        var value;
        var i;
        var ii;
        var overrideContext;
        var removeIndex;
        var record;
        var rmPromises = [];
        var viewOrPromise;
        for (i = 0, ii = records.length; i < ii; ++i) {
            record = records[i];
            value = record.value;
            switch (record.type) {
                case 'add':
                    var size = Math.max(set.size - 1, 0);
                    overrideContext = createFullOverrideContext(repeat, value, size, set.size);
                    repeat.insertView(size, overrideContext.bindingContext, overrideContext);
                    break;
                case 'delete':
                    removeIndex = this._getViewIndexByValue(repeat, value);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    break;
                case 'clear':
                    repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
                    break;
                default:
                    continue;
            }
        }
        if (rmPromises.length > 0) {
            Promise.all(rmPromises).then(function () {
                updateOverrideContexts(repeat.views(), 0);
            });
        }
        else {
            updateOverrideContexts(repeat.views(), 0);
        }
    };
    SetRepeatStrategy.prototype._getViewIndexByValue = function (repeat, value) {
        var i;
        var ii;
        var child;
        for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
            child = repeat.view(i);
            if (child.bindingContext[repeat.local] === value) {
                return i;
            }
        }
        return undefined;
    };
    return SetRepeatStrategy;
}());

var RepeatStrategyLocator = (function () {
    function RepeatStrategyLocator() {
        this.matchers = [];
        this.strategies = [];
        this.addStrategy(function (items) { return items === null || items === undefined; }, new NullRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Array; }, new ArrayRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Map; }, new MapRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Set; }, new SetRepeatStrategy());
        this.addStrategy(function (items) { return typeof items === 'number'; }, new NumberRepeatStrategy());
    }
    RepeatStrategyLocator.prototype.addStrategy = function (matcher, strategy) {
        this.matchers.push(matcher);
        this.strategies.push(strategy);
    };
    RepeatStrategyLocator.prototype.getStrategy = function (items) {
        var matchers = this.matchers;
        for (var i = 0, ii = matchers.length; i < ii; ++i) {
            if (matchers[i](items)) {
                return this.strategies[i];
            }
        }
        return null;
    };
    return RepeatStrategyLocator;
}());

var lifecycleOptionalBehaviors = ['focus', 'if', 'else', 'repeat', 'show', 'hide', 'with'];
function behaviorRequiresLifecycle(instruction) {
    var t = instruction.type;
    var name = t.elementName !== null ? t.elementName : t.attributeName;
    return lifecycleOptionalBehaviors.indexOf(name) === -1 && (t.handlesAttached || t.handlesBind || t.handlesCreated || t.handlesDetached || t.handlesUnbind)
        || t.viewFactory && viewsRequireLifecycle(t.viewFactory)
        || instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
}
function targetRequiresLifecycle(instruction) {
    var behaviors = instruction.behaviorInstructions;
    if (behaviors) {
        var i = behaviors.length;
        while (i--) {
            if (behaviorRequiresLifecycle(behaviors[i])) {
                return true;
            }
        }
    }
    return instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
}
function viewsRequireLifecycle(viewFactory) {
    if ('_viewsRequireLifecycle' in viewFactory) {
        return viewFactory._viewsRequireLifecycle;
    }
    viewFactory._viewsRequireLifecycle = false;
    if (viewFactory.viewFactory) {
        viewFactory._viewsRequireLifecycle = viewsRequireLifecycle(viewFactory.viewFactory);
        return viewFactory._viewsRequireLifecycle;
    }
    if (viewFactory.template.querySelector('.au-animate')) {
        viewFactory._viewsRequireLifecycle = true;
        return true;
    }
    for (var id in viewFactory.instructions) {
        if (targetRequiresLifecycle(viewFactory.instructions[id])) {
            viewFactory._viewsRequireLifecycle = true;
            return true;
        }
    }
    viewFactory._viewsRequireLifecycle = false;
    return false;
}

var AbstractRepeater = (function () {
    function AbstractRepeater(options) {
        Object.assign(this, {
            local: 'items',
            viewsRequireLifecycle: true
        }, options);
    }
    AbstractRepeater.prototype.viewCount = function () {
        throw new Error('subclass must implement `viewCount`');
    };
    AbstractRepeater.prototype.views = function () {
        throw new Error('subclass must implement `views`');
    };
    AbstractRepeater.prototype.view = function (index) {
        throw new Error('subclass must implement `view`');
    };
    AbstractRepeater.prototype.matcher = function () {
        throw new Error('subclass must implement `matcher`');
    };
    AbstractRepeater.prototype.addView = function (bindingContext, overrideContext) {
        throw new Error('subclass must implement `addView`');
    };
    AbstractRepeater.prototype.insertView = function (index, bindingContext, overrideContext) {
        throw new Error('subclass must implement `insertView`');
    };
    AbstractRepeater.prototype.moveView = function (sourceIndex, targetIndex) {
        throw new Error('subclass must implement `moveView`');
    };
    AbstractRepeater.prototype.removeAllViews = function (returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeAllViews`');
    };
    AbstractRepeater.prototype.removeViews = function (viewsToRemove, returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeView`');
    };
    AbstractRepeater.prototype.removeView = function (index, returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeView`');
    };
    AbstractRepeater.prototype.updateBindings = function (view) {
        throw new Error('subclass must implement `updateBindings`');
    };
    return AbstractRepeater;
}());

var Repeat = (function (_super) {
    __extends(Repeat, _super);
    function Repeat(viewFactory, instruction, viewSlot, viewResources, observerLocator, strategyLocator) {
        var _this = _super.call(this, {
            local: 'item',
            viewsRequireLifecycle: viewsRequireLifecycle(viewFactory)
        }) || this;
        _this.viewFactory = viewFactory;
        _this.instruction = instruction;
        _this.viewSlot = viewSlot;
        _this.lookupFunctions = viewResources.lookupFunctions;
        _this.observerLocator = observerLocator;
        _this.key = 'key';
        _this.value = 'value';
        _this.strategyLocator = strategyLocator;
        _this.ignoreMutation = false;
        _this.sourceExpression = getItemsSourceExpression(_this.instruction, 'repeat.for');
        _this.isOneTime = isOneTime(_this.sourceExpression);
        _this.viewsRequireLifecycle = viewsRequireLifecycle(viewFactory);
        return _this;
    }
    Repeat_1 = Repeat;
    Repeat.prototype.call = function (context, changes) {
        this[context](this.items, changes);
    };
    Repeat.prototype.bind = function (bindingContext, overrideContext) {
        this.scope = { bindingContext: bindingContext, overrideContext: overrideContext };
        this.matcherBinding = this._captureAndRemoveMatcherBinding();
        this.itemsChanged();
    };
    Repeat.prototype.unbind = function () {
        this.scope = null;
        this.items = null;
        this.matcherBinding = null;
        this.viewSlot.removeAll(true, true);
        this._unsubscribeCollection();
    };
    Repeat.prototype._unsubscribeCollection = function () {
        if (this.collectionObserver) {
            this.collectionObserver.unsubscribe(this.callContext, this);
            this.collectionObserver = null;
            this.callContext = null;
        }
    };
    Repeat.prototype.itemsChanged = function () {
        var _this = this;
        this._unsubscribeCollection();
        if (!this.scope) {
            return;
        }
        var items = this.items;
        this.strategy = this.strategyLocator.getStrategy(items);
        if (!this.strategy) {
            throw new Error("Value for '" + this.sourceExpression + "' is non-repeatable");
        }
        if (!this.isOneTime && !this._observeInnerCollection()) {
            this._observeCollection();
        }
        this.ignoreMutation = true;
        this.strategy.instanceChanged(this, items);
        this.observerLocator.taskQueue.queueMicroTask(function () {
            _this.ignoreMutation = false;
        });
    };
    Repeat.prototype._getInnerCollection = function () {
        var expression = unwrapExpression(this.sourceExpression);
        if (!expression) {
            return null;
        }
        return expression.evaluate(this.scope, null);
    };
    Repeat.prototype.handleCollectionMutated = function (collection, changes) {
        if (!this.collectionObserver) {
            return;
        }
        if (this.ignoreMutation) {
            return;
        }
        this.strategy.instanceMutated(this, collection, changes);
    };
    Repeat.prototype.handleInnerCollectionMutated = function (collection, changes) {
        var _this = this;
        if (!this.collectionObserver) {
            return;
        }
        if (this.ignoreMutation) {
            return;
        }
        this.ignoreMutation = true;
        var newItems = this.sourceExpression.evaluate(this.scope, this.lookupFunctions);
        this.observerLocator.taskQueue.queueMicroTask(function () { return _this.ignoreMutation = false; });
        if (newItems === this.items) {
            this.itemsChanged();
        }
        else {
            this.items = newItems;
        }
    };
    Repeat.prototype._observeInnerCollection = function () {
        var items = this._getInnerCollection();
        var strategy = this.strategyLocator.getStrategy(items);
        if (!strategy) {
            return false;
        }
        this.collectionObserver = strategy.getCollectionObserver(this.observerLocator, items);
        if (!this.collectionObserver) {
            return false;
        }
        this.callContext = 'handleInnerCollectionMutated';
        this.collectionObserver.subscribe(this.callContext, this);
        return true;
    };
    Repeat.prototype._observeCollection = function () {
        var items = this.items;
        this.collectionObserver = this.strategy.getCollectionObserver(this.observerLocator, items);
        if (this.collectionObserver) {
            this.callContext = 'handleCollectionMutated';
            this.collectionObserver.subscribe(this.callContext, this);
        }
    };
    Repeat.prototype._captureAndRemoveMatcherBinding = function () {
        var viewFactory = this.viewFactory.viewFactory;
        if (viewFactory) {
            var template = viewFactory.template;
            var instructions = viewFactory.instructions;
            if (Repeat_1.useInnerMatcher) {
                return extractMatcherBindingExpression(instructions);
            }
            if (getChildrenCount(template) > 1) {
                return undefined;
            }
            var repeatedElement = getFirstElementChild(template);
            if (!repeatedElement.hasAttribute('au-target-id')) {
                return undefined;
            }
            var repeatedElementTargetId = repeatedElement.getAttribute('au-target-id');
            return extractMatcherBindingExpression(instructions, repeatedElementTargetId);
        }
        return undefined;
    };
    Repeat.prototype.viewCount = function () { return this.viewSlot.children.length; };
    Repeat.prototype.views = function () { return this.viewSlot.children; };
    Repeat.prototype.view = function (index) { return this.viewSlot.children[index]; };
    Repeat.prototype.matcher = function () {
        var matcherBinding = this.matcherBinding;
        return matcherBinding
            ? matcherBinding.sourceExpression.evaluate(this.scope, matcherBinding.lookupFunctions)
            : null;
    };
    Repeat.prototype.addView = function (bindingContext, overrideContext) {
        var view = this.viewFactory.create();
        view.bind(bindingContext, overrideContext);
        this.viewSlot.add(view);
    };
    Repeat.prototype.insertView = function (index, bindingContext, overrideContext) {
        var view = this.viewFactory.create();
        view.bind(bindingContext, overrideContext);
        this.viewSlot.insert(index, view);
    };
    Repeat.prototype.moveView = function (sourceIndex, targetIndex) {
        this.viewSlot.move(sourceIndex, targetIndex);
    };
    Repeat.prototype.removeAllViews = function (returnToCache, skipAnimation) {
        return this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Repeat.prototype.removeViews = function (viewsToRemove, returnToCache, skipAnimation) {
        return this.viewSlot.removeMany(viewsToRemove, returnToCache, skipAnimation);
    };
    Repeat.prototype.removeView = function (index, returnToCache, skipAnimation) {
        return this.viewSlot.removeAt(index, returnToCache, skipAnimation);
    };
    Repeat.prototype.updateBindings = function (view) {
        var $view = view;
        var j = $view.bindings.length;
        while (j--) {
            updateOneTimeBinding($view.bindings[j]);
        }
        j = $view.controllers.length;
        while (j--) {
            var k = $view.controllers[j].boundProperties.length;
            while (k--) {
                var binding = $view.controllers[j].boundProperties[k].binding;
                updateOneTimeBinding(binding);
            }
        }
    };
    var Repeat_1;
    Repeat.useInnerMatcher = true;
    __decorate([
        aureliaTemplating.bindable
    ], Repeat.prototype, "items", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Repeat.prototype, "local", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Repeat.prototype, "key", void 0);
    __decorate([
        aureliaTemplating.bindable
    ], Repeat.prototype, "value", void 0);
    Repeat = Repeat_1 = __decorate([
        aureliaTemplating.customAttribute('repeat'),
        aureliaTemplating.templateController,
        aureliaDependencyInjection.inject(aureliaTemplating.BoundViewFactory, aureliaTemplating.TargetInstruction, aureliaTemplating.ViewSlot, aureliaTemplating.ViewResources, aureliaBinding.ObserverLocator, RepeatStrategyLocator)
    ], Repeat);
    return Repeat;
}(AbstractRepeater));
var extractMatcherBindingExpression = function (instructions, targetedElementId) {
    var instructionIds = Object.keys(instructions);
    for (var i = 0; i < instructionIds.length; i++) {
        var instructionId = instructionIds[i];
        if (targetedElementId !== undefined && instructionId !== targetedElementId) {
            continue;
        }
        var expressions = instructions[instructionId].expressions;
        if (expressions) {
            for (var ii = 0; ii < expressions.length; ii++) {
                if (expressions[ii].targetProperty === 'matcher') {
                    var matcherBindingExpression = expressions[ii];
                    expressions.splice(ii, 1);
                    return matcherBindingExpression;
                }
            }
        }
    }
};
var getChildrenCount = function (el) {
    var childNodes = el.childNodes;
    var count = 0;
    for (var i = 0, ii = childNodes.length; ii > i; ++i) {
        if (childNodes[i].nodeType === 1) {
            ++count;
        }
    }
    return count;
};
var getFirstElementChild = function (el) {
    var firstChild = el.firstChild;
    while (firstChild !== null) {
        if (firstChild.nodeType === 1) {
            return firstChild;
        }
        firstChild = firstChild.nextSibling;
    }
    return null;
};

var aureliaHideClassName = 'aurelia-hide';
var aureliaHideClass = "." + aureliaHideClassName + " { display:none !important; }";
function injectAureliaHideStyleAtHead() {
    aureliaPal.DOM.injectStyles(aureliaHideClass);
}
function injectAureliaHideStyleAtBoundary(domBoundary) {
    if (aureliaPal.FEATURE.shadowDOM && domBoundary && !domBoundary.hasAureliaHideStyle) {
        domBoundary.hasAureliaHideStyle = true;
        aureliaPal.DOM.injectStyles(aureliaHideClass, domBoundary);
    }
}

var Show = (function () {
    function Show(element, animator, domBoundary) {
        this.element = element;
        this.animator = animator;
        this.domBoundary = domBoundary;
    }
    Show.inject = function () {
        return [aureliaPal.DOM.Element, aureliaTemplating.Animator, aureliaDependencyInjection.Optional.of(aureliaPal.DOM.boundary, true)];
    };
    Show.prototype.created = function () {
        injectAureliaHideStyleAtBoundary(this.domBoundary);
    };
    Show.prototype.valueChanged = function (newValue) {
        var element = this.element;
        var animator = this.animator;
        if (newValue) {
            animator.removeClass(element, aureliaHideClassName);
        }
        else {
            animator.addClass(element, aureliaHideClassName);
        }
    };
    Show.prototype.bind = function (bindingContext) {
        this.valueChanged(this.value);
    };
    Show = __decorate([
        aureliaTemplating.customAttribute('show')
    ], Show);
    return Show;
}());

var Hide = (function () {
    function Hide(element, animator, domBoundary) {
        this.element = element;
        this.animator = animator;
        this.domBoundary = domBoundary;
    }
    Hide.inject = function () {
        return [aureliaPal.DOM.Element, aureliaTemplating.Animator, aureliaDependencyInjection.Optional.of(aureliaPal.DOM.boundary, true)];
    };
    Hide.prototype.created = function () {
        injectAureliaHideStyleAtBoundary(this.domBoundary);
    };
    Hide.prototype.valueChanged = function (newValue) {
        if (newValue) {
            this.animator.addClass(this.element, aureliaHideClassName);
        }
        else {
            this.animator.removeClass(this.element, aureliaHideClassName);
        }
    };
    Hide.prototype.bind = function (bindingContext) {
        this.valueChanged(this.value);
    };
    Hide.prototype.value = function (value) {
        throw new Error('Method not implemented.');
    };
    Hide = __decorate([
        aureliaTemplating.customAttribute('hide')
    ], Hide);
    return Hide;
}());

var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
var needsToWarn = true;
var HTMLSanitizer = (function () {
    function HTMLSanitizer() {
    }
    HTMLSanitizer.prototype.sanitize = function (input) {
        if (needsToWarn) {
            needsToWarn = false;
            aureliaLogging.getLogger('html-sanitizer')
                .warn("CAUTION: The default HTMLSanitizer does NOT provide security against a wide variety of sophisticated XSS attacks,\nand should not be relied on for sanitizing input from unknown sources.\nPlease see https://aurelia.io/docs/binding/basics#element-content for instructions on how to use a secure solution like DOMPurify or sanitize-html.");
        }
        return input.replace(SCRIPT_REGEX, '');
    };
    return HTMLSanitizer;
}());

var SanitizeHTMLValueConverter = (function () {
    function SanitizeHTMLValueConverter(sanitizer) {
        this.sanitizer = sanitizer;
    }
    SanitizeHTMLValueConverter.prototype.toView = function (untrustedMarkup) {
        if (untrustedMarkup === null || untrustedMarkup === undefined) {
            return null;
        }
        return this.sanitizer.sanitize(untrustedMarkup);
    };
    SanitizeHTMLValueConverter = __decorate([
        aureliaBinding.valueConverter('sanitizeHTML'),
        aureliaDependencyInjection.inject(HTMLSanitizer)
    ], SanitizeHTMLValueConverter);
    return SanitizeHTMLValueConverter;
}());

var Replaceable = (function () {
    function Replaceable(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.view = null;
    }
    Replaceable.prototype.bind = function (bindingContext, overrideContext) {
        if (this.view === null) {
            this.view = this.viewFactory.create();
            this.viewSlot.add(this.view);
        }
        this.view.bind(bindingContext, overrideContext);
    };
    Replaceable.prototype.unbind = function () {
        this.view.unbind();
    };
    Replaceable = __decorate([
        aureliaTemplating.customAttribute('replaceable'),
        aureliaTemplating.templateController,
        aureliaDependencyInjection.inject(aureliaTemplating.BoundViewFactory, aureliaTemplating.ViewSlot)
    ], Replaceable);
    return Replaceable;
}());

var Focus = (function () {
    function Focus(element, taskQueue) {
        this.element = element;
        this.taskQueue = taskQueue;
        this.isAttached = false;
        this.needsApply = false;
    }
    Focus.inject = function () {
        return [aureliaPal.DOM.Element, aureliaTaskQueue.TaskQueue];
    };
    Focus.prototype.valueChanged = function (newValue) {
        if (this.isAttached) {
            this._apply();
        }
        else {
            this.needsApply = true;
        }
    };
    Focus.prototype._apply = function () {
        var _this = this;
        if (this.value) {
            this.taskQueue.queueMicroTask(function () {
                if (_this.value) {
                    _this.element.focus();
                }
            });
        }
        else {
            this.element.blur();
        }
    };
    Focus.prototype.attached = function () {
        this.isAttached = true;
        if (this.needsApply) {
            this.needsApply = false;
            this._apply();
        }
        this.element.addEventListener('focus', this);
        this.element.addEventListener('blur', this);
    };
    Focus.prototype.detached = function () {
        this.isAttached = false;
        this.element.removeEventListener('focus', this);
        this.element.removeEventListener('blur', this);
    };
    Focus.prototype.handleEvent = function (e) {
        if (e.type === 'focus') {
            this.value = true;
        }
        else if (aureliaPal.DOM.activeElement !== this.element) {
            this.value = false;
        }
    };
    Focus = __decorate([
        aureliaTemplating.customAttribute('focus', aureliaBinding.bindingMode.twoWay)
    ], Focus);
    return Focus;
}());

var cssUrlMatcher = /url\((?!['"]data)([^)]+)\)/gi;
function fixupCSSUrls(address, css) {
    if (typeof css !== 'string') {
        throw new Error("Failed loading required CSS file: " + address);
    }
    return css.replace(cssUrlMatcher, function (match, p1) {
        var quote = p1.charAt(0);
        if (quote === '\'' || quote === '"') {
            p1 = p1.substr(1, p1.length - 2);
        }
        return 'url(\'' + aureliaPath.relativeToFile(p1, address) + '\')';
    });
}
var CSSResource = (function () {
    function CSSResource(address) {
        this.address = address;
        this._scoped = null;
        this._global = false;
        this._alreadyGloballyInjected = false;
    }
    CSSResource.prototype.initialize = function (container, Target) {
        this._scoped = new Target(this);
    };
    CSSResource.prototype.register = function (registry, name) {
        if (name === 'scoped') {
            registry.registerViewEngineHooks(this._scoped);
        }
        else {
            this._global = true;
        }
    };
    CSSResource.prototype.load = function (container) {
        var _this = this;
        return container.get(aureliaLoader.Loader)
            .loadText(this.address)
            .catch(function (err) { return null; })
            .then(function (text) {
            text = fixupCSSUrls(_this.address, text);
            _this._scoped.css = text;
            if (_this._global) {
                _this._alreadyGloballyInjected = true;
                aureliaPal.DOM.injectStyles(text);
            }
        });
    };
    return CSSResource;
}());
var CSSViewEngineHooks = (function () {
    function CSSViewEngineHooks(owner) {
        this.owner = owner;
        this.css = null;
    }
    CSSViewEngineHooks.prototype.beforeCompile = function (content, resources, instruction) {
        if (instruction.targetShadowDOM) {
            aureliaPal.DOM.injectStyles(this.css, content, true);
        }
        else if (aureliaPal.FEATURE.scopedCSS) {
            var styleNode = aureliaPal.DOM.injectStyles(this.css, content, true);
            styleNode.setAttribute('scoped', 'scoped');
        }
        else if (this._global && !this.owner._alreadyGloballyInjected) {
            aureliaPal.DOM.injectStyles(this.css);
            this.owner._alreadyGloballyInjected = true;
        }
    };
    return CSSViewEngineHooks;
}());
function _createCSSResource(address) {
    var ViewCSS = (function (_super) {
        __extends(ViewCSS, _super);
        function ViewCSS() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ViewCSS = __decorate([
            aureliaTemplating.resource(new CSSResource(address))
        ], ViewCSS);
        return ViewCSS;
    }(CSSViewEngineHooks));
    return ViewCSS;
}

var AttrBindingBehavior = (function () {
    function AttrBindingBehavior() {
    }
    AttrBindingBehavior.prototype.bind = function (binding, source) {
        binding.targetObserver = new aureliaBinding.DataAttributeObserver(binding.target, binding.targetProperty);
    };
    AttrBindingBehavior.prototype.unbind = function (binding, source) {
    };
    AttrBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('attr')
    ], AttrBindingBehavior);
    return AttrBindingBehavior;
}());

var modeBindingBehavior = {
    bind: function (binding, source, lookupFunctions) {
        binding.originalMode = binding.mode;
        binding.mode = this.mode;
    },
    unbind: function (binding, source) {
        binding.mode = binding.originalMode;
        binding.originalMode = null;
    }
};
var OneTimeBindingBehavior = (function () {
    function OneTimeBindingBehavior() {
        this.mode = aureliaBinding.bindingMode.oneTime;
    }
    OneTimeBindingBehavior = __decorate([
        aureliaMetadata.mixin(modeBindingBehavior),
        aureliaBinding.bindingBehavior('oneTime')
    ], OneTimeBindingBehavior);
    return OneTimeBindingBehavior;
}());
var OneWayBindingBehavior = (function () {
    function OneWayBindingBehavior() {
        this.mode = aureliaBinding.bindingMode.toView;
    }
    OneWayBindingBehavior = __decorate([
        aureliaMetadata.mixin(modeBindingBehavior),
        aureliaBinding.bindingBehavior('oneWay')
    ], OneWayBindingBehavior);
    return OneWayBindingBehavior;
}());
var ToViewBindingBehavior = (function () {
    function ToViewBindingBehavior() {
        this.mode = aureliaBinding.bindingMode.toView;
    }
    ToViewBindingBehavior = __decorate([
        aureliaMetadata.mixin(modeBindingBehavior),
        aureliaBinding.bindingBehavior('toView')
    ], ToViewBindingBehavior);
    return ToViewBindingBehavior;
}());
var FromViewBindingBehavior = (function () {
    function FromViewBindingBehavior() {
        this.mode = aureliaBinding.bindingMode.fromView;
    }
    FromViewBindingBehavior = __decorate([
        aureliaMetadata.mixin(modeBindingBehavior),
        aureliaBinding.bindingBehavior('fromView')
    ], FromViewBindingBehavior);
    return FromViewBindingBehavior;
}());
var TwoWayBindingBehavior = (function () {
    function TwoWayBindingBehavior() {
        this.mode = aureliaBinding.bindingMode.twoWay;
    }
    TwoWayBindingBehavior = __decorate([
        aureliaMetadata.mixin(modeBindingBehavior),
        aureliaBinding.bindingBehavior('twoWay')
    ], TwoWayBindingBehavior);
    return TwoWayBindingBehavior;
}());

function throttle(newValue) {
    var _this = this;
    var state = this.throttleState;
    var elapsed = +new Date() - state.last;
    if (elapsed >= state.delay) {
        clearTimeout(state.timeoutId);
        state.timeoutId = null;
        state.last = +new Date();
        this.throttledMethod(newValue);
        return;
    }
    state.newValue = newValue;
    if (state.timeoutId === null) {
        state.timeoutId = setTimeout(function () {
            state.timeoutId = null;
            state.last = +new Date();
            _this.throttledMethod(state.newValue);
        }, state.delay - elapsed);
    }
}
var ThrottleBindingBehavior = (function () {
    function ThrottleBindingBehavior() {
    }
    ThrottleBindingBehavior.prototype.bind = function (binding, source, delay) {
        if (delay === void 0) { delay = 200; }
        var methodToThrottle = 'updateTarget';
        if (binding.callSource) {
            methodToThrottle = 'callSource';
        }
        else if (binding.updateSource && binding.mode === aureliaBinding.bindingMode.twoWay) {
            methodToThrottle = 'updateSource';
        }
        binding.throttledMethod = binding[methodToThrottle];
        binding.throttledMethod.originalName = methodToThrottle;
        binding[methodToThrottle] = throttle;
        binding.throttleState = {
            delay: delay,
            last: 0,
            timeoutId: null
        };
    };
    ThrottleBindingBehavior.prototype.unbind = function (binding, source) {
        var methodToRestore = binding.throttledMethod.originalName;
        binding[methodToRestore] = binding.throttledMethod;
        binding.throttledMethod = null;
        clearTimeout(binding.throttleState.timeoutId);
        binding.throttleState = null;
    };
    ThrottleBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('throttle')
    ], ThrottleBindingBehavior);
    return ThrottleBindingBehavior;
}());

var unset = {};
function debounceCallSource(event) {
    var _this = this;
    var state = this.debounceState;
    clearTimeout(state.timeoutId);
    state.timeoutId = setTimeout(function () { return _this.debouncedMethod(event); }, state.delay);
}
function debounceCall(context, newValue, oldValue) {
    var _this = this;
    var state = this.debounceState;
    clearTimeout(state.timeoutId);
    if (context !== state.callContextToDebounce) {
        state.oldValue = unset;
        this.debouncedMethod(context, newValue, oldValue);
        return;
    }
    if (state.oldValue === unset) {
        state.oldValue = oldValue;
    }
    state.timeoutId = setTimeout(function () {
        var _oldValue = state.oldValue;
        state.oldValue = unset;
        _this.debouncedMethod(context, newValue, _oldValue);
    }, state.delay);
}
var DebounceBindingBehavior = (function () {
    function DebounceBindingBehavior() {
    }
    DebounceBindingBehavior.prototype.bind = function (binding, source, delay) {
        if (delay === void 0) { delay = 200; }
        var isCallSource = binding.callSource !== undefined;
        var methodToDebounce = isCallSource ? 'callSource' : 'call';
        var debouncer = isCallSource ? debounceCallSource : debounceCall;
        var mode = binding.mode;
        var callContextToDebounce = mode === aureliaBinding.bindingMode.twoWay || mode === aureliaBinding.bindingMode.fromView ? aureliaBinding.targetContext : aureliaBinding.sourceContext;
        binding.debouncedMethod = binding[methodToDebounce];
        binding.debouncedMethod.originalName = methodToDebounce;
        binding[methodToDebounce] = debouncer;
        binding.debounceState = {
            callContextToDebounce: callContextToDebounce,
            delay: delay,
            timeoutId: 0,
            oldValue: unset
        };
    };
    DebounceBindingBehavior.prototype.unbind = function (binding, source) {
        var methodToRestore = binding.debouncedMethod.originalName;
        binding[methodToRestore] = binding.debouncedMethod;
        binding.debouncedMethod = null;
        clearTimeout(binding.debounceState.timeoutId);
        binding.debounceState = null;
    };
    DebounceBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('debounce')
    ], DebounceBindingBehavior);
    return DebounceBindingBehavior;
}());

function findOriginalEventTarget(event) {
    return (event.path && event.path[0]) || (event.deepPath && event.deepPath[0]) || event.target;
}
function handleSelfEvent(event) {
    var target = findOriginalEventTarget(event);
    if (this.target !== target) {
        return;
    }
    this.selfEventCallSource(event);
}
var SelfBindingBehavior = (function () {
    function SelfBindingBehavior() {
    }
    SelfBindingBehavior.prototype.bind = function (binding, source) {
        if (!binding.callSource || !binding.targetEvent) {
            throw new Error('Self binding behavior only supports event.');
        }
        binding.selfEventCallSource = binding.callSource;
        binding.callSource = handleSelfEvent;
    };
    SelfBindingBehavior.prototype.unbind = function (binding, source) {
        binding.callSource = binding.selfEventCallSource;
        binding.selfEventCallSource = null;
    };
    SelfBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('self')
    ], SelfBindingBehavior);
    return SelfBindingBehavior;
}());

var BindingSignaler = (function () {
    function BindingSignaler() {
        this.signals = {};
    }
    BindingSignaler.prototype.signal = function (name) {
        var bindings = this.signals[name];
        if (!bindings) {
            return;
        }
        var i = bindings.length;
        while (i--) {
            bindings[i].call(aureliaBinding.sourceContext);
        }
    };
    return BindingSignaler;
}());

var SignalBindingBehavior = (function () {
    function SignalBindingBehavior(bindingSignaler) {
        this.signals = bindingSignaler.signals;
    }
    SignalBindingBehavior.inject = function () { return [BindingSignaler]; };
    SignalBindingBehavior.prototype.bind = function (binding, source) {
        var names = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            names[_i - 2] = arguments[_i];
        }
        if (!binding.updateTarget) {
            throw new Error('Only property bindings and string interpolation bindings can be signaled.  Trigger, delegate and call bindings cannot be signaled.');
        }
        var signals = this.signals;
        if (names.length === 1) {
            var name_1 = names[0];
            var bindings = signals[name_1] || (signals[name_1] = []);
            bindings.push(binding);
            binding.signalName = name_1;
        }
        else if (names.length > 1) {
            var i = names.length;
            while (i--) {
                var name_2 = names[i];
                var bindings = signals[name_2] || (signals[name_2] = []);
                bindings.push(binding);
            }
            binding.signalName = names;
        }
        else {
            throw new Error('Signal name is required.');
        }
    };
    SignalBindingBehavior.prototype.unbind = function (binding, source) {
        var signals = this.signals;
        var name = binding.signalName;
        binding.signalName = null;
        if (Array.isArray(name)) {
            var names = name;
            var i = names.length;
            while (i--) {
                var n = names[i];
                var bindings = signals[n];
                bindings.splice(bindings.indexOf(binding), 1);
            }
        }
        else {
            var bindings = signals[name];
            bindings.splice(bindings.indexOf(binding), 1);
        }
    };
    SignalBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('signal')
    ], SignalBindingBehavior);
    return SignalBindingBehavior;
}());

var eventNamesRequired = 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">';
var notApplicableMessage = 'The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.';
var UpdateTriggerBindingBehavior = (function () {
    function UpdateTriggerBindingBehavior() {
    }
    UpdateTriggerBindingBehavior.prototype.bind = function (binding, source) {
        var events = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            events[_i - 2] = arguments[_i];
        }
        if (events.length === 0) {
            throw new Error(eventNamesRequired);
        }
        if (binding.mode !== aureliaBinding.bindingMode.twoWay && binding.mode !== aureliaBinding.bindingMode.fromView) {
            throw new Error(notApplicableMessage);
        }
        var targetObserver = binding.observerLocator.getObserver(binding.target, binding.targetProperty);
        if (!targetObserver.handler) {
            throw new Error(notApplicableMessage);
        }
        binding.targetObserver = targetObserver;
        targetObserver.originalHandler = binding.targetObserver.handler;
        var handler = new aureliaBinding.EventSubscriber(events);
        targetObserver.handler = handler;
    };
    UpdateTriggerBindingBehavior.prototype.unbind = function (binding, source) {
        var targetObserver = binding.targetObserver;
        targetObserver.handler.dispose();
        targetObserver.handler = targetObserver.originalHandler;
        targetObserver.originalHandler = null;
    };
    UpdateTriggerBindingBehavior = __decorate([
        aureliaBinding.bindingBehavior('updateTrigger')
    ], UpdateTriggerBindingBehavior);
    return UpdateTriggerBindingBehavior;
}());

function _createDynamicElement(_a) {
    var name = _a.name, viewUrl = _a.viewUrl, bindableNames = _a.bindableNames, useShadowDOMmode = _a.useShadowDOMmode;
    var DynamicElement = (function () {
        function DynamicElement() {
        }
        DynamicElement.prototype.bind = function (bindingContext) {
            this.$parent = bindingContext;
        };
        DynamicElement = __decorate([
            aureliaTemplating.customElement(name),
            aureliaTemplating.useView(viewUrl)
        ], DynamicElement);
        return DynamicElement;
    }());
    for (var i = 0, ii = bindableNames.length; i < ii; ++i) {
        aureliaTemplating.bindable(bindableNames[i])(DynamicElement);
    }
    switch (useShadowDOMmode) {
        case 'open':
            aureliaTemplating.useShadowDOM({ mode: 'open' })(DynamicElement);
            break;
        case 'closed':
            aureliaTemplating.useShadowDOM({ mode: 'closed' })(DynamicElement);
            break;
        case '':
            aureliaTemplating.useShadowDOM(DynamicElement);
            break;
        case null:
            break;
        default:
            aureliaLogging.getLogger('aurelia-html-only-element')
                .warn("Expected 'use-shadow-dom' value to be \"close\", \"open\" or \"\", received " + useShadowDOMmode);
            break;
    }
    return DynamicElement;
}

function getElementName(address) {
    return /([^\/^\?]+)\.html/i.exec(address)[1].toLowerCase();
}
function configure(config) {
    var viewEngine = config.container.get(aureliaTemplating.ViewEngine);
    var loader = config.aurelia.loader;
    viewEngine.addResourcePlugin('.html', {
        'fetch': function (viewUrl) {
            return loader.loadTemplate(viewUrl).then(function (registryEntry) {
                var _a;
                var bindableNames = registryEntry.template.getAttribute('bindable');
                var useShadowDOMmode = registryEntry.template.getAttribute('use-shadow-dom');
                var name = getElementName(viewUrl);
                if (bindableNames) {
                    bindableNames = bindableNames.split(',').map(function (x) { return x.trim(); });
                    registryEntry.template.removeAttribute('bindable');
                }
                else {
                    bindableNames = [];
                }
                return _a = {}, _a[name] = _createDynamicElement({ name: name, viewUrl: viewUrl, bindableNames: bindableNames, useShadowDOMmode: useShadowDOMmode }), _a;
            });
        }
    });
}

function configure$1(config) {
    injectAureliaHideStyleAtHead();
    config.globalResources(Compose, If, Else, With, Repeat, Show, Hide, Replaceable, Focus, SanitizeHTMLValueConverter, OneTimeBindingBehavior, OneWayBindingBehavior, ToViewBindingBehavior, FromViewBindingBehavior, TwoWayBindingBehavior, ThrottleBindingBehavior, DebounceBindingBehavior, SelfBindingBehavior, SignalBindingBehavior, UpdateTriggerBindingBehavior, AttrBindingBehavior);
    configure(config);
    var viewEngine = config.container.get(aureliaTemplating.ViewEngine);
    var styleResourcePlugin = {
        fetch: function (address) {
            var _a;
            return _a = {}, _a[address] = _createCSSResource(address), _a;
        }
    };
    ['.css', '.less', '.sass', '.scss', '.styl'].forEach(function (ext) { return viewEngine.addResourcePlugin(ext, styleResourcePlugin); });
}

exports.AbstractRepeater = AbstractRepeater;
exports.ArrayRepeatStrategy = ArrayRepeatStrategy;
exports.AttrBindingBehavior = AttrBindingBehavior;
exports.BindingSignaler = BindingSignaler;
exports.Compose = Compose;
exports.DebounceBindingBehavior = DebounceBindingBehavior;
exports.Else = Else;
exports.Focus = Focus;
exports.FromViewBindingBehavior = FromViewBindingBehavior;
exports.HTMLSanitizer = HTMLSanitizer;
exports.Hide = Hide;
exports.If = If;
exports.MapRepeatStrategy = MapRepeatStrategy;
exports.NullRepeatStrategy = NullRepeatStrategy;
exports.NumberRepeatStrategy = NumberRepeatStrategy;
exports.OneTimeBindingBehavior = OneTimeBindingBehavior;
exports.OneWayBindingBehavior = OneWayBindingBehavior;
exports.Repeat = Repeat;
exports.RepeatStrategyLocator = RepeatStrategyLocator;
exports.Replaceable = Replaceable;
exports.SanitizeHTMLValueConverter = SanitizeHTMLValueConverter;
exports.SelfBindingBehavior = SelfBindingBehavior;
exports.SetRepeatStrategy = SetRepeatStrategy;
exports.Show = Show;
exports.SignalBindingBehavior = SignalBindingBehavior;
exports.ThrottleBindingBehavior = ThrottleBindingBehavior;
exports.ToViewBindingBehavior = ToViewBindingBehavior;
exports.TwoWayBindingBehavior = TwoWayBindingBehavior;
exports.UpdateTriggerBindingBehavior = UpdateTriggerBindingBehavior;
exports.With = With;
exports.configure = configure$1;
exports.createFullOverrideContext = createFullOverrideContext;
exports.getItemsSourceExpression = getItemsSourceExpression;
exports.isOneTime = isOneTime;
exports.unwrapExpression = unwrapExpression;
exports.updateOneTimeBinding = updateOneTimeBinding;
exports.updateOverrideContext = updateOverrideContext;
exports.viewsRequireLifecycle = viewsRequireLifecycle;


});
;
define('aurelia-templating-router/dist/commonjs/aurelia-templating-router',['require','exports','module','aurelia-router','aurelia-metadata','aurelia-path','aurelia-templating','aurelia-dependency-injection','aurelia-binding','aurelia-pal','aurelia-logging'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aureliaRouter = require('aurelia-router');
var aureliaMetadata = require('aurelia-metadata');
var aureliaPath = require('aurelia-path');
var aureliaTemplating = require('aurelia-templating');
var aureliaDependencyInjection = require('aurelia-dependency-injection');
var aureliaBinding = require('aurelia-binding');
var aureliaPal = require('aurelia-pal');
var LogManager = require('aurelia-logging');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var EmptyLayoutViewModel = /** @class */ (function () {
    function EmptyLayoutViewModel() {
    }
    return EmptyLayoutViewModel;
}());
/**
 * Implementation of Aurelia Router ViewPort. Responsible for loading route, composing and swapping routes views
 */
var RouterView = /** @class */ (function () {
    function RouterView(element, container, viewSlot, router, viewLocator, compositionTransaction, compositionEngine) {
        this.element = element;
        this.container = container;
        this.viewSlot = viewSlot;
        this.router = router;
        this.viewLocator = viewLocator;
        this.compositionTransaction = compositionTransaction;
        this.compositionEngine = compositionEngine;
        // add this <router-view/> to router view ports lookup based on name attribute
        // when this router is the root router-view
        // also trigger AppRouter registerViewPort extra flow
        this.router.registerViewPort(this, this.element.getAttribute('name'));
        // Each <router-view/> process its instruction as a composition transaction
        // there are differences between intial composition and subsequent compositions
        // also there are differences between root composition and child <router-view/> composition
        // mark the first composition transaction with a property initialComposition to distinguish it
        // when the root <router-view/> gets new instruction for the first time
        if (!('initialComposition' in compositionTransaction)) {
            compositionTransaction.initialComposition = true;
            this.compositionTransactionNotifier = compositionTransaction.enlist();
        }
    }
    /**@internal */
    RouterView.inject = function () {
        return [aureliaPal.DOM.Element, aureliaDependencyInjection.Container, aureliaTemplating.ViewSlot, aureliaRouter.Router, aureliaTemplating.ViewLocator, aureliaTemplating.CompositionTransaction, aureliaTemplating.CompositionEngine];
    };
    RouterView.prototype.created = function (owningView) {
        this.owningView = owningView;
    };
    RouterView.prototype.bind = function (bindingContext, overrideContext) {
        // router needs to get access to view model of current route parent
        // doing it in generic way via viewModel property on container
        this.container.viewModel = bindingContext;
        this.overrideContext = overrideContext;
    };
    /**
     * Implementation of `aurelia-router` ViewPort interface, responsible for templating related part in routing Pipeline
     */
    RouterView.prototype.process = function ($viewPortInstruction, waitToSwap) {
        var _this = this;
        // have strong typings without exposing it in public typings, this is to ensure maximum backward compat
        var viewPortInstruction = $viewPortInstruction;
        var component = viewPortInstruction.component;
        var childContainer = component.childContainer;
        var viewModel = component.viewModel;
        var viewModelResource = component.viewModelResource;
        var metadata = viewModelResource.metadata;
        var config = component.router.currentInstruction.config;
        var viewPortConfig = config.viewPorts ? (config.viewPorts[viewPortInstruction.name] || {}) : {};
        childContainer.get(RouterViewLocator)._notify(this);
        // layoutInstruction is our layout viewModel
        var layoutInstruction = {
            viewModel: viewPortConfig.layoutViewModel || config.layoutViewModel || this.layoutViewModel,
            view: viewPortConfig.layoutView || config.layoutView || this.layoutView,
            model: viewPortConfig.layoutModel || config.layoutModel || this.layoutModel,
            router: viewPortInstruction.component.router,
            childContainer: childContainer,
            viewSlot: this.viewSlot
        };
        // viewport will be a thin wrapper around composition engine
        // to process instruction/configuration from users
        // preparing all information related to a composition process
        // first by getting view strategy of a ViewPortComponent View
        var viewStrategy = this.viewLocator.getViewStrategy(component.view || viewModel);
        if (viewStrategy && component.view) {
            viewStrategy.makeRelativeTo(aureliaMetadata.Origin.get(component.router.container.viewModel.constructor).moduleId);
        }
        // using metadata of a custom element view model to load appropriate view-factory instance
        return metadata
            .load(childContainer, viewModelResource.value, null, viewStrategy, true)
            // for custom element, viewFactory typing is always ViewFactory
            // for custom attribute, it will be HtmlBehaviorResource
            .then(function (viewFactory) {
            // if this is not the first time that this <router-view/> is composing its instruction
            // try to capture ownership of the composition transaction
            // child <router-view/> will not be able to capture, since root <router-view/> typically captures
            // the ownership token
            if (!_this.compositionTransactionNotifier) {
                _this.compositionTransactionOwnershipToken = _this.compositionTransaction.tryCapture();
            }
            if (layoutInstruction.viewModel || layoutInstruction.view) {
                viewPortInstruction.layoutInstruction = layoutInstruction;
            }
            var viewPortComponentBehaviorInstruction = aureliaTemplating.BehaviorInstruction.dynamic(_this.element, viewModel, viewFactory);
            viewPortInstruction.controller = metadata.create(childContainer, viewPortComponentBehaviorInstruction);
            if (waitToSwap) {
                return null;
            }
            _this.swap(viewPortInstruction);
        });
    };
    RouterView.prototype.swap = function ($viewPortInstruction) {
        var _this = this;
        // have strong typings without exposing it in public typings, this is to ensure maximum backward compat
        var viewPortInstruction = $viewPortInstruction;
        var viewPortController = viewPortInstruction.controller;
        var layoutInstruction = viewPortInstruction.layoutInstruction;
        var previousView = this.view;
        // Final step of swapping a <router-view/> ViewPortComponent
        var work = function () {
            var swapStrategy = aureliaTemplating.SwapStrategies[_this.swapOrder] || aureliaTemplating.SwapStrategies.after;
            var viewSlot = _this.viewSlot;
            swapStrategy(viewSlot, previousView, function () { return Promise.resolve(viewSlot.add(_this.view)); }).then(function () {
                _this._notify();
            });
        };
        // Ensure all users setups have been completed
        var ready = function (owningView_or_layoutView) {
            viewPortController.automate(_this.overrideContext, owningView_or_layoutView);
            var transactionOwnerShipToken = _this.compositionTransactionOwnershipToken;
            // if this router-view is the root <router-view/> of a normal startup via aurelia.setRoot
            // attemp to take control of the transaction
            // if ownership can be taken
            // wait for transaction to complete before swapping
            if (transactionOwnerShipToken) {
                return transactionOwnerShipToken
                    .waitForCompositionComplete()
                    .then(function () {
                    _this.compositionTransactionOwnershipToken = null;
                    return work();
                });
            }
            // otherwise, just swap
            return work();
        };
        // If there is layout instruction, new to compose layout before processing ViewPortComponent
        // layout controller/view/view-model is composed using composition engine APIs
        if (layoutInstruction) {
            if (!layoutInstruction.viewModel) {
                // createController chokes if there's no viewmodel, so create a dummy one
                // but avoid using a POJO as it creates unwanted metadata in Object constructor
                layoutInstruction.viewModel = new EmptyLayoutViewModel();
            }
            // using composition engine to create compose layout
            return this.compositionEngine
                // first create controller from layoutInstruction
                // and treat it as CompositionContext
                // then emulate slot projection with ViewPortComponent view
                .createController(layoutInstruction)
                .then(function (layoutController) {
                var layoutView = layoutController.view;
                aureliaTemplating.ShadowDOM.distributeView(viewPortController.view, layoutController.slots || layoutView.slots);
                // when there is a layout
                // view hierarchy is: <router-view/> owner view -> layout view -> ViewPortComponent view
                layoutController.automate(aureliaBinding.createOverrideContext(layoutInstruction.viewModel), _this.owningView);
                layoutView.children.push(viewPortController.view);
                return layoutView || layoutController;
            })
                .then(function (newView) {
                _this.view = newView;
                return ready(newView);
            });
        }
        // if there is no layout, then get ViewPortComponent view ready as view property
        // and process controller/swapping
        // when there is no layout
        // view hierarchy is: <router-view/> owner view -> ViewPortComponent view
        this.view = viewPortController.view;
        return ready(this.owningView);
    };
    /**
     * Notify composition transaction that this router has finished processing
     * Happens when this <router-view/> is the root router-view
     * @internal
     */
    RouterView.prototype._notify = function () {
        var notifier = this.compositionTransactionNotifier;
        if (notifier) {
            notifier.done();
            this.compositionTransactionNotifier = null;
        }
    };
    /**
     * @internal Actively avoid using decorator to reduce the amount of code generated
     *
     * There is no view to compose by default in a router view
     * This custom element is responsible for composing its own view, based on current config
     */
    RouterView.$view = null;
    /**
     * @internal Actively avoid using decorator to reduce the amount of code generated
     */
    RouterView.$resource = {
        name: 'router-view',
        bindables: ['swapOrder', 'layoutView', 'layoutViewModel', 'layoutModel', 'inherit-binding-context']
    };
    return RouterView;
}());
/**
* Locator which finds the nearest RouterView, relative to the current dependency injection container.
*/
var RouterViewLocator = /** @class */ (function () {
    /**
    * Creates an instance of the RouterViewLocator class.
    */
    function RouterViewLocator() {
        var _this = this;
        this.promise = new Promise(function (resolve) { return _this.resolve = resolve; });
    }
    /**
    * Finds the nearest RouterView instance.
    * @returns A promise that will be resolved with the located RouterView instance.
    */
    RouterViewLocator.prototype.findNearest = function () {
        return this.promise;
    };
    /**@internal */
    RouterViewLocator.prototype._notify = function (routerView) {
        this.resolve(routerView);
    };
    return RouterViewLocator;
}());

/**@internal exported for unit testing */
var EmptyClass = /** @class */ (function () {
    function EmptyClass() {
    }
    return EmptyClass;
}());
aureliaTemplating.inlineView('<template></template>')(EmptyClass);
/**
 * Default implementation of `RouteLoader` used for loading component based on a route config
 */
var TemplatingRouteLoader = /** @class */ (function (_super) {
    __extends(TemplatingRouteLoader, _super);
    function TemplatingRouteLoader(compositionEngine) {
        var _this = _super.call(this) || this;
        _this.compositionEngine = compositionEngine;
        return _this;
    }
    /**
     * Resolve a view model from a RouteConfig
     * Throws when there is neither "moduleId" nor "viewModel" property
     * @internal
     */
    TemplatingRouteLoader.prototype.resolveViewModel = function (router, config) {
        return new Promise(function (resolve, reject) {
            var viewModel;
            if ('moduleId' in config) {
                var moduleId = config.moduleId;
                if (moduleId === null) {
                    viewModel = EmptyClass;
                }
                else {
                    // this requires container of router has passes a certain point
                    // where a view model has been setup on the container
                    // it will fail in enhance scenario because no viewport has been registered
                    moduleId = aureliaPath.relativeToFile(moduleId, aureliaMetadata.Origin.get(router.container.viewModel.constructor).moduleId);
                    if (/\.html/i.test(moduleId)) {
                        viewModel = createDynamicClass(moduleId);
                    }
                    else {
                        viewModel = moduleId;
                    }
                }
                return resolve(viewModel);
            }
            // todo: add if ('viewModel' in config) to support static view model resolution
            reject(new Error('Invalid route config. No "moduleId" found.'));
        });
    };
    /**
     * Create child container based on a router container
     * Also ensures that child router are properly constructed in the newly created child container
     * @internal
     */
    TemplatingRouteLoader.prototype.createChildContainer = function (router) {
        var childContainer = router.container.createChild();
        childContainer.registerSingleton(RouterViewLocator);
        childContainer.getChildRouter = function () {
            var childRouter;
            childContainer.registerHandler(aureliaRouter.Router, function () { return childRouter || (childRouter = router.createChild(childContainer)); });
            return childContainer.get(aureliaRouter.Router);
        };
        return childContainer;
    };
    /**
     * Load corresponding component of a route config of a navigation instruction
     */
    TemplatingRouteLoader.prototype.loadRoute = function (router, config, _navInstruction) {
        var _this = this;
        return this
            .resolveViewModel(router, config)
            .then(function (viewModel) { return _this.compositionEngine.ensureViewModel({
            viewModel: viewModel,
            childContainer: _this.createChildContainer(router),
            view: config.view || config.viewStrategy,
            router: router
        }); });
    };
    /**@internal */
    TemplatingRouteLoader.inject = [aureliaTemplating.CompositionEngine];
    return TemplatingRouteLoader;
}(aureliaRouter.RouteLoader));
/**@internal exported for unit testing */
function createDynamicClass(moduleId) {
    var name = /([^\/^\?]+)\.html/i.exec(moduleId)[1];
    var DynamicClass = /** @class */ (function () {
        function DynamicClass() {
        }
        DynamicClass.prototype.bind = function (bindingContext) {
            this.$parent = bindingContext;
        };
        return DynamicClass;
    }());
    aureliaTemplating.customElement(name)(DynamicClass);
    aureliaTemplating.useView(moduleId)(DynamicClass);
    return DynamicClass;
}

var logger = LogManager.getLogger('route-href');
/**
 * Helper custom attribute to help associate an element with a route by name
 */
var RouteHref = /** @class */ (function () {
    function RouteHref(router, element) {
        this.router = router;
        this.element = element;
        this.attribute = 'href';
    }
    /*@internal */
    RouteHref.inject = function () {
        return [aureliaRouter.Router, aureliaPal.DOM.Element];
    };
    RouteHref.prototype.bind = function () {
        this.isActive = true;
        this.processChange();
    };
    RouteHref.prototype.unbind = function () {
        this.isActive = false;
    };
    RouteHref.prototype.attributeChanged = function (value, previous) {
        if (previous) {
            this.element.removeAttribute(previous);
        }
        return this.processChange();
    };
    RouteHref.prototype.processChange = function () {
        var _this = this;
        return this.router
            .ensureConfigured()
            .then(function () {
            if (!_this.isActive) {
                // returning null to avoid Bluebird warning
                return null;
            }
            var element = _this.element;
            var href = _this.router.generate(_this.route, _this.params);
            if (element.au.controller) {
                element.au.controller.viewModel[_this.attribute] = href;
            }
            else {
                element.setAttribute(_this.attribute, href);
            }
            // returning null to avoid Bluebird warning
            return null;
        })
            .catch(function (reason) {
            logger.error(reason);
        });
    };
    /**
     * @internal Actively avoid using decorator to reduce the amount of code generated
     */
    RouteHref.$resource = {
        type: 'attribute',
        name: 'route-href',
        bindables: [
            { name: 'route', changeHandler: 'processChange', primaryProperty: true },
            { name: 'params', changeHandler: 'processChange' },
            'attribute'
        ] // type definition of Aurelia templating is wrong
    };
    return RouteHref;
}());

function configure(config) {
    config
        .singleton(aureliaRouter.RouteLoader, TemplatingRouteLoader)
        .singleton(aureliaRouter.Router, aureliaRouter.AppRouter)
        .globalResources(RouterView, RouteHref);
    config.container.registerAlias(aureliaRouter.Router, aureliaRouter.AppRouter);
}

exports.RouteHref = RouteHref;
exports.RouterView = RouterView;
exports.TemplatingRouteLoader = TemplatingRouteLoader;
exports.configure = configure;


});
;
define('aurelia-templating/dist/commonjs/aurelia-templating',['require','exports','module','aurelia-logging','aurelia-metadata','aurelia-pal','aurelia-loader','aurelia-path','aurelia-binding','aurelia-dependency-injection','aurelia-task-queue'],function (require, exports, module) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplatingEngine = exports.ElementConfigResource = exports.CompositionEngine = exports.SwapStrategies = exports.HtmlBehaviorResource = exports.BindableProperty = exports.BehaviorPropertyObserver = exports.Controller = exports.ViewEngine = exports.ModuleAnalyzer = exports.ResourceDescription = exports.ResourceModule = exports.ViewCompiler = exports.ViewFactory = exports.BoundViewFactory = exports.ViewSlot = exports.View = exports.ViewResources = exports.ShadowDOM = exports.ShadowSlot = exports.PassThroughSlot = exports.SlotCustomAttribute = exports.BindingLanguage = exports.ViewLocator = exports.StaticViewStrategy = exports.InlineViewStrategy = exports.TemplateRegistryViewStrategy = exports.NoViewStrategy = exports.ConventionalViewStrategy = exports.RelativeViewStrategy = exports.viewStrategy = exports.TargetInstruction = exports.BehaviorInstruction = exports.ViewCompileInstruction = exports.ResourceLoadContext = exports.ElementEvents = exports.ViewEngineHooksResource = exports.CompositionTransaction = exports.CompositionTransactionOwnershipToken = exports.CompositionTransactionNotifier = exports.Animator = exports.animationEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _class, _temp, _class2, _temp2, _dec, _class3, _dec2, _class4, _dec3, _class5, _dec4, _class6, _dec5, _class7, _dec6, _class8, _class9, _temp3, _class10, _temp4, _class12, _class14, _temp5, _dec7, _class15, _dec8, _class16, _dec9, _class17;

exports._hyphenate = _hyphenate;
exports._isAllWhitespace = _isAllWhitespace;
exports.viewEngineHooks = viewEngineHooks;
exports.validateBehaviorName = validateBehaviorName;
exports.children = children;
exports.child = child;
exports.resource = resource;
exports.behavior = behavior;
exports.customElement = customElement;
exports.customAttribute = customAttribute;
exports.templateController = templateController;
exports.bindable = bindable;
exports.dynamicOptions = dynamicOptions;
exports.useShadowDOM = useShadowDOM;
exports.processAttributes = processAttributes;
exports.processContent = processContent;
exports.containerless = containerless;
exports.useViewStrategy = useViewStrategy;
exports.useView = useView;
exports.inlineView = inlineView;
exports.noView = noView;
exports.view = view;
exports.elementConfig = elementConfig;
exports.viewResources = viewResources;

var _aureliaLogging = require('aurelia-logging');

var LogManager = _interopRequireWildcard(_aureliaLogging);

var _aureliaMetadata = require('aurelia-metadata');

var _aureliaPal = require('aurelia-pal');

var _aureliaLoader = require('aurelia-loader');

var _aureliaPath = require('aurelia-path');

var _aureliaBinding = require('aurelia-binding');

var _aureliaDependencyInjection = require('aurelia-dependency-injection');

var _aureliaTaskQueue = require('aurelia-task-queue');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }



var animationEvent = exports.animationEvent = {
  enterBegin: 'animation:enter:begin',
  enterActive: 'animation:enter:active',
  enterDone: 'animation:enter:done',
  enterTimeout: 'animation:enter:timeout',

  leaveBegin: 'animation:leave:begin',
  leaveActive: 'animation:leave:active',
  leaveDone: 'animation:leave:done',
  leaveTimeout: 'animation:leave:timeout',

  staggerNext: 'animation:stagger:next',

  removeClassBegin: 'animation:remove-class:begin',
  removeClassActive: 'animation:remove-class:active',
  removeClassDone: 'animation:remove-class:done',
  removeClassTimeout: 'animation:remove-class:timeout',

  addClassBegin: 'animation:add-class:begin',
  addClassActive: 'animation:add-class:active',
  addClassDone: 'animation:add-class:done',
  addClassTimeout: 'animation:add-class:timeout',

  animateBegin: 'animation:animate:begin',
  animateActive: 'animation:animate:active',
  animateDone: 'animation:animate:done',
  animateTimeout: 'animation:animate:timeout',

  sequenceBegin: 'animation:sequence:begin',
  sequenceDone: 'animation:sequence:done'
};

var Animator = exports.Animator = function () {
  function Animator() {
    
  }

  Animator.prototype.enter = function enter(element) {
    return Promise.resolve(false);
  };

  Animator.prototype.leave = function leave(element) {
    return Promise.resolve(false);
  };

  Animator.prototype.removeClass = function removeClass(element, className) {
    element.classList.remove(className);
    return Promise.resolve(false);
  };

  Animator.prototype.addClass = function addClass(element, className) {
    element.classList.add(className);
    return Promise.resolve(false);
  };

  Animator.prototype.animate = function animate(element, className) {
    return Promise.resolve(false);
  };

  Animator.prototype.runSequence = function runSequence(animations) {};

  Animator.prototype.registerEffect = function registerEffect(effectName, properties) {};

  Animator.prototype.unregisterEffect = function unregisterEffect(effectName) {};

  return Animator;
}();

var CompositionTransactionNotifier = exports.CompositionTransactionNotifier = function () {
  function CompositionTransactionNotifier(owner) {
    

    this.owner = owner;
    this.owner._compositionCount++;
  }

  CompositionTransactionNotifier.prototype.done = function done() {
    this.owner._compositionCount--;
    this.owner._tryCompleteTransaction();
  };

  return CompositionTransactionNotifier;
}();

var CompositionTransactionOwnershipToken = exports.CompositionTransactionOwnershipToken = function () {
  function CompositionTransactionOwnershipToken(owner) {
    

    this.owner = owner;
    this.owner._ownershipToken = this;
    this.thenable = this._createThenable();
  }

  CompositionTransactionOwnershipToken.prototype.waitForCompositionComplete = function waitForCompositionComplete() {
    this.owner._tryCompleteTransaction();
    return this.thenable;
  };

  CompositionTransactionOwnershipToken.prototype.resolve = function resolve() {
    this._resolveCallback();
  };

  CompositionTransactionOwnershipToken.prototype._createThenable = function _createThenable() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this._resolveCallback = resolve;
    });
  };

  return CompositionTransactionOwnershipToken;
}();

var CompositionTransaction = exports.CompositionTransaction = function () {
  function CompositionTransaction() {
    

    this._ownershipToken = null;
    this._compositionCount = 0;
  }

  CompositionTransaction.prototype.tryCapture = function tryCapture() {
    return this._ownershipToken === null ? new CompositionTransactionOwnershipToken(this) : null;
  };

  CompositionTransaction.prototype.enlist = function enlist() {
    return new CompositionTransactionNotifier(this);
  };

  CompositionTransaction.prototype._tryCompleteTransaction = function _tryCompleteTransaction() {
    if (this._compositionCount <= 0) {
      this._compositionCount = 0;

      if (this._ownershipToken !== null) {
        var token = this._ownershipToken;
        this._ownershipToken = null;
        token.resolve();
      }
    }
  };

  return CompositionTransaction;
}();

var capitalMatcher = /([A-Z])/g;

function addHyphenAndLower(char) {
  return '-' + char.toLowerCase();
}

function _hyphenate(name) {
  return (name.charAt(0).toLowerCase() + name.slice(1)).replace(capitalMatcher, addHyphenAndLower);
}

function _isAllWhitespace(node) {
  return !(node.auInterpolationTarget || /[^\t\n\r ]/.test(node.textContent));
}

var ViewEngineHooksResource = exports.ViewEngineHooksResource = function () {
  function ViewEngineHooksResource() {
    
  }

  ViewEngineHooksResource.prototype.initialize = function initialize(container, target) {
    this.instance = container.get(target);
  };

  ViewEngineHooksResource.prototype.register = function register(registry, name) {
    registry.registerViewEngineHooks(this.instance);
  };

  ViewEngineHooksResource.prototype.load = function load(container, target) {};

  ViewEngineHooksResource.convention = function convention(name) {
    if (name.endsWith('ViewEngineHooks')) {
      return new ViewEngineHooksResource();
    }
  };

  return ViewEngineHooksResource;
}();

function viewEngineHooks(target) {
  var deco = function deco(t) {
    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ViewEngineHooksResource(), t);
  };

  return target ? deco(target) : deco;
}

var ElementEvents = exports.ElementEvents = (_temp = _class = function () {
  function ElementEvents(element) {
    

    this.element = element;
    this.subscriptions = {};
  }

  ElementEvents.prototype._enqueueHandler = function _enqueueHandler(handler) {
    this.subscriptions[handler.eventName] = this.subscriptions[handler.eventName] || [];
    this.subscriptions[handler.eventName].push(handler);
  };

  ElementEvents.prototype._dequeueHandler = function _dequeueHandler(handler) {
    var index = void 0;
    var subscriptions = this.subscriptions[handler.eventName];
    if (subscriptions) {
      index = subscriptions.indexOf(handler);
      if (index > -1) {
        subscriptions.splice(index, 1);
      }
    }
    return handler;
  };

  ElementEvents.prototype.publish = function publish(eventName) {
    var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var bubbles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var cancelable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    var event = _aureliaPal.DOM.createCustomEvent(eventName, { cancelable: cancelable, bubbles: bubbles, detail: detail });
    this.element.dispatchEvent(event);
  };

  ElementEvents.prototype.subscribe = function subscribe(eventName, handler, captureOrOptions) {
    if (typeof handler === 'function') {
      if (captureOrOptions === undefined) {
        captureOrOptions = ElementEvents.defaultListenerOptions;
      }
      var eventHandler = new EventHandlerImpl(this, eventName, handler, captureOrOptions, false);
      return eventHandler;
    }

    return undefined;
  };

  ElementEvents.prototype.subscribeOnce = function subscribeOnce(eventName, handler, captureOrOptions) {
    if (typeof handler === 'function') {
      if (captureOrOptions === undefined) {
        captureOrOptions = ElementEvents.defaultListenerOptions;
      }
      var eventHandler = new EventHandlerImpl(this, eventName, handler, captureOrOptions, true);
      return eventHandler;
    }

    return undefined;
  };

  ElementEvents.prototype.dispose = function dispose(eventName) {
    if (eventName && typeof eventName === 'string') {
      var subscriptions = this.subscriptions[eventName];
      if (subscriptions) {
        while (subscriptions.length) {
          var subscription = subscriptions.pop();
          if (subscription) {
            subscription.dispose();
          }
        }
      }
    } else {
      this.disposeAll();
    }
  };

  ElementEvents.prototype.disposeAll = function disposeAll() {
    for (var _key in this.subscriptions) {
      this.dispose(_key);
    }
  };

  return ElementEvents;
}(), _class.defaultListenerOptions = true, _temp);

var EventHandlerImpl = function () {
  function EventHandlerImpl(owner, eventName, handler, captureOrOptions, once) {
    

    this.owner = owner;
    this.eventName = eventName;
    this.handler = handler;

    this.capture = typeof captureOrOptions === 'boolean' ? captureOrOptions : captureOrOptions.capture;
    this.bubbles = !this.capture;
    this.captureOrOptions = captureOrOptions;
    this.once = once;
    owner.element.addEventListener(eventName, this, captureOrOptions);
    owner._enqueueHandler(this);
  }

  EventHandlerImpl.prototype.handleEvent = function handleEvent(e) {
    var fn = this.handler;
    fn(e);
    if (this.once) {
      this.dispose();
    }
  };

  EventHandlerImpl.prototype.dispose = function dispose() {
    this.owner.element.removeEventListener(this.eventName, this, this.captureOrOptions);
    this.owner._dequeueHandler(this);
    this.owner = this.handler = null;
  };

  return EventHandlerImpl;
}();

var ResourceLoadContext = exports.ResourceLoadContext = function () {
  function ResourceLoadContext() {
    

    this.dependencies = {};
  }

  ResourceLoadContext.prototype.addDependency = function addDependency(url) {
    this.dependencies[url] = true;
  };

  ResourceLoadContext.prototype.hasDependency = function hasDependency(url) {
    return url in this.dependencies;
  };

  return ResourceLoadContext;
}();

var ViewCompileInstruction = exports.ViewCompileInstruction = function ViewCompileInstruction() {
  var targetShadowDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var compileSurrogate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  

  this.targetShadowDOM = targetShadowDOM;
  this.compileSurrogate = compileSurrogate;
  this.associatedModuleId = null;
};

ViewCompileInstruction.normal = new ViewCompileInstruction();

var BehaviorInstruction = exports.BehaviorInstruction = function () {
  function BehaviorInstruction() {
    
  }

  BehaviorInstruction.enhance = function enhance() {
    var instruction = new BehaviorInstruction();
    instruction.enhance = true;
    return instruction;
  };

  BehaviorInstruction.unitTest = function unitTest(type, attributes) {
    var instruction = new BehaviorInstruction();
    instruction.type = type;
    instruction.attributes = attributes || {};
    return instruction;
  };

  BehaviorInstruction.element = function element(node, type) {
    var instruction = new BehaviorInstruction();
    instruction.type = type;
    instruction.attributes = {};
    instruction.anchorIsContainer = !(node.hasAttribute('containerless') || type.containerless);
    instruction.initiatedByBehavior = true;
    return instruction;
  };

  BehaviorInstruction.attribute = function attribute(attrName, type) {
    var instruction = new BehaviorInstruction();
    instruction.attrName = attrName;
    instruction.type = type || null;
    instruction.attributes = {};
    return instruction;
  };

  BehaviorInstruction.dynamic = function dynamic(host, viewModel, viewFactory) {
    var instruction = new BehaviorInstruction();
    instruction.host = host;
    instruction.viewModel = viewModel;
    instruction.viewFactory = viewFactory;
    instruction.inheritBindingContext = true;
    return instruction;
  };

  return BehaviorInstruction;
}();

var biProto = BehaviorInstruction.prototype;
biProto.initiatedByBehavior = false;
biProto.enhance = false;
biProto.partReplacements = null;
biProto.viewFactory = null;
biProto.originalAttrName = null;
biProto.skipContentProcessing = false;
biProto.contentFactory = null;
biProto.viewModel = null;
biProto.anchorIsContainer = false;
biProto.host = null;
biProto.attributes = null;
biProto.type = null;
biProto.attrName = null;
biProto.inheritBindingContext = false;

BehaviorInstruction.normal = new BehaviorInstruction();

var TargetInstruction = exports.TargetInstruction = (_temp2 = _class2 = function () {
  function TargetInstruction() {
    
  }

  TargetInstruction.shadowSlot = function shadowSlot(parentInjectorId) {
    var instruction = new TargetInstruction();
    instruction.parentInjectorId = parentInjectorId;
    instruction.shadowSlot = true;
    return instruction;
  };

  TargetInstruction.contentExpression = function contentExpression(expression) {
    var instruction = new TargetInstruction();
    instruction.contentExpression = expression;
    return instruction;
  };

  TargetInstruction.letElement = function letElement(expressions) {
    var instruction = new TargetInstruction();
    instruction.expressions = expressions;
    instruction.letElement = true;
    return instruction;
  };

  TargetInstruction.lifting = function lifting(parentInjectorId, liftingInstruction) {
    var instruction = new TargetInstruction();
    instruction.parentInjectorId = parentInjectorId;
    instruction.expressions = TargetInstruction.noExpressions;
    instruction.behaviorInstructions = [liftingInstruction];
    instruction.viewFactory = liftingInstruction.viewFactory;
    instruction.providers = [liftingInstruction.type.target];
    instruction.lifting = true;
    return instruction;
  };

  TargetInstruction.normal = function normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction) {
    var instruction = new TargetInstruction();
    instruction.injectorId = injectorId;
    instruction.parentInjectorId = parentInjectorId;
    instruction.providers = providers;
    instruction.behaviorInstructions = behaviorInstructions;
    instruction.expressions = expressions;
    instruction.anchorIsContainer = elementInstruction ? elementInstruction.anchorIsContainer : true;
    instruction.elementInstruction = elementInstruction;
    return instruction;
  };

  TargetInstruction.surrogate = function surrogate(providers, behaviorInstructions, expressions, values) {
    var instruction = new TargetInstruction();
    instruction.expressions = expressions;
    instruction.behaviorInstructions = behaviorInstructions;
    instruction.providers = providers;
    instruction.values = values;
    return instruction;
  };

  return TargetInstruction;
}(), _class2.noExpressions = Object.freeze([]), _temp2);


var tiProto = TargetInstruction.prototype;

tiProto.injectorId = null;
tiProto.parentInjectorId = null;

tiProto.shadowSlot = false;
tiProto.slotName = null;
tiProto.slotFallbackFactory = null;

tiProto.contentExpression = null;
tiProto.letElement = false;

tiProto.expressions = null;
tiProto.expressions = null;
tiProto.providers = null;

tiProto.viewFactory = null;

tiProto.anchorIsContainer = false;
tiProto.elementInstruction = null;
tiProto.lifting = false;

tiProto.values = null;

var viewStrategy = exports.viewStrategy = _aureliaMetadata.protocol.create('aurelia:view-strategy', {
  validate: function validate(target) {
    if (!(typeof target.loadViewFactory === 'function')) {
      return 'View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>';
    }

    return true;
  },
  compose: function compose(target) {
    if (!(typeof target.makeRelativeTo === 'function')) {
      target.makeRelativeTo = _aureliaPal.PLATFORM.noop;
    }
  }
});

var RelativeViewStrategy = exports.RelativeViewStrategy = (_dec = viewStrategy(), _dec(_class3 = function () {
  function RelativeViewStrategy(path) {
    

    this.path = path;
    this.absolutePath = null;
  }

  RelativeViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    if (this.absolutePath === null && this.moduleId) {
      this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, this.moduleId);
    }

    compileInstruction.associatedModuleId = this.moduleId;
    return viewEngine.loadViewFactory(this.absolutePath || this.path, compileInstruction, loadContext, target);
  };

  RelativeViewStrategy.prototype.makeRelativeTo = function makeRelativeTo(file) {
    if (this.absolutePath === null) {
      this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, file);
    }
  };

  return RelativeViewStrategy;
}()) || _class3);
var ConventionalViewStrategy = exports.ConventionalViewStrategy = (_dec2 = viewStrategy(), _dec2(_class4 = function () {
  function ConventionalViewStrategy(viewLocator, origin) {
    

    this.moduleId = origin.moduleId;
    this.viewUrl = viewLocator.convertOriginToViewUrl(origin);
  }

  ConventionalViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    compileInstruction.associatedModuleId = this.moduleId;
    return viewEngine.loadViewFactory(this.viewUrl, compileInstruction, loadContext, target);
  };

  return ConventionalViewStrategy;
}()) || _class4);
var NoViewStrategy = exports.NoViewStrategy = (_dec3 = viewStrategy(), _dec3(_class5 = function () {
  function NoViewStrategy(dependencies, dependencyBaseUrl) {
    

    this.dependencies = dependencies || null;
    this.dependencyBaseUrl = dependencyBaseUrl || '';
  }

  NoViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    var entry = this.entry;
    var dependencies = this.dependencies;

    if (entry && entry.factoryIsReady) {
      return Promise.resolve(null);
    }

    this.entry = entry = new _aureliaLoader.TemplateRegistryEntry(this.moduleId || this.dependencyBaseUrl);

    entry.dependencies = [];
    entry.templateIsLoaded = true;

    if (dependencies !== null) {
      for (var i = 0, ii = dependencies.length; i < ii; ++i) {
        var current = dependencies[i];

        if (typeof current === 'string' || typeof current === 'function') {
          entry.addDependency(current);
        } else {
          entry.addDependency(current.from, current.as);
        }
      }
    }

    compileInstruction.associatedModuleId = this.moduleId;

    return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
  };

  return NoViewStrategy;
}()) || _class5);
var TemplateRegistryViewStrategy = exports.TemplateRegistryViewStrategy = (_dec4 = viewStrategy(), _dec4(_class6 = function () {
  function TemplateRegistryViewStrategy(moduleId, entry) {
    

    this.moduleId = moduleId;
    this.entry = entry;
  }

  TemplateRegistryViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    var entry = this.entry;

    if (entry.factoryIsReady) {
      return Promise.resolve(entry.factory);
    }

    compileInstruction.associatedModuleId = this.moduleId;
    return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
  };

  return TemplateRegistryViewStrategy;
}()) || _class6);
var InlineViewStrategy = exports.InlineViewStrategy = (_dec5 = viewStrategy(), _dec5(_class7 = function () {
  function InlineViewStrategy(markup, dependencies, dependencyBaseUrl) {
    

    this.markup = markup;
    this.dependencies = dependencies || null;
    this.dependencyBaseUrl = dependencyBaseUrl || '';
  }

  InlineViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    var entry = this.entry;
    var dependencies = this.dependencies;

    if (entry && entry.factoryIsReady) {
      return Promise.resolve(entry.factory);
    }

    this.entry = entry = new _aureliaLoader.TemplateRegistryEntry(this.moduleId || this.dependencyBaseUrl);
    entry.template = _aureliaPal.DOM.createTemplateFromMarkup(this.markup);

    if (dependencies !== null) {
      for (var i = 0, ii = dependencies.length; i < ii; ++i) {
        var current = dependencies[i];

        if (typeof current === 'string' || typeof current === 'function') {
          entry.addDependency(current);
        } else {
          entry.addDependency(current.from, current.as);
        }
      }
    }

    compileInstruction.associatedModuleId = this.moduleId;
    return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
  };

  return InlineViewStrategy;
}()) || _class7);
var StaticViewStrategy = exports.StaticViewStrategy = (_dec6 = viewStrategy(), _dec6(_class8 = function () {
  function StaticViewStrategy(config) {
    

    if (typeof config === 'string' || config instanceof _aureliaPal.DOM.Element && config.tagName === 'TEMPLATE') {
      config = {
        template: config
      };
    }
    this.template = config.template;
    this.dependencies = config.dependencies || [];
    this.factoryIsReady = false;
    this.onReady = null;
    this.moduleId = 'undefined';
  }

  StaticViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext, target) {
    var _this2 = this;

    if (this.factoryIsReady) {
      return Promise.resolve(this.factory);
    }
    var deps = this.dependencies;
    deps = typeof deps === 'function' ? deps() : deps;
    deps = deps ? deps : [];
    deps = Array.isArray(deps) ? deps : [deps];

    return Promise.all(deps).then(function (dependencies) {
      var container = viewEngine.container;
      var appResources = viewEngine.appResources;
      var viewCompiler = viewEngine.viewCompiler;
      var viewResources = new ViewResources(appResources);

      var resource = void 0;
      var elDeps = [];

      if (target) {
        viewResources.autoRegister(container, target);
      }

      for (var _iterator = dependencies, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var dep = _ref;

        if (typeof dep === 'function') {
          resource = viewResources.autoRegister(container, dep);
          if (resource.elementName !== null) {
            elDeps.push(resource);
          }
        } else if (dep && (typeof dep === 'undefined' ? 'undefined' : _typeof(dep)) === 'object') {
          for (var _key2 in dep) {
            var exported = dep[_key2];
            if (typeof exported === 'function') {
              resource = viewResources.autoRegister(container, exported);
              if (resource.elementName !== null) {
                elDeps.push(resource);
              }
            }
          }
        } else {
          throw new Error('dependency neither function nor object. Received: "' + (typeof dep === 'undefined' ? 'undefined' : _typeof(dep)) + '"');
        }
      }

      return Promise.all(elDeps.map(function (el) {
        return el.load(container, el.target);
      })).then(function () {
        var factory = _this2.template !== null ? viewCompiler.compile(_this2.template, viewResources, compileInstruction) : null;
        _this2.factoryIsReady = true;
        _this2.factory = factory;
        return factory;
      });
    });
  };

  return StaticViewStrategy;
}()) || _class8);
var ViewLocator = exports.ViewLocator = (_temp3 = _class9 = function () {
  function ViewLocator() {
    
  }

  ViewLocator.prototype.getViewStrategy = function getViewStrategy(value) {
    if (!value) {
      return null;
    }

    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'getViewStrategy' in value) {
      var _origin = _aureliaMetadata.Origin.get(value.constructor);

      value = value.getViewStrategy();

      if (typeof value === 'string') {
        value = new RelativeViewStrategy(value);
      }

      viewStrategy.assert(value);

      if (_origin.moduleId) {
        value.makeRelativeTo(_origin.moduleId);
      }

      return value;
    }

    if (typeof value === 'string') {
      value = new RelativeViewStrategy(value);
    }

    if (viewStrategy.validate(value)) {
      return value;
    }

    if (typeof value !== 'function') {
      value = value.constructor;
    }

    if ('$view' in value) {
      var c = value.$view;
      var _view = void 0;
      c = typeof c === 'function' ? c.call(value) : c;
      if (c === null) {
        _view = new NoViewStrategy();
      } else {
        _view = c instanceof StaticViewStrategy ? c : new StaticViewStrategy(c);
      }
      _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, _view, value);
      return _view;
    }

    var origin = _aureliaMetadata.Origin.get(value);
    var strategy = _aureliaMetadata.metadata.get(ViewLocator.viewStrategyMetadataKey, value);

    if (!strategy) {
      if (!origin.moduleId) {
        throw new Error('Cannot determine default view strategy for object.', value);
      }

      strategy = this.createFallbackViewStrategy(origin);
    } else if (origin.moduleId) {
      strategy.moduleId = origin.moduleId;
    }

    return strategy;
  };

  ViewLocator.prototype.createFallbackViewStrategy = function createFallbackViewStrategy(origin) {
    return new ConventionalViewStrategy(this, origin);
  };

  ViewLocator.prototype.convertOriginToViewUrl = function convertOriginToViewUrl(origin) {
    var moduleId = origin.moduleId;
    var id = moduleId.endsWith('.js') || moduleId.endsWith('.ts') ? moduleId.substring(0, moduleId.length - 3) : moduleId;
    return id + '.html';
  };

  return ViewLocator;
}(), _class9.viewStrategyMetadataKey = 'aurelia:view-strategy', _temp3);


function mi(name) {
  throw new Error('BindingLanguage must implement ' + name + '().');
}

var BindingLanguage = exports.BindingLanguage = function () {
  function BindingLanguage() {
    
  }

  BindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, elementName, attrName, attrValue) {
    mi('inspectAttribute');
  };

  BindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, info, existingInstruction) {
    mi('createAttributeInstruction');
  };

  BindingLanguage.prototype.createLetExpressions = function createLetExpressions(resources, element) {
    mi('createLetExpressions');
  };

  BindingLanguage.prototype.inspectTextContent = function inspectTextContent(resources, value) {
    mi('inspectTextContent');
  };

  return BindingLanguage;
}();

var noNodes = Object.freeze([]);

var SlotCustomAttribute = exports.SlotCustomAttribute = function () {
  SlotCustomAttribute.inject = function inject() {
    return [_aureliaPal.DOM.Element];
  };

  function SlotCustomAttribute(element) {
    

    this.element = element;
    this.element.auSlotAttribute = this;
  }

  SlotCustomAttribute.prototype.valueChanged = function valueChanged(newValue, oldValue) {};

  return SlotCustomAttribute;
}();

var PassThroughSlot = exports.PassThroughSlot = function () {
  function PassThroughSlot(anchor, name, destinationName, fallbackFactory) {
    

    this.anchor = anchor;
    this.anchor.viewSlot = this;
    this.name = name;
    this.destinationName = destinationName;
    this.fallbackFactory = fallbackFactory;
    this.destinationSlot = null;

    this.projections = 0;

    this.contentView = null;

    var attr = new SlotCustomAttribute(this.anchor);
    attr.value = this.destinationName;
  }

  PassThroughSlot.prototype.renderFallbackContent = function renderFallbackContent(view, nodes, projectionSource, index) {
    if (this.contentView === null) {
      this.contentView = this.fallbackFactory.create(this.ownerView.container);
      this.contentView.bind(this.ownerView.bindingContext, this.ownerView.overrideContext);

      var slots = Object.create(null);
      slots[this.destinationSlot.name] = this.destinationSlot;

      ShadowDOM.distributeView(this.contentView, slots, projectionSource, index, this.destinationSlot.name);
    }
  };

  PassThroughSlot.prototype.passThroughTo = function passThroughTo(destinationSlot) {
    this.destinationSlot = destinationSlot;
  };

  PassThroughSlot.prototype.addNode = function addNode(view, node, projectionSource, index) {
    if (this.contentView !== null) {
      this.contentView.removeNodes();
      this.contentView.detached();
      this.contentView.unbind();
      this.contentView = null;
    }

    if (node.viewSlot instanceof PassThroughSlot) {
      node.viewSlot.passThroughTo(this);
      return;
    }

    this.projections++;
    this.destinationSlot.addNode(view, node, projectionSource, index);
  };

  PassThroughSlot.prototype.removeView = function removeView(view, projectionSource) {
    this.projections--;
    this.destinationSlot.removeView(view, projectionSource);

    if (this.needsFallbackRendering) {
      this.renderFallbackContent(null, noNodes, projectionSource);
    }
  };

  PassThroughSlot.prototype.removeAll = function removeAll(projectionSource) {
    this.projections = 0;
    this.destinationSlot.removeAll(projectionSource);

    if (this.needsFallbackRendering) {
      this.renderFallbackContent(null, noNodes, projectionSource);
    }
  };

  PassThroughSlot.prototype.projectFrom = function projectFrom(view, projectionSource) {
    this.destinationSlot.projectFrom(view, projectionSource);
  };

  PassThroughSlot.prototype.created = function created(ownerView) {
    this.ownerView = ownerView;
  };

  PassThroughSlot.prototype.bind = function bind(view) {
    if (this.contentView) {
      this.contentView.bind(view.bindingContext, view.overrideContext);
    }
  };

  PassThroughSlot.prototype.attached = function attached() {
    if (this.contentView) {
      this.contentView.attached();
    }
  };

  PassThroughSlot.prototype.detached = function detached() {
    if (this.contentView) {
      this.contentView.detached();
    }
  };

  PassThroughSlot.prototype.unbind = function unbind() {
    if (this.contentView) {
      this.contentView.unbind();
    }
  };

  _createClass(PassThroughSlot, [{
    key: 'needsFallbackRendering',
    get: function get() {
      return this.fallbackFactory && this.projections === 0;
    }
  }]);

  return PassThroughSlot;
}();

var ShadowSlot = exports.ShadowSlot = function () {
  function ShadowSlot(anchor, name, fallbackFactory) {
    

    this.anchor = anchor;
    this.anchor.isContentProjectionSource = true;
    this.anchor.viewSlot = this;
    this.name = name;
    this.fallbackFactory = fallbackFactory;
    this.contentView = null;
    this.projections = 0;

    this.children = [];
    this.projectFromAnchors = null;
    this.destinationSlots = null;
  }

  ShadowSlot.prototype.addNode = function addNode(view, node, projectionSource, index, destination) {
    if (this.contentView !== null) {
      this.contentView.removeNodes();
      this.contentView.detached();
      this.contentView.unbind();
      this.contentView = null;
    }

    if (node.viewSlot instanceof PassThroughSlot) {
      node.viewSlot.passThroughTo(this);
      return;
    }

    if (this.destinationSlots !== null) {
      ShadowDOM.distributeNodes(view, [node], this.destinationSlots, this, index);
    } else {
      node.auOwnerView = view;
      node.auProjectionSource = projectionSource;
      node.auAssignedSlot = this;

      var anchor = this._findAnchor(view, node, projectionSource, index);
      var parent = anchor.parentNode;

      parent.insertBefore(node, anchor);
      this.children.push(node);
      this.projections++;
    }
  };

  ShadowSlot.prototype.removeView = function removeView(view, projectionSource) {
    if (this.destinationSlots !== null) {
      ShadowDOM.undistributeView(view, this.destinationSlots, this);
    } else if (this.contentView && this.contentView.hasSlots) {
      ShadowDOM.undistributeView(view, this.contentView.slots, projectionSource);
    } else {
      var found = this.children.find(function (x) {
        return x.auSlotProjectFrom === projectionSource;
      });
      if (found) {
        var _children = found.auProjectionChildren;
        var ownChildren = this.children;

        for (var i = 0, ii = _children.length; i < ii; ++i) {
          var _child = _children[i];

          if (_child.auOwnerView === view) {
            _children.splice(i, 1);
            view.fragment.appendChild(_child);
            i--;ii--;

            this.projections--;
            var idx = ownChildren.indexOf(_child);
            if (idx > -1) {
              ownChildren.splice(idx, 1);
            }
          }
        }

        if (this.needsFallbackRendering) {
          this.renderFallbackContent(view, noNodes, projectionSource);
        }
      }
    }
  };

  ShadowSlot.prototype.removeAll = function removeAll(projectionSource) {
    if (this.destinationSlots !== null) {
      ShadowDOM.undistributeAll(this.destinationSlots, this);
    } else if (this.contentView && this.contentView.hasSlots) {
      ShadowDOM.undistributeAll(this.contentView.slots, projectionSource);
    } else {
      var found = this.children.find(function (x) {
        return x.auSlotProjectFrom === projectionSource;
      });

      if (found) {
        var _children2 = found.auProjectionChildren;
        var ownChildren = this.children;

        for (var i = 0, ii = _children2.length; i < ii; ++i) {
          var _child2 = _children2[i];
          _child2.auOwnerView.fragment.appendChild(_child2);

          this.projections--;
          var idx = ownChildren.indexOf(_child2);
          if (idx > -1) {
            ownChildren.splice(idx, 1);
          }
        }

        found.auProjectionChildren = [];

        if (this.needsFallbackRendering) {
          this.renderFallbackContent(null, noNodes, projectionSource);
        }
      }
    }
  };

  ShadowSlot.prototype._findAnchor = function _findAnchor(view, node, projectionSource, index) {
    if (projectionSource) {
      var found = this.children.find(function (x) {
        return x.auSlotProjectFrom === projectionSource;
      });
      if (found) {
        if (index !== undefined) {
          var _children3 = found.auProjectionChildren;
          var viewIndex = -1;
          var lastView = void 0;

          for (var i = 0, ii = _children3.length; i < ii; ++i) {
            var current = _children3[i];

            if (current.auOwnerView !== lastView) {
              viewIndex++;
              lastView = current.auOwnerView;

              if (viewIndex >= index && lastView !== view) {
                _children3.splice(i, 0, node);
                return current;
              }
            }
          }
        }

        found.auProjectionChildren.push(node);
        return found;
      }
    }

    return this.anchor;
  };

  ShadowSlot.prototype.projectTo = function projectTo(slots) {
    this.destinationSlots = slots;
  };

  ShadowSlot.prototype.projectFrom = function projectFrom(view, projectionSource) {
    var anchor = _aureliaPal.DOM.createComment('anchor');
    var parent = this.anchor.parentNode;
    anchor.auSlotProjectFrom = projectionSource;
    anchor.auOwnerView = view;
    anchor.auProjectionChildren = [];
    parent.insertBefore(anchor, this.anchor);
    this.children.push(anchor);

    if (this.projectFromAnchors === null) {
      this.projectFromAnchors = [];
    }

    this.projectFromAnchors.push(anchor);
  };

  ShadowSlot.prototype.renderFallbackContent = function renderFallbackContent(view, nodes, projectionSource, index) {
    if (this.contentView === null) {
      this.contentView = this.fallbackFactory.create(this.ownerView.container);
      this.contentView.bind(this.ownerView.bindingContext, this.ownerView.overrideContext);
      this.contentView.insertNodesBefore(this.anchor);
    }

    if (this.contentView.hasSlots) {
      var slots = this.contentView.slots;
      var projectFromAnchors = this.projectFromAnchors;

      if (projectFromAnchors !== null) {
        for (var slotName in slots) {
          var slot = slots[slotName];

          for (var i = 0, ii = projectFromAnchors.length; i < ii; ++i) {
            var anchor = projectFromAnchors[i];
            slot.projectFrom(anchor.auOwnerView, anchor.auSlotProjectFrom);
          }
        }
      }

      this.fallbackSlots = slots;
      ShadowDOM.distributeNodes(view, nodes, slots, projectionSource, index);
    }
  };

  ShadowSlot.prototype.created = function created(ownerView) {
    this.ownerView = ownerView;
  };

  ShadowSlot.prototype.bind = function bind(view) {
    if (this.contentView) {
      this.contentView.bind(view.bindingContext, view.overrideContext);
    }
  };

  ShadowSlot.prototype.attached = function attached() {
    if (this.contentView) {
      this.contentView.attached();
    }
  };

  ShadowSlot.prototype.detached = function detached() {
    if (this.contentView) {
      this.contentView.detached();
    }
  };

  ShadowSlot.prototype.unbind = function unbind() {
    if (this.contentView) {
      this.contentView.unbind();
    }
  };

  _createClass(ShadowSlot, [{
    key: 'needsFallbackRendering',
    get: function get() {
      return this.fallbackFactory && this.projections === 0;
    }
  }]);

  return ShadowSlot;
}();

var ShadowDOM = exports.ShadowDOM = (_temp4 = _class10 = function () {
  function ShadowDOM() {
    
  }

  ShadowDOM.getSlotName = function getSlotName(node) {
    if (node.auSlotAttribute === undefined) {
      return ShadowDOM.defaultSlotKey;
    }

    return node.auSlotAttribute.value;
  };

  ShadowDOM.distributeView = function distributeView(view, slots, projectionSource, index, destinationOverride) {
    var nodes = void 0;

    if (view === null) {
      nodes = noNodes;
    } else {
      var childNodes = view.fragment.childNodes;
      var ii = childNodes.length;
      nodes = new Array(ii);

      for (var i = 0; i < ii; ++i) {
        nodes[i] = childNodes[i];
      }
    }

    ShadowDOM.distributeNodes(view, nodes, slots, projectionSource, index, destinationOverride);
  };

  ShadowDOM.undistributeView = function undistributeView(view, slots, projectionSource) {
    for (var slotName in slots) {
      slots[slotName].removeView(view, projectionSource);
    }
  };

  ShadowDOM.undistributeAll = function undistributeAll(slots, projectionSource) {
    for (var slotName in slots) {
      slots[slotName].removeAll(projectionSource);
    }
  };

  ShadowDOM.distributeNodes = function distributeNodes(view, nodes, slots, projectionSource, index, destinationOverride) {
    for (var i = 0, ii = nodes.length; i < ii; ++i) {
      var currentNode = nodes[i];
      var nodeType = currentNode.nodeType;

      if (currentNode.isContentProjectionSource) {
        currentNode.viewSlot.projectTo(slots);

        for (var slotName in slots) {
          slots[slotName].projectFrom(view, currentNode.viewSlot);
        }

        nodes.splice(i, 1);
        ii--;i--;
      } else if (nodeType === 1 || nodeType === 3 || currentNode.viewSlot instanceof PassThroughSlot) {
        if (nodeType === 3 && _isAllWhitespace(currentNode)) {
          nodes.splice(i, 1);
          ii--;i--;
        } else {
          var found = slots[destinationOverride || ShadowDOM.getSlotName(currentNode)];

          if (found) {
            found.addNode(view, currentNode, projectionSource, index);
            nodes.splice(i, 1);
            ii--;i--;
          }
        }
      } else {
        nodes.splice(i, 1);
        ii--;i--;
      }
    }

    for (var _slotName in slots) {
      var slot = slots[_slotName];

      if (slot.needsFallbackRendering) {
        slot.renderFallbackContent(view, nodes, projectionSource, index);
      }
    }
  };

  return ShadowDOM;
}(), _class10.defaultSlotKey = '__au-default-slot-key__', _temp4);


function register(lookup, name, resource, type) {
  if (!name) {
    return;
  }

  var existing = lookup[name];
  if (existing) {
    if (existing !== resource) {
      throw new Error('Attempted to register ' + type + ' when one with the same name already exists. Name: ' + name + '.');
    }

    return;
  }

  lookup[name] = resource;
}

function validateBehaviorName(name, type) {
  if (/[A-Z]/.test(name)) {
    var newName = _hyphenate(name);
    LogManager.getLogger('templating').warn('\'' + name + '\' is not a valid ' + type + ' name and has been converted to \'' + newName + '\'. Upper-case letters are not allowed because the DOM is not case-sensitive.');
    return newName;
  }
  return name;
}

var conventionMark = '__au_resource__';

var ViewResources = exports.ViewResources = function () {
  ViewResources.convention = function convention(target, existing) {
    var resource = void 0;

    if (existing && conventionMark in existing) {
      return existing;
    }
    if ('$resource' in target) {
      var config = target.$resource;

      if (typeof config === 'string') {
        resource = existing || new HtmlBehaviorResource();
        resource[conventionMark] = true;
        if (!resource.elementName) {
          resource.elementName = validateBehaviorName(config, 'custom element');
        }
      } else {
        if (typeof config === 'function') {
          config = config.call(target);
        }
        if (typeof config === 'string') {
          config = { name: config };
        }

        config = Object.assign({}, config);

        var resourceType = config.type || 'element';

        var _name = config.name;
        switch (resourceType) {
          case 'element':case 'attribute':
            resource = existing || new HtmlBehaviorResource();
            resource[conventionMark] = true;
            if (resourceType === 'element') {
              if (!resource.elementName) {
                resource.elementName = _name ? validateBehaviorName(_name, 'custom element') : _hyphenate(target.name);
              }
            } else {
              if (!resource.attributeName) {
                resource.attributeName = _name ? validateBehaviorName(_name, 'custom attribute') : _hyphenate(target.name);
              }
            }
            if ('templateController' in config) {
              config.liftsContent = config.templateController;
              delete config.templateController;
            }
            if ('defaultBindingMode' in config && resource.attributeDefaultBindingMode !== undefined) {
              config.attributeDefaultBindingMode = config.defaultBindingMode;
              delete config.defaultBindingMode;
            }

            delete config.name;

            Object.assign(resource, config);
            break;
          case 'valueConverter':
            resource = new _aureliaBinding.ValueConverterResource((0, _aureliaBinding.camelCase)(_name || target.name));
            break;
          case 'bindingBehavior':
            resource = new _aureliaBinding.BindingBehaviorResource((0, _aureliaBinding.camelCase)(_name || target.name));
            break;
          case 'viewEngineHooks':
            resource = new ViewEngineHooksResource();
            break;
        }
      }

      if (resource instanceof HtmlBehaviorResource) {
        var _bindables = typeof config === 'string' ? undefined : config.bindables;
        var currentProps = resource.properties;
        if (Array.isArray(_bindables)) {
          for (var i = 0, ii = _bindables.length; ii > i; ++i) {
            var prop = _bindables[i];
            if (!prop || typeof prop !== 'string' && !prop.name) {
              throw new Error('Invalid bindable property at "' + i + '" for class "' + target.name + '". Expected either a string or an object with "name" property.');
            }
            var newProp = new BindableProperty(prop);

            var existed = false;
            for (var j = 0, jj = currentProps.length; jj > j; ++j) {
              if (currentProps[j].name === newProp.name) {
                existed = true;
                break;
              }
            }
            if (existed) {
              continue;
            }
            newProp.registerWith(target, resource);
          }
        }
      }
    }
    return resource;
  };

  function ViewResources(parent, viewUrl) {
    

    this.bindingLanguage = null;

    this.parent = parent || null;
    this.hasParent = this.parent !== null;
    this.viewUrl = viewUrl || '';
    this.lookupFunctions = {
      valueConverters: this.getValueConverter.bind(this),
      bindingBehaviors: this.getBindingBehavior.bind(this)
    };
    this.attributes = Object.create(null);
    this.elements = Object.create(null);
    this.valueConverters = Object.create(null);
    this.bindingBehaviors = Object.create(null);
    this.attributeMap = Object.create(null);
    this.values = Object.create(null);
    this.beforeCompile = this.afterCompile = this.beforeCreate = this.afterCreate = this.beforeBind = this.beforeUnbind = false;
  }

  ViewResources.prototype._tryAddHook = function _tryAddHook(obj, name) {
    if (typeof obj[name] === 'function') {
      var func = obj[name].bind(obj);
      var counter = 1;
      var callbackName = void 0;

      while (this[callbackName = name + counter.toString()] !== undefined) {
        counter++;
      }

      this[name] = true;
      this[callbackName] = func;
    }
  };

  ViewResources.prototype._invokeHook = function _invokeHook(name, one, two, three, four) {
    if (this.hasParent) {
      this.parent._invokeHook(name, one, two, three, four);
    }

    if (this[name]) {
      this[name + '1'](one, two, three, four);

      var callbackName = name + '2';
      if (this[callbackName]) {
        this[callbackName](one, two, three, four);

        callbackName = name + '3';
        if (this[callbackName]) {
          this[callbackName](one, two, three, four);

          var counter = 4;

          while (this[callbackName = name + counter.toString()] !== undefined) {
            this[callbackName](one, two, three, four);
            counter++;
          }
        }
      }
    }
  };

  ViewResources.prototype.registerViewEngineHooks = function registerViewEngineHooks(hooks) {
    this._tryAddHook(hooks, 'beforeCompile');
    this._tryAddHook(hooks, 'afterCompile');
    this._tryAddHook(hooks, 'beforeCreate');
    this._tryAddHook(hooks, 'afterCreate');
    this._tryAddHook(hooks, 'beforeBind');
    this._tryAddHook(hooks, 'beforeUnbind');
  };

  ViewResources.prototype.getBindingLanguage = function getBindingLanguage(bindingLanguageFallback) {
    return this.bindingLanguage || (this.bindingLanguage = bindingLanguageFallback);
  };

  ViewResources.prototype.patchInParent = function patchInParent(newParent) {
    var originalParent = this.parent;

    this.parent = newParent || null;
    this.hasParent = this.parent !== null;

    if (newParent.parent === null) {
      newParent.parent = originalParent;
      newParent.hasParent = originalParent !== null;
    }
  };

  ViewResources.prototype.relativeToView = function relativeToView(path) {
    return (0, _aureliaPath.relativeToFile)(path, this.viewUrl);
  };

  ViewResources.prototype.registerElement = function registerElement(tagName, behavior) {
    register(this.elements, tagName, behavior, 'an Element');
  };

  ViewResources.prototype.getElement = function getElement(tagName) {
    return this.elements[tagName] || (this.hasParent ? this.parent.getElement(tagName) : null);
  };

  ViewResources.prototype.mapAttribute = function mapAttribute(attribute) {
    return this.attributeMap[attribute] || (this.hasParent ? this.parent.mapAttribute(attribute) : null);
  };

  ViewResources.prototype.registerAttribute = function registerAttribute(attribute, behavior, knownAttribute) {
    this.attributeMap[attribute] = knownAttribute;
    register(this.attributes, attribute, behavior, 'an Attribute');
  };

  ViewResources.prototype.getAttribute = function getAttribute(attribute) {
    return this.attributes[attribute] || (this.hasParent ? this.parent.getAttribute(attribute) : null);
  };

  ViewResources.prototype.registerValueConverter = function registerValueConverter(name, valueConverter) {
    register(this.valueConverters, name, valueConverter, 'a ValueConverter');
  };

  ViewResources.prototype.getValueConverter = function getValueConverter(name) {
    return this.valueConverters[name] || (this.hasParent ? this.parent.getValueConverter(name) : null);
  };

  ViewResources.prototype.registerBindingBehavior = function registerBindingBehavior(name, bindingBehavior) {
    register(this.bindingBehaviors, name, bindingBehavior, 'a BindingBehavior');
  };

  ViewResources.prototype.getBindingBehavior = function getBindingBehavior(name) {
    return this.bindingBehaviors[name] || (this.hasParent ? this.parent.getBindingBehavior(name) : null);
  };

  ViewResources.prototype.registerValue = function registerValue(name, value) {
    register(this.values, name, value, 'a value');
  };

  ViewResources.prototype.getValue = function getValue(name) {
    return this.values[name] || (this.hasParent ? this.parent.getValue(name) : null);
  };

  ViewResources.prototype.autoRegister = function autoRegister(container, impl) {
    var resourceTypeMeta = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.resource, impl);
    if (resourceTypeMeta) {
      if (resourceTypeMeta instanceof HtmlBehaviorResource) {
        ViewResources.convention(impl, resourceTypeMeta);

        if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
          HtmlBehaviorResource.convention(impl.name, resourceTypeMeta);
        }
        if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
          resourceTypeMeta.elementName = _hyphenate(impl.name);
        }
      }
    } else {
      resourceTypeMeta = ViewResources.convention(impl) || HtmlBehaviorResource.convention(impl.name) || _aureliaBinding.ValueConverterResource.convention(impl.name) || _aureliaBinding.BindingBehaviorResource.convention(impl.name) || ViewEngineHooksResource.convention(impl.name);
      if (!resourceTypeMeta) {
        resourceTypeMeta = new HtmlBehaviorResource();
        resourceTypeMeta.elementName = _hyphenate(impl.name);
      }
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, resourceTypeMeta, impl);
    }
    resourceTypeMeta.initialize(container, impl);
    resourceTypeMeta.register(this);
    return resourceTypeMeta;
  };

  return ViewResources;
}();

var View = exports.View = function () {
  function View(container, viewFactory, fragment, controllers, bindings, children, slots) {
    

    this.container = container;
    this.viewFactory = viewFactory;
    this.resources = viewFactory.resources;
    this.fragment = fragment;
    this.firstChild = fragment.firstChild;
    this.lastChild = fragment.lastChild;
    this.controllers = controllers;
    this.bindings = bindings;
    this.children = children;
    this.slots = slots;
    this.hasSlots = false;
    this.fromCache = false;
    this.isBound = false;
    this.isAttached = false;
    this.bindingContext = null;
    this.overrideContext = null;
    this.controller = null;
    this.viewModelScope = null;
    this.animatableElement = undefined;
    this._isUserControlled = false;
    this.contentView = null;

    for (var _key3 in slots) {
      this.hasSlots = true;
      break;
    }
  }

  View.prototype.returnToCache = function returnToCache() {
    this.viewFactory.returnViewToCache(this);
  };

  View.prototype.created = function created() {
    var i = void 0;
    var ii = void 0;
    var controllers = this.controllers;

    for (i = 0, ii = controllers.length; i < ii; ++i) {
      controllers[i].created(this);
    }
  };

  View.prototype.bind = function bind(bindingContext, overrideContext, _systemUpdate) {
    var controllers = void 0;
    var bindings = void 0;
    var children = void 0;
    var i = void 0;
    var ii = void 0;

    if (_systemUpdate && this._isUserControlled) {
      return;
    }

    if (this.isBound) {
      if (this.bindingContext === bindingContext) {
        return;
      }

      this.unbind();
    }

    this.isBound = true;
    this.bindingContext = bindingContext;
    this.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(bindingContext);

    this.resources._invokeHook('beforeBind', this);

    bindings = this.bindings;
    for (i = 0, ii = bindings.length; i < ii; ++i) {
      bindings[i].bind(this);
    }

    if (this.viewModelScope !== null) {
      bindingContext.bind(this.viewModelScope.bindingContext, this.viewModelScope.overrideContext);
      this.viewModelScope = null;
    }

    controllers = this.controllers;
    for (i = 0, ii = controllers.length; i < ii; ++i) {
      controllers[i].bind(this);
    }

    children = this.children;
    for (i = 0, ii = children.length; i < ii; ++i) {
      children[i].bind(bindingContext, overrideContext, true);
    }

    if (this.hasSlots) {
      ShadowDOM.distributeView(this.contentView, this.slots);
    }
  };

  View.prototype.addBinding = function addBinding(binding) {
    this.bindings.push(binding);

    if (this.isBound) {
      binding.bind(this);
    }
  };

  View.prototype.unbind = function unbind() {
    var controllers = void 0;
    var bindings = void 0;
    var children = void 0;
    var i = void 0;
    var ii = void 0;

    if (this.isBound) {
      this.isBound = false;
      this.resources._invokeHook('beforeUnbind', this);

      if (this.controller !== null) {
        this.controller.unbind();
      }

      bindings = this.bindings;
      for (i = 0, ii = bindings.length; i < ii; ++i) {
        bindings[i].unbind();
      }

      controllers = this.controllers;
      for (i = 0, ii = controllers.length; i < ii; ++i) {
        controllers[i].unbind();
      }

      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].unbind();
      }

      this.bindingContext = null;
      this.overrideContext = null;
    }
  };

  View.prototype.insertNodesBefore = function insertNodesBefore(refNode) {
    refNode.parentNode.insertBefore(this.fragment, refNode);
  };

  View.prototype.appendNodesTo = function appendNodesTo(parent) {
    parent.appendChild(this.fragment);
  };

  View.prototype.removeNodes = function removeNodes() {
    var fragment = this.fragment;
    var current = this.firstChild;
    var end = this.lastChild;
    var next = void 0;

    while (current) {
      next = current.nextSibling;
      fragment.appendChild(current);

      if (current === end) {
        break;
      }

      current = next;
    }
  };

  View.prototype.attached = function attached() {
    var controllers = void 0;
    var children = void 0;
    var i = void 0;
    var ii = void 0;

    if (this.isAttached) {
      return;
    }

    this.isAttached = true;

    if (this.controller !== null) {
      this.controller.attached();
    }

    controllers = this.controllers;
    for (i = 0, ii = controllers.length; i < ii; ++i) {
      controllers[i].attached();
    }

    children = this.children;
    for (i = 0, ii = children.length; i < ii; ++i) {
      children[i].attached();
    }
  };

  View.prototype.detached = function detached() {
    var controllers = void 0;
    var children = void 0;
    var i = void 0;
    var ii = void 0;

    if (this.isAttached) {
      this.isAttached = false;

      if (this.controller !== null) {
        this.controller.detached();
      }

      controllers = this.controllers;
      for (i = 0, ii = controllers.length; i < ii; ++i) {
        controllers[i].detached();
      }

      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].detached();
      }
    }
  };

  return View;
}();

function getAnimatableElement(view) {
  if (view.animatableElement !== undefined) {
    return view.animatableElement;
  }

  var current = view.firstChild;

  while (current && current.nodeType !== 1) {
    current = current.nextSibling;
  }

  if (current && current.nodeType === 1) {
    return view.animatableElement = current.classList.contains('au-animate') ? current : null;
  }

  return view.animatableElement = null;
}

var ViewSlot = exports.ViewSlot = function () {
  function ViewSlot(anchor, anchorIsContainer) {
    var animator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Animator.instance;

    

    this.anchor = anchor;
    this.anchorIsContainer = anchorIsContainer;
    this.bindingContext = null;
    this.overrideContext = null;
    this.animator = animator;
    this.children = [];
    this.isBound = false;
    this.isAttached = false;
    this.contentSelectors = null;
    anchor.viewSlot = this;
    anchor.isContentProjectionSource = false;
  }

  ViewSlot.prototype.animateView = function animateView(view) {
    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'enter';

    var animatableElement = getAnimatableElement(view);

    if (animatableElement !== null) {
      switch (direction) {
        case 'enter':
          return this.animator.enter(animatableElement);
        case 'leave':
          return this.animator.leave(animatableElement);
        default:
          throw new Error('Invalid animation direction: ' + direction);
      }
    }
  };

  ViewSlot.prototype.transformChildNodesIntoView = function transformChildNodesIntoView() {
    var parent = this.anchor;

    this.children.push({
      fragment: parent,
      firstChild: parent.firstChild,
      lastChild: parent.lastChild,
      returnToCache: function returnToCache() {},
      removeNodes: function removeNodes() {
        var last = void 0;

        while (last = parent.lastChild) {
          parent.removeChild(last);
        }
      },
      created: function created() {},
      bind: function bind() {},
      unbind: function unbind() {},
      attached: function attached() {},
      detached: function detached() {}
    });
  };

  ViewSlot.prototype.bind = function bind(bindingContext, overrideContext) {
    var i = void 0;
    var ii = void 0;
    var children = void 0;

    if (this.isBound) {
      if (this.bindingContext === bindingContext) {
        return;
      }

      this.unbind();
    }

    this.isBound = true;
    this.bindingContext = bindingContext = bindingContext || this.bindingContext;
    this.overrideContext = overrideContext = overrideContext || this.overrideContext;

    children = this.children;
    for (i = 0, ii = children.length; i < ii; ++i) {
      children[i].bind(bindingContext, overrideContext, true);
    }
  };

  ViewSlot.prototype.unbind = function unbind() {
    if (this.isBound) {
      var i = void 0;
      var ii = void 0;
      var _children4 = this.children;

      this.isBound = false;
      this.bindingContext = null;
      this.overrideContext = null;

      for (i = 0, ii = _children4.length; i < ii; ++i) {
        _children4[i].unbind();
      }
    }
  };

  ViewSlot.prototype.add = function add(view) {
    if (this.anchorIsContainer) {
      view.appendNodesTo(this.anchor);
    } else {
      view.insertNodesBefore(this.anchor);
    }

    this.children.push(view);

    if (this.isAttached) {
      view.attached();
      return this.animateView(view, 'enter');
    }
  };

  ViewSlot.prototype.insert = function insert(index, view) {
    var children = this.children;
    var length = children.length;

    if (index === 0 && length === 0 || index >= length) {
      return this.add(view);
    }

    view.insertNodesBefore(children[index].firstChild);
    children.splice(index, 0, view);

    if (this.isAttached) {
      view.attached();
      return this.animateView(view, 'enter');
    }
  };

  ViewSlot.prototype.move = function move(sourceIndex, targetIndex) {
    if (sourceIndex === targetIndex) {
      return;
    }

    var children = this.children;
    var view = children[sourceIndex];

    view.removeNodes();
    view.insertNodesBefore(children[targetIndex].firstChild);
    children.splice(sourceIndex, 1);
    children.splice(targetIndex, 0, view);
  };

  ViewSlot.prototype.remove = function remove(view, returnToCache, skipAnimation) {
    return this.removeAt(this.children.indexOf(view), returnToCache, skipAnimation);
  };

  ViewSlot.prototype.removeMany = function removeMany(viewsToRemove, returnToCache, skipAnimation) {
    var _this3 = this;

    var children = this.children;
    var ii = viewsToRemove.length;
    var i = void 0;
    var rmPromises = [];

    viewsToRemove.forEach(function (child) {
      if (skipAnimation) {
        child.removeNodes();
        return;
      }

      var animation = _this3.animateView(child, 'leave');
      if (animation) {
        rmPromises.push(animation.then(function () {
          return child.removeNodes();
        }));
      } else {
        child.removeNodes();
      }
    });

    var removeAction = function removeAction() {
      if (_this3.isAttached) {
        for (i = 0; i < ii; ++i) {
          viewsToRemove[i].detached();
        }
      }

      if (returnToCache) {
        for (i = 0; i < ii; ++i) {
          viewsToRemove[i].returnToCache();
        }
      }

      for (i = 0; i < ii; ++i) {
        var index = children.indexOf(viewsToRemove[i]);
        if (index >= 0) {
          children.splice(index, 1);
        }
      }
    };

    if (rmPromises.length > 0) {
      return Promise.all(rmPromises).then(function () {
        return removeAction();
      });
    }

    return removeAction();
  };

  ViewSlot.prototype.removeAt = function removeAt(index, returnToCache, skipAnimation) {
    var _this4 = this;

    var view = this.children[index];

    var removeAction = function removeAction() {
      index = _this4.children.indexOf(view);
      view.removeNodes();
      _this4.children.splice(index, 1);

      if (_this4.isAttached) {
        view.detached();
      }

      if (returnToCache) {
        view.returnToCache();
      }

      return view;
    };

    if (!skipAnimation) {
      var animation = this.animateView(view, 'leave');
      if (animation) {
        return animation.then(function () {
          return removeAction();
        });
      }
    }

    return removeAction();
  };

  ViewSlot.prototype.removeAll = function removeAll(returnToCache, skipAnimation) {
    var _this5 = this;

    var children = this.children;
    var ii = children.length;
    var i = void 0;
    var rmPromises = [];

    children.forEach(function (child) {
      if (skipAnimation) {
        child.removeNodes();
        return;
      }

      var animation = _this5.animateView(child, 'leave');
      if (animation) {
        rmPromises.push(animation.then(function () {
          return child.removeNodes();
        }));
      } else {
        child.removeNodes();
      }
    });

    var removeAction = function removeAction() {
      if (_this5.isAttached) {
        for (i = 0; i < ii; ++i) {
          children[i].detached();
        }
      }

      if (returnToCache) {
        for (i = 0; i < ii; ++i) {
          var _child3 = children[i];

          if (_child3) {
            _child3.returnToCache();
          }
        }
      }

      _this5.children = [];
    };

    if (rmPromises.length > 0) {
      return Promise.all(rmPromises).then(function () {
        return removeAction();
      });
    }

    return removeAction();
  };

  ViewSlot.prototype.attached = function attached() {
    var i = void 0;
    var ii = void 0;
    var children = void 0;
    var child = void 0;

    if (this.isAttached) {
      return;
    }

    this.isAttached = true;

    children = this.children;
    for (i = 0, ii = children.length; i < ii; ++i) {
      child = children[i];
      child.attached();
      this.animateView(child, 'enter');
    }
  };

  ViewSlot.prototype.detached = function detached() {
    var i = void 0;
    var ii = void 0;
    var children = void 0;

    if (this.isAttached) {
      this.isAttached = false;
      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].detached();
      }
    }
  };

  ViewSlot.prototype.projectTo = function projectTo(slots) {
    var _this6 = this;

    this.projectToSlots = slots;
    this.add = this._projectionAdd;
    this.insert = this._projectionInsert;
    this.move = this._projectionMove;
    this.remove = this._projectionRemove;
    this.removeAt = this._projectionRemoveAt;
    this.removeMany = this._projectionRemoveMany;
    this.removeAll = this._projectionRemoveAll;
    this.children.forEach(function (view) {
      return ShadowDOM.distributeView(view, slots, _this6);
    });
  };

  ViewSlot.prototype._projectionAdd = function _projectionAdd(view) {
    ShadowDOM.distributeView(view, this.projectToSlots, this);

    this.children.push(view);

    if (this.isAttached) {
      view.attached();
    }
  };

  ViewSlot.prototype._projectionInsert = function _projectionInsert(index, view) {
    if (index === 0 && !this.children.length || index >= this.children.length) {
      this.add(view);
    } else {
      ShadowDOM.distributeView(view, this.projectToSlots, this, index);

      this.children.splice(index, 0, view);

      if (this.isAttached) {
        view.attached();
      }
    }
  };

  ViewSlot.prototype._projectionMove = function _projectionMove(sourceIndex, targetIndex) {
    if (sourceIndex === targetIndex) {
      return;
    }

    var children = this.children;
    var view = children[sourceIndex];

    ShadowDOM.undistributeView(view, this.projectToSlots, this);
    ShadowDOM.distributeView(view, this.projectToSlots, this, targetIndex);

    children.splice(sourceIndex, 1);
    children.splice(targetIndex, 0, view);
  };

  ViewSlot.prototype._projectionRemove = function _projectionRemove(view, returnToCache) {
    ShadowDOM.undistributeView(view, this.projectToSlots, this);
    this.children.splice(this.children.indexOf(view), 1);

    if (this.isAttached) {
      view.detached();
    }
    if (returnToCache) {
      view.returnToCache();
    }
  };

  ViewSlot.prototype._projectionRemoveAt = function _projectionRemoveAt(index, returnToCache) {
    var view = this.children[index];

    ShadowDOM.undistributeView(view, this.projectToSlots, this);
    this.children.splice(index, 1);

    if (this.isAttached) {
      view.detached();
    }
    if (returnToCache) {
      view.returnToCache();
    }
  };

  ViewSlot.prototype._projectionRemoveMany = function _projectionRemoveMany(viewsToRemove, returnToCache) {
    var _this7 = this;

    viewsToRemove.forEach(function (view) {
      return _this7.remove(view, returnToCache);
    });
  };

  ViewSlot.prototype._projectionRemoveAll = function _projectionRemoveAll(returnToCache) {
    ShadowDOM.undistributeAll(this.projectToSlots, this);

    var children = this.children;
    var ii = children.length;

    for (var i = 0; i < ii; ++i) {
      if (returnToCache) {
        children[i].returnToCache();
      } else if (this.isAttached) {
        children[i].detached();
      }
    }

    this.children = [];
  };

  return ViewSlot;
}();

var ProviderResolver = (0, _aureliaDependencyInjection.resolver)(_class12 = function () {
  function ProviderResolver() {
    
  }

  ProviderResolver.prototype.get = function get(container, key) {
    var id = key.__providerId__;
    return id in container ? container[id] : container[id] = container.invoke(key);
  };

  return ProviderResolver;
}()) || _class12;

var providerResolverInstance = new ProviderResolver();

function elementContainerGet(key) {
  if (key === _aureliaPal.DOM.Element) {
    return this.element;
  }

  if (key === BoundViewFactory) {
    if (this.boundViewFactory) {
      return this.boundViewFactory;
    }

    var factory = this.instruction.viewFactory;
    var _partReplacements = this.partReplacements;

    if (_partReplacements) {
      factory = _partReplacements[factory.part] || factory;
    }

    this.boundViewFactory = new BoundViewFactory(this, factory, _partReplacements);
    return this.boundViewFactory;
  }

  if (key === ViewSlot) {
    if (this.viewSlot === undefined) {
      this.viewSlot = new ViewSlot(this.element, this.instruction.anchorIsContainer);
      this.element.isContentProjectionSource = this.instruction.lifting;
      this.children.push(this.viewSlot);
    }

    return this.viewSlot;
  }

  if (key === ElementEvents) {
    return this.elementEvents || (this.elementEvents = new ElementEvents(this.element));
  }

  if (key === CompositionTransaction) {
    return this.compositionTransaction || (this.compositionTransaction = this.parent.get(key));
  }

  if (key === ViewResources) {
    return this.viewResources;
  }

  if (key === TargetInstruction) {
    return this.instruction;
  }

  return this.superGet(key);
}

function createElementContainer(parent, element, instruction, children, partReplacements, resources) {
  var container = parent.createChild();
  var providers = void 0;
  var i = void 0;

  container.element = element;
  container.instruction = instruction;
  container.children = children;
  container.viewResources = resources;
  container.partReplacements = partReplacements;

  providers = instruction.providers;
  i = providers.length;

  while (i--) {
    container._resolvers.set(providers[i], providerResolverInstance);
  }

  container.superGet = container.get;
  container.get = elementContainerGet;

  return container;
}

function hasAttribute(name) {
  return this._element.hasAttribute(name);
}

function getAttribute(name) {
  return this._element.getAttribute(name);
}

function setAttribute(name, value) {
  this._element.setAttribute(name, value);
}

function makeElementIntoAnchor(element, elementInstruction) {
  var anchor = _aureliaPal.DOM.createComment('anchor');

  if (elementInstruction) {
    var firstChild = element.firstChild;

    if (firstChild && firstChild.tagName === 'AU-CONTENT') {
      anchor.contentElement = firstChild;
    }

    anchor._element = element;

    anchor.hasAttribute = hasAttribute;
    anchor.getAttribute = getAttribute;
    anchor.setAttribute = setAttribute;
  }

  _aureliaPal.DOM.replaceNode(anchor, element);

  return anchor;
}

function applyInstructions(containers, element, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources) {
  var behaviorInstructions = instruction.behaviorInstructions;
  var expressions = instruction.expressions;
  var elementContainer = void 0;
  var i = void 0;
  var ii = void 0;
  var current = void 0;
  var instance = void 0;

  if (instruction.contentExpression) {
    bindings.push(instruction.contentExpression.createBinding(element.nextSibling));
    element.nextSibling.auInterpolationTarget = true;
    element.parentNode.removeChild(element);
    return;
  }

  if (instruction.shadowSlot) {
    var commentAnchor = _aureliaPal.DOM.createComment('slot');
    var slot = void 0;

    if (instruction.slotDestination) {
      slot = new PassThroughSlot(commentAnchor, instruction.slotName, instruction.slotDestination, instruction.slotFallbackFactory);
    } else {
      slot = new ShadowSlot(commentAnchor, instruction.slotName, instruction.slotFallbackFactory);
    }

    _aureliaPal.DOM.replaceNode(commentAnchor, element);
    shadowSlots[instruction.slotName] = slot;
    controllers.push(slot);
    return;
  }

  if (instruction.letElement) {
    for (i = 0, ii = expressions.length; i < ii; ++i) {
      bindings.push(expressions[i].createBinding());
    }
    element.parentNode.removeChild(element);
    return;
  }

  if (behaviorInstructions.length) {
    if (!instruction.anchorIsContainer) {
      element = makeElementIntoAnchor(element, instruction.elementInstruction);
    }

    containers[instruction.injectorId] = elementContainer = createElementContainer(containers[instruction.parentInjectorId], element, instruction, children, partReplacements, resources);

    for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
      current = behaviorInstructions[i];
      instance = current.type.create(elementContainer, current, element, bindings);
      controllers.push(instance);
    }
  }

  for (i = 0, ii = expressions.length; i < ii; ++i) {
    bindings.push(expressions[i].createBinding(element));
  }
}

function styleStringToObject(style, target) {
  var attributes = style.split(';');
  var firstIndexOfColon = void 0;
  var i = void 0;
  var current = void 0;
  var key = void 0;
  var value = void 0;

  target = target || {};

  for (i = 0; i < attributes.length; i++) {
    current = attributes[i];
    firstIndexOfColon = current.indexOf(':');
    key = current.substring(0, firstIndexOfColon).trim();
    value = current.substring(firstIndexOfColon + 1).trim();
    target[key] = value;
  }

  return target;
}

function styleObjectToString(obj) {
  var result = '';

  for (var _key4 in obj) {
    result += _key4 + ':' + obj[_key4] + ';';
  }

  return result;
}

function applySurrogateInstruction(container, element, instruction, controllers, bindings, children) {
  var behaviorInstructions = instruction.behaviorInstructions;
  var expressions = instruction.expressions;
  var providers = instruction.providers;
  var values = instruction.values;
  var i = void 0;
  var ii = void 0;
  var current = void 0;
  var instance = void 0;
  var currentAttributeValue = void 0;

  i = providers.length;
  while (i--) {
    container._resolvers.set(providers[i], providerResolverInstance);
  }

  for (var _key5 in values) {
    currentAttributeValue = element.getAttribute(_key5);

    if (currentAttributeValue) {
      if (_key5 === 'class') {
        element.setAttribute('class', currentAttributeValue + ' ' + values[_key5]);
      } else if (_key5 === 'style') {
        var styleObject = styleStringToObject(values[_key5]);
        styleStringToObject(currentAttributeValue, styleObject);
        element.setAttribute('style', styleObjectToString(styleObject));
      }
    } else {
      element.setAttribute(_key5, values[_key5]);
    }
  }

  if (behaviorInstructions.length) {
    for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
      current = behaviorInstructions[i];
      instance = current.type.create(container, current, element, bindings);

      if (instance.contentView) {
        children.push(instance.contentView);
      }

      controllers.push(instance);
    }
  }

  for (i = 0, ii = expressions.length; i < ii; ++i) {
    bindings.push(expressions[i].createBinding(element));
  }
}

var BoundViewFactory = exports.BoundViewFactory = function () {
  function BoundViewFactory(parentContainer, viewFactory, partReplacements) {
    

    this.parentContainer = parentContainer;
    this.viewFactory = viewFactory;
    this.factoryCreateInstruction = { partReplacements: partReplacements };
  }

  BoundViewFactory.prototype.create = function create() {
    var view = this.viewFactory.create(this.parentContainer.createChild(), this.factoryCreateInstruction);
    view._isUserControlled = true;
    return view;
  };

  BoundViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
    this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
  };

  BoundViewFactory.prototype.getCachedView = function getCachedView() {
    return this.viewFactory.getCachedView();
  };

  BoundViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
    this.viewFactory.returnViewToCache(view);
  };

  _createClass(BoundViewFactory, [{
    key: 'isCaching',
    get: function get() {
      return this.viewFactory.isCaching;
    }
  }]);

  return BoundViewFactory;
}();

var ViewFactory = exports.ViewFactory = function () {
  function ViewFactory(template, instructions, resources) {
    

    this.isCaching = false;

    this.template = template;
    this.instructions = instructions;
    this.resources = resources;
    this.cacheSize = -1;
    this.cache = null;
  }

  ViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
    if (size) {
      if (size === '*') {
        size = Number.MAX_VALUE;
      } else if (typeof size === 'string') {
        size = parseInt(size, 10);
      }
    }

    if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
      this.cacheSize = size;
    }

    if (this.cacheSize > 0) {
      this.cache = [];
    } else {
      this.cache = null;
    }

    this.isCaching = this.cacheSize > 0;
  };

  ViewFactory.prototype.getCachedView = function getCachedView() {
    return this.cache !== null ? this.cache.pop() || null : null;
  };

  ViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
    if (view.isAttached) {
      view.detached();
    }

    if (view.isBound) {
      view.unbind();
    }

    if (this.cache !== null && this.cache.length < this.cacheSize) {
      view.fromCache = true;
      this.cache.push(view);
    }
  };

  ViewFactory.prototype.create = function create(container, createInstruction, element) {
    createInstruction = createInstruction || BehaviorInstruction.normal;

    var cachedView = this.getCachedView();
    if (cachedView !== null) {
      return cachedView;
    }

    var fragment = createInstruction.enhance ? this.template : this.template.cloneNode(true);
    var instructables = fragment.querySelectorAll('.au-target');
    var instructions = this.instructions;
    var resources = this.resources;
    var controllers = [];
    var bindings = [];
    var children = [];
    var shadowSlots = Object.create(null);
    var containers = { root: container };
    var partReplacements = createInstruction.partReplacements;
    var i = void 0;
    var ii = void 0;
    var view = void 0;
    var instructable = void 0;
    var instruction = void 0;

    this.resources._invokeHook('beforeCreate', this, container, fragment, createInstruction);

    if (element && this.surrogateInstruction !== null) {
      applySurrogateInstruction(container, element, this.surrogateInstruction, controllers, bindings, children);
    }

    if (createInstruction.enhance && fragment.hasAttribute('au-target-id')) {
      instructable = fragment;
      instruction = instructions[instructable.getAttribute('au-target-id')];
      applyInstructions(containers, instructable, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources);
    }

    for (i = 0, ii = instructables.length; i < ii; ++i) {
      instructable = instructables[i];
      instruction = instructions[instructable.getAttribute('au-target-id')];
      applyInstructions(containers, instructable, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources);
    }

    view = new View(container, this, fragment, controllers, bindings, children, shadowSlots);

    if (!createInstruction.initiatedByBehavior) {
      view.created();
    }

    this.resources._invokeHook('afterCreate', view);

    return view;
  };

  return ViewFactory;
}();

var nextInjectorId = 0;
function getNextInjectorId() {
  return ++nextInjectorId;
}

var lastAUTargetID = 0;
function getNextAUTargetID() {
  return (++lastAUTargetID).toString();
}

function makeIntoInstructionTarget(element) {
  var value = element.getAttribute('class');
  var auTargetID = getNextAUTargetID();

  element.setAttribute('class', value ? value + ' au-target' : 'au-target');
  element.setAttribute('au-target-id', auTargetID);

  return auTargetID;
}

function makeShadowSlot(compiler, resources, node, instructions, parentInjectorId) {
  var auShadowSlot = _aureliaPal.DOM.createElement('au-shadow-slot');
  _aureliaPal.DOM.replaceNode(auShadowSlot, node);

  var auTargetID = makeIntoInstructionTarget(auShadowSlot);
  var instruction = TargetInstruction.shadowSlot(parentInjectorId);

  instruction.slotName = node.getAttribute('name') || ShadowDOM.defaultSlotKey;
  instruction.slotDestination = node.getAttribute('slot');

  if (node.innerHTML.trim()) {
    var fragment = _aureliaPal.DOM.createDocumentFragment();
    var _child4 = void 0;

    while (_child4 = node.firstChild) {
      fragment.appendChild(_child4);
    }

    instruction.slotFallbackFactory = compiler.compile(fragment, resources);
  }

  instructions[auTargetID] = instruction;

  return auShadowSlot;
}

var defaultLetHandler = BindingLanguage.prototype.createLetExpressions;

var ViewCompiler = exports.ViewCompiler = function () {
  ViewCompiler.inject = function inject() {
    return [BindingLanguage, ViewResources];
  };

  function ViewCompiler(bindingLanguage, resources) {
    

    this.bindingLanguage = bindingLanguage;
    this.resources = resources;
  }

  ViewCompiler.prototype.compile = function compile(source, resources, compileInstruction) {
    resources = resources || this.resources;
    compileInstruction = compileInstruction || ViewCompileInstruction.normal;
    source = typeof source === 'string' ? _aureliaPal.DOM.createTemplateFromMarkup(source) : source;

    var content = void 0;
    var part = void 0;
    var cacheSize = void 0;

    if (source.content) {
      part = source.getAttribute('part');
      cacheSize = source.getAttribute('view-cache');
      content = _aureliaPal.DOM.adoptNode(source.content);
    } else {
      content = source;
    }

    compileInstruction.targetShadowDOM = compileInstruction.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
    resources._invokeHook('beforeCompile', content, resources, compileInstruction);

    var instructions = {};
    this._compileNode(content, resources, instructions, source, 'root', !compileInstruction.targetShadowDOM);

    var firstChild = content.firstChild;
    if (firstChild && firstChild.nodeType === 1) {
      var targetId = firstChild.getAttribute('au-target-id');
      if (targetId) {
        var ins = instructions[targetId];

        if (ins.shadowSlot || ins.lifting || ins.elementInstruction && !ins.elementInstruction.anchorIsContainer) {
          content.insertBefore(_aureliaPal.DOM.createComment('view'), firstChild);
        }
      }
    }

    var factory = new ViewFactory(content, instructions, resources);

    factory.surrogateInstruction = compileInstruction.compileSurrogate ? this._compileSurrogate(source, resources) : null;
    factory.part = part;

    if (cacheSize) {
      factory.setCacheSize(cacheSize);
    }

    resources._invokeHook('afterCompile', factory);

    return factory;
  };

  ViewCompiler.prototype._compileNode = function _compileNode(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
    switch (node.nodeType) {
      case 1:
        return this._compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM);
      case 3:
        var expression = resources.getBindingLanguage(this.bindingLanguage).inspectTextContent(resources, node.wholeText);
        if (expression) {
          var marker = _aureliaPal.DOM.createElement('au-marker');
          var auTargetID = makeIntoInstructionTarget(marker);
          (node.parentNode || parentNode).insertBefore(marker, node);
          node.textContent = ' ';
          instructions[auTargetID] = TargetInstruction.contentExpression(expression);

          while (node.nextSibling && node.nextSibling.nodeType === 3) {
            (node.parentNode || parentNode).removeChild(node.nextSibling);
          }
        } else {
          while (node.nextSibling && node.nextSibling.nodeType === 3) {
            node = node.nextSibling;
          }
        }
        return node.nextSibling;
      case 11:
        var currentChild = node.firstChild;
        while (currentChild) {
          currentChild = this._compileNode(currentChild, resources, instructions, node, parentInjectorId, targetLightDOM);
        }
        break;
      default:
        break;
    }

    return node.nextSibling;
  };

  ViewCompiler.prototype._compileSurrogate = function _compileSurrogate(node, resources) {
    var tagName = node.tagName.toLowerCase();
    var attributes = node.attributes;
    var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
    var knownAttribute = void 0;
    var property = void 0;
    var instruction = void 0;
    var i = void 0;
    var ii = void 0;
    var attr = void 0;
    var attrName = void 0;
    var attrValue = void 0;
    var info = void 0;
    var type = void 0;
    var expressions = [];
    var expression = void 0;
    var behaviorInstructions = [];
    var values = {};
    var hasValues = false;
    var providers = [];

    for (i = 0, ii = attributes.length; i < ii; ++i) {
      attr = attributes[i];
      attrName = attr.name;
      attrValue = attr.value;

      info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);
      type = resources.getAttribute(info.attrName);

      if (type) {
        knownAttribute = resources.mapAttribute(info.attrName);
        if (knownAttribute) {
          property = type.attributes[knownAttribute];

          if (property) {
            info.defaultBindingMode = property.defaultBindingMode;

            if (!info.command && !info.expression) {
              info.command = property.hasOptions ? 'options' : null;
            }

            if (info.command && info.command !== 'options' && type.primaryProperty) {
              var _primaryProperty = type.primaryProperty;
              attrName = info.attrName = _primaryProperty.attribute;

              info.defaultBindingMode = _primaryProperty.defaultBindingMode;
            }
          }
        }
      }

      instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);

      if (instruction) {
        if (instruction.alteredAttr) {
          type = resources.getAttribute(instruction.attrName);
        }

        if (instruction.discrete) {
          expressions.push(instruction);
        } else {
          if (type) {
            instruction.type = type;
            this._configureProperties(instruction, resources);

            if (type.liftsContent) {
              throw new Error('You cannot place a template controller on a surrogate element.');
            } else {
              behaviorInstructions.push(instruction);
            }
          } else {
            expressions.push(instruction.attributes[instruction.attrName]);
          }
        }
      } else {
        if (type) {
          instruction = BehaviorInstruction.attribute(attrName, type);
          instruction.attributes[resources.mapAttribute(attrName)] = attrValue;

          if (type.liftsContent) {
            throw new Error('You cannot place a template controller on a surrogate element.');
          } else {
            behaviorInstructions.push(instruction);
          }
        } else if (attrName !== 'id' && attrName !== 'part' && attrName !== 'replace-part') {
          hasValues = true;
          values[attrName] = attrValue;
        }
      }
    }

    if (expressions.length || behaviorInstructions.length || hasValues) {
      for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
        instruction = behaviorInstructions[i];
        instruction.type.compile(this, resources, node, instruction);
        providers.push(instruction.type.target);
      }

      for (i = 0, ii = expressions.length; i < ii; ++i) {
        expression = expressions[i];
        if (expression.attrToRemove !== undefined) {
          node.removeAttribute(expression.attrToRemove);
        }
      }

      return TargetInstruction.surrogate(providers, behaviorInstructions, expressions, values);
    }

    return null;
  };

  ViewCompiler.prototype._compileElement = function _compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
    var tagName = node.tagName.toLowerCase();
    var attributes = node.attributes;
    var expressions = [];
    var expression = void 0;
    var behaviorInstructions = [];
    var providers = [];
    var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
    var liftingInstruction = void 0;
    var viewFactory = void 0;
    var type = void 0;
    var elementInstruction = void 0;
    var elementProperty = void 0;
    var i = void 0;
    var ii = void 0;
    var attr = void 0;
    var attrName = void 0;
    var attrValue = void 0;
    var originalAttrName = void 0;
    var instruction = void 0;
    var info = void 0;
    var property = void 0;
    var knownAttribute = void 0;
    var auTargetID = void 0;
    var injectorId = void 0;

    if (tagName === 'slot') {
      if (targetLightDOM) {
        node = makeShadowSlot(this, resources, node, instructions, parentInjectorId);
      }
      return node.nextSibling;
    } else if (tagName === 'template') {
      if (!('content' in node)) {
        throw new Error('You cannot place a template element within ' + node.namespaceURI + ' namespace');
      }
      viewFactory = this.compile(node, resources);
      viewFactory.part = node.getAttribute('part');
    } else {
      type = resources.getElement(node.getAttribute('as-element') || tagName);

      if (tagName === 'let' && !type && bindingLanguage.createLetExpressions !== defaultLetHandler) {
        expressions = bindingLanguage.createLetExpressions(resources, node);
        auTargetID = makeIntoInstructionTarget(node);
        instructions[auTargetID] = TargetInstruction.letElement(expressions);
        return node.nextSibling;
      }
      if (type) {
        elementInstruction = BehaviorInstruction.element(node, type);
        type.processAttributes(this, resources, node, attributes, elementInstruction);
        behaviorInstructions.push(elementInstruction);
      }
    }

    for (i = 0, ii = attributes.length; i < ii; ++i) {
      attr = attributes[i];
      originalAttrName = attrName = attr.name;
      attrValue = attr.value;
      info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);

      if (targetLightDOM && info.attrName === 'slot') {
        info.attrName = attrName = 'au-slot';
      }

      type = resources.getAttribute(info.attrName);
      elementProperty = null;

      if (type) {
        knownAttribute = resources.mapAttribute(info.attrName);
        if (knownAttribute) {
          property = type.attributes[knownAttribute];

          if (property) {
            info.defaultBindingMode = property.defaultBindingMode;

            if (!info.command && !info.expression) {
              info.command = property.hasOptions ? 'options' : null;
            }

            if (info.command && info.command !== 'options' && type.primaryProperty) {
              var _primaryProperty2 = type.primaryProperty;
              attrName = info.attrName = _primaryProperty2.attribute;

              info.defaultBindingMode = _primaryProperty2.defaultBindingMode;
            }
          }
        }
      } else if (elementInstruction) {
        elementProperty = elementInstruction.type.attributes[info.attrName];
        if (elementProperty) {
          info.defaultBindingMode = elementProperty.defaultBindingMode;
        }
      }

      if (elementProperty) {
        instruction = bindingLanguage.createAttributeInstruction(resources, node, info, elementInstruction);
      } else {
        instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
      }

      if (instruction) {
        if (instruction.alteredAttr) {
          type = resources.getAttribute(instruction.attrName);
        }

        if (instruction.discrete) {
          expressions.push(instruction);
        } else {
          if (type) {
            instruction.type = type;
            this._configureProperties(instruction, resources);

            if (type.liftsContent) {
              instruction.originalAttrName = originalAttrName;
              liftingInstruction = instruction;
              break;
            } else {
              behaviorInstructions.push(instruction);
            }
          } else if (elementProperty) {
            elementInstruction.attributes[info.attrName].targetProperty = elementProperty.name;
          } else {
            expressions.push(instruction.attributes[instruction.attrName]);
          }
        }
      } else {
        if (type) {
          instruction = BehaviorInstruction.attribute(attrName, type);
          instruction.attributes[resources.mapAttribute(attrName)] = attrValue;

          if (type.liftsContent) {
            instruction.originalAttrName = originalAttrName;
            liftingInstruction = instruction;
            break;
          } else {
            behaviorInstructions.push(instruction);
          }
        } else if (elementProperty) {
          elementInstruction.attributes[attrName] = attrValue;
        }
      }
    }

    if (liftingInstruction) {
      liftingInstruction.viewFactory = viewFactory;
      node = liftingInstruction.type.compile(this, resources, node, liftingInstruction, parentNode);
      auTargetID = makeIntoInstructionTarget(node);
      instructions[auTargetID] = TargetInstruction.lifting(parentInjectorId, liftingInstruction);
    } else {
      var skipContentProcessing = false;

      if (expressions.length || behaviorInstructions.length) {
        injectorId = behaviorInstructions.length ? getNextInjectorId() : false;

        for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
          instruction = behaviorInstructions[i];
          instruction.type.compile(this, resources, node, instruction, parentNode);
          providers.push(instruction.type.target);
          skipContentProcessing = skipContentProcessing || instruction.skipContentProcessing;
        }

        for (i = 0, ii = expressions.length; i < ii; ++i) {
          expression = expressions[i];
          if (expression.attrToRemove !== undefined) {
            node.removeAttribute(expression.attrToRemove);
          }
        }

        auTargetID = makeIntoInstructionTarget(node);
        instructions[auTargetID] = TargetInstruction.normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction);
      }

      if (skipContentProcessing) {
        return node.nextSibling;
      }

      var currentChild = node.firstChild;
      while (currentChild) {
        currentChild = this._compileNode(currentChild, resources, instructions, node, injectorId || parentInjectorId, targetLightDOM);
      }
    }

    return node.nextSibling;
  };

  ViewCompiler.prototype._configureProperties = function _configureProperties(instruction, resources) {
    var type = instruction.type;
    var attrName = instruction.attrName;
    var attributes = instruction.attributes;
    var property = void 0;
    var key = void 0;
    var value = void 0;

    var knownAttribute = resources.mapAttribute(attrName);
    if (knownAttribute && attrName in attributes && knownAttribute !== attrName) {
      attributes[knownAttribute] = attributes[attrName];
      delete attributes[attrName];
    }

    for (key in attributes) {
      value = attributes[key];

      if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        property = type.attributes[key];

        if (property !== undefined) {
          value.targetProperty = property.name;
        } else {
          value.targetProperty = key;
        }
      }
    }
  };

  return ViewCompiler;
}();

var ResourceModule = exports.ResourceModule = function () {
  function ResourceModule(moduleId) {
    

    this.id = moduleId;
    this.moduleInstance = null;
    this.mainResource = null;
    this.resources = null;
    this.viewStrategy = null;
    this.isInitialized = false;
    this.onLoaded = null;
    this.loadContext = null;
  }

  ResourceModule.prototype.initialize = function initialize(container) {
    var current = this.mainResource;
    var resources = this.resources;
    var vs = this.viewStrategy;

    if (this.isInitialized) {
      return;
    }

    this.isInitialized = true;

    if (current !== undefined) {
      current.metadata.viewStrategy = vs;
      current.initialize(container);
    }

    for (var i = 0, ii = resources.length; i < ii; ++i) {
      current = resources[i];
      current.metadata.viewStrategy = vs;
      current.initialize(container);
    }
  };

  ResourceModule.prototype.register = function register(registry, name) {
    var main = this.mainResource;
    var resources = this.resources;

    if (main !== undefined) {
      main.register(registry, name);
      name = null;
    }

    for (var i = 0, ii = resources.length; i < ii; ++i) {
      resources[i].register(registry, name);
      name = null;
    }
  };

  ResourceModule.prototype.load = function load(container, loadContext) {
    if (this.onLoaded !== null) {
      return this.loadContext === loadContext ? Promise.resolve() : this.onLoaded;
    }

    var main = this.mainResource;
    var resources = this.resources;
    var loads = void 0;

    if (main !== undefined) {
      loads = new Array(resources.length + 1);
      loads[0] = main.load(container, loadContext);
      for (var i = 0, ii = resources.length; i < ii; ++i) {
        loads[i + 1] = resources[i].load(container, loadContext);
      }
    } else {
      loads = new Array(resources.length);
      for (var _i2 = 0, _ii = resources.length; _i2 < _ii; ++_i2) {
        loads[_i2] = resources[_i2].load(container, loadContext);
      }
    }

    this.loadContext = loadContext;
    this.onLoaded = Promise.all(loads);
    return this.onLoaded;
  };

  return ResourceModule;
}();

var ResourceDescription = exports.ResourceDescription = function () {
  function ResourceDescription(key, exportedValue, resourceTypeMeta) {
    

    if (!resourceTypeMeta) {
      resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);

      if (!resourceTypeMeta) {
        resourceTypeMeta = new HtmlBehaviorResource();
        resourceTypeMeta.elementName = _hyphenate(key);
        _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, resourceTypeMeta, exportedValue);
      }
    }

    if (resourceTypeMeta instanceof HtmlBehaviorResource) {
      if (resourceTypeMeta.elementName === undefined) {
        resourceTypeMeta.elementName = _hyphenate(key);
      } else if (resourceTypeMeta.attributeName === undefined) {
        resourceTypeMeta.attributeName = _hyphenate(key);
      } else if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
        HtmlBehaviorResource.convention(key, resourceTypeMeta);
      }
    } else if (!resourceTypeMeta.name) {
      resourceTypeMeta.name = _hyphenate(key);
    }

    this.metadata = resourceTypeMeta;
    this.value = exportedValue;
  }

  ResourceDescription.prototype.initialize = function initialize(container) {
    this.metadata.initialize(container, this.value);
  };

  ResourceDescription.prototype.register = function register(registry, name) {
    this.metadata.register(registry, name);
  };

  ResourceDescription.prototype.load = function load(container, loadContext) {
    return this.metadata.load(container, this.value, loadContext);
  };

  return ResourceDescription;
}();

var ModuleAnalyzer = exports.ModuleAnalyzer = function () {
  function ModuleAnalyzer() {
    

    this.cache = Object.create(null);
  }

  ModuleAnalyzer.prototype.getAnalysis = function getAnalysis(moduleId) {
    return this.cache[moduleId];
  };

  ModuleAnalyzer.prototype.analyze = function analyze(moduleId, moduleInstance, mainResourceKey) {
    var mainResource = void 0;
    var fallbackValue = void 0;
    var fallbackKey = void 0;
    var resourceTypeMeta = void 0;
    var key = void 0;
    var exportedValue = void 0;
    var resources = [];
    var conventional = void 0;
    var vs = void 0;
    var resourceModule = void 0;

    resourceModule = this.cache[moduleId];
    if (resourceModule) {
      return resourceModule;
    }

    resourceModule = new ResourceModule(moduleId);
    this.cache[moduleId] = resourceModule;

    if (typeof moduleInstance === 'function') {
      moduleInstance = { 'default': moduleInstance };
    }

    if (mainResourceKey) {
      mainResource = new ResourceDescription(mainResourceKey, moduleInstance[mainResourceKey]);
    }

    for (key in moduleInstance) {
      exportedValue = moduleInstance[key];

      if (key === mainResourceKey || typeof exportedValue !== 'function') {
        continue;
      }

      resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);

      if (resourceTypeMeta) {
        if (resourceTypeMeta instanceof HtmlBehaviorResource) {
          ViewResources.convention(exportedValue, resourceTypeMeta);

          if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
            HtmlBehaviorResource.convention(key, resourceTypeMeta);
          }

          if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
            resourceTypeMeta.elementName = _hyphenate(key);
          }
        }

        if (!mainResource && resourceTypeMeta instanceof HtmlBehaviorResource && resourceTypeMeta.elementName !== null) {
          mainResource = new ResourceDescription(key, exportedValue, resourceTypeMeta);
        } else {
          resources.push(new ResourceDescription(key, exportedValue, resourceTypeMeta));
        }
      } else if (viewStrategy.decorates(exportedValue)) {
        vs = exportedValue;
      } else if (exportedValue instanceof _aureliaLoader.TemplateRegistryEntry) {
        vs = new TemplateRegistryViewStrategy(moduleId, exportedValue);
      } else {
        if (conventional = ViewResources.convention(exportedValue)) {
          if (conventional.elementName !== null && !mainResource) {
            mainResource = new ResourceDescription(key, exportedValue, conventional);
          } else {
            resources.push(new ResourceDescription(key, exportedValue, conventional));
          }
          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
        } else if (conventional = HtmlBehaviorResource.convention(key)) {
          if (conventional.elementName !== null && !mainResource) {
            mainResource = new ResourceDescription(key, exportedValue, conventional);
          } else {
            resources.push(new ResourceDescription(key, exportedValue, conventional));
          }

          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
        } else if (conventional = _aureliaBinding.ValueConverterResource.convention(key) || _aureliaBinding.BindingBehaviorResource.convention(key) || ViewEngineHooksResource.convention(key)) {
          resources.push(new ResourceDescription(key, exportedValue, conventional));
          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
        } else if (!fallbackValue) {
          fallbackValue = exportedValue;
          fallbackKey = key;
        }
      }
    }

    if (!mainResource && fallbackValue) {
      mainResource = new ResourceDescription(fallbackKey, fallbackValue);
    }

    resourceModule.moduleInstance = moduleInstance;
    resourceModule.mainResource = mainResource;
    resourceModule.resources = resources;
    resourceModule.viewStrategy = vs;

    return resourceModule;
  };

  return ModuleAnalyzer;
}();

var logger = LogManager.getLogger('templating');

function ensureRegistryEntry(loader, urlOrRegistryEntry) {
  if (urlOrRegistryEntry instanceof _aureliaLoader.TemplateRegistryEntry) {
    return Promise.resolve(urlOrRegistryEntry);
  }

  return loader.loadTemplate(urlOrRegistryEntry);
}

var ProxyViewFactory = function () {
  function ProxyViewFactory(promise) {
    var _this8 = this;

    

    promise.then(function (x) {
      return _this8.viewFactory = x;
    });
  }

  ProxyViewFactory.prototype.create = function create(container, bindingContext, createInstruction, element) {
    return this.viewFactory.create(container, bindingContext, createInstruction, element);
  };

  ProxyViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
    this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
  };

  ProxyViewFactory.prototype.getCachedView = function getCachedView() {
    return this.viewFactory.getCachedView();
  };

  ProxyViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
    this.viewFactory.returnViewToCache(view);
  };

  _createClass(ProxyViewFactory, [{
    key: 'isCaching',
    get: function get() {
      return this.viewFactory.isCaching;
    }
  }]);

  return ProxyViewFactory;
}();

var auSlotBehavior = null;

var ViewEngine = exports.ViewEngine = (_temp5 = _class14 = function () {
  ViewEngine.inject = function inject() {
    return [_aureliaLoader.Loader, _aureliaDependencyInjection.Container, ViewCompiler, ModuleAnalyzer, ViewResources];
  };

  function ViewEngine(loader, container, viewCompiler, moduleAnalyzer, appResources) {
    

    this.loader = loader;
    this.container = container;
    this.viewCompiler = viewCompiler;
    this.moduleAnalyzer = moduleAnalyzer;
    this.appResources = appResources;
    this._pluginMap = {};

    if (auSlotBehavior === null) {
      auSlotBehavior = new HtmlBehaviorResource();
      auSlotBehavior.attributeName = 'au-slot';
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, auSlotBehavior, SlotCustomAttribute);
    }

    auSlotBehavior.initialize(container, SlotCustomAttribute);
    auSlotBehavior.register(appResources);
  }

  ViewEngine.prototype.addResourcePlugin = function addResourcePlugin(extension, implementation) {
    var name = extension.replace('.', '') + '-resource-plugin';
    this._pluginMap[extension] = name;
    this.loader.addPlugin(name, implementation);
  };

  ViewEngine.prototype.loadViewFactory = function loadViewFactory(urlOrRegistryEntry, compileInstruction, loadContext, target) {
    var _this9 = this;

    loadContext = loadContext || new ResourceLoadContext();

    return ensureRegistryEntry(this.loader, urlOrRegistryEntry).then(function (registryEntry) {
      var url = registryEntry.address;

      if (registryEntry.onReady) {
        if (!loadContext.hasDependency(url)) {
          loadContext.addDependency(url);
          return registryEntry.onReady;
        }

        if (registryEntry.template === null) {
          return registryEntry.onReady;
        }

        return Promise.resolve(new ProxyViewFactory(registryEntry.onReady));
      }

      loadContext.addDependency(url);

      registryEntry.onReady = _this9.loadTemplateResources(registryEntry, compileInstruction, loadContext, target).then(function (resources) {
        registryEntry.resources = resources;

        if (registryEntry.template === null) {
          return registryEntry.factory = null;
        }

        var viewFactory = _this9.viewCompiler.compile(registryEntry.template, resources, compileInstruction);
        return registryEntry.factory = viewFactory;
      });

      return registryEntry.onReady;
    });
  };

  ViewEngine.prototype.loadTemplateResources = function loadTemplateResources(registryEntry, compileInstruction, loadContext, target) {
    var resources = new ViewResources(this.appResources, registryEntry.address);
    var dependencies = registryEntry.dependencies;
    var importIds = void 0;
    var names = void 0;

    compileInstruction = compileInstruction || ViewCompileInstruction.normal;

    if (dependencies.length === 0 && !compileInstruction.associatedModuleId) {
      return Promise.resolve(resources);
    }

    importIds = dependencies.map(function (x) {
      return x.src;
    });
    names = dependencies.map(function (x) {
      return x.name;
    });
    logger.debug('importing resources for ' + registryEntry.address, importIds);

    if (target) {
      var viewModelRequires = _aureliaMetadata.metadata.get(ViewEngine.viewModelRequireMetadataKey, target);
      if (viewModelRequires) {
        var templateImportCount = importIds.length;
        for (var i = 0, ii = viewModelRequires.length; i < ii; ++i) {
          var req = viewModelRequires[i];
          var importId = typeof req === 'function' ? _aureliaMetadata.Origin.get(req).moduleId : (0, _aureliaPath.relativeToFile)(req.src || req, registryEntry.address);

          if (importIds.indexOf(importId) === -1) {
            importIds.push(importId);
            names.push(req.as);
          }
        }
        logger.debug('importing ViewModel resources for ' + compileInstruction.associatedModuleId, importIds.slice(templateImportCount));
      }
    }

    return this.importViewResources(importIds, names, resources, compileInstruction, loadContext);
  };

  ViewEngine.prototype.importViewModelResource = function importViewModelResource(moduleImport, moduleMember) {
    var _this10 = this;

    return this.loader.loadModule(moduleImport).then(function (viewModelModule) {
      var normalizedId = _aureliaMetadata.Origin.get(viewModelModule).moduleId;
      var resourceModule = _this10.moduleAnalyzer.analyze(normalizedId, viewModelModule, moduleMember);

      if (!resourceModule.mainResource) {
        throw new Error('No view model found in module "' + moduleImport + '".');
      }

      resourceModule.initialize(_this10.container);

      return resourceModule.mainResource;
    });
  };

  ViewEngine.prototype.importViewResources = function importViewResources(moduleIds, names, resources, compileInstruction, loadContext) {
    var _this11 = this;

    loadContext = loadContext || new ResourceLoadContext();
    compileInstruction = compileInstruction || ViewCompileInstruction.normal;

    moduleIds = moduleIds.map(function (x) {
      return _this11._applyLoaderPlugin(x);
    });

    return this.loader.loadAllModules(moduleIds).then(function (imports) {
      var i = void 0;
      var ii = void 0;
      var analysis = void 0;
      var normalizedId = void 0;
      var current = void 0;
      var associatedModule = void 0;
      var container = _this11.container;
      var moduleAnalyzer = _this11.moduleAnalyzer;
      var allAnalysis = new Array(imports.length);

      for (i = 0, ii = imports.length; i < ii; ++i) {
        current = imports[i];
        normalizedId = _aureliaMetadata.Origin.get(current).moduleId;

        analysis = moduleAnalyzer.analyze(normalizedId, current);
        analysis.initialize(container);
        analysis.register(resources, names[i]);

        allAnalysis[i] = analysis;
      }

      if (compileInstruction.associatedModuleId) {
        associatedModule = moduleAnalyzer.getAnalysis(compileInstruction.associatedModuleId);

        if (associatedModule) {
          associatedModule.register(resources);
        }
      }

      for (i = 0, ii = allAnalysis.length; i < ii; ++i) {
        allAnalysis[i] = allAnalysis[i].load(container, loadContext);
      }

      return Promise.all(allAnalysis).then(function () {
        return resources;
      });
    });
  };

  ViewEngine.prototype._applyLoaderPlugin = function _applyLoaderPlugin(id) {
    var index = id.lastIndexOf('.');
    if (index !== -1) {
      var ext = id.substring(index);
      var pluginName = this._pluginMap[ext];

      if (pluginName === undefined) {
        return id;
      }

      return this.loader.applyPluginToUrl(id, pluginName);
    }

    return id;
  };

  return ViewEngine;
}(), _class14.viewModelRequireMetadataKey = 'aurelia:view-model-require', _temp5);

var Controller = exports.Controller = function () {
  function Controller(behavior, instruction, viewModel, container) {
    

    this.behavior = behavior;
    this.instruction = instruction;
    this.viewModel = viewModel;
    this.isAttached = false;
    this.view = null;
    this.isBound = false;
    this.scope = null;
    this.container = container;
    this.elementEvents = container.elementEvents || null;

    var observerLookup = behavior.observerLocator.getOrCreateObserversLookup(viewModel);
    var handlesBind = behavior.handlesBind;
    var attributes = instruction.attributes;
    var boundProperties = this.boundProperties = [];
    var properties = behavior.properties;
    var i = void 0;
    var ii = void 0;

    behavior._ensurePropertiesDefined(viewModel, observerLookup);

    for (i = 0, ii = properties.length; i < ii; ++i) {
      properties[i]._initialize(viewModel, observerLookup, attributes, handlesBind, boundProperties);
    }
  }

  Controller.prototype.created = function created(owningView) {
    if (this.behavior.handlesCreated) {
      this.viewModel.created(owningView, this.view);
    }
  };

  Controller.prototype.automate = function automate(overrideContext, owningView) {
    this.view.bindingContext = this.viewModel;
    this.view.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(this.viewModel);
    this.view._isUserControlled = true;

    if (this.behavior.handlesCreated) {
      this.viewModel.created(owningView || null, this.view);
    }

    this.bind(this.view);
  };

  Controller.prototype.bind = function bind(scope) {
    var skipSelfSubscriber = this.behavior.handlesBind;
    var boundProperties = this.boundProperties;
    var i = void 0;
    var ii = void 0;
    var x = void 0;
    var observer = void 0;
    var selfSubscriber = void 0;

    if (this.isBound) {
      if (this.scope === scope) {
        return;
      }

      this.unbind();
    }

    this.isBound = true;
    this.scope = scope;

    for (i = 0, ii = boundProperties.length; i < ii; ++i) {
      x = boundProperties[i];
      observer = x.observer;
      selfSubscriber = observer.selfSubscriber;
      observer.publishing = false;

      if (skipSelfSubscriber) {
        observer.selfSubscriber = null;
      }

      x.binding.bind(scope);
      observer.call();

      observer.publishing = true;
      observer.selfSubscriber = selfSubscriber;
    }

    var overrideContext = void 0;
    if (this.view !== null) {
      if (skipSelfSubscriber) {
        this.view.viewModelScope = scope;
      }

      if (this.viewModel === scope.overrideContext.bindingContext) {
        overrideContext = scope.overrideContext;
      } else if (this.instruction.inheritBindingContext) {
        overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel, scope.overrideContext);
      } else {
        overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel);
        overrideContext.__parentOverrideContext = scope.overrideContext;
      }

      this.view.bind(this.viewModel, overrideContext);
    } else if (skipSelfSubscriber) {
      overrideContext = scope.overrideContext;

      if (scope.overrideContext.__parentOverrideContext !== undefined && this.viewModel.viewFactory && this.viewModel.viewFactory.factoryCreateInstruction.partReplacements) {
        overrideContext = Object.assign({}, scope.overrideContext);
        overrideContext.parentOverrideContext = scope.overrideContext.__parentOverrideContext;
      }
      this.viewModel.bind(scope.bindingContext, overrideContext);
    }
  };

  Controller.prototype.unbind = function unbind() {
    if (this.isBound) {
      var _boundProperties = this.boundProperties;
      var _i3 = void 0;
      var _ii2 = void 0;

      this.isBound = false;
      this.scope = null;

      if (this.view !== null) {
        this.view.unbind();
      }

      if (this.behavior.handlesUnbind) {
        this.viewModel.unbind();
      }

      if (this.elementEvents !== null) {
        this.elementEvents.disposeAll();
      }

      for (_i3 = 0, _ii2 = _boundProperties.length; _i3 < _ii2; ++_i3) {
        _boundProperties[_i3].binding.unbind();
      }
    }
  };

  Controller.prototype.attached = function attached() {
    if (this.isAttached) {
      return;
    }

    this.isAttached = true;

    if (this.behavior.handlesAttached) {
      this.viewModel.attached();
    }

    if (this.view !== null) {
      this.view.attached();
    }
  };

  Controller.prototype.detached = function detached() {
    if (this.isAttached) {
      this.isAttached = false;

      if (this.view !== null) {
        this.view.detached();
      }

      if (this.behavior.handlesDetached) {
        this.viewModel.detached();
      }
    }
  };

  return Controller;
}();

var BehaviorPropertyObserver = exports.BehaviorPropertyObserver = (_dec7 = (0, _aureliaBinding.subscriberCollection)(), _dec7(_class15 = function () {
  function BehaviorPropertyObserver(taskQueue, obj, propertyName, selfSubscriber, initialValue) {
    

    this.taskQueue = taskQueue;
    this.obj = obj;
    this.propertyName = propertyName;
    this.notqueued = true;
    this.publishing = false;
    this.selfSubscriber = selfSubscriber;
    this.currentValue = this.oldValue = initialValue;
  }

  BehaviorPropertyObserver.prototype.getValue = function getValue() {
    return this.currentValue;
  };

  BehaviorPropertyObserver.prototype.setValue = function setValue(newValue) {
    var oldValue = this.currentValue;

    if (!Object.is(newValue, oldValue)) {
      this.oldValue = oldValue;
      this.currentValue = newValue;

      if (this.publishing && this.notqueued) {
        if (this.taskQueue.flushing) {
          this.call();
        } else {
          this.notqueued = false;
          this.taskQueue.queueMicroTask(this);
        }
      }
    }
  };

  BehaviorPropertyObserver.prototype.call = function call() {
    var oldValue = this.oldValue;
    var newValue = this.currentValue;

    this.notqueued = true;

    if (Object.is(newValue, oldValue)) {
      return;
    }

    if (this.selfSubscriber) {
      this.selfSubscriber(newValue, oldValue);
    }

    this.callSubscribers(newValue, oldValue);
    this.oldValue = newValue;
  };

  BehaviorPropertyObserver.prototype.subscribe = function subscribe(context, callable) {
    this.addSubscriber(context, callable);
  };

  BehaviorPropertyObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  return BehaviorPropertyObserver;
}()) || _class15);


function getObserver(instance, name) {
  var lookup = instance.__observers__;

  if (lookup === undefined) {
    var ctor = Object.getPrototypeOf(instance).constructor;
    var _behavior = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, ctor);
    if (!_behavior.isInitialized) {
      _behavior.initialize(_aureliaDependencyInjection.Container.instance || new _aureliaDependencyInjection.Container(), instance.constructor);
    }

    lookup = _behavior.observerLocator.getOrCreateObserversLookup(instance);
    _behavior._ensurePropertiesDefined(instance, lookup);
  }

  return lookup[name];
}

var BindableProperty = exports.BindableProperty = function () {
  function BindableProperty(nameOrConfig) {
    

    if (typeof nameOrConfig === 'string') {
      this.name = nameOrConfig;
    } else {
      Object.assign(this, nameOrConfig);
    }

    this.attribute = this.attribute || _hyphenate(this.name);
    var defaultBindingMode = this.defaultBindingMode;
    if (defaultBindingMode === null || defaultBindingMode === undefined) {
      this.defaultBindingMode = _aureliaBinding.bindingMode.oneWay;
    } else if (typeof defaultBindingMode === 'string') {
      this.defaultBindingMode = _aureliaBinding.bindingMode[defaultBindingMode] || _aureliaBinding.bindingMode.oneWay;
    }
    this.changeHandler = this.changeHandler || null;
    this.owner = null;
    this.descriptor = null;
  }

  BindableProperty.prototype.registerWith = function registerWith(target, behavior, descriptor) {
    behavior.properties.push(this);
    behavior.attributes[this.attribute] = this;
    this.owner = behavior;

    if (descriptor) {
      this.descriptor = descriptor;
      return this._configureDescriptor(descriptor);
    }

    return undefined;
  };

  BindableProperty.prototype._configureDescriptor = function _configureDescriptor(descriptor) {
    var name = this.name;

    descriptor.configurable = true;
    descriptor.enumerable = true;

    if ('initializer' in descriptor) {
      this.defaultValue = descriptor.initializer;
      delete descriptor.initializer;
      delete descriptor.writable;
    }

    if ('value' in descriptor) {
      this.defaultValue = descriptor.value;
      delete descriptor.value;
      delete descriptor.writable;
    }

    descriptor.get = function () {
      return getObserver(this, name).getValue();
    };

    descriptor.set = function (value) {
      getObserver(this, name).setValue(value);
    };

    descriptor.get.getObserver = function (obj) {
      return getObserver(obj, name);
    };

    return descriptor;
  };

  BindableProperty.prototype.defineOn = function defineOn(target, behavior) {
    var name = this.name;
    var handlerName = void 0;

    if (this.changeHandler === null) {
      handlerName = name + 'Changed';
      if (handlerName in target.prototype) {
        this.changeHandler = handlerName;
      }
    }

    if (this.descriptor === null) {
      Object.defineProperty(target.prototype, name, this._configureDescriptor(behavior, {}));
    }
  };

  BindableProperty.prototype.createObserver = function createObserver(viewModel) {
    var selfSubscriber = null;
    var defaultValue = this.defaultValue;
    var changeHandlerName = this.changeHandler;
    var name = this.name;
    var initialValue = void 0;

    if (this.hasOptions) {
      return undefined;
    }

    if (changeHandlerName in viewModel) {
      if ('propertyChanged' in viewModel) {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          viewModel[changeHandlerName](newValue, oldValue);
          viewModel.propertyChanged(name, newValue, oldValue);
        };
      } else {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          return viewModel[changeHandlerName](newValue, oldValue);
        };
      }
    } else if ('propertyChanged' in viewModel) {
      selfSubscriber = function selfSubscriber(newValue, oldValue) {
        return viewModel.propertyChanged(name, newValue, oldValue);
      };
    } else if (changeHandlerName !== null) {
      throw new Error('Change handler ' + changeHandlerName + ' was specified but not declared on the class.');
    }

    if (defaultValue !== undefined) {
      initialValue = typeof defaultValue === 'function' ? defaultValue.call(viewModel) : defaultValue;
    }

    return new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, this.name, selfSubscriber, initialValue);
  };

  BindableProperty.prototype._initialize = function _initialize(viewModel, observerLookup, attributes, behaviorHandlesBind, boundProperties) {
    var selfSubscriber = void 0;
    var observer = void 0;
    var attribute = void 0;
    var defaultValue = this.defaultValue;

    if (this.isDynamic) {
      for (var _key6 in attributes) {
        this._createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, _key6, attributes[_key6], boundProperties);
      }
    } else if (!this.hasOptions) {
      observer = observerLookup[this.name];

      if (attributes !== null) {
        selfSubscriber = observer.selfSubscriber;
        attribute = attributes[this.attribute];

        if (behaviorHandlesBind) {
          observer.selfSubscriber = null;
        }

        if (typeof attribute === 'string') {
          viewModel[this.name] = attribute;
          observer.call();
        } else if (attribute) {
          boundProperties.push({ observer: observer, binding: attribute.createBinding(viewModel) });
        } else if (defaultValue !== undefined) {
          observer.call();
        }

        observer.selfSubscriber = selfSubscriber;
      }

      observer.publishing = true;
    }
  };

  BindableProperty.prototype._createDynamicProperty = function _createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, name, attribute, boundProperties) {
    var changeHandlerName = name + 'Changed';
    var selfSubscriber = null;
    var observer = void 0;
    var info = void 0;

    if (changeHandlerName in viewModel) {
      if ('propertyChanged' in viewModel) {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          viewModel[changeHandlerName](newValue, oldValue);
          viewModel.propertyChanged(name, newValue, oldValue);
        };
      } else {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          return viewModel[changeHandlerName](newValue, oldValue);
        };
      }
    } else if ('propertyChanged' in viewModel) {
      selfSubscriber = function selfSubscriber(newValue, oldValue) {
        return viewModel.propertyChanged(name, newValue, oldValue);
      };
    }

    observer = observerLookup[name] = new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, name, selfSubscriber);

    Object.defineProperty(viewModel, name, {
      configurable: true,
      enumerable: true,
      get: observer.getValue.bind(observer),
      set: observer.setValue.bind(observer)
    });

    if (behaviorHandlesBind) {
      observer.selfSubscriber = null;
    }

    if (typeof attribute === 'string') {
      viewModel[name] = attribute;
      observer.call();
    } else if (attribute) {
      info = { observer: observer, binding: attribute.createBinding(viewModel) };
      boundProperties.push(info);
    }

    observer.publishing = true;
    observer.selfSubscriber = selfSubscriber;
  };

  return BindableProperty;
}();

var lastProviderId = 0;

function nextProviderId() {
  return ++lastProviderId;
}

function doProcessContent() {
  return true;
}
function doProcessAttributes() {}

var HtmlBehaviorResource = exports.HtmlBehaviorResource = function () {
  function HtmlBehaviorResource() {
    

    this.elementName = null;
    this.attributeName = null;
    this.attributeDefaultBindingMode = undefined;
    this.liftsContent = false;
    this.targetShadowDOM = false;
    this.shadowDOMOptions = null;
    this.processAttributes = doProcessAttributes;
    this.processContent = doProcessContent;
    this.usesShadowDOM = false;
    this.childBindings = null;
    this.hasDynamicOptions = false;
    this.containerless = false;
    this.properties = [];
    this.attributes = {};
    this.isInitialized = false;
    this.primaryProperty = null;
  }

  HtmlBehaviorResource.convention = function convention(name, existing) {
    var behavior = void 0;

    if (name.endsWith('CustomAttribute')) {
      behavior = existing || new HtmlBehaviorResource();
      behavior.attributeName = _hyphenate(name.substring(0, name.length - 15));
    }

    if (name.endsWith('CustomElement')) {
      behavior = existing || new HtmlBehaviorResource();
      behavior.elementName = _hyphenate(name.substring(0, name.length - 13));
    }

    return behavior;
  };

  HtmlBehaviorResource.prototype.addChildBinding = function addChildBinding(behavior) {
    if (this.childBindings === null) {
      this.childBindings = [];
    }

    this.childBindings.push(behavior);
  };

  HtmlBehaviorResource.prototype.initialize = function initialize(container, target) {
    var proto = target.prototype;
    var properties = this.properties;
    var attributeName = this.attributeName;
    var attributeDefaultBindingMode = this.attributeDefaultBindingMode;
    var i = void 0;
    var ii = void 0;
    var current = void 0;

    if (this.isInitialized) {
      return;
    }

    this.isInitialized = true;
    target.__providerId__ = nextProviderId();

    this.observerLocator = container.get(_aureliaBinding.ObserverLocator);
    this.taskQueue = container.get(_aureliaTaskQueue.TaskQueue);

    this.target = target;
    this.usesShadowDOM = this.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
    this.handlesCreated = 'created' in proto;
    this.handlesBind = 'bind' in proto;
    this.handlesUnbind = 'unbind' in proto;
    this.handlesAttached = 'attached' in proto;
    this.handlesDetached = 'detached' in proto;
    this.htmlName = this.elementName || this.attributeName;

    if (attributeName !== null) {
      if (properties.length === 0) {
        new BindableProperty({
          name: 'value',
          changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
          attribute: attributeName,
          defaultBindingMode: attributeDefaultBindingMode
        }).registerWith(target, this);
      }

      current = properties[0];

      if (properties.length === 1 && current.name === 'value') {
        current.isDynamic = current.hasOptions = this.hasDynamicOptions;
        current.defineOn(target, this);
      } else {
        for (i = 0, ii = properties.length; i < ii; ++i) {
          properties[i].defineOn(target, this);
          if (properties[i].primaryProperty) {
            if (this.primaryProperty) {
              throw new Error('Only one bindable property on a custom element can be defined as the default');
            }
            this.primaryProperty = properties[i];
          }
        }

        current = new BindableProperty({
          name: 'value',
          changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
          attribute: attributeName,
          defaultBindingMode: attributeDefaultBindingMode
        });

        current.hasOptions = true;
        current.registerWith(target, this);
      }
    } else {
      for (i = 0, ii = properties.length; i < ii; ++i) {
        properties[i].defineOn(target, this);
      }

      this._copyInheritedProperties(container, target);
    }
  };

  HtmlBehaviorResource.prototype.register = function register(registry, name) {
    var _this12 = this;

    if (this.attributeName !== null) {
      registry.registerAttribute(name || this.attributeName, this, this.attributeName);

      if (Array.isArray(this.aliases)) {
        this.aliases.forEach(function (alias) {
          registry.registerAttribute(alias, _this12, _this12.attributeName);
        });
      }
    }

    if (this.elementName !== null) {
      registry.registerElement(name || this.elementName, this);
    }
  };

  HtmlBehaviorResource.prototype.load = function load(container, target, loadContext, viewStrategy, transientView) {
    var _this13 = this;

    var options = void 0;

    if (this.elementName !== null) {
      viewStrategy = container.get(ViewLocator).getViewStrategy(viewStrategy || this.viewStrategy || target);
      options = new ViewCompileInstruction(this.targetShadowDOM, true);

      if (!viewStrategy.moduleId) {
        viewStrategy.moduleId = _aureliaMetadata.Origin.get(target).moduleId;
      }

      return viewStrategy.loadViewFactory(container.get(ViewEngine), options, loadContext, target).then(function (viewFactory) {
        if (!transientView || !_this13.viewFactory) {
          _this13.viewFactory = viewFactory;
        }

        return viewFactory;
      });
    }

    return Promise.resolve(this);
  };

  HtmlBehaviorResource.prototype.compile = function compile(compiler, resources, node, instruction, parentNode) {
    if (this.liftsContent) {
      if (!instruction.viewFactory) {
        var _template = _aureliaPal.DOM.createElement('template');
        var fragment = _aureliaPal.DOM.createDocumentFragment();
        var cacheSize = node.getAttribute('view-cache');
        var part = node.getAttribute('part');

        node.removeAttribute(instruction.originalAttrName);
        _aureliaPal.DOM.replaceNode(_template, node, parentNode);
        fragment.appendChild(node);
        instruction.viewFactory = compiler.compile(fragment, resources);

        if (part) {
          instruction.viewFactory.part = part;
          node.removeAttribute('part');
        }

        if (cacheSize) {
          instruction.viewFactory.setCacheSize(cacheSize);
          node.removeAttribute('view-cache');
        }

        node = _template;
      }
    } else if (this.elementName !== null) {
      var _partReplacements2 = {};

      if (this.processContent(compiler, resources, node, instruction) && node.hasChildNodes()) {
        var currentChild = node.firstChild;
        var contentElement = this.usesShadowDOM ? null : _aureliaPal.DOM.createElement('au-content');
        var nextSibling = void 0;
        var toReplace = void 0;

        while (currentChild) {
          nextSibling = currentChild.nextSibling;

          if (currentChild.tagName === 'TEMPLATE' && (toReplace = currentChild.getAttribute('replace-part'))) {
            _partReplacements2[toReplace] = compiler.compile(currentChild, resources);
            _aureliaPal.DOM.removeNode(currentChild, parentNode);
            instruction.partReplacements = _partReplacements2;
          } else if (contentElement !== null) {
            if (currentChild.nodeType === 3 && _isAllWhitespace(currentChild)) {
              _aureliaPal.DOM.removeNode(currentChild, parentNode);
            } else {
              contentElement.appendChild(currentChild);
            }
          }

          currentChild = nextSibling;
        }

        if (contentElement !== null && contentElement.hasChildNodes()) {
          node.appendChild(contentElement);
        }

        instruction.skipContentProcessing = false;
      } else {
        instruction.skipContentProcessing = true;
      }
    } else if (!this.processContent(compiler, resources, node, instruction)) {
      instruction.skipContentProcessing = true;
    }

    return node;
  };

  HtmlBehaviorResource.prototype.create = function create(container, instruction, element, bindings) {
    var viewHost = void 0;
    var au = null;

    instruction = instruction || BehaviorInstruction.normal;
    element = element || null;
    bindings = bindings || null;

    if (this.elementName !== null && element) {
      if (this.usesShadowDOM) {
        viewHost = element.attachShadow(this.shadowDOMOptions);
        container.registerInstance(_aureliaPal.DOM.boundary, viewHost);
      } else {
        viewHost = element;
        if (this.targetShadowDOM) {
          container.registerInstance(_aureliaPal.DOM.boundary, viewHost);
        }
      }
    }

    if (element !== null) {
      element.au = au = element.au || {};
    }

    var viewModel = instruction.viewModel || container.get(this.target);
    var controller = new Controller(this, instruction, viewModel, container);
    var childBindings = this.childBindings;
    var viewFactory = void 0;

    if (this.liftsContent) {
      au.controller = controller;
    } else if (this.elementName !== null) {
      viewFactory = instruction.viewFactory || this.viewFactory;
      container.viewModel = viewModel;

      if (viewFactory) {
        controller.view = viewFactory.create(container, instruction, element);
      }

      if (element !== null) {
        au.controller = controller;

        if (controller.view) {
          if (!this.usesShadowDOM && (element.childNodes.length === 1 || element.contentElement)) {
            var contentElement = element.childNodes[0] || element.contentElement;
            controller.view.contentView = { fragment: contentElement };
            contentElement.parentNode && _aureliaPal.DOM.removeNode(contentElement);
          }

          if (instruction.anchorIsContainer) {
            if (childBindings !== null) {
              for (var _i4 = 0, _ii3 = childBindings.length; _i4 < _ii3; ++_i4) {
                controller.view.addBinding(childBindings[_i4].create(element, viewModel, controller));
              }
            }

            controller.view.appendNodesTo(viewHost);
          } else {
            controller.view.insertNodesBefore(viewHost);
          }
        } else if (childBindings !== null) {
          for (var _i5 = 0, _ii4 = childBindings.length; _i5 < _ii4; ++_i5) {
            bindings.push(childBindings[_i5].create(element, viewModel, controller));
          }
        }
      } else if (controller.view) {
        controller.view.controller = controller;

        if (childBindings !== null) {
          for (var _i6 = 0, _ii5 = childBindings.length; _i6 < _ii5; ++_i6) {
            controller.view.addBinding(childBindings[_i6].create(instruction.host, viewModel, controller));
          }
        }
      } else if (childBindings !== null) {
        for (var _i7 = 0, _ii6 = childBindings.length; _i7 < _ii6; ++_i7) {
          bindings.push(childBindings[_i7].create(instruction.host, viewModel, controller));
        }
      }
    } else if (childBindings !== null) {
      for (var _i8 = 0, _ii7 = childBindings.length; _i8 < _ii7; ++_i8) {
        bindings.push(childBindings[_i8].create(element, viewModel, controller));
      }
    }

    if (au !== null) {
      au[this.htmlName] = controller;
    }

    if (instruction.initiatedByBehavior && viewFactory) {
      controller.view.created();
    }

    return controller;
  };

  HtmlBehaviorResource.prototype._ensurePropertiesDefined = function _ensurePropertiesDefined(instance, lookup) {
    var properties = void 0;
    var i = void 0;
    var ii = void 0;
    var observer = void 0;

    if ('__propertiesDefined__' in lookup) {
      return;
    }

    lookup.__propertiesDefined__ = true;
    properties = this.properties;

    for (i = 0, ii = properties.length; i < ii; ++i) {
      observer = properties[i].createObserver(instance);

      if (observer !== undefined) {
        lookup[observer.propertyName] = observer;
      }
    }
  };

  HtmlBehaviorResource.prototype._copyInheritedProperties = function _copyInheritedProperties(container, target) {
    var _this14 = this;

    var behavior = void 0;
    var derived = target;

    while (true) {
      var proto = Object.getPrototypeOf(target.prototype);
      target = proto && proto.constructor;
      if (!target) {
        return;
      }
      behavior = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.resource, target);
      if (behavior) {
        break;
      }
    }
    behavior.initialize(container, target);

    var _loop = function _loop(_i9, _ii8) {
      var prop = behavior.properties[_i9];

      if (_this14.properties.some(function (p) {
        return p.name === prop.name;
      })) {
        return 'continue';
      }

      new BindableProperty(prop).registerWith(derived, _this14);
    };

    for (var _i9 = 0, _ii8 = behavior.properties.length; _i9 < _ii8; ++_i9) {
      var _ret = _loop(_i9, _ii8);

      if (_ret === 'continue') continue;
    }
  };

  return HtmlBehaviorResource;
}();

function createChildObserverDecorator(selectorOrConfig, all) {
  return function (target, key, descriptor) {
    var actualTarget = typeof key === 'string' ? target.constructor : target;
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);

    if (typeof selectorOrConfig === 'string') {
      selectorOrConfig = {
        selector: selectorOrConfig,
        name: key
      };
    }

    if (descriptor) {
      descriptor.writable = true;
      descriptor.configurable = true;
    }

    selectorOrConfig.all = all;
    r.addChildBinding(new ChildObserver(selectorOrConfig));
  };
}

function children(selectorOrConfig) {
  return createChildObserverDecorator(selectorOrConfig, true);
}

function child(selectorOrConfig) {
  return createChildObserverDecorator(selectorOrConfig, false);
}

var ChildObserver = function () {
  function ChildObserver(config) {
    

    this.name = config.name;
    this.changeHandler = config.changeHandler || this.name + 'Changed';
    this.selector = config.selector;
    this.all = config.all;
  }

  ChildObserver.prototype.create = function create(viewHost, viewModel, controller) {
    return new ChildObserverBinder(this.selector, viewHost, this.name, viewModel, controller, this.changeHandler, this.all);
  };

  return ChildObserver;
}();

var noMutations = [];

function trackMutation(groupedMutations, binder, record) {
  var mutations = groupedMutations.get(binder);

  if (!mutations) {
    mutations = [];
    groupedMutations.set(binder, mutations);
  }

  mutations.push(record);
}

function onChildChange(mutations, observer) {
  var binders = observer.binders;
  var bindersLength = binders.length;
  var groupedMutations = new Map();

  for (var _i10 = 0, _ii9 = mutations.length; _i10 < _ii9; ++_i10) {
    var record = mutations[_i10];
    var added = record.addedNodes;
    var removed = record.removedNodes;

    for (var j = 0, jj = removed.length; j < jj; ++j) {
      var _node = removed[j];
      if (_node.nodeType === 1) {
        for (var k = 0; k < bindersLength; ++k) {
          var binder = binders[k];
          if (binder.onRemove(_node)) {
            trackMutation(groupedMutations, binder, record);
          }
        }
      }
    }

    for (var _j = 0, _jj = added.length; _j < _jj; ++_j) {
      var _node2 = added[_j];
      if (_node2.nodeType === 1) {
        for (var _k = 0; _k < bindersLength; ++_k) {
          var _binder = binders[_k];
          if (_binder.onAdd(_node2)) {
            trackMutation(groupedMutations, _binder, record);
          }
        }
      }
    }
  }

  groupedMutations.forEach(function (value, key) {
    if (key.changeHandler !== null) {
      key.viewModel[key.changeHandler](value);
    }
  });
}

var ChildObserverBinder = function () {
  function ChildObserverBinder(selector, viewHost, property, viewModel, controller, changeHandler, all) {
    

    this.selector = selector;
    this.viewHost = viewHost;
    this.property = property;
    this.viewModel = viewModel;
    this.controller = controller;
    this.changeHandler = changeHandler in viewModel ? changeHandler : null;
    this.usesShadowDOM = controller.behavior.usesShadowDOM;
    this.all = all;

    if (!this.usesShadowDOM && controller.view && controller.view.contentView) {
      this.contentView = controller.view.contentView;
    } else {
      this.contentView = null;
    }
  }

  ChildObserverBinder.prototype.matches = function matches(element) {
    if (element.matches(this.selector)) {
      if (this.contentView === null) {
        return true;
      }

      var contentView = this.contentView;
      var assignedSlot = element.auAssignedSlot;

      if (assignedSlot && assignedSlot.projectFromAnchors) {
        var anchors = assignedSlot.projectFromAnchors;

        for (var _i11 = 0, _ii10 = anchors.length; _i11 < _ii10; ++_i11) {
          if (anchors[_i11].auOwnerView === contentView) {
            return true;
          }
        }

        return false;
      }

      return element.auOwnerView === contentView;
    }

    return false;
  };

  ChildObserverBinder.prototype.bind = function bind(source) {
    var viewHost = this.viewHost;
    var viewModel = this.viewModel;
    var observer = viewHost.__childObserver__;

    if (!observer) {
      observer = viewHost.__childObserver__ = _aureliaPal.DOM.createMutationObserver(onChildChange);

      var options = {
        childList: true,
        subtree: !this.usesShadowDOM
      };

      observer.observe(viewHost, options);
      observer.binders = [];
    }

    observer.binders.push(this);

    if (this.usesShadowDOM) {
      var current = viewHost.firstElementChild;

      if (this.all) {
        var items = viewModel[this.property];
        if (!items) {
          items = viewModel[this.property] = [];
        } else {
          items.splice(0);
        }

        while (current) {
          if (this.matches(current)) {
            items.push(current.au && current.au.controller ? current.au.controller.viewModel : current);
          }

          current = current.nextElementSibling;
        }

        if (this.changeHandler !== null) {
          this.viewModel[this.changeHandler](noMutations);
        }
      } else {
        while (current) {
          if (this.matches(current)) {
            var _value = current.au && current.au.controller ? current.au.controller.viewModel : current;
            this.viewModel[this.property] = _value;

            if (this.changeHandler !== null) {
              this.viewModel[this.changeHandler](_value);
            }

            break;
          }

          current = current.nextElementSibling;
        }
      }
    }
  };

  ChildObserverBinder.prototype.onRemove = function onRemove(element) {
    if (this.matches(element)) {
      var _value2 = element.au && element.au.controller ? element.au.controller.viewModel : element;

      if (this.all) {
        var items = this.viewModel[this.property] || (this.viewModel[this.property] = []);
        var index = items.indexOf(_value2);

        if (index !== -1) {
          items.splice(index, 1);
        }

        return true;
      }

      return false;
    }

    return false;
  };

  ChildObserverBinder.prototype.onAdd = function onAdd(element) {
    if (this.matches(element)) {
      var _value3 = element.au && element.au.controller ? element.au.controller.viewModel : element;

      if (this.all) {
        var items = this.viewModel[this.property] || (this.viewModel[this.property] = []);

        if (this.selector === '*') {
          items.push(_value3);
          return true;
        }

        var index = 0;
        var prev = element.previousElementSibling;

        while (prev) {
          if (this.matches(prev)) {
            index++;
          }

          prev = prev.previousElementSibling;
        }

        items.splice(index, 0, _value3);
        return true;
      }

      this.viewModel[this.property] = _value3;

      if (this.changeHandler !== null) {
        this.viewModel[this.changeHandler](_value3);
      }
    }

    return false;
  };

  ChildObserverBinder.prototype.unbind = function unbind() {
    if (this.viewHost.__childObserver__) {
      this.viewHost.__childObserver__.disconnect();
      this.viewHost.__childObserver__ = null;
      this.viewModel[this.property] = null;
    }
  };

  return ChildObserverBinder;
}();

function remove(viewSlot, previous) {
  return Array.isArray(previous) ? viewSlot.removeMany(previous, true) : viewSlot.remove(previous, true);
}

var SwapStrategies = exports.SwapStrategies = {
  before: function before(viewSlot, previous, callback) {
    return previous === undefined ? callback() : callback().then(function () {
      return remove(viewSlot, previous);
    });
  },
  with: function _with(viewSlot, previous, callback) {
    return previous === undefined ? callback() : Promise.all([remove(viewSlot, previous), callback()]);
  },
  after: function after(viewSlot, previous, callback) {
    return Promise.resolve(viewSlot.removeAll(true)).then(callback);
  }
};

function tryActivateViewModel(context) {
  if (context.skipActivation || typeof context.viewModel.activate !== 'function') {
    return Promise.resolve();
  }

  return context.viewModel.activate(context.model) || Promise.resolve();
}

var CompositionEngine = exports.CompositionEngine = (_dec8 = (0, _aureliaDependencyInjection.inject)(ViewEngine, ViewLocator), _dec8(_class16 = function () {
  function CompositionEngine(viewEngine, viewLocator) {
    

    this.viewEngine = viewEngine;
    this.viewLocator = viewLocator;
  }

  CompositionEngine.prototype._swap = function _swap(context, view) {
    var swapStrategy = SwapStrategies[context.swapOrder] || SwapStrategies.after;
    var previousViews = context.viewSlot.children.slice();

    return swapStrategy(context.viewSlot, previousViews, function () {
      return Promise.resolve(context.viewSlot.add(view)).then(function () {
        if (context.currentController) {
          context.currentController.unbind();
        }
      });
    }).then(function () {
      if (context.compositionTransactionNotifier) {
        context.compositionTransactionNotifier.done();
      }
    });
  };

  CompositionEngine.prototype._createControllerAndSwap = function _createControllerAndSwap(context) {
    var _this15 = this;

    return this.createController(context).then(function (controller) {
      if (context.compositionTransactionOwnershipToken) {
        return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function () {
          controller.automate(context.overrideContext, context.owningView);

          return _this15._swap(context, controller.view);
        }).then(function () {
          return controller;
        });
      }

      controller.automate(context.overrideContext, context.owningView);

      return _this15._swap(context, controller.view).then(function () {
        return controller;
      });
    });
  };

  CompositionEngine.prototype.createController = function createController(context) {
    var _this16 = this;

    var childContainer = void 0;
    var viewModel = void 0;
    var viewModelResource = void 0;

    var m = void 0;

    return this.ensureViewModel(context).then(tryActivateViewModel).then(function () {
      childContainer = context.childContainer;
      viewModel = context.viewModel;
      viewModelResource = context.viewModelResource;
      m = viewModelResource.metadata;

      var viewStrategy = _this16.viewLocator.getViewStrategy(context.view || viewModel);

      if (context.viewResources) {
        viewStrategy.makeRelativeTo(context.viewResources.viewUrl);
      }

      return m.load(childContainer, viewModelResource.value, null, viewStrategy, true);
    }).then(function (viewFactory) {
      return m.create(childContainer, BehaviorInstruction.dynamic(context.host, viewModel, viewFactory));
    });
  };

  CompositionEngine.prototype.ensureViewModel = function ensureViewModel(context) {
    var childContainer = context.childContainer = context.childContainer || context.container.createChild();

    if (typeof context.viewModel === 'string') {
      context.viewModel = context.viewResources ? context.viewResources.relativeToView(context.viewModel) : context.viewModel;

      return this.viewEngine.importViewModelResource(context.viewModel).then(function (viewModelResource) {
        childContainer.autoRegister(viewModelResource.value);

        if (context.host) {
          childContainer.registerInstance(_aureliaPal.DOM.Element, context.host);
        }

        context.viewModel = childContainer.viewModel = childContainer.get(viewModelResource.value);
        context.viewModelResource = viewModelResource;
        return context;
      });
    }

    var ctor = context.viewModel.constructor;
    var isClass = typeof context.viewModel === 'function';
    if (isClass) {
      ctor = context.viewModel;
      childContainer.autoRegister(ctor);
    }
    var m = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, ctor);

    m.elementName = m.elementName || 'dynamic-element';

    m.initialize(isClass ? childContainer : context.container || childContainer, ctor);

    context.viewModelResource = { metadata: m, value: ctor };

    if (context.host) {
      childContainer.registerInstance(_aureliaPal.DOM.Element, context.host);
    }
    childContainer.viewModel = context.viewModel = isClass ? childContainer.get(ctor) : context.viewModel;
    return Promise.resolve(context);
  };

  CompositionEngine.prototype.compose = function compose(context) {
    var _this17 = this;

    context.childContainer = context.childContainer || context.container.createChild();
    context.view = this.viewLocator.getViewStrategy(context.view);

    var transaction = context.childContainer.get(CompositionTransaction);
    var compositionTransactionOwnershipToken = transaction.tryCapture();

    if (compositionTransactionOwnershipToken) {
      context.compositionTransactionOwnershipToken = compositionTransactionOwnershipToken;
    } else {
      context.compositionTransactionNotifier = transaction.enlist();
    }

    if (context.viewModel) {
      return this._createControllerAndSwap(context);
    } else if (context.view) {
      if (context.viewResources) {
        context.view.makeRelativeTo(context.viewResources.viewUrl);
      }

      return context.view.loadViewFactory(this.viewEngine, new ViewCompileInstruction()).then(function (viewFactory) {
        var result = viewFactory.create(context.childContainer);
        result.bind(context.bindingContext, context.overrideContext);

        if (context.compositionTransactionOwnershipToken) {
          return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function () {
            return _this17._swap(context, result);
          }).then(function () {
            return result;
          });
        }

        return _this17._swap(context, result).then(function () {
          return result;
        });
      });
    } else if (context.viewSlot) {
      context.viewSlot.removeAll();

      if (context.compositionTransactionNotifier) {
        context.compositionTransactionNotifier.done();
      }

      return Promise.resolve(null);
    }

    return Promise.resolve(null);
  };

  return CompositionEngine;
}()) || _class16);

var ElementConfigResource = exports.ElementConfigResource = function () {
  function ElementConfigResource() {
    
  }

  ElementConfigResource.prototype.initialize = function initialize(container, target) {};

  ElementConfigResource.prototype.register = function register(registry, name) {};

  ElementConfigResource.prototype.load = function load(container, target) {
    var config = new target();
    var eventManager = container.get(_aureliaBinding.EventManager);
    eventManager.registerElementConfig(config);
  };

  return ElementConfigResource;
}();

function resource(instanceOrConfig) {
  return function (target) {
    var isConfig = typeof instanceOrConfig === 'string' || Object.getPrototypeOf(instanceOrConfig) === Object.prototype;
    if (isConfig) {
      target.$resource = instanceOrConfig;
    } else {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, instanceOrConfig, target);
    }
  };
}

function behavior(override) {
  return function (target) {
    if (override instanceof HtmlBehaviorResource) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, override, target);
    } else {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
      Object.assign(r, override);
    }
  };
}

function customElement(name) {
  return function (target) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
    r.elementName = validateBehaviorName(name, 'custom element');
  };
}

function customAttribute(name, defaultBindingMode, aliases) {
  return function (target) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
    r.attributeName = validateBehaviorName(name, 'custom attribute');
    r.attributeDefaultBindingMode = defaultBindingMode;
    r.aliases = aliases;
  };
}

function templateController(target) {
  var deco = function deco(t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.liftsContent = true;
  };

  return target ? deco(target) : deco;
}

function bindable(nameOrConfigOrTarget, key, descriptor) {
  var deco = function deco(target, key2, descriptor2) {
    var actualTarget = key2 ? target.constructor : target;
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);
    var prop = void 0;

    if (key2) {
      nameOrConfigOrTarget = nameOrConfigOrTarget || {};
      nameOrConfigOrTarget.name = key2;
    }

    prop = new BindableProperty(nameOrConfigOrTarget);
    return prop.registerWith(actualTarget, r, descriptor2);
  };

  if (!nameOrConfigOrTarget) {
    return deco;
  }

  if (key) {
    var _target = nameOrConfigOrTarget;
    nameOrConfigOrTarget = null;
    return deco(_target, key, descriptor);
  }

  return deco;
}

function dynamicOptions(target) {
  var deco = function deco(t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.hasDynamicOptions = true;
  };

  return target ? deco(target) : deco;
}

var defaultShadowDOMOptions = { mode: 'open' };
function useShadowDOM(targetOrOptions) {
  var options = typeof targetOrOptions === 'function' || !targetOrOptions ? defaultShadowDOMOptions : targetOrOptions;

  var deco = function deco(t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.targetShadowDOM = true;
    r.shadowDOMOptions = options;
  };

  return typeof targetOrOptions === 'function' ? deco(targetOrOptions) : deco;
}

function processAttributes(processor) {
  return function (t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.processAttributes = function (compiler, resources, node, attributes, elementInstruction) {
      try {
        processor(compiler, resources, node, attributes, elementInstruction);
      } catch (error) {
        LogManager.getLogger('templating').error(error);
      }
    };
  };
}

function doNotProcessContent() {
  return false;
}

function processContent(processor) {
  return function (t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.processContent = processor ? function (compiler, resources, node, instruction) {
      try {
        return processor(compiler, resources, node, instruction);
      } catch (error) {
        LogManager.getLogger('templating').error(error);
        return false;
      }
    } : doNotProcessContent;
  };
}

function containerless(target) {
  var deco = function deco(t) {
    var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
    r.containerless = true;
  };

  return target ? deco(target) : deco;
}

function useViewStrategy(strategy) {
  return function (target) {
    _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, strategy, target);
  };
}

function useView(path) {
  return useViewStrategy(new RelativeViewStrategy(path));
}

function inlineView(markup, dependencies, dependencyBaseUrl) {
  return useViewStrategy(new InlineViewStrategy(markup, dependencies, dependencyBaseUrl));
}

function noView(targetOrDependencies, dependencyBaseUrl) {
  var target = void 0;
  var dependencies = void 0;
  if (typeof targetOrDependencies === 'function') {
    target = targetOrDependencies;
  } else {
    dependencies = targetOrDependencies;
    target = undefined;
  }

  var deco = function deco(t) {
    _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, new NoViewStrategy(dependencies, dependencyBaseUrl), t);
  };

  return target ? deco(target) : deco;
}

function view(templateOrConfig) {
  return function (target) {
    target.$view = templateOrConfig;
  };
}

function elementConfig(target) {
  var deco = function deco(t) {
    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ElementConfigResource(), t);
  };

  return target ? deco(target) : deco;
}

function viewResources() {
  for (var _len = arguments.length, resources = Array(_len), _key7 = 0; _key7 < _len; _key7++) {
    resources[_key7] = arguments[_key7];
  }

  return function (target) {
    _aureliaMetadata.metadata.define(ViewEngine.viewModelRequireMetadataKey, resources, target);
  };
}

var TemplatingEngine = exports.TemplatingEngine = (_dec9 = (0, _aureliaDependencyInjection.inject)(_aureliaDependencyInjection.Container, ModuleAnalyzer, ViewCompiler, CompositionEngine), _dec9(_class17 = function () {
  function TemplatingEngine(container, moduleAnalyzer, viewCompiler, compositionEngine) {
    

    this._container = container;
    this._moduleAnalyzer = moduleAnalyzer;
    this._viewCompiler = viewCompiler;
    this._compositionEngine = compositionEngine;
    container.registerInstance(Animator, Animator.instance = new Animator());
  }

  TemplatingEngine.prototype.configureAnimator = function configureAnimator(animator) {
    this._container.unregister(Animator);
    this._container.registerInstance(Animator, Animator.instance = animator);
  };

  TemplatingEngine.prototype.compose = function compose(context) {
    return this._compositionEngine.compose(context);
  };

  TemplatingEngine.prototype.enhance = function enhance(instruction) {
    if (instruction instanceof _aureliaPal.DOM.Element) {
      instruction = { element: instruction };
    }

    var compilerInstructions = { letExpressions: [] };
    var resources = instruction.resources || this._container.get(ViewResources);

    this._viewCompiler._compileNode(instruction.element, resources, compilerInstructions, instruction.element.parentNode, 'root', true);

    var factory = new ViewFactory(instruction.element, compilerInstructions, resources);
    var container = instruction.container || this._container.createChild();
    var view = factory.create(container, BehaviorInstruction.enhance());

    view.bind(instruction.bindingContext || {}, instruction.overrideContext);

    view.firstChild = view.lastChild = view.fragment;
    view.fragment = _aureliaPal.DOM.createDocumentFragment();
    view.attached();

    return view;
  };

  return TemplatingEngine;
}()) || _class17);
});
;
define('aurelia-testing/dist/commonjs/aurelia-testing',['require','exports','module','./compile-spy','./view-spy','./component-tester','./wait'],function (require, exports, module) {"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./compile-spy"));
__export(require("./view-spy"));
__export(require("./component-tester"));
__export(require("./wait"));
function configure(config) {
    config.globalResources([
        './compile-spy',
        './view-spy'
    ]);
}
exports.configure = configure;

});
;
define('aurelia-testing/dist/commonjs/compile-spy',['require','exports','module','aurelia-templating','aurelia-dependency-injection','aurelia-logging','aurelia-pal'],function (require, exports, module) {"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_templating_1 = require("aurelia-templating");
var aurelia_dependency_injection_1 = require("aurelia-dependency-injection");
var aurelia_logging_1 = require("aurelia-logging");
var aurelia_pal_1 = require("aurelia-pal");
/**
 * Attribute to be placed on any element to have it emit the View Compiler's
 * TargetInstruction into the debug console, giving you insight into all the
 * parsed bindings, behaviors and event handers for the targeted element.
 */
var CompileSpy = /** @class */ (function () {
    /**
     * Creates and instanse of CompileSpy.
     * @param element target element on where attribute is placed on.
     * @param instruction instructions for how the target element should be enhanced.
     */
    function CompileSpy(element, instruction) {
        aurelia_logging_1.getLogger('compile-spy').info(element.toString(), instruction);
    }
    CompileSpy = __decorate([
        aurelia_templating_1.customAttribute('compile-spy'),
        aurelia_dependency_injection_1.inject(aurelia_pal_1.DOM.Element, aurelia_templating_1.TargetInstruction)
    ], CompileSpy);
    return CompileSpy;
}());
exports.CompileSpy = CompileSpy;

});
;
define('aurelia-testing/dist/commonjs/component-tester',['require','exports','module','aurelia-templating','./wait'],function (require, exports, module) {"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_templating_1 = require("aurelia-templating");
var wait_1 = require("./wait");
var StageComponent = /** @class */ (function () {
    function StageComponent() {
    }
    StageComponent.withResources = function (resources) {
        if (resources === void 0) { resources = []; }
        return new ComponentTester().withResources(resources);
    };
    return StageComponent;
}());
exports.StageComponent = StageComponent;
var ComponentTester = /** @class */ (function () {
    function ComponentTester() {
        this.resources = [];
    }
    ComponentTester.prototype.configure = function (aurelia) {
        return aurelia.use.standardConfiguration();
    };
    ComponentTester.prototype.bootstrap = function (configure) {
        this.configure = configure;
    };
    ComponentTester.prototype.withResources = function (resources) {
        this.resources = resources;
        return this;
    };
    ComponentTester.prototype.inView = function (html) {
        this.html = html;
        return this;
    };
    ComponentTester.prototype.boundTo = function (bindingContext) {
        this.bindingContext = bindingContext;
        return this;
    };
    ComponentTester.prototype.manuallyHandleLifecycle = function () {
        this._prepareLifecycle();
        return this;
    };
    ComponentTester.prototype.create = function (bootstrap) {
        var _this = this;
        return bootstrap(function (aurelia) {
            return Promise.resolve(_this.configure(aurelia)).then(function () {
                if (_this.resources) {
                    aurelia.use.globalResources(_this.resources);
                }
                return aurelia.start().then(function () {
                    _this.host = document.createElement('div');
                    _this.host.innerHTML = _this.html;
                    document.body.appendChild(_this.host);
                    return aurelia.enhance(_this.bindingContext, _this.host).then(function () {
                        _this.rootView = aurelia.root;
                        _this.element = _this.host.firstElementChild;
                        if (aurelia.root.controllers.length) {
                            _this.viewModel = aurelia.root.controllers[0].viewModel;
                        }
                        return new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 0); });
                    });
                });
            });
        });
    };
    ComponentTester.prototype.dispose = function () {
        if (this.host === undefined || this.rootView === undefined) {
            throw new Error('Cannot call ComponentTester.dispose() before ComponentTester.create()');
        }
        this.rootView.detached();
        this.rootView.unbind();
        return this.host.parentNode.removeChild(this.host);
    };
    ComponentTester.prototype._prepareLifecycle = function () {
        var _this = this;
        // bind
        var bindPrototype = aurelia_templating_1.View.prototype.bind;
        // tslint:disable-next-line:no-empty
        aurelia_templating_1.View.prototype.bind = function () { };
        this.bind = function (bindingContext) { return new Promise(function (resolve) {
            aurelia_templating_1.View.prototype.bind = bindPrototype;
            if (bindingContext !== undefined) {
                _this.bindingContext = bindingContext;
            }
            _this.rootView.bind(_this.bindingContext);
            setTimeout(function () { return resolve(); }, 0);
        }); };
        // attached
        var attachedPrototype = aurelia_templating_1.View.prototype.attached;
        // tslint:disable-next-line:no-empty
        aurelia_templating_1.View.prototype.attached = function () { };
        this.attached = function () { return new Promise(function (resolve) {
            aurelia_templating_1.View.prototype.attached = attachedPrototype;
            _this.rootView.attached();
            setTimeout(function () { return resolve(); }, 0);
        }); };
        // detached
        this.detached = function () { return new Promise(function (resolve) {
            _this.rootView.detached();
            setTimeout(function () { return resolve(); }, 0);
        }); };
        // unbind
        this.unbind = function () { return new Promise(function (resolve) {
            _this.rootView.unbind();
            setTimeout(function () { return resolve(); }, 0);
        }); };
    };
    ComponentTester.prototype.waitForElement = function (selector, options) {
        var _this = this;
        return wait_1.waitFor(function () { return _this.element.querySelector(selector); }, options);
    };
    ComponentTester.prototype.waitForElements = function (selector, options) {
        var _this = this;
        return wait_1.waitFor(function () { return _this.element.querySelectorAll(selector); }, options);
    };
    return ComponentTester;
}());
exports.ComponentTester = ComponentTester;

});
;
define('aurelia-testing/dist/commonjs/view-spy',['require','exports','module','aurelia-templating','aurelia-logging'],function (require, exports, module) {"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var aurelia_templating_1 = require("aurelia-templating");
var aurelia_logging_1 = require("aurelia-logging");
/**
 * Attribute to be placed on any HTML element in a view to emit the View instance
 * to the debug console, giving you insight into the live View instance, including
 * all child views, live bindings, behaviors and more.
 */
var ViewSpy = /** @class */ (function () {
    /**
     * Creates a new instance of ViewSpy.
     */
    function ViewSpy() {
        this.logger = aurelia_logging_1.getLogger('view-spy');
    }
    ViewSpy.prototype._log = function (lifecycleName, context) {
        if (!this.value && lifecycleName === 'created') {
            this.logger.info(lifecycleName, this.view);
        }
        else if (this.value && this.value.indexOf(lifecycleName) !== -1) {
            this.logger.info(lifecycleName, this.view, context);
        }
    };
    /**
     * Invoked when the target view is created.
     * @param view The target view.
     */
    ViewSpy.prototype.created = function (view) {
        this.view = view;
        this._log('created');
    };
    /**
     * Invoked when the target view is bound.
     * @param bindingContext The target view's binding context.
     */
    ViewSpy.prototype.bind = function (bindingContext) {
        this._log('bind', bindingContext);
    };
    /**
     * Invoked when the target element is attached to the DOM.
     */
    ViewSpy.prototype.attached = function () {
        this._log('attached');
    };
    /**
     * Invoked when the target element is detached from the DOM.
     */
    ViewSpy.prototype.detached = function () {
        this._log('detached');
    };
    /**
     * Invoked when the target element is unbound.
     */
    ViewSpy.prototype.unbind = function () {
        this._log('unbind');
    };
    ViewSpy = __decorate([
        aurelia_templating_1.customAttribute('view-spy')
    ], ViewSpy);
    return ViewSpy;
}());
exports.ViewSpy = ViewSpy;

});
;
define('aurelia-testing/dist/commonjs/wait',['require','exports','module'],function (require, exports, module) {"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generic function to wait for something to happen. Uses polling
 * @param getter: a getter function that returns anything else than `null` or an
 *                empty array or an empty jQuery object when the
 *                condition is met
 * @param options: lookup options, defaults to
 *                 `{present: true, interval: 50, timeout: 5000}`
 */
function waitFor(getter, options) {
    if (options === void 0) { options = { present: true, interval: 50, timeout: 5000 }; }
    // prevents infinite recursion if the request times out
    var timedOut = false;
    options = __assign({ present: true, interval: 50, timeout: 5000 }, options);
    function wait() {
        var element = getter();
        // boolean is needed here, hence the length > 0
        var found = element !== null && (!(element instanceof NodeList) &&
            !element.jquery || element.length > 0);
        if (!options.present === !found || timedOut) {
            return Promise.resolve(element);
        }
        return new Promise(function (rs) { return setTimeout(rs, options.interval); }).then(wait);
    }
    return Promise.race([
        new Promise(function (_, rj) { return setTimeout(function () {
            timedOut = true;
            rj(new Error(options.present ? 'Element not found' : 'Element not removed'));
        }, options.timeout); }),
        wait()
    ]);
}
exports.waitFor = waitFor;
function waitForDocumentElement(selector, options) {
    return waitFor(function () { return document.querySelector(selector); }, options);
}
exports.waitForDocumentElement = waitForDocumentElement;
function waitForDocumentElements(selector, options) {
    return waitFor(function () { return document.querySelectorAll(selector); }, options);
}
exports.waitForDocumentElements = waitForDocumentElements;

});
;
/**
 * @license text 2.0.16 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/text/LICENSE
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text/text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    function useDefault(value, defaultValue) {
        return value === undefined || value === '' ? defaultValue : value;
    }

    //Allow for default ports for http and https.
    function isSamePort(protocol1, port1, protocol2, port2) {
        if (port1 === port2) {
            return true;
        } else if (protocol1 === protocol2) {
            if (protocol1 === 'http') {
                return useDefault(port1, '80') === useDefault(port2, '80');
            } else if (protocol1 === 'https') {
                return useDefault(port1, '443') === useDefault(port2, '443');
            }
        }
        return false;
    }

    text = {
        version: '2.0.16',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || isSamePort(uProtocol, uPort, protocol, port));
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});
;
define('@syncfusion/ej2-base',['@syncfusion/ej2-base/index'],function(m){return m;});
define('@syncfusion/ej2-buttons',['@syncfusion/ej2-buttons/index'],function(m){return m;});
define('@syncfusion/ej2-data',['@syncfusion/ej2-data/index'],function(m){return m;});
define('@syncfusion/ej2-dropdowns',['@syncfusion/ej2-dropdowns/index'],function(m){return m;});
define('@syncfusion/ej2-inputs',['@syncfusion/ej2-inputs/index'],function(m){return m;});
define('@syncfusion/ej2-lists',['@syncfusion/ej2-lists/index'],function(m){return m;});
define('@syncfusion/ej2-lists/src/sortable',['@syncfusion/ej2-lists/src/sortable/index'],function(m){return m;});
define('@syncfusion/ej2-navigations',['@syncfusion/ej2-navigations/index'],function(m){return m;});
define('@syncfusion/ej2-popups',['@syncfusion/ej2-popups/index'],function(m){return m;});
define('@syncfusion/ej2-splitbuttons',['@syncfusion/ej2-splitbuttons/index'],function(m){return m;});
define('aurelia-binding',['aurelia-binding/dist/commonjs/aurelia-binding'],function(m){return m;});
define('aurelia-bootstrapper',['aurelia-bootstrapper/dist/commonjs/aurelia-bootstrapper'],function(m){return m;});
define('aurelia-dependency-injection',['aurelia-dependency-injection/dist/commonjs/aurelia-dependency-injection'],function(m){return m;});
define('aurelia-event-aggregator',['aurelia-event-aggregator/dist/commonjs/aurelia-event-aggregator'],function(m){return m;});
define('aurelia-framework',['aurelia-framework/dist/commonjs/aurelia-framework'],function(m){return m;});
define('aurelia-history',['aurelia-history/dist/commonjs/aurelia-history'],function(m){return m;});
define('aurelia-history-browser',['aurelia-history-browser/dist/commonjs/aurelia-history-browser'],function(m){return m;});
define('aurelia-loader',['aurelia-loader/dist/commonjs/aurelia-loader'],function(m){return m;});
define('aurelia-loader-default',['aurelia-loader-default/dist/commonjs/aurelia-loader-default'],function(m){return m;});
define('aurelia-logging',['aurelia-logging/dist/commonjs/aurelia-logging'],function(m){return m;});
define('aurelia-logging-console',['aurelia-logging-console/dist/commonjs/aurelia-logging-console'],function(m){return m;});
define('aurelia-metadata',['aurelia-metadata/dist/commonjs/aurelia-metadata'],function(m){return m;});
define('aurelia-pal',['aurelia-pal/dist/commonjs/aurelia-pal'],function(m){return m;});
define('aurelia-pal-browser',['aurelia-pal-browser/dist/commonjs/aurelia-pal-browser'],function(m){return m;});
define('aurelia-path',['aurelia-path/dist/commonjs/aurelia-path'],function(m){return m;});
define('aurelia-polyfills',['aurelia-polyfills/dist/commonjs/aurelia-polyfills'],function(m){return m;});
define('aurelia-route-recognizer',['aurelia-route-recognizer/dist/commonjs/aurelia-route-recognizer'],function(m){return m;});
define('aurelia-router',['aurelia-router/dist/commonjs/aurelia-router'],function(m){return m;});
define('aurelia-task-queue',['aurelia-task-queue/dist/commonjs/aurelia-task-queue'],function(m){return m;});
define('aurelia-templating',['aurelia-templating/dist/commonjs/aurelia-templating'],function(m){return m;});
define('aurelia-templating-binding',['aurelia-templating-binding/dist/commonjs/aurelia-templating-binding'],function(m){return m;});
define('aurelia-templating-resources',['aurelia-templating-resources/dist/commonjs/aurelia-templating-resources'],function(m){return m;});
define('aurelia-templating-router',['aurelia-templating-router/dist/commonjs/aurelia-templating-router'],function(m){return m;});
define('aurelia-testing',['aurelia-testing/dist/commonjs/aurelia-testing'],function(m){return m;});
define('aurelia-testing/aurelia-testing',['aurelia-testing/dist/commonjs/aurelia-testing'],function(m){return m;});
define('aurelia-testing/compile-spy',['aurelia-testing/dist/commonjs/compile-spy'],function(m){return m;});
define('aurelia-testing/component-tester',['aurelia-testing/dist/commonjs/component-tester'],function(m){return m;});
define('aurelia-testing/view-spy',['aurelia-testing/dist/commonjs/view-spy'],function(m){return m;});
define('aurelia-testing/wait',['aurelia-testing/dist/commonjs/wait'],function(m){return m;});
define('elements/base/ej-component-model',['__dot_dot__/src/elements/base/ej-component-model'],function(m){return m;});
define('elements/base/index',['__dot_dot__/src/elements/base/index'],function(m){return m;});
define('elements/buttons/button/ej-button',['__dot_dot__/src/elements/buttons/button/ej-button'],function(m){return m;});
define('elements/buttons/button/ej-button-model',['__dot_dot__/src/elements/buttons/button/ej-button-model'],function(m){return m;});
define('elements/buttons/button/index',['__dot_dot__/src/elements/buttons/button/index'],function(m){return m;});
define('elements/buttons/check-box/ej-check-box-model',['__dot_dot__/src/elements/buttons/check-box/ej-check-box-model'],function(m){return m;});
define('elements/buttons/check-box/ej-checkbox',['__dot_dot__/src/elements/buttons/check-box/ej-checkbox'],function(m){return m;});
define('elements/buttons/check-box/index',['__dot_dot__/src/elements/buttons/check-box/index'],function(m){return m;});
define('elements/buttons/chips/ej-chip-list-model',['__dot_dot__/src/elements/buttons/chips/ej-chip-list-model'],function(m){return m;});
define('elements/buttons/chips/ej-chip-model',['__dot_dot__/src/elements/buttons/chips/ej-chip-model'],function(m){return m;});
define('elements/buttons/chips/index',['__dot_dot__/src/elements/buttons/chips/index'],function(m){return m;});
define('elements/buttons/index',['__dot_dot__/src/elements/buttons/index'],function(m){return m;});
define('elements/buttons/radio-button/ej-radio-button',['__dot_dot__/src/elements/buttons/radio-button/ej-radio-button'],function(m){return m;});
define('elements/buttons/radio-button/ej-radio-button-model',['__dot_dot__/src/elements/buttons/radio-button/ej-radio-button-model'],function(m){return m;});
define('elements/buttons/radio-button/index',['__dot_dot__/src/elements/buttons/radio-button/index'],function(m){return m;});
define('elements/buttons/switch/ej-switch-model',['__dot_dot__/src/elements/buttons/switch/ej-switch-model'],function(m){return m;});
define('elements/buttons/switch/index',['__dot_dot__/src/elements/buttons/switch/index'],function(m){return m;});
define('elements/dropdowns/auto-complete/ej-auto-complete',['__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete'],function(m){return m;});
define('elements/dropdowns/auto-complete/ej-auto-complete-model',['__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete-model'],function(m){return m;});
define('elements/dropdowns/auto-complete/index',['__dot_dot__/src/elements/dropdowns/auto-complete/index'],function(m){return m;});
define('elements/dropdowns/combo-box/ej-combo-box-model',['__dot_dot__/src/elements/dropdowns/combo-box/ej-combo-box-model'],function(m){return m;});
define('elements/dropdowns/combo-box/index',['__dot_dot__/src/elements/dropdowns/combo-box/index'],function(m){return m;});
define('elements/dropdowns/drop-down-base/ej-drop-down-base-model',['__dot_dot__/src/elements/dropdowns/drop-down-base/ej-drop-down-base-model'],function(m){return m;});
define('elements/dropdowns/drop-down-base/index',['__dot_dot__/src/elements/dropdowns/drop-down-base/index'],function(m){return m;});
define('elements/dropdowns/drop-down-list/ej-drop-down-list',['__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list'],function(m){return m;});
define('elements/dropdowns/drop-down-list/ej-drop-down-list-model',['__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list-model'],function(m){return m;});
define('text!elements/dropdowns/drop-down-list/ej-drop-down-list.html',['text!__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list.html'],function(m){return m;});
define('elements/dropdowns/drop-down-list/index',['__dot_dot__/src/elements/dropdowns/drop-down-list/index'],function(m){return m;});
define('elements/dropdowns/index',['__dot_dot__/src/elements/dropdowns/index'],function(m){return m;});
define('elements/dropdowns/list-box/ej-list-box-model',['__dot_dot__/src/elements/dropdowns/list-box/ej-list-box-model'],function(m){return m;});
define('elements/dropdowns/list-box/index',['__dot_dot__/src/elements/dropdowns/list-box/index'],function(m){return m;});
define('elements/dropdowns/multi-select/ej-multi-select-model',['__dot_dot__/src/elements/dropdowns/multi-select/ej-multi-select-model'],function(m){return m;});
define('elements/dropdowns/multi-select/index',['__dot_dot__/src/elements/dropdowns/multi-select/index'],function(m){return m;});
define('elements/index',['__dot_dot__/src/elements/index'],function(m){return m;});
define('elements/inputs/index',['__dot_dot__/src/elements/inputs/index'],function(m){return m;});
define('elements/inputs/input/index',['__dot_dot__/src/elements/inputs/input/index'],function(m){return m;});
define('elements/inputs/input/input-base',['__dot_dot__/src/elements/inputs/input/input-base'],function(m){return m;});
define('resources',['resources/index'],function(m){return m;});
define('resources/elements/base/ej-component-model',['__dot_dot__/src/elements/base/ej-component-model'],function(m){return m;});
define('resources/elements/base/index',['__dot_dot__/src/elements/base/index'],function(m){return m;});
define('resources/elements/buttons/button/ej-button',['__dot_dot__/src/elements/buttons/button/ej-button'],function(m){return m;});
define('resources/elements/buttons/button/ej-button-model',['__dot_dot__/src/elements/buttons/button/ej-button-model'],function(m){return m;});
define('resources/elements/buttons/button/index',['__dot_dot__/src/elements/buttons/button/index'],function(m){return m;});
define('resources/elements/buttons/check-box/ej-check-box-model',['__dot_dot__/src/elements/buttons/check-box/ej-check-box-model'],function(m){return m;});
define('resources/elements/buttons/check-box/ej-checkbox',['__dot_dot__/src/elements/buttons/check-box/ej-checkbox'],function(m){return m;});
define('resources/elements/buttons/check-box/index',['__dot_dot__/src/elements/buttons/check-box/index'],function(m){return m;});
define('resources/elements/buttons/chips/ej-chip-list-model',['__dot_dot__/src/elements/buttons/chips/ej-chip-list-model'],function(m){return m;});
define('resources/elements/buttons/chips/ej-chip-model',['__dot_dot__/src/elements/buttons/chips/ej-chip-model'],function(m){return m;});
define('resources/elements/buttons/chips/index',['__dot_dot__/src/elements/buttons/chips/index'],function(m){return m;});
define('resources/elements/buttons/index',['__dot_dot__/src/elements/buttons/index'],function(m){return m;});
define('resources/elements/buttons/radio-button/ej-radio-button',['__dot_dot__/src/elements/buttons/radio-button/ej-radio-button'],function(m){return m;});
define('resources/elements/buttons/radio-button/ej-radio-button-model',['__dot_dot__/src/elements/buttons/radio-button/ej-radio-button-model'],function(m){return m;});
define('resources/elements/buttons/radio-button/index',['__dot_dot__/src/elements/buttons/radio-button/index'],function(m){return m;});
define('resources/elements/buttons/switch/ej-switch-model',['__dot_dot__/src/elements/buttons/switch/ej-switch-model'],function(m){return m;});
define('resources/elements/buttons/switch/index',['__dot_dot__/src/elements/buttons/switch/index'],function(m){return m;});
define('resources/elements/dropdowns/auto-complete/ej-auto-complete',['__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete'],function(m){return m;});
define('resources/elements/dropdowns/auto-complete/ej-auto-complete-model',['__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete-model'],function(m){return m;});
define('resources/elements/dropdowns/auto-complete/index',['__dot_dot__/src/elements/dropdowns/auto-complete/index'],function(m){return m;});
define('resources/elements/dropdowns/combo-box/ej-combo-box-model',['__dot_dot__/src/elements/dropdowns/combo-box/ej-combo-box-model'],function(m){return m;});
define('resources/elements/dropdowns/combo-box/index',['__dot_dot__/src/elements/dropdowns/combo-box/index'],function(m){return m;});
define('resources/elements/dropdowns/drop-down-base/ej-drop-down-base-model',['__dot_dot__/src/elements/dropdowns/drop-down-base/ej-drop-down-base-model'],function(m){return m;});
define('resources/elements/dropdowns/drop-down-base/index',['__dot_dot__/src/elements/dropdowns/drop-down-base/index'],function(m){return m;});
define('resources/elements/dropdowns/drop-down-list/ej-drop-down-list',['__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list'],function(m){return m;});
define('resources/elements/dropdowns/drop-down-list/ej-drop-down-list-model',['__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list-model'],function(m){return m;});
define('text!resources/elements/dropdowns/drop-down-list/ej-drop-down-list.html',['text!__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list.html'],function(m){return m;});
define('resources/elements/dropdowns/drop-down-list/index',['__dot_dot__/src/elements/dropdowns/drop-down-list/index'],function(m){return m;});
define('resources/elements/dropdowns/index',['__dot_dot__/src/elements/dropdowns/index'],function(m){return m;});
define('resources/elements/dropdowns/list-box/ej-list-box-model',['__dot_dot__/src/elements/dropdowns/list-box/ej-list-box-model'],function(m){return m;});
define('resources/elements/dropdowns/list-box/index',['__dot_dot__/src/elements/dropdowns/list-box/index'],function(m){return m;});
define('resources/elements/dropdowns/multi-select/ej-multi-select-model',['__dot_dot__/src/elements/dropdowns/multi-select/ej-multi-select-model'],function(m){return m;});
define('resources/elements/dropdowns/multi-select/index',['__dot_dot__/src/elements/dropdowns/multi-select/index'],function(m){return m;});
define('resources/elements/index',['__dot_dot__/src/elements/index'],function(m){return m;});
define('resources/elements/inputs/index',['__dot_dot__/src/elements/inputs/index'],function(m){return m;});
define('resources/elements/inputs/input/index',['__dot_dot__/src/elements/inputs/input/index'],function(m){return m;});
define('resources/elements/inputs/input/input-base',['__dot_dot__/src/elements/inputs/input/input-base'],function(m){return m;});
define('resources/index',['__dot_dot__/src/index'],function(m){return m;});
define('text',['text/text'],function(m){return m;});;
function _aureliaConfigureModuleLoader(){requirejs.config({
  "baseUrl": "dev-app",
  "paths": {
    "root": "dev-app",
    "resources": "../src",
    "elements": "../src/elements",
    "attributes": "../src/attributes",
    "valueConverters": "../src/value-converters",
    "bindingBehaviors": "../src/binding-behaviors",
    "app-bundle": "../scripts/app-bundle"
  },
  "packages": [],
  "stubModules": [],
  "shim": {},
  "bundles": {
    "app-bundle": [
      "__dot_dot__/src/elements/base/ej-component-model",
      "__dot_dot__/src/elements/base/index",
      "__dot_dot__/src/elements/buttons/button/ej-button",
      "__dot_dot__/src/elements/buttons/button/ej-button-model",
      "__dot_dot__/src/elements/buttons/button/index",
      "__dot_dot__/src/elements/buttons/check-box/ej-check-box-model",
      "__dot_dot__/src/elements/buttons/check-box/ej-checkbox",
      "__dot_dot__/src/elements/buttons/check-box/index",
      "__dot_dot__/src/elements/buttons/chips/ej-chip-list-model",
      "__dot_dot__/src/elements/buttons/chips/ej-chip-model",
      "__dot_dot__/src/elements/buttons/chips/index",
      "__dot_dot__/src/elements/buttons/index",
      "__dot_dot__/src/elements/buttons/radio-button/ej-radio-button",
      "__dot_dot__/src/elements/buttons/radio-button/ej-radio-button-model",
      "__dot_dot__/src/elements/buttons/radio-button/index",
      "__dot_dot__/src/elements/buttons/switch/ej-switch-model",
      "__dot_dot__/src/elements/buttons/switch/index",
      "__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete",
      "__dot_dot__/src/elements/dropdowns/auto-complete/ej-auto-complete-model",
      "__dot_dot__/src/elements/dropdowns/auto-complete/index",
      "__dot_dot__/src/elements/dropdowns/combo-box/ej-combo-box-model",
      "__dot_dot__/src/elements/dropdowns/combo-box/index",
      "__dot_dot__/src/elements/dropdowns/drop-down-base/ej-drop-down-base-model",
      "__dot_dot__/src/elements/dropdowns/drop-down-base/index",
      "__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list",
      "__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list-model",
      "text!__dot_dot__/src/elements/dropdowns/drop-down-list/ej-drop-down-list.html",
      "__dot_dot__/src/elements/dropdowns/drop-down-list/index",
      "__dot_dot__/src/elements/dropdowns/index",
      "__dot_dot__/src/elements/dropdowns/list-box/ej-list-box-model",
      "__dot_dot__/src/elements/dropdowns/list-box/index",
      "__dot_dot__/src/elements/dropdowns/multi-select/ej-multi-select-model",
      "__dot_dot__/src/elements/dropdowns/multi-select/index",
      "__dot_dot__/src/elements/index",
      "__dot_dot__/src/elements/inputs/index",
      "__dot_dot__/src/elements/inputs/input/index",
      "__dot_dot__/src/elements/inputs/input/input-base",
      "__dot_dot__/src/index",
      "app",
      "text!app.html",
      "components/button/button-getting-started",
      "text!components/button/button-getting-started.html",
      "components/button/button-types-and-styles",
      "text!components/button/button-types-and-styles.html",
      "components/dropdowns/auto-complete/default",
      "text!components/dropdowns/auto-complete/default.html",
      "components/dropdowns/combobox/default",
      "text!components/dropdowns/combobox/default.html",
      "components/editors/buttons/default",
      "text!components/editors/buttons/default.html",
      "text!dataSource.json",
      "dataSource.json",
      "json!dataSource.json",
      "environment",
      "getting-started",
      "text!getting-started.html",
      "json-stringify-value-converter",
      "main"
    ]
  }
})}
//# sourceMappingURL=vendor-bundle.js.map